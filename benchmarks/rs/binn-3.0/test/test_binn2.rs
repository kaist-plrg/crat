use ::libc;
extern "C" {
    fn printf(_: *const libc::c_char, _: ...) -> libc::c_int;
    fn sprintf(_: *mut libc::c_char, _: *const libc::c_char, _: ...) -> libc::c_int;
    fn snprintf(
        _: *mut libc::c_char,
        _: libc::c_ulong,
        _: *const libc::c_char,
        _: ...
    ) -> libc::c_int;
    fn puts(__s: *const libc::c_char) -> libc::c_int;
    fn atof(__nptr: *const libc::c_char) -> libc::c_double;
    fn atoi(__nptr: *const libc::c_char) -> libc::c_int;
    fn free(__ptr: *mut libc::c_void);
    fn memmove(
        _: *mut libc::c_void,
        _: *const libc::c_void,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    fn memcmp(
        _: *const libc::c_void,
        _: *const libc::c_void,
        _: libc::c_ulong,
    ) -> libc::c_int;
    fn strcpy(_: *mut libc::c_char, _: *const libc::c_char) -> *mut libc::c_char;
    fn strcat(_: *mut libc::c_char, _: *const libc::c_char) -> *mut libc::c_char;
    fn strcmp(_: *const libc::c_char, _: *const libc::c_char) -> libc::c_int;
    fn strdup(_: *const libc::c_char) -> *mut libc::c_char;
    fn strchr(_: *const libc::c_char, _: libc::c_int) -> *mut libc::c_char;
    fn strlen(_: *const libc::c_char) -> libc::c_ulong;
    fn __assert_fail(
        __assertion: *const libc::c_char,
        __file: *const libc::c_char,
        __line: libc::c_uint,
        __function: *const libc::c_char,
    ) -> !;
    fn binn_create_type(
        storage_type: libc::c_int,
        data_type_index: libc::c_int,
    ) -> libc::c_int;
    fn binn_get_type_info(
        long_type: libc::c_int,
        pstorage_type: *mut libc::c_int,
        pextra_type: *mut libc::c_int,
    ) -> BOOL;
    fn binn_list() -> *mut binn;
    fn binn_map() -> *mut binn;
    fn binn_object() -> *mut binn;
    fn binn_copy(old: *mut libc::c_void) -> *mut binn;
    fn binn_list_add(
        list: *mut binn,
        type_0: libc::c_int,
        pvalue: *mut libc::c_void,
        size: libc::c_int,
    ) -> BOOL;
    fn binn_map_set(
        map: *mut binn,
        id: libc::c_int,
        type_0: libc::c_int,
        pvalue: *mut libc::c_void,
        size: libc::c_int,
    ) -> BOOL;
    fn binn_object_set(
        obj: *mut binn,
        key: *const libc::c_char,
        type_0: libc::c_int,
        pvalue: *mut libc::c_void,
        size: libc::c_int,
    ) -> BOOL;
    fn binn_free(item: *mut binn);
    fn binn_value(
        type_0: libc::c_int,
        pvalue: *mut libc::c_void,
        size: libc::c_int,
        freefn: binn_mem_free,
    ) -> *mut binn;
    fn binn_ptr(ptr: *mut libc::c_void) -> *mut libc::c_void;
    fn binn_size(ptr: *mut libc::c_void) -> libc::c_int;
    fn binn_type(ptr: *mut libc::c_void) -> libc::c_int;
    fn binn_count(ptr: *mut libc::c_void) -> libc::c_int;
    fn binn_list_int32(list: *mut libc::c_void, pos: libc::c_int) -> libc::c_int;
    fn binn_list_bool(list: *mut libc::c_void, pos: libc::c_int) -> BOOL;
    fn binn_list_null(list: *mut libc::c_void, pos: libc::c_int) -> BOOL;
    fn binn_list_str(list: *mut libc::c_void, pos: libc::c_int) -> *mut libc::c_char;
    fn binn_object_int8(
        obj: *mut libc::c_void,
        key: *const libc::c_char,
    ) -> libc::c_schar;
    fn binn_object_int16(
        obj: *mut libc::c_void,
        key: *const libc::c_char,
    ) -> libc::c_short;
    fn binn_object_int32(
        obj: *mut libc::c_void,
        key: *const libc::c_char,
    ) -> libc::c_int;
    fn binn_object_int64(obj: *mut libc::c_void, key: *const libc::c_char) -> int64;
    fn binn_object_uint8(
        obj: *mut libc::c_void,
        key: *const libc::c_char,
    ) -> libc::c_uchar;
    fn binn_object_uint16(
        obj: *mut libc::c_void,
        key: *const libc::c_char,
    ) -> libc::c_ushort;
    fn binn_object_uint32(
        obj: *mut libc::c_void,
        key: *const libc::c_char,
    ) -> libc::c_uint;
    fn binn_object_uint64(obj: *mut libc::c_void, key: *const libc::c_char) -> uint64;
    fn binn_object_float(
        obj: *mut libc::c_void,
        key: *const libc::c_char,
    ) -> libc::c_float;
    fn binn_object_double(
        obj: *mut libc::c_void,
        key: *const libc::c_char,
    ) -> libc::c_double;
    fn binn_object_bool(obj: *mut libc::c_void, key: *const libc::c_char) -> BOOL;
    fn binn_object_null(obj: *mut libc::c_void, key: *const libc::c_char) -> BOOL;
    fn binn_object_str(
        obj: *mut libc::c_void,
        key: *const libc::c_char,
    ) -> *mut libc::c_char;
    fn binn_object_list(
        obj: *mut libc::c_void,
        key: *const libc::c_char,
    ) -> *mut libc::c_void;
    fn binn_object_get_value(
        obj: *mut libc::c_void,
        key: *const libc::c_char,
        value: *mut binn,
    ) -> BOOL;
    fn binn_list_get(
        list: *mut libc::c_void,
        pos: libc::c_int,
        type_0: libc::c_int,
        pvalue: *mut libc::c_void,
        psize: *mut libc::c_int,
    ) -> BOOL;
    fn binn_object_get(
        obj: *mut libc::c_void,
        key: *const libc::c_char,
        type_0: libc::c_int,
        pvalue: *mut libc::c_void,
        psize: *mut libc::c_int,
    ) -> BOOL;
    fn binn_iter_init(
        iter: *mut binn_iter,
        pbuf: *mut libc::c_void,
        type_0: libc::c_int,
    ) -> BOOL;
    fn binn_list_next(iter: *mut binn_iter, value: *mut binn) -> BOOL;
    fn binn_map_next(
        iter: *mut binn_iter,
        pid: *mut libc::c_int,
        value: *mut binn,
    ) -> BOOL;
    fn binn_object_next(
        iter: *mut binn_iter,
        pkey: *mut libc::c_char,
        value: *mut binn,
    ) -> BOOL;
    fn binn_get_int32(value: *mut binn, pint: *mut libc::c_int) -> BOOL;
    fn binn_get_int64(value: *mut binn, pint: *mut int64) -> BOOL;
    fn binn_get_double(value: *mut binn, pfloat: *mut libc::c_double) -> BOOL;
    fn binn_get_bool(value: *mut binn, pbool: *mut BOOL) -> BOOL;
    fn binn_get_str(value: *mut binn) -> *mut libc::c_char;
    fn memdup(src: *mut libc::c_void, size: libc::c_int) -> *mut libc::c_void;
    fn i64toa(
        val: int64,
        buf: *mut libc::c_char,
        radix: libc::c_int,
    ) -> *mut libc::c_char;
    fn atoi64(str: *mut libc::c_char) -> int64;
    fn AlmostEqualFloats(
        A: libc::c_float,
        B: libc::c_float,
        maxUlps: libc::c_int,
    ) -> BOOL;
    fn copy_int_value(
        psource: *mut libc::c_void,
        pdest: *mut libc::c_void,
        source_type: libc::c_int,
        dest_type: libc::c_int,
    ) -> BOOL;
}
pub type BOOL = libc::c_int;
pub type int64 = libc::c_longlong;
pub type uint64 = libc::c_ulonglong;
pub type binn_mem_free = Option::<unsafe extern "C" fn(*mut libc::c_void) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct binn_struct {
    pub header: libc::c_int,
    pub allocated: BOOL,
    pub writable: BOOL,
    pub dirty: BOOL,
    pub pbuf: *mut libc::c_void,
    pub pre_allocated: BOOL,
    pub alloc_size: libc::c_int,
    pub used_size: libc::c_int,
    pub type_0: libc::c_int,
    pub ptr: *mut libc::c_void,
    pub size: libc::c_int,
    pub count: libc::c_int,
    pub freefn: binn_mem_free,
    pub c2rust_unnamed: C2RustUnnamed,
    pub disable_int_compression: BOOL,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed {
    pub vint8: libc::c_schar,
    pub vint16: libc::c_short,
    pub vint32: libc::c_int,
    pub vint64: int64,
    pub vuint8: libc::c_uchar,
    pub vuint16: libc::c_ushort,
    pub vuint32: libc::c_uint,
    pub vuint64: uint64,
    pub vchar: libc::c_schar,
    pub vuchar: libc::c_uchar,
    pub vshort: libc::c_short,
    pub vushort: libc::c_ushort,
    pub vint: libc::c_int,
    pub vuint: libc::c_uint,
    pub vfloat: libc::c_float,
    pub vdouble: libc::c_double,
    pub vbool: BOOL,
}
pub type binn = binn_struct;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct binn_iter_struct {
    pub pnext: *mut libc::c_uchar,
    pub plimit: *mut libc::c_uchar,
    pub type_0: libc::c_int,
    pub count: libc::c_int,
    pub current: libc::c_int,
}
pub type binn_iter = binn_iter_struct;
#[inline(always)]
unsafe extern "C" fn binn_int32(mut value: libc::c_int) -> *mut binn {
    return binn_value(
        0x61 as libc::c_int,
        &mut value as *mut libc::c_int as *mut libc::c_void,
        0 as libc::c_int,
        None,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_int64(mut value: int64) -> *mut binn {
    return binn_value(
        0x81 as libc::c_int,
        &mut value as *mut int64 as *mut libc::c_void,
        0 as libc::c_int,
        None,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_double(mut value: libc::c_double) -> *mut binn {
    return binn_value(
        0x82 as libc::c_int,
        &mut value as *mut libc::c_double as *mut libc::c_void,
        0 as libc::c_int,
        None,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_bool(mut value: BOOL) -> *mut binn {
    return binn_value(
        0x80061 as libc::c_int,
        &mut value as *mut BOOL as *mut libc::c_void,
        0 as libc::c_int,
        None,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_string(
    mut str: *mut libc::c_char,
    mut freefn: binn_mem_free,
) -> *mut binn {
    return binn_value(
        0xa0 as libc::c_int,
        str as *mut libc::c_void,
        0 as libc::c_int,
        freefn,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_blob(
    mut ptr: *mut libc::c_void,
    mut size: libc::c_int,
    mut freefn: binn_mem_free,
) -> *mut binn {
    return binn_value(0xc0 as libc::c_int, ptr, size, freefn);
}
#[inline(always)]
unsafe extern "C" fn binn_list_add_int8(
    mut list: *mut binn,
    mut value: libc::c_schar,
) -> BOOL {
    return binn_list_add(
        list,
        0x21 as libc::c_int,
        &mut value as *mut libc::c_schar as *mut libc::c_void,
        0 as libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_list_add_int16(
    mut list: *mut binn,
    mut value: libc::c_short,
) -> BOOL {
    return binn_list_add(
        list,
        0x41 as libc::c_int,
        &mut value as *mut libc::c_short as *mut libc::c_void,
        0 as libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_list_add_int32(
    mut list: *mut binn,
    mut value: libc::c_int,
) -> BOOL {
    return binn_list_add(
        list,
        0x61 as libc::c_int,
        &mut value as *mut libc::c_int as *mut libc::c_void,
        0 as libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_list_add_int64(mut list: *mut binn, mut value: int64) -> BOOL {
    return binn_list_add(
        list,
        0x81 as libc::c_int,
        &mut value as *mut int64 as *mut libc::c_void,
        0 as libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_list_add_float(
    mut list: *mut binn,
    mut value: libc::c_float,
) -> BOOL {
    return binn_list_add(
        list,
        0x62 as libc::c_int,
        &mut value as *mut libc::c_float as *mut libc::c_void,
        0 as libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_list_add_double(
    mut list: *mut binn,
    mut value: libc::c_double,
) -> BOOL {
    return binn_list_add(
        list,
        0x82 as libc::c_int,
        &mut value as *mut libc::c_double as *mut libc::c_void,
        0 as libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_list_add_bool(mut list: *mut binn, mut value: BOOL) -> BOOL {
    return binn_list_add(
        list,
        0x80061 as libc::c_int,
        &mut value as *mut BOOL as *mut libc::c_void,
        0 as libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_list_add_null(mut list: *mut binn) -> BOOL {
    return binn_list_add(
        list,
        0 as libc::c_int,
        0 as *mut libc::c_void,
        0 as libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_list_add_str(
    mut list: *mut binn,
    mut str: *mut libc::c_char,
) -> BOOL {
    return binn_list_add(
        list,
        0xa0 as libc::c_int,
        str as *mut libc::c_void,
        0 as libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_list_add_blob(
    mut list: *mut binn,
    mut ptr: *mut libc::c_void,
    mut size: libc::c_int,
) -> BOOL {
    return binn_list_add(list, 0xc0 as libc::c_int, ptr, size);
}
#[inline(always)]
unsafe extern "C" fn binn_list_add_list(
    mut list: *mut binn,
    mut list2: *mut libc::c_void,
) -> BOOL {
    return binn_list_add(list, 0xe0 as libc::c_int, binn_ptr(list2), binn_size(list2));
}
#[inline(always)]
unsafe extern "C" fn binn_map_set_int8(
    mut map: *mut binn,
    mut id: libc::c_int,
    mut value: libc::c_schar,
) -> BOOL {
    return binn_map_set(
        map,
        id,
        0x21 as libc::c_int,
        &mut value as *mut libc::c_schar as *mut libc::c_void,
        0 as libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_map_set_int16(
    mut map: *mut binn,
    mut id: libc::c_int,
    mut value: libc::c_short,
) -> BOOL {
    return binn_map_set(
        map,
        id,
        0x41 as libc::c_int,
        &mut value as *mut libc::c_short as *mut libc::c_void,
        0 as libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_map_set_int32(
    mut map: *mut binn,
    mut id: libc::c_int,
    mut value: libc::c_int,
) -> BOOL {
    return binn_map_set(
        map,
        id,
        0x61 as libc::c_int,
        &mut value as *mut libc::c_int as *mut libc::c_void,
        0 as libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_map_set_int64(
    mut map: *mut binn,
    mut id: libc::c_int,
    mut value: int64,
) -> BOOL {
    return binn_map_set(
        map,
        id,
        0x81 as libc::c_int,
        &mut value as *mut int64 as *mut libc::c_void,
        0 as libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_map_set_float(
    mut map: *mut binn,
    mut id: libc::c_int,
    mut value: libc::c_float,
) -> BOOL {
    return binn_map_set(
        map,
        id,
        0x62 as libc::c_int,
        &mut value as *mut libc::c_float as *mut libc::c_void,
        0 as libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_map_set_double(
    mut map: *mut binn,
    mut id: libc::c_int,
    mut value: libc::c_double,
) -> BOOL {
    return binn_map_set(
        map,
        id,
        0x82 as libc::c_int,
        &mut value as *mut libc::c_double as *mut libc::c_void,
        0 as libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_map_set_bool(
    mut map: *mut binn,
    mut id: libc::c_int,
    mut value: BOOL,
) -> BOOL {
    return binn_map_set(
        map,
        id,
        0x80061 as libc::c_int,
        &mut value as *mut BOOL as *mut libc::c_void,
        0 as libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_map_set_null(mut map: *mut binn, mut id: libc::c_int) -> BOOL {
    return binn_map_set(
        map,
        id,
        0 as libc::c_int,
        0 as *mut libc::c_void,
        0 as libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_map_set_str(
    mut map: *mut binn,
    mut id: libc::c_int,
    mut str: *mut libc::c_char,
) -> BOOL {
    return binn_map_set(
        map,
        id,
        0xa0 as libc::c_int,
        str as *mut libc::c_void,
        0 as libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_map_set_blob(
    mut map: *mut binn,
    mut id: libc::c_int,
    mut ptr: *mut libc::c_void,
    mut size: libc::c_int,
) -> BOOL {
    return binn_map_set(map, id, 0xc0 as libc::c_int, ptr, size);
}
#[inline(always)]
unsafe extern "C" fn binn_map_set_list(
    mut map: *mut binn,
    mut id: libc::c_int,
    mut list: *mut libc::c_void,
) -> BOOL {
    return binn_map_set(map, id, 0xe0 as libc::c_int, binn_ptr(list), binn_size(list));
}
#[inline(always)]
unsafe extern "C" fn binn_object_set_int8(
    mut obj: *mut binn,
    mut key: *const libc::c_char,
    mut value: libc::c_schar,
) -> BOOL {
    return binn_object_set(
        obj,
        key,
        0x21 as libc::c_int,
        &mut value as *mut libc::c_schar as *mut libc::c_void,
        0 as libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_object_set_int16(
    mut obj: *mut binn,
    mut key: *const libc::c_char,
    mut value: libc::c_short,
) -> BOOL {
    return binn_object_set(
        obj,
        key,
        0x41 as libc::c_int,
        &mut value as *mut libc::c_short as *mut libc::c_void,
        0 as libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_object_set_int32(
    mut obj: *mut binn,
    mut key: *const libc::c_char,
    mut value: libc::c_int,
) -> BOOL {
    return binn_object_set(
        obj,
        key,
        0x61 as libc::c_int,
        &mut value as *mut libc::c_int as *mut libc::c_void,
        0 as libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_object_set_int64(
    mut obj: *mut binn,
    mut key: *const libc::c_char,
    mut value: int64,
) -> BOOL {
    return binn_object_set(
        obj,
        key,
        0x81 as libc::c_int,
        &mut value as *mut int64 as *mut libc::c_void,
        0 as libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_object_set_uint8(
    mut obj: *mut binn,
    mut key: *const libc::c_char,
    mut value: libc::c_uchar,
) -> BOOL {
    return binn_object_set(
        obj,
        key,
        0x20 as libc::c_int,
        &mut value as *mut libc::c_uchar as *mut libc::c_void,
        0 as libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_object_set_uint16(
    mut obj: *mut binn,
    mut key: *const libc::c_char,
    mut value: libc::c_ushort,
) -> BOOL {
    return binn_object_set(
        obj,
        key,
        0x40 as libc::c_int,
        &mut value as *mut libc::c_ushort as *mut libc::c_void,
        0 as libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_object_set_uint32(
    mut obj: *mut binn,
    mut key: *const libc::c_char,
    mut value: libc::c_uint,
) -> BOOL {
    return binn_object_set(
        obj,
        key,
        0x60 as libc::c_int,
        &mut value as *mut libc::c_uint as *mut libc::c_void,
        0 as libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_object_set_uint64(
    mut obj: *mut binn,
    mut key: *const libc::c_char,
    mut value: uint64,
) -> BOOL {
    return binn_object_set(
        obj,
        key,
        0x80 as libc::c_int,
        &mut value as *mut uint64 as *mut libc::c_void,
        0 as libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_object_set_float(
    mut obj: *mut binn,
    mut key: *const libc::c_char,
    mut value: libc::c_float,
) -> BOOL {
    return binn_object_set(
        obj,
        key,
        0x62 as libc::c_int,
        &mut value as *mut libc::c_float as *mut libc::c_void,
        0 as libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_object_set_double(
    mut obj: *mut binn,
    mut key: *const libc::c_char,
    mut value: libc::c_double,
) -> BOOL {
    return binn_object_set(
        obj,
        key,
        0x82 as libc::c_int,
        &mut value as *mut libc::c_double as *mut libc::c_void,
        0 as libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_object_set_bool(
    mut obj: *mut binn,
    mut key: *const libc::c_char,
    mut value: BOOL,
) -> BOOL {
    return binn_object_set(
        obj,
        key,
        0x80061 as libc::c_int,
        &mut value as *mut BOOL as *mut libc::c_void,
        0 as libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_object_set_null(
    mut obj: *mut binn,
    mut key: *const libc::c_char,
) -> BOOL {
    return binn_object_set(
        obj,
        key,
        0 as libc::c_int,
        0 as *mut libc::c_void,
        0 as libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_object_set_str(
    mut obj: *mut binn,
    mut key: *const libc::c_char,
    mut str: *mut libc::c_char,
) -> BOOL {
    return binn_object_set(
        obj,
        key,
        0xa0 as libc::c_int,
        str as *mut libc::c_void,
        0 as libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_object_set_blob(
    mut obj: *mut binn,
    mut key: *const libc::c_char,
    mut ptr: *mut libc::c_void,
    mut size: libc::c_int,
) -> BOOL {
    return binn_object_set(obj, key, 0xc0 as libc::c_int, ptr, size);
}
#[inline(always)]
unsafe extern "C" fn binn_object_set_list(
    mut obj: *mut binn,
    mut key: *const libc::c_char,
    mut list: *mut libc::c_void,
) -> BOOL {
    return binn_object_set(
        obj,
        key,
        0xe0 as libc::c_int,
        binn_ptr(list),
        binn_size(list),
    );
}
#[inline(always)]
unsafe extern "C" fn binn_list_get_int32(
    mut list: *mut libc::c_void,
    mut pos: libc::c_int,
    mut pvalue: *mut libc::c_int,
) -> BOOL {
    return binn_list_get(
        list,
        pos,
        0x61 as libc::c_int,
        pvalue as *mut libc::c_void,
        0 as *mut libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_list_get_bool(
    mut list: *mut libc::c_void,
    mut pos: libc::c_int,
    mut pvalue: *mut BOOL,
) -> BOOL {
    return binn_list_get(
        list,
        pos,
        0x80061 as libc::c_int,
        pvalue as *mut libc::c_void,
        0 as *mut libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_list_get_str(
    mut list: *mut libc::c_void,
    mut pos: libc::c_int,
    mut pvalue: *mut *mut libc::c_char,
) -> BOOL {
    return binn_list_get(
        list,
        pos,
        0xa0 as libc::c_int,
        pvalue as *mut libc::c_void,
        0 as *mut libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_object_get_int8(
    mut obj: *mut libc::c_void,
    mut key: *const libc::c_char,
    mut pvalue: *mut libc::c_schar,
) -> BOOL {
    return binn_object_get(
        obj,
        key,
        0x21 as libc::c_int,
        pvalue as *mut libc::c_void,
        0 as *mut libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_object_get_int16(
    mut obj: *mut libc::c_void,
    mut key: *const libc::c_char,
    mut pvalue: *mut libc::c_short,
) -> BOOL {
    return binn_object_get(
        obj,
        key,
        0x41 as libc::c_int,
        pvalue as *mut libc::c_void,
        0 as *mut libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_object_get_int32(
    mut obj: *mut libc::c_void,
    mut key: *const libc::c_char,
    mut pvalue: *mut libc::c_int,
) -> BOOL {
    return binn_object_get(
        obj,
        key,
        0x61 as libc::c_int,
        pvalue as *mut libc::c_void,
        0 as *mut libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_object_get_int64(
    mut obj: *mut libc::c_void,
    mut key: *const libc::c_char,
    mut pvalue: *mut int64,
) -> BOOL {
    return binn_object_get(
        obj,
        key,
        0x81 as libc::c_int,
        pvalue as *mut libc::c_void,
        0 as *mut libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_object_get_uint8(
    mut obj: *mut libc::c_void,
    mut key: *const libc::c_char,
    mut pvalue: *mut libc::c_uchar,
) -> BOOL {
    return binn_object_get(
        obj,
        key,
        0x20 as libc::c_int,
        pvalue as *mut libc::c_void,
        0 as *mut libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_object_get_uint16(
    mut obj: *mut libc::c_void,
    mut key: *const libc::c_char,
    mut pvalue: *mut libc::c_ushort,
) -> BOOL {
    return binn_object_get(
        obj,
        key,
        0x40 as libc::c_int,
        pvalue as *mut libc::c_void,
        0 as *mut libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_object_get_uint32(
    mut obj: *mut libc::c_void,
    mut key: *const libc::c_char,
    mut pvalue: *mut libc::c_uint,
) -> BOOL {
    return binn_object_get(
        obj,
        key,
        0x60 as libc::c_int,
        pvalue as *mut libc::c_void,
        0 as *mut libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_object_get_uint64(
    mut obj: *mut libc::c_void,
    mut key: *const libc::c_char,
    mut pvalue: *mut uint64,
) -> BOOL {
    return binn_object_get(
        obj,
        key,
        0x80 as libc::c_int,
        pvalue as *mut libc::c_void,
        0 as *mut libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_object_get_float(
    mut obj: *mut libc::c_void,
    mut key: *const libc::c_char,
    mut pvalue: *mut libc::c_float,
) -> BOOL {
    return binn_object_get(
        obj,
        key,
        0x62 as libc::c_int,
        pvalue as *mut libc::c_void,
        0 as *mut libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_object_get_double(
    mut obj: *mut libc::c_void,
    mut key: *const libc::c_char,
    mut pvalue: *mut libc::c_double,
) -> BOOL {
    return binn_object_get(
        obj,
        key,
        0x82 as libc::c_int,
        pvalue as *mut libc::c_void,
        0 as *mut libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_object_get_bool(
    mut obj: *mut libc::c_void,
    mut key: *const libc::c_char,
    mut pvalue: *mut BOOL,
) -> BOOL {
    return binn_object_get(
        obj,
        key,
        0x80061 as libc::c_int,
        pvalue as *mut libc::c_void,
        0 as *mut libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_object_get_str(
    mut obj: *mut libc::c_void,
    mut key: *const libc::c_char,
    mut pvalue: *mut *mut libc::c_char,
) -> BOOL {
    return binn_object_get(
        obj,
        key,
        0xa0 as libc::c_int,
        pvalue as *mut libc::c_void,
        0 as *mut libc::c_int,
    );
}
#[inline(always)]
unsafe extern "C" fn binn_object_get_list(
    mut obj: *mut libc::c_void,
    mut key: *const libc::c_char,
    mut pvalue: *mut *mut libc::c_void,
) -> BOOL {
    return binn_object_get(
        obj,
        key,
        0xe0 as libc::c_int,
        pvalue as *mut libc::c_void,
        0 as *mut libc::c_int,
    );
}
pub static mut MY_DATE: libc::c_int = 0;
pub static mut MY_CURRENCY: libc::c_int = 0;
pub static mut tmp: [libc::c_char; 128] = [0; 128];
pub static mut vint32: libc::c_int = 0;
pub static mut vuint32: libc::c_uint = 0;
pub static mut vint64: int64 = 0;
pub static mut vuint64: uint64 = 0;
pub static mut vint16: libc::c_short = 0;
pub static mut vuint16: libc::c_ushort = 0;
pub static mut vint8: libc::c_schar = 0;
pub static mut vuint8: libc::c_uchar = 0;
pub static mut vfloat32: libc::c_float = 0.;
pub static mut vfloat64: libc::c_double = 0.;
pub static mut vbool: BOOL = 0;
pub unsafe extern "C" fn stripchr(
    mut mainstr: *mut libc::c_char,
    mut separator: libc::c_int,
) -> *mut libc::c_char {
    let mut ptr: *mut libc::c_char = 0 as *mut libc::c_char;
    if mainstr.is_null() {
        return 0 as *mut libc::c_char;
    }
    ptr = strchr(mainstr, separator);
    if ptr.is_null() {
        return 0 as *mut libc::c_char;
    }
    *ptr.offset(0 as libc::c_int as isize) = '\0' as i32 as libc::c_char;
    ptr = ptr.offset(1);
    ptr;
    return ptr;
}
pub unsafe extern "C" fn str_to_date(mut datestr: *mut libc::c_char) -> libc::c_ushort {
    let mut date: libc::c_ushort = 0;
    let mut day: libc::c_int = 0;
    let mut month: libc::c_int = 0;
    let mut year: libc::c_int = 0;
    let mut next: *mut libc::c_char = 0 as *mut libc::c_char;
    if datestr.is_null() {
        return 0 as libc::c_int as libc::c_ushort;
    }
    strcpy(tmp.as_mut_ptr(), datestr);
    datestr = tmp.as_mut_ptr();
    next = stripchr(datestr, '-' as i32);
    year = atoi(datestr) - 1900 as libc::c_int;
    datestr = next;
    next = stripchr(datestr, '-' as i32);
    month = atoi(datestr);
    day = atoi(next);
    date = (day << 11 as libc::c_int | month << 7 as libc::c_int | year)
        as libc::c_ushort;
    return date;
}
pub unsafe extern "C" fn date_to_str(mut date: libc::c_ushort) -> *mut libc::c_char {
    let mut day: libc::c_int = 0;
    let mut month: libc::c_int = 0;
    let mut year: libc::c_int = 0;
    day = (date as libc::c_int & 0xf800 as libc::c_int) >> 11 as libc::c_int;
    month = (date as libc::c_int & 0x780 as libc::c_int) >> 7 as libc::c_int;
    year = date as libc::c_int & 0x7f as libc::c_int;
    sprintf(
        tmp.as_mut_ptr(),
        b"%.4d-%.2d-%.2d\0" as *const u8 as *const libc::c_char,
        year + 1900 as libc::c_int,
        month,
        day,
    );
    return tmp.as_mut_ptr();
}
pub unsafe extern "C" fn str_to_currency(mut str: *mut libc::c_char) -> int64 {
    let mut next: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut size: libc::c_int = 0;
    let mut i: libc::c_int = 0;
    if str.is_null() {
        return 0 as libc::c_int as int64;
    }
    strcpy(tmp.as_mut_ptr(), str);
    str = tmp.as_mut_ptr();
    next = strchr(str, '.' as i32);
    if !next.is_null() {
        size = strlen(next.offset(1 as libc::c_int as isize)) as libc::c_int;
        memmove(
            next as *mut libc::c_void,
            next.offset(1 as libc::c_int as isize) as *const libc::c_void,
            (size + 1 as libc::c_int) as libc::c_ulong,
        );
        if size <= 4 as libc::c_int {
            size = 4 as libc::c_int - size;
            i = 0 as libc::c_int;
            while i < size {
                strcat(str, b"0\0" as *const u8 as *const libc::c_char);
                i += 1;
                i;
            }
        } else {
            *next.offset(4 as libc::c_int as isize) = 0 as libc::c_int as libc::c_char;
        }
    } else {
        strcat(str, b"0000\0" as *const u8 as *const libc::c_char);
    }
    return atoi64(str);
}
pub unsafe extern "C" fn currency_to_str(mut value: int64) -> *mut libc::c_char {
    let mut str: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut ptr: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut size: libc::c_int = 0;
    let mut move_0: libc::c_int = 0;
    let mut i: libc::c_int = 0;
    i64toa(value, tmp.as_mut_ptr(), 10 as libc::c_int);
    str = tmp.as_mut_ptr();
    size = strlen(str) as libc::c_int;
    if size > 4 as libc::c_int {
        ptr = str.offset(size as isize).offset(-(4 as libc::c_int as isize));
        memmove(
            ptr.offset(1 as libc::c_int as isize) as *mut libc::c_void,
            ptr as *const libc::c_void,
            (4 as libc::c_int + 1 as libc::c_int) as libc::c_ulong,
        );
        *ptr.offset(0 as libc::c_int as isize) = '.' as i32 as libc::c_char;
    } else {
        move_0 = 2 as libc::c_int + 4 as libc::c_int - size;
        memmove(
            str.offset(move_0 as isize) as *mut libc::c_void,
            str as *const libc::c_void,
            (size + 1 as libc::c_int) as libc::c_ulong,
        );
        *str.offset(0 as libc::c_int as isize) = '0' as i32 as libc::c_char;
        *str.offset(1 as libc::c_int as isize) = '.' as i32 as libc::c_char;
        i = 2 as libc::c_int;
        while i < move_0 {
            *str.offset(i as isize) = '0' as i32 as libc::c_char;
            i += 1;
            i;
        }
    }
    return str;
}
pub unsafe extern "C" fn float_to_currency(mut value: libc::c_double) -> int64 {
    let mut buf: [libc::c_char; 128] = [0; 128];
    snprintf(
        buf.as_mut_ptr(),
        127 as libc::c_int as libc::c_ulong,
        b"%.4f\0" as *const u8 as *const libc::c_char,
        value,
    );
    return str_to_currency(buf.as_mut_ptr());
}
pub unsafe extern "C" fn currency_to_float(mut value: int64) -> libc::c_double {
    currency_to_str(value);
    return atof(tmp.as_mut_ptr());
}
pub unsafe extern "C" fn mul_currency(mut value1: int64, mut value2: int64) -> int64 {
    return value1 * value2 / 10000 as libc::c_int as libc::c_longlong;
}
pub unsafe extern "C" fn div_currency(mut value1: int64, mut value2: int64) -> int64 {
    return value1 * 10000 as libc::c_int as libc::c_longlong / value2;
}
pub unsafe extern "C" fn test_create_object_1(
    mut psize: *mut libc::c_int,
) -> *mut libc::c_char {
    let mut obj: *mut binn = 0 as *mut binn;
    let mut list: *mut binn = 0 as *mut binn;
    printf(b"creating object 1...\n\0" as *const u8 as *const libc::c_char);
    obj = binn_object();
    if !obj.is_null() {} else {
        __assert_fail(
            b"obj != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            218 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_1(int *)\0"))
                .as_ptr(),
        );
    }
    'c_7835: {
        if !obj.is_null() {} else {
            __assert_fail(
                b"obj != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                218 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_1(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = -(12345 as libc::c_int);
    if binn_object_set(
        obj,
        b"int32\0" as *const u8 as *const libc::c_char,
        0x61 as libc::c_int,
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        0 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set(obj, \"int32\", BINN_INT32, &vint32, 0) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            221 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_1(int *)\0"))
                .as_ptr(),
        );
    }
    'c_7775: {
        if binn_object_set(
            obj,
            b"int32\0" as *const u8 as *const libc::c_char,
            0x61 as libc::c_int,
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            0 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set(obj, \"int32\", BINN_INT32, &vint32, 0) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                221 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_1(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    vint16 = -(258 as libc::c_int) as libc::c_short;
    if binn_object_set(
        obj,
        b"int16\0" as *const u8 as *const libc::c_char,
        0x41 as libc::c_int,
        &mut vint16 as *mut libc::c_short as *mut libc::c_void,
        0 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set(obj, \"int16\", BINN_INT16, &vint16, 0) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            223 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_1(int *)\0"))
                .as_ptr(),
        );
    }
    'c_7714: {
        if binn_object_set(
            obj,
            b"int16\0" as *const u8 as *const libc::c_char,
            0x41 as libc::c_int,
            &mut vint16 as *mut libc::c_short as *mut libc::c_void,
            0 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set(obj, \"int16\", BINN_INT16, &vint16, 0) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                223 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_1(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    vint8 = -(120 as libc::c_int) as libc::c_schar;
    if binn_object_set(
        obj,
        b"int8\0" as *const u8 as *const libc::c_char,
        0x21 as libc::c_int,
        &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
        0 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set(obj, \"int8\", BINN_INT8, &vint8, 0) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            225 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_1(int *)\0"))
                .as_ptr(),
        );
    }
    'c_7652: {
        if binn_object_set(
            obj,
            b"int8\0" as *const u8 as *const libc::c_char,
            0x21 as libc::c_int,
            &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
            0 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set(obj, \"int8\", BINN_INT8, &vint8, 0) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                225 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_1(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    vint64 = -(1234567890123 as libc::c_long) as int64;
    if binn_object_set(
        obj,
        b"int64\0" as *const u8 as *const libc::c_char,
        0x81 as libc::c_int,
        &mut vint64 as *mut int64 as *mut libc::c_void,
        0 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set(obj, \"int64\", BINN_INT64, &vint64, 0) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            227 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_1(int *)\0"))
                .as_ptr(),
        );
    }
    'c_7591: {
        if binn_object_set(
            obj,
            b"int64\0" as *const u8 as *const libc::c_char,
            0x81 as libc::c_int,
            &mut vint64 as *mut int64 as *mut libc::c_void,
            0 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set(obj, \"int64\", BINN_INT64, &vint64, 0) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                227 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_1(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    vuint32 = 123456 as libc::c_int as libc::c_uint;
    if binn_object_set(
        obj,
        b"uint32\0" as *const u8 as *const libc::c_char,
        0x60 as libc::c_int,
        &mut vuint32 as *mut libc::c_uint as *mut libc::c_void,
        0 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set(obj, \"uint32\", BINN_UINT32, &vuint32, 0) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            230 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_1(int *)\0"))
                .as_ptr(),
        );
    }
    'c_7531: {
        if binn_object_set(
            obj,
            b"uint32\0" as *const u8 as *const libc::c_char,
            0x60 as libc::c_int,
            &mut vuint32 as *mut libc::c_uint as *mut libc::c_void,
            0 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set(obj, \"uint32\", BINN_UINT32, &vuint32, 0) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                230 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_1(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    vuint16 = 60500 as libc::c_int as libc::c_ushort;
    if binn_object_set(
        obj,
        b"uint16\0" as *const u8 as *const libc::c_char,
        0x40 as libc::c_int,
        &mut vuint16 as *mut libc::c_ushort as *mut libc::c_void,
        0 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set(obj, \"uint16\", BINN_UINT16, &vuint16, 0) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            232 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_1(int *)\0"))
                .as_ptr(),
        );
    }
    'c_7471: {
        if binn_object_set(
            obj,
            b"uint16\0" as *const u8 as *const libc::c_char,
            0x40 as libc::c_int,
            &mut vuint16 as *mut libc::c_ushort as *mut libc::c_void,
            0 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set(obj, \"uint16\", BINN_UINT16, &vuint16, 0) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                232 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_1(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    vuint8 = 250 as libc::c_int as libc::c_uchar;
    if binn_object_set(
        obj,
        b"uint8\0" as *const u8 as *const libc::c_char,
        0x20 as libc::c_int,
        &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
        0 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set(obj, \"uint8\", BINN_UINT8, &vuint8, 0) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            234 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_1(int *)\0"))
                .as_ptr(),
        );
    }
    'c_7409: {
        if binn_object_set(
            obj,
            b"uint8\0" as *const u8 as *const libc::c_char,
            0x20 as libc::c_int,
            &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
            0 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set(obj, \"uint8\", BINN_UINT8, &vuint8, 0) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                234 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_1(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    vuint64 = 1234567890123 as libc::c_long as uint64;
    if binn_object_set(
        obj,
        b"uint64\0" as *const u8 as *const libc::c_char,
        0x80 as libc::c_int,
        &mut vuint64 as *mut uint64 as *mut libc::c_void,
        0 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set(obj, \"uint64\", BINN_UINT64, &vuint64, 0) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            236 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_1(int *)\0"))
                .as_ptr(),
        );
    }
    'c_7349: {
        if binn_object_set(
            obj,
            b"uint64\0" as *const u8 as *const libc::c_char,
            0x80 as libc::c_int,
            &mut vuint64 as *mut uint64 as *mut libc::c_void,
            0 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set(obj, \"uint64\", BINN_UINT64, &vuint64, 0) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                236 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_1(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    vfloat32 = -12.345f64 as libc::c_float;
    if binn_object_set(
        obj,
        b"float32\0" as *const u8 as *const libc::c_char,
        0x62 as libc::c_int,
        &mut vfloat32 as *mut libc::c_float as *mut libc::c_void,
        0 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set(obj, \"float32\", BINN_FLOAT32, &vfloat32, 0) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            239 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_1(int *)\0"))
                .as_ptr(),
        );
    }
    'c_7288: {
        if binn_object_set(
            obj,
            b"float32\0" as *const u8 as *const libc::c_char,
            0x62 as libc::c_int,
            &mut vfloat32 as *mut libc::c_float as *mut libc::c_void,
            0 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set(obj, \"float32\", BINN_FLOAT32, &vfloat32, 0) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                239 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_1(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    vfloat32 = -12.345f64 as libc::c_float;
    if binn_object_set(
        obj,
        b"single\0" as *const u8 as *const libc::c_char,
        0x62 as libc::c_int,
        &mut vfloat32 as *mut libc::c_float as *mut libc::c_void,
        0 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set(obj, \"single\", BINN_SINGLE, &vfloat32, 0) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            241 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_1(int *)\0"))
                .as_ptr(),
        );
    }
    'c_7227: {
        if binn_object_set(
            obj,
            b"single\0" as *const u8 as *const libc::c_char,
            0x62 as libc::c_int,
            &mut vfloat32 as *mut libc::c_float as *mut libc::c_void,
            0 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set(obj, \"single\", BINN_SINGLE, &vfloat32, 0) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                241 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_1(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    vfloat64 = -123456.7895f64;
    if binn_object_set(
        obj,
        b"float64\0" as *const u8 as *const libc::c_char,
        0x82 as libc::c_int,
        &mut vfloat64 as *mut libc::c_double as *mut libc::c_void,
        0 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set(obj, \"float64\", BINN_FLOAT64, &vfloat64, 0) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            243 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_1(int *)\0"))
                .as_ptr(),
        );
    }
    'c_7165: {
        if binn_object_set(
            obj,
            b"float64\0" as *const u8 as *const libc::c_char,
            0x82 as libc::c_int,
            &mut vfloat64 as *mut libc::c_double as *mut libc::c_void,
            0 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set(obj, \"float64\", BINN_FLOAT64, &vfloat64, 0) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                243 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_1(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    vfloat64 = -123456.7895f64;
    if binn_object_set(
        obj,
        b"double\0" as *const u8 as *const libc::c_char,
        0x82 as libc::c_int,
        &mut vfloat64 as *mut libc::c_double as *mut libc::c_void,
        0 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set(obj, \"double\", BINN_DOUBLE, &vfloat64, 0) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            245 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_1(int *)\0"))
                .as_ptr(),
        );
    }
    'c_7104: {
        if binn_object_set(
            obj,
            b"double\0" as *const u8 as *const libc::c_char,
            0x82 as libc::c_int,
            &mut vfloat64 as *mut libc::c_double as *mut libc::c_void,
            0 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set(obj, \"double\", BINN_DOUBLE, &vfloat64, 0) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                245 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_1(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set(
        obj,
        b"str\0" as *const u8 as *const libc::c_char,
        0xa0 as libc::c_int,
        b"the value\0" as *const u8 as *const libc::c_char as *mut libc::c_void,
        0 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set(obj, \"str\", BINN_STRING, \"the value\", 0) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            247 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_1(int *)\0"))
                .as_ptr(),
        );
    }
    'c_7047: {
        if binn_object_set(
            obj,
            b"str\0" as *const u8 as *const libc::c_char,
            0xa0 as libc::c_int,
            b"the value\0" as *const u8 as *const libc::c_char as *mut libc::c_void,
            0 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set(obj, \"str\", BINN_STRING, \"the value\", 0) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                247 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_1(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = 1 as libc::c_int;
    if binn_object_set(
        obj,
        b"bool_true\0" as *const u8 as *const libc::c_char,
        0x80061 as libc::c_int,
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        0 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set(obj, \"bool_true\", BINN_BOOL, &vint32, 0) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            250 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_1(int *)\0"))
                .as_ptr(),
        );
    }
    'c_6985: {
        if binn_object_set(
            obj,
            b"bool_true\0" as *const u8 as *const libc::c_char,
            0x80061 as libc::c_int,
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            0 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set(obj, \"bool_true\", BINN_BOOL, &vint32, 0) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                250 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_1(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = 0 as libc::c_int;
    if binn_object_set(
        obj,
        b"bool_false\0" as *const u8 as *const libc::c_char,
        0x80061 as libc::c_int,
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        0 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set(obj, \"bool_false\", BINN_BOOL, &vint32, 0) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            252 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_1(int *)\0"))
                .as_ptr(),
        );
    }
    'c_6923: {
        if binn_object_set(
            obj,
            b"bool_false\0" as *const u8 as *const libc::c_char,
            0x80061 as libc::c_int,
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            0 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set(obj, \"bool_false\", BINN_BOOL, &vint32, 0) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                252 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_1(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set(
        obj,
        b"null\0" as *const u8 as *const libc::c_char,
        0 as libc::c_int,
        0 as *mut libc::c_void,
        0 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set(obj, \"null\", BINN_NULL, NULL, 0) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            254 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_1(int *)\0"))
                .as_ptr(),
        );
    }
    'c_6866: {
        if binn_object_set(
            obj,
            b"null\0" as *const u8 as *const libc::c_char,
            0 as libc::c_int,
            0 as *mut libc::c_void,
            0 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set(obj, \"null\", BINN_NULL, NULL, 0) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                254 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_1(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    list = binn_list();
    if !list.is_null() {} else {
        __assert_fail(
            b"list != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            260 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_1(int *)\0"))
                .as_ptr(),
        );
    }
    'c_6817: {
        if !list.is_null() {} else {
            __assert_fail(
                b"list != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                260 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_1(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_add(list, 0 as libc::c_int, 0 as *mut libc::c_void, 0 as libc::c_int)
        == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_list_add(list, BINN_NULL, NULL, 0) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            262 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_1(int *)\0"))
                .as_ptr(),
        );
    }
    'c_6764: {
        if binn_list_add(
            list,
            0 as libc::c_int,
            0 as *mut libc::c_void,
            0 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_list_add(list, BINN_NULL, NULL, 0) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                262 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_1(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = 123 as libc::c_int;
    if binn_list_add(
        list,
        0x61 as libc::c_int,
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        0 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_list_add(list, BINN_INT32, &vint32, 0) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            264 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_1(int *)\0"))
                .as_ptr(),
        );
    }
    'c_6708: {
        if binn_list_add(
            list,
            0x61 as libc::c_int,
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            0 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_list_add(list, BINN_INT32, &vint32, 0) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                264 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_1(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_add(
        list,
        0xa0 as libc::c_int,
        b"this is a string\0" as *const u8 as *const libc::c_char as *mut libc::c_void,
        0 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_list_add(list, BINN_STRING, \"this is a string\", 0) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            265 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_1(int *)\0"))
                .as_ptr(),
        );
    }
    'c_6654: {
        if binn_list_add(
            list,
            0xa0 as libc::c_int,
            b"this is a string\0" as *const u8 as *const libc::c_char
                as *mut libc::c_void,
            0 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_list_add(list, BINN_STRING, \"this is a string\", 0) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                265 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_1(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set(
        obj,
        b"list\0" as *const u8 as *const libc::c_char,
        0xe0 as libc::c_int,
        binn_ptr(list as *mut libc::c_void),
        binn_size(list as *mut libc::c_void),
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set(obj, \"list\", BINN_LIST, binn_ptr(list), binn_size(list)) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            267 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_1(int *)\0"))
                .as_ptr(),
        );
    }
    'c_6577: {
        if binn_object_set(
            obj,
            b"list\0" as *const u8 as *const libc::c_char,
            0xe0 as libc::c_int,
            binn_ptr(list as *mut libc::c_void),
            binn_size(list as *mut libc::c_void),
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set(obj, \"list\", BINN_LIST, binn_ptr(list), binn_size(list)) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                267 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_1(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(list);
    list = 0 as *mut binn;
    *psize = binn_size(obj as *mut libc::c_void);
    return binn_ptr(obj as *mut libc::c_void) as *mut libc::c_char;
}
pub unsafe extern "C" fn test_create_object_2(
    mut psize: *mut libc::c_int,
) -> *mut libc::c_char {
    let mut obj: *mut binn = 0 as *mut binn;
    let mut list: *mut binn = 0 as *mut binn;
    printf(b"creating object 2...\n\0" as *const u8 as *const libc::c_char);
    obj = binn_object();
    if !obj.is_null() {} else {
        __assert_fail(
            b"obj != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            287 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_2(int *)\0"))
                .as_ptr(),
        );
    }
    'c_9037: {
        if !obj.is_null() {} else {
            __assert_fail(
                b"obj != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                287 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_2(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_int32(
        obj,
        b"int32\0" as *const u8 as *const libc::c_char,
        -(12345 as libc::c_int),
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_int32(obj, \"int32\", -12345) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            289 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_2(int *)\0"))
                .as_ptr(),
        );
    }
    'c_8986: {
        if binn_object_set_int32(
            obj,
            b"int32\0" as *const u8 as *const libc::c_char,
            -(12345 as libc::c_int),
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_int32(obj, \"int32\", -12345) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                289 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_2(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_int16(
        obj,
        b"int16\0" as *const u8 as *const libc::c_char,
        -(258 as libc::c_int) as libc::c_short,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_int16(obj, \"int16\", -258) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            290 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_2(int *)\0"))
                .as_ptr(),
        );
    }
    'c_8933: {
        if binn_object_set_int16(
            obj,
            b"int16\0" as *const u8 as *const libc::c_char,
            -(258 as libc::c_int) as libc::c_short,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_int16(obj, \"int16\", -258) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                290 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_2(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_int8(
        obj,
        b"int8\0" as *const u8 as *const libc::c_char,
        -(120 as libc::c_int) as libc::c_schar,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_int8(obj, \"int8\", -120) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            291 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_2(int *)\0"))
                .as_ptr(),
        );
    }
    'c_8881: {
        if binn_object_set_int8(
            obj,
            b"int8\0" as *const u8 as *const libc::c_char,
            -(120 as libc::c_int) as libc::c_schar,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_int8(obj, \"int8\", -120) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                291 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_2(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_int64(
        obj,
        b"int64\0" as *const u8 as *const libc::c_char,
        -(1234567890123 as libc::c_long) as int64,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_int64(obj, \"int64\", -1234567890123) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            292 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_2(int *)\0"))
                .as_ptr(),
        );
    }
    'c_8827: {
        if binn_object_set_int64(
            obj,
            b"int64\0" as *const u8 as *const libc::c_char,
            -(1234567890123 as libc::c_long) as int64,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_int64(obj, \"int64\", -1234567890123) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                292 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_2(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_uint32(
        obj,
        b"uint32\0" as *const u8 as *const libc::c_char,
        123456 as libc::c_int as libc::c_uint,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_uint32(obj, \"uint32\", 123456) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            294 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_2(int *)\0"))
                .as_ptr(),
        );
    }
    'c_8775: {
        if binn_object_set_uint32(
            obj,
            b"uint32\0" as *const u8 as *const libc::c_char,
            123456 as libc::c_int as libc::c_uint,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_uint32(obj, \"uint32\", 123456) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                294 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_2(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_int16(
        obj,
        b"uint16\0" as *const u8 as *const libc::c_char,
        60500 as libc::c_int as libc::c_short,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_int16(obj, \"uint16\", 60500) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            295 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_2(int *)\0"))
                .as_ptr(),
        );
    }
    'c_8724: {
        if binn_object_set_int16(
            obj,
            b"uint16\0" as *const u8 as *const libc::c_char,
            60500 as libc::c_int as libc::c_short,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_int16(obj, \"uint16\", 60500) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                295 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_2(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_int8(
        obj,
        b"uint8\0" as *const u8 as *const libc::c_char,
        250 as libc::c_int as libc::c_schar,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_int8(obj, \"uint8\", 250) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            296 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_2(int *)\0"))
                .as_ptr(),
        );
    }
    'c_8673: {
        if binn_object_set_int8(
            obj,
            b"uint8\0" as *const u8 as *const libc::c_char,
            250 as libc::c_int as libc::c_schar,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_int8(obj, \"uint8\", 250) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                296 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_2(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_uint64(
        obj,
        b"uint64\0" as *const u8 as *const libc::c_char,
        1234567890123 as libc::c_long as uint64,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_uint64(obj, \"uint64\", 1234567890123) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            297 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_2(int *)\0"))
                .as_ptr(),
        );
    }
    'c_8622: {
        if binn_object_set_uint64(
            obj,
            b"uint64\0" as *const u8 as *const libc::c_char,
            1234567890123 as libc::c_long as uint64,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_uint64(obj, \"uint64\", 1234567890123) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                297 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_2(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_float(
        obj,
        b"float32\0" as *const u8 as *const libc::c_char,
        -12.345f64 as libc::c_float,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_float(obj, \"float32\", -12.345) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            299 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_2(int *)\0"))
                .as_ptr(),
        );
    }
    'c_8569: {
        if binn_object_set_float(
            obj,
            b"float32\0" as *const u8 as *const libc::c_char,
            -12.345f64 as libc::c_float,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_float(obj, \"float32\", -12.345) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                299 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_2(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    vfloat32 = -12.345f64 as libc::c_float;
    if binn_object_set(
        obj,
        b"single\0" as *const u8 as *const libc::c_char,
        0x62 as libc::c_int,
        &mut vfloat32 as *mut libc::c_float as *mut libc::c_void,
        0 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set(obj, \"single\", BINN_SINGLE, &vfloat32, 0) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            301 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_2(int *)\0"))
                .as_ptr(),
        );
    }
    'c_8508: {
        if binn_object_set(
            obj,
            b"single\0" as *const u8 as *const libc::c_char,
            0x62 as libc::c_int,
            &mut vfloat32 as *mut libc::c_float as *mut libc::c_void,
            0 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set(obj, \"single\", BINN_SINGLE, &vfloat32, 0) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                301 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_2(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_double(
        obj,
        b"float64\0" as *const u8 as *const libc::c_char,
        -123456.7895f64,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_double(obj, \"float64\", -123456.7895) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            302 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_2(int *)\0"))
                .as_ptr(),
        );
    }
    'c_8456: {
        if binn_object_set_double(
            obj,
            b"float64\0" as *const u8 as *const libc::c_char,
            -123456.7895f64,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_double(obj, \"float64\", -123456.7895) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                302 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_2(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    vfloat64 = -123456.7895f64;
    if binn_object_set(
        obj,
        b"double\0" as *const u8 as *const libc::c_char,
        0x82 as libc::c_int,
        &mut vfloat64 as *mut libc::c_double as *mut libc::c_void,
        0 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set(obj, \"double\", BINN_DOUBLE, &vfloat64, 0) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            304 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_2(int *)\0"))
                .as_ptr(),
        );
    }
    'c_8396: {
        if binn_object_set(
            obj,
            b"double\0" as *const u8 as *const libc::c_char,
            0x82 as libc::c_int,
            &mut vfloat64 as *mut libc::c_double as *mut libc::c_void,
            0 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set(obj, \"double\", BINN_DOUBLE, &vfloat64, 0) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                304 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_2(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_str(
        obj,
        b"str\0" as *const u8 as *const libc::c_char,
        b"the value\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_str(obj, \"str\", \"the value\") == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            306 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_2(int *)\0"))
                .as_ptr(),
        );
    }
    'c_8343: {
        if binn_object_set_str(
            obj,
            b"str\0" as *const u8 as *const libc::c_char,
            b"the value\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_str(obj, \"str\", \"the value\") == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                306 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_2(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_bool(
        obj,
        b"bool_true\0" as *const u8 as *const libc::c_char,
        1 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_bool(obj, \"bool_true\", TRUE) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            308 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_2(int *)\0"))
                .as_ptr(),
        );
    }
    'c_8294: {
        if binn_object_set_bool(
            obj,
            b"bool_true\0" as *const u8 as *const libc::c_char,
            1 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_bool(obj, \"bool_true\", TRUE) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                308 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_2(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_bool(
        obj,
        b"bool_false\0" as *const u8 as *const libc::c_char,
        0 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_bool(obj, \"bool_false\", FALSE) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            309 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_2(int *)\0"))
                .as_ptr(),
        );
    }
    'c_8244: {
        if binn_object_set_bool(
            obj,
            b"bool_false\0" as *const u8 as *const libc::c_char,
            0 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_bool(obj, \"bool_false\", FALSE) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                309 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_2(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_null(obj, b"null\0" as *const u8 as *const libc::c_char)
        == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_null(obj, \"null\") == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            311 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_2(int *)\0"))
                .as_ptr(),
        );
    }
    'c_8196: {
        if binn_object_set_null(obj, b"null\0" as *const u8 as *const libc::c_char)
            == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_null(obj, \"null\") == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                311 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_2(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    list = binn_list();
    if !list.is_null() {} else {
        __assert_fail(
            b"list != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            317 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_2(int *)\0"))
                .as_ptr(),
        );
    }
    'c_8149: {
        if !list.is_null() {} else {
            __assert_fail(
                b"list != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                317 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_2(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_add_null(list) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_add_null(list) == TRUE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            319 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_2(int *)\0"))
                .as_ptr(),
        );
    }
    'c_8105: {
        if binn_list_add_null(list) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_add_null(list) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                319 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_2(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_add_int32(list, 123 as libc::c_int) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_add_int32(list, 123) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            320 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_2(int *)\0"))
                .as_ptr(),
        );
    }
    'c_8059: {
        if binn_list_add_int32(list, 123 as libc::c_int) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_add_int32(list, 123) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                320 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_2(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_add_str(
        list,
        b"this is a string\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_list_add_str(list, \"this is a string\") == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            321 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_2(int *)\0"))
                .as_ptr(),
        );
    }
    'c_8010: {
        if binn_list_add_str(
            list,
            b"this is a string\0" as *const u8 as *const libc::c_char
                as *mut libc::c_char,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_list_add_str(list, \"this is a string\") == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                321 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_2(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_list(
        obj,
        b"list\0" as *const u8 as *const libc::c_char,
        list as *mut libc::c_void,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_list(obj, \"list\", list) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            323 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 34],
                &[libc::c_char; 34],
            >(b"char *test_create_object_2(int *)\0"))
                .as_ptr(),
        );
    }
    'c_7957: {
        if binn_object_set_list(
            obj,
            b"list\0" as *const u8 as *const libc::c_char,
            list as *mut libc::c_void,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_list(obj, \"list\", list) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                323 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 34],
                    &[libc::c_char; 34],
                >(b"char *test_create_object_2(int *)\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(list);
    list = 0 as *mut binn;
    *psize = binn_size(obj as *mut libc::c_void);
    return binn_ptr(obj as *mut libc::c_void) as *mut libc::c_char;
}
pub unsafe extern "C" fn test_binn_read(mut objptr: *mut libc::c_void) {
    let mut listptr: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut ptr: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut value: binn = {
        let mut init = binn_struct {
            header: 0 as libc::c_int,
            allocated: 0,
            writable: 0,
            dirty: 0,
            pbuf: 0 as *mut libc::c_void,
            pre_allocated: 0,
            alloc_size: 0,
            used_size: 0,
            type_0: 0,
            ptr: 0 as *mut libc::c_void,
            size: 0,
            count: 0,
            freefn: None,
            c2rust_unnamed: C2RustUnnamed { vint8: 0 },
            disable_int_compression: 0,
        };
        init
    };
    printf(b"OK\nreading:\n\0" as *const u8 as *const libc::c_char);
    vint32 = 0 as libc::c_int;
    if binn_object_get(
        objptr,
        b"int32\0" as *const u8 as *const libc::c_char,
        0x61 as libc::c_int,
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        0 as *mut libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get(objptr, \"int32\", BINN_INT32, &vint32, NULL) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            345 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_15408: {
        if binn_object_get(
            objptr,
            b"int32\0" as *const u8 as *const libc::c_char,
            0x61 as libc::c_int,
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            0 as *mut libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get(objptr, \"int32\", BINN_INT32, &vint32, NULL) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                345 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(b"int32: %d\n\0" as *const u8 as *const libc::c_char, vint32);
    if vint32 == -(12345 as libc::c_int) {} else {
        __assert_fail(
            b"vint32 == -12345\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            347 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_15363: {
        if vint32 == -(12345 as libc::c_int) {} else {
            __assert_fail(
                b"vint32 == -12345\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                347 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vint16 = 0 as libc::c_int as libc::c_short;
    if binn_object_get(
        objptr,
        b"int16\0" as *const u8 as *const libc::c_char,
        0x41 as libc::c_int,
        &mut vint16 as *mut libc::c_short as *mut libc::c_void,
        0 as *mut libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get(objptr, \"int16\", BINN_INT16, &vint16, NULL) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            350 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_15297: {
        if binn_object_get(
            objptr,
            b"int16\0" as *const u8 as *const libc::c_char,
            0x41 as libc::c_int,
            &mut vint16 as *mut libc::c_short as *mut libc::c_void,
            0 as *mut libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get(objptr, \"int16\", BINN_INT16, &vint16, NULL) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                350 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(b"int16: %d\n\0" as *const u8 as *const libc::c_char, vint16 as libc::c_int);
    if vint16 as libc::c_int == -(258 as libc::c_int) {} else {
        __assert_fail(
            b"vint16 == -258\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            352 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_15249: {
        if vint16 as libc::c_int == -(258 as libc::c_int) {} else {
            __assert_fail(
                b"vint16 == -258\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                352 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vint8 = 0 as libc::c_int as libc::c_schar;
    if binn_object_get(
        objptr,
        b"int8\0" as *const u8 as *const libc::c_char,
        0x21 as libc::c_int,
        &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
        0 as *mut libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get(objptr, \"int8\", BINN_INT8, &vint8, NULL) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            355 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_15183: {
        if binn_object_get(
            objptr,
            b"int8\0" as *const u8 as *const libc::c_char,
            0x21 as libc::c_int,
            &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
            0 as *mut libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get(objptr, \"int8\", BINN_INT8, &vint8, NULL) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                355 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(b"int8: %d\n\0" as *const u8 as *const libc::c_char, vint8 as libc::c_int);
    if vint8 as libc::c_int == -(120 as libc::c_int) {} else {
        __assert_fail(
            b"vint8 == -120\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            357 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_15135: {
        if vint8 as libc::c_int == -(120 as libc::c_int) {} else {
            __assert_fail(
                b"vint8 == -120\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                357 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vint64 = 0 as libc::c_int as int64;
    if binn_object_get(
        objptr,
        b"int64\0" as *const u8 as *const libc::c_char,
        0x81 as libc::c_int,
        &mut vint64 as *mut int64 as *mut libc::c_void,
        0 as *mut libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get(objptr, \"int64\", BINN_INT64, &vint64, NULL) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            360 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_15069: {
        if binn_object_get(
            objptr,
            b"int64\0" as *const u8 as *const libc::c_char,
            0x81 as libc::c_int,
            &mut vint64 as *mut int64 as *mut libc::c_void,
            0 as *mut libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get(objptr, \"int64\", BINN_INT64, &vint64, NULL) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                360 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(b"int64: %lli\n\0" as *const u8 as *const libc::c_char, vint64);
    if vint64 == -(1234567890123 as libc::c_long) as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == -1234567890123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            362 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_15022: {
        if vint64 == -(1234567890123 as libc::c_long) as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == -1234567890123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                362 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vuint32 = 0 as libc::c_int as libc::c_uint;
    if binn_object_get(
        objptr,
        b"uint32\0" as *const u8 as *const libc::c_char,
        0x60 as libc::c_int,
        &mut vuint32 as *mut libc::c_uint as *mut libc::c_void,
        0 as *mut libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get(objptr, \"uint32\", BINN_UINT32, &vuint32, NULL) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            366 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_14956: {
        if binn_object_get(
            objptr,
            b"uint32\0" as *const u8 as *const libc::c_char,
            0x60 as libc::c_int,
            &mut vuint32 as *mut libc::c_uint as *mut libc::c_void,
            0 as *mut libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get(objptr, \"uint32\", BINN_UINT32, &vuint32, NULL) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                366 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(b"uint32: %d\n\0" as *const u8 as *const libc::c_char, vuint32);
    if vuint32 == 123456 as libc::c_int as libc::c_uint {} else {
        __assert_fail(
            b"vuint32 == 123456\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            368 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_14911: {
        if vuint32 == 123456 as libc::c_int as libc::c_uint {} else {
            __assert_fail(
                b"vuint32 == 123456\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                368 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vuint16 = 0 as libc::c_int as libc::c_ushort;
    if binn_object_get(
        objptr,
        b"uint16\0" as *const u8 as *const libc::c_char,
        0x40 as libc::c_int,
        &mut vuint16 as *mut libc::c_ushort as *mut libc::c_void,
        0 as *mut libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get(objptr, \"uint16\", BINN_UINT16, &vuint16, NULL) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            371 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_14845: {
        if binn_object_get(
            objptr,
            b"uint16\0" as *const u8 as *const libc::c_char,
            0x40 as libc::c_int,
            &mut vuint16 as *mut libc::c_ushort as *mut libc::c_void,
            0 as *mut libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get(objptr, \"uint16\", BINN_UINT16, &vuint16, NULL) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                371 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(
        b"uint16: %d\n\0" as *const u8 as *const libc::c_char,
        vuint16 as libc::c_int,
    );
    if vuint16 as libc::c_int == 60500 as libc::c_int {} else {
        __assert_fail(
            b"vuint16 == 60500\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            373 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_14799: {
        if vuint16 as libc::c_int == 60500 as libc::c_int {} else {
            __assert_fail(
                b"vuint16 == 60500\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                373 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vuint8 = 0 as libc::c_int as libc::c_uchar;
    if binn_object_get(
        objptr,
        b"uint8\0" as *const u8 as *const libc::c_char,
        0x20 as libc::c_int,
        &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
        0 as *mut libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get(objptr, \"uint8\", BINN_UINT8, &vuint8, NULL) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            376 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_14733: {
        if binn_object_get(
            objptr,
            b"uint8\0" as *const u8 as *const libc::c_char,
            0x20 as libc::c_int,
            &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
            0 as *mut libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get(objptr, \"uint8\", BINN_UINT8, &vuint8, NULL) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                376 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(b"uint8: %d\n\0" as *const u8 as *const libc::c_char, vuint8 as libc::c_int);
    if vuint8 as libc::c_int == 250 as libc::c_int {} else {
        __assert_fail(
            b"vuint8 == 250\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            378 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_14687: {
        if vuint8 as libc::c_int == 250 as libc::c_int {} else {
            __assert_fail(
                b"vuint8 == 250\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                378 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vuint64 = 0 as libc::c_int as uint64;
    if binn_object_get(
        objptr,
        b"uint64\0" as *const u8 as *const libc::c_char,
        0x80 as libc::c_int,
        &mut vuint64 as *mut uint64 as *mut libc::c_void,
        0 as *mut libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get(objptr, \"uint64\", BINN_UINT64, &vuint64, NULL) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            381 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_14621: {
        if binn_object_get(
            objptr,
            b"uint64\0" as *const u8 as *const libc::c_char,
            0x80 as libc::c_int,
            &mut vuint64 as *mut uint64 as *mut libc::c_void,
            0 as *mut libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get(objptr, \"uint64\", BINN_UINT64, &vuint64, NULL) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                381 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(b"uint64: %llu\n\0" as *const u8 as *const libc::c_char, vuint64);
    if vuint64 == 1234567890123 as libc::c_long as libc::c_ulonglong {} else {
        __assert_fail(
            b"vuint64 == 1234567890123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            383 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_14576: {
        if vuint64 == 1234567890123 as libc::c_long as libc::c_ulonglong {} else {
            __assert_fail(
                b"vuint64 == 1234567890123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                383 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vfloat32 = 0 as libc::c_int as libc::c_float;
    if binn_object_get(
        objptr,
        b"float32\0" as *const u8 as *const libc::c_char,
        0x62 as libc::c_int,
        &mut vfloat32 as *mut libc::c_float as *mut libc::c_void,
        0 as *mut libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get(objptr, \"float32\", BINN_FLOAT32, &vfloat32, NULL) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            387 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_14510: {
        if binn_object_get(
            objptr,
            b"float32\0" as *const u8 as *const libc::c_char,
            0x62 as libc::c_int,
            &mut vfloat32 as *mut libc::c_float as *mut libc::c_void,
            0 as *mut libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get(objptr, \"float32\", BINN_FLOAT32, &vfloat32, NULL) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                387 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(
        b"float32: %f\n\0" as *const u8 as *const libc::c_char,
        vfloat32 as libc::c_double,
    );
    if AlmostEqualFloats(vfloat32, -12.345f64 as libc::c_float, 2 as libc::c_int)
        == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"AlmostEqualFloats(vfloat32, -12.345, 2) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            389 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_14452: {
        if AlmostEqualFloats(vfloat32, -12.345f64 as libc::c_float, 2 as libc::c_int)
            == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"AlmostEqualFloats(vfloat32, -12.345, 2) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                389 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vfloat64 = 0 as libc::c_int as libc::c_double;
    if binn_object_get(
        objptr,
        b"float64\0" as *const u8 as *const libc::c_char,
        0x82 as libc::c_int,
        &mut vfloat64 as *mut libc::c_double as *mut libc::c_void,
        0 as *mut libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get(objptr, \"float64\", BINN_FLOAT64, &vfloat64, NULL) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            392 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_14385: {
        if binn_object_get(
            objptr,
            b"float64\0" as *const u8 as *const libc::c_char,
            0x82 as libc::c_int,
            &mut vfloat64 as *mut libc::c_double as *mut libc::c_void,
            0 as *mut libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get(objptr, \"float64\", BINN_FLOAT64, &vfloat64, NULL) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                392 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(b"float64: %f\n\0" as *const u8 as *const libc::c_char, vfloat64);
    if vfloat64 - -123456.7895f64 < 0.01f64 {} else {
        __assert_fail(
            b"vfloat64 - -123456.7895 < 0.01\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            394 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_14336: {
        if vfloat64 - -123456.7895f64 < 0.01f64 {} else {
            __assert_fail(
                b"vfloat64 - -123456.7895 < 0.01\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                394 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vfloat32 = 0 as libc::c_int as libc::c_float;
    if binn_object_get(
        objptr,
        b"single\0" as *const u8 as *const libc::c_char,
        0x62 as libc::c_int,
        &mut vfloat32 as *mut libc::c_float as *mut libc::c_void,
        0 as *mut libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get(objptr, \"single\", BINN_SINGLE, &vfloat32, NULL) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            397 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_14270: {
        if binn_object_get(
            objptr,
            b"single\0" as *const u8 as *const libc::c_char,
            0x62 as libc::c_int,
            &mut vfloat32 as *mut libc::c_float as *mut libc::c_void,
            0 as *mut libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get(objptr, \"single\", BINN_SINGLE, &vfloat32, NULL) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                397 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(
        b"single: %f\n\0" as *const u8 as *const libc::c_char,
        vfloat32 as libc::c_double,
    );
    if AlmostEqualFloats(vfloat32, -12.345f64 as libc::c_float, 2 as libc::c_int)
        == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"AlmostEqualFloats(vfloat32, -12.345, 2) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            399 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_14212: {
        if AlmostEqualFloats(vfloat32, -12.345f64 as libc::c_float, 2 as libc::c_int)
            == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"AlmostEqualFloats(vfloat32, -12.345, 2) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                399 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vfloat64 = 0 as libc::c_int as libc::c_double;
    if binn_object_get(
        objptr,
        b"double\0" as *const u8 as *const libc::c_char,
        0x82 as libc::c_int,
        &mut vfloat64 as *mut libc::c_double as *mut libc::c_void,
        0 as *mut libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get(objptr, \"double\", BINN_DOUBLE, &vfloat64, NULL) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            402 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_14146: {
        if binn_object_get(
            objptr,
            b"double\0" as *const u8 as *const libc::c_char,
            0x82 as libc::c_int,
            &mut vfloat64 as *mut libc::c_double as *mut libc::c_void,
            0 as *mut libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get(objptr, \"double\", BINN_DOUBLE, &vfloat64, NULL) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                402 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(b"double: %f\n\0" as *const u8 as *const libc::c_char, vfloat64);
    if vfloat64 - -123456.7895f64 < 0.01f64 {} else {
        __assert_fail(
            b"vfloat64 - -123456.7895 < 0.01\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            404 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_14097: {
        if vfloat64 - -123456.7895f64 < 0.01f64 {} else {
            __assert_fail(
                b"vfloat64 - -123456.7895 < 0.01\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                404 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    ptr = 0 as *mut libc::c_char;
    if binn_object_get(
        objptr,
        b"str\0" as *const u8 as *const libc::c_char,
        0xa0 as libc::c_int,
        &mut ptr as *mut *mut libc::c_char as *mut libc::c_void,
        0 as *mut libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get(objptr, \"str\", BINN_STRING, &ptr, NULL) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            408 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_14031: {
        if binn_object_get(
            objptr,
            b"str\0" as *const u8 as *const libc::c_char,
            0xa0 as libc::c_int,
            &mut ptr as *mut *mut libc::c_char as *mut libc::c_void,
            0 as *mut libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get(objptr, \"str\", BINN_STRING, &ptr, NULL) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                408 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(b"ptr: (%p) '%s'\n\0" as *const u8 as *const libc::c_char, ptr, ptr);
    if strcmp(ptr, b"the value\0" as *const u8 as *const libc::c_char)
        == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp(ptr, \"the value\") == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            410 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_13974: {
        if strcmp(ptr, b"the value\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp(ptr, \"the value\") == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                410 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = 999 as libc::c_int;
    if binn_object_get(
        objptr,
        b"bool_true\0" as *const u8 as *const libc::c_char,
        0x80061 as libc::c_int,
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        0 as *mut libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get(objptr, \"bool_true\", BINN_BOOL, &vint32, NULL) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            414 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_13908: {
        if binn_object_get(
            objptr,
            b"bool_true\0" as *const u8 as *const libc::c_char,
            0x80061 as libc::c_int,
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            0 as *mut libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get(objptr, \"bool_true\", BINN_BOOL, &vint32, NULL) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                414 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(b"bool true: %d\n\0" as *const u8 as *const libc::c_char, vint32);
    if vint32 == 1 as libc::c_int {} else {
        __assert_fail(
            b"vint32 == TRUE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            416 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_13865: {
        if vint32 == 1 as libc::c_int {} else {
            __assert_fail(
                b"vint32 == TRUE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                416 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = 999 as libc::c_int;
    if binn_object_get(
        objptr,
        b"bool_false\0" as *const u8 as *const libc::c_char,
        0x80061 as libc::c_int,
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        0 as *mut libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get(objptr, \"bool_false\", BINN_BOOL, &vint32, NULL) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            419 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_13799: {
        if binn_object_get(
            objptr,
            b"bool_false\0" as *const u8 as *const libc::c_char,
            0x80061 as libc::c_int,
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            0 as *mut libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get(objptr, \"bool_false\", BINN_BOOL, &vint32, NULL) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                419 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(b"bool false: %d\n\0" as *const u8 as *const libc::c_char, vint32);
    if vint32 == 0 as libc::c_int {} else {
        __assert_fail(
            b"vint32 == FALSE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            421 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_13756: {
        if vint32 == 0 as libc::c_int {} else {
            __assert_fail(
                b"vint32 == FALSE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                421 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = 999 as libc::c_int;
    if binn_object_get(
        objptr,
        b"null\0" as *const u8 as *const libc::c_char,
        0 as libc::c_int,
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        0 as *mut libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get(objptr, \"null\", BINN_NULL, &vint32, NULL) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            425 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_13691: {
        if binn_object_get(
            objptr,
            b"null\0" as *const u8 as *const libc::c_char,
            0 as libc::c_int,
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            0 as *mut libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get(objptr, \"null\", BINN_NULL, &vint32, NULL) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                425 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(b"null: %d\n\0" as *const u8 as *const libc::c_char, vint32);
    if binn_object_get(
        objptr,
        b"null\0" as *const u8 as *const libc::c_char,
        0 as libc::c_int,
        0 as *mut libc::c_void,
        0 as *mut libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get(objptr, \"null\", BINN_NULL, NULL, NULL) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            428 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_13621: {
        if binn_object_get(
            objptr,
            b"null\0" as *const u8 as *const libc::c_char,
            0 as libc::c_int,
            0 as *mut libc::c_void,
            0 as *mut libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get(objptr, \"null\", BINN_NULL, NULL, NULL) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                428 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_get(
        objptr,
        b"list\0" as *const u8 as *const libc::c_char,
        0xe0 as libc::c_int,
        &mut listptr as *mut *mut libc::c_void as *mut libc::c_void,
        0 as *mut libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get(objptr, \"list\", BINN_LIST, &listptr, NULL) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            431 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_13558: {
        if binn_object_get(
            objptr,
            b"list\0" as *const u8 as *const libc::c_char,
            0xe0 as libc::c_int,
            &mut listptr as *mut *mut libc::c_void as *mut libc::c_void,
            0 as *mut libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get(objptr, \"list\", BINN_LIST, &listptr, NULL) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                431 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(
        b"obj ptr: %p  list ptr: %p\n\0" as *const u8 as *const libc::c_char,
        objptr,
        listptr,
    );
    if !listptr.is_null() {} else {
        __assert_fail(
            b"listptr != 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            433 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_13511: {
        if !listptr.is_null() {} else {
            __assert_fail(
                b"listptr != 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                433 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    if listptr > objptr {} else {
        __assert_fail(
            b"listptr > objptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            434 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_13473: {
        if listptr > objptr {} else {
            __assert_fail(
                b"listptr > objptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                434 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = 0 as libc::c_int;
    if binn_list_get(
        listptr,
        2 as libc::c_int,
        0x61 as libc::c_int,
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        0 as *mut libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_list_get(listptr, 2, BINN_INT32, &vint32, NULL) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            437 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_13410: {
        if binn_list_get(
            listptr,
            2 as libc::c_int,
            0x61 as libc::c_int,
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            0 as *mut libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_list_get(listptr, 2, BINN_INT32, &vint32, NULL) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                437 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(b"int32: %d\n\0" as *const u8 as *const libc::c_char, vint32);
    if vint32 == 123 as libc::c_int {} else {
        __assert_fail(
            b"vint32 == 123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            439 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_13367: {
        if vint32 == 123 as libc::c_int {} else {
            __assert_fail(
                b"vint32 == 123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                439 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    ptr = 0 as *mut libc::c_char;
    if binn_list_get(
        listptr,
        3 as libc::c_int,
        0xa0 as libc::c_int,
        &mut ptr as *mut *mut libc::c_char as *mut libc::c_void,
        0 as *mut libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_list_get(listptr, 3, BINN_STRING, &ptr, NULL) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            442 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_13303: {
        if binn_list_get(
            listptr,
            3 as libc::c_int,
            0xa0 as libc::c_int,
            &mut ptr as *mut *mut libc::c_char as *mut libc::c_void,
            0 as *mut libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_list_get(listptr, 3, BINN_STRING, &ptr, NULL) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                442 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(b"ptr: (%p) '%s'\n\0" as *const u8 as *const libc::c_char, ptr, ptr);
    if strcmp(ptr, b"this is a string\0" as *const u8 as *const libc::c_char)
        == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp(ptr, \"this is a string\") == 0\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            444 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_13246: {
        if strcmp(ptr, b"this is a string\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp(ptr, \"this is a string\") == 0\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                444 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = 0 as libc::c_int;
    if binn_object_get_int32(
        objptr,
        b"int32\0" as *const u8 as *const libc::c_char,
        &mut vint32,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get_int32(objptr, \"int32\", &vint32) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            452 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_13192: {
        if binn_object_get_int32(
            objptr,
            b"int32\0" as *const u8 as *const libc::c_char,
            &mut vint32,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get_int32(objptr, \"int32\", &vint32) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                452 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(b"int32: %d\n\0" as *const u8 as *const libc::c_char, vint32);
    if vint32 == -(12345 as libc::c_int) {} else {
        __assert_fail(
            b"vint32 == -12345\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            454 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_13147: {
        if vint32 == -(12345 as libc::c_int) {} else {
            __assert_fail(
                b"vint32 == -12345\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                454 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vint16 = 0 as libc::c_int as libc::c_short;
    if binn_object_get_int16(
        objptr,
        b"int16\0" as *const u8 as *const libc::c_char,
        &mut vint16,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get_int16(objptr, \"int16\", &vint16) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            457 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_13092: {
        if binn_object_get_int16(
            objptr,
            b"int16\0" as *const u8 as *const libc::c_char,
            &mut vint16,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get_int16(objptr, \"int16\", &vint16) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                457 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(b"int16: %d\n\0" as *const u8 as *const libc::c_char, vint16 as libc::c_int);
    if vint16 as libc::c_int == -(258 as libc::c_int) {} else {
        __assert_fail(
            b"vint16 == -258\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            459 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_13044: {
        if vint16 as libc::c_int == -(258 as libc::c_int) {} else {
            __assert_fail(
                b"vint16 == -258\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                459 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vint8 = 0 as libc::c_int as libc::c_schar;
    if binn_object_get_int8(
        objptr,
        b"int8\0" as *const u8 as *const libc::c_char,
        &mut vint8,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get_int8(objptr, \"int8\", &vint8) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            462 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_12989: {
        if binn_object_get_int8(
            objptr,
            b"int8\0" as *const u8 as *const libc::c_char,
            &mut vint8,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get_int8(objptr, \"int8\", &vint8) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                462 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(b"int8: %d\n\0" as *const u8 as *const libc::c_char, vint8 as libc::c_int);
    if vint8 as libc::c_int == -(120 as libc::c_int) {} else {
        __assert_fail(
            b"vint8 == -120\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            464 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_12941: {
        if vint8 as libc::c_int == -(120 as libc::c_int) {} else {
            __assert_fail(
                b"vint8 == -120\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                464 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vint64 = 0 as libc::c_int as int64;
    if binn_object_get_int64(
        objptr,
        b"int64\0" as *const u8 as *const libc::c_char,
        &mut vint64,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get_int64(objptr, \"int64\", &vint64) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            467 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_12886: {
        if binn_object_get_int64(
            objptr,
            b"int64\0" as *const u8 as *const libc::c_char,
            &mut vint64,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get_int64(objptr, \"int64\", &vint64) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                467 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(b"int64: %lli\n\0" as *const u8 as *const libc::c_char, vint64);
    if vint64 == -(1234567890123 as libc::c_long) as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == -1234567890123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            469 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_12839: {
        if vint64 == -(1234567890123 as libc::c_long) as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == -1234567890123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                469 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vuint32 = 0 as libc::c_int as libc::c_uint;
    if binn_object_get_uint32(
        objptr,
        b"uint32\0" as *const u8 as *const libc::c_char,
        &mut vuint32,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get_uint32(objptr, \"uint32\", &vuint32) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            473 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_12784: {
        if binn_object_get_uint32(
            objptr,
            b"uint32\0" as *const u8 as *const libc::c_char,
            &mut vuint32,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get_uint32(objptr, \"uint32\", &vuint32) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                473 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(b"uint32: %d\n\0" as *const u8 as *const libc::c_char, vuint32);
    if vuint32 == 123456 as libc::c_int as libc::c_uint {} else {
        __assert_fail(
            b"vuint32 == 123456\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            475 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_12739: {
        if vuint32 == 123456 as libc::c_int as libc::c_uint {} else {
            __assert_fail(
                b"vuint32 == 123456\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                475 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vuint16 = 0 as libc::c_int as libc::c_ushort;
    if binn_object_get_uint16(
        objptr,
        b"uint16\0" as *const u8 as *const libc::c_char,
        &mut vuint16,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get_uint16(objptr, \"uint16\", &vuint16) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            478 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_12684: {
        if binn_object_get_uint16(
            objptr,
            b"uint16\0" as *const u8 as *const libc::c_char,
            &mut vuint16,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get_uint16(objptr, \"uint16\", &vuint16) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                478 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(
        b"uint16: %d\n\0" as *const u8 as *const libc::c_char,
        vuint16 as libc::c_int,
    );
    if vuint16 as libc::c_int == 60500 as libc::c_int {} else {
        __assert_fail(
            b"vuint16 == 60500\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            480 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_12638: {
        if vuint16 as libc::c_int == 60500 as libc::c_int {} else {
            __assert_fail(
                b"vuint16 == 60500\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                480 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vuint8 = 0 as libc::c_int as libc::c_uchar;
    if binn_object_get_uint8(
        objptr,
        b"uint8\0" as *const u8 as *const libc::c_char,
        &mut vuint8,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get_uint8(objptr, \"uint8\", &vuint8) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            483 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_12583: {
        if binn_object_get_uint8(
            objptr,
            b"uint8\0" as *const u8 as *const libc::c_char,
            &mut vuint8,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get_uint8(objptr, \"uint8\", &vuint8) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                483 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(b"uint8: %d\n\0" as *const u8 as *const libc::c_char, vuint8 as libc::c_int);
    if vuint8 as libc::c_int == 250 as libc::c_int {} else {
        __assert_fail(
            b"vuint8 == 250\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            485 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_12537: {
        if vuint8 as libc::c_int == 250 as libc::c_int {} else {
            __assert_fail(
                b"vuint8 == 250\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                485 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vuint64 = 0 as libc::c_int as uint64;
    if binn_object_get_uint64(
        objptr,
        b"uint64\0" as *const u8 as *const libc::c_char,
        &mut vuint64,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get_uint64(objptr, \"uint64\", &vuint64) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            488 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_12482: {
        if binn_object_get_uint64(
            objptr,
            b"uint64\0" as *const u8 as *const libc::c_char,
            &mut vuint64,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get_uint64(objptr, \"uint64\", &vuint64) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                488 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(b"uint64: %llu\n\0" as *const u8 as *const libc::c_char, vuint64);
    if vuint64 == 1234567890123 as libc::c_long as libc::c_ulonglong {} else {
        __assert_fail(
            b"vuint64 == 1234567890123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            490 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_12437: {
        if vuint64 == 1234567890123 as libc::c_long as libc::c_ulonglong {} else {
            __assert_fail(
                b"vuint64 == 1234567890123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                490 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vfloat32 = 0 as libc::c_int as libc::c_float;
    if binn_object_get_float(
        objptr,
        b"float32\0" as *const u8 as *const libc::c_char,
        &mut vfloat32,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get_float(objptr, \"float32\", &vfloat32) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            494 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_12382: {
        if binn_object_get_float(
            objptr,
            b"float32\0" as *const u8 as *const libc::c_char,
            &mut vfloat32,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get_float(objptr, \"float32\", &vfloat32) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                494 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(
        b"float32: %f\n\0" as *const u8 as *const libc::c_char,
        vfloat32 as libc::c_double,
    );
    if AlmostEqualFloats(vfloat32, -12.345f64 as libc::c_float, 2 as libc::c_int)
        == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"AlmostEqualFloats(vfloat32, -12.345, 2) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            496 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_12324: {
        if AlmostEqualFloats(vfloat32, -12.345f64 as libc::c_float, 2 as libc::c_int)
            == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"AlmostEqualFloats(vfloat32, -12.345, 2) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                496 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vfloat64 = 0 as libc::c_int as libc::c_double;
    if binn_object_get_double(
        objptr,
        b"float64\0" as *const u8 as *const libc::c_char,
        &mut vfloat64,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get_double(objptr, \"float64\", &vfloat64) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            499 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_12269: {
        if binn_object_get_double(
            objptr,
            b"float64\0" as *const u8 as *const libc::c_char,
            &mut vfloat64,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get_double(objptr, \"float64\", &vfloat64) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                499 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(b"float64: %f\n\0" as *const u8 as *const libc::c_char, vfloat64);
    if AlmostEqualFloats(vfloat32, -12.345f64 as libc::c_float, 2 as libc::c_int)
        == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"AlmostEqualFloats(vfloat32, -12.345, 2) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            501 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_12212: {
        if AlmostEqualFloats(vfloat32, -12.345f64 as libc::c_float, 2 as libc::c_int)
            == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"AlmostEqualFloats(vfloat32, -12.345, 2) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                501 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    ptr = 0 as *mut libc::c_char;
    if binn_object_get_str(
        objptr,
        b"str\0" as *const u8 as *const libc::c_char,
        &mut ptr,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get_str(objptr, \"str\", &ptr) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            505 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_12157: {
        if binn_object_get_str(
            objptr,
            b"str\0" as *const u8 as *const libc::c_char,
            &mut ptr,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get_str(objptr, \"str\", &ptr) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                505 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(b"ptr: (%p) '%s'\n\0" as *const u8 as *const libc::c_char, ptr, ptr);
    if strcmp(ptr, b"the value\0" as *const u8 as *const libc::c_char)
        == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp(ptr, \"the value\") == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            507 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_12100: {
        if strcmp(ptr, b"the value\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp(ptr, \"the value\") == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                507 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = 999 as libc::c_int;
    if binn_object_get_bool(
        objptr,
        b"bool_true\0" as *const u8 as *const libc::c_char,
        &mut vint32,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get_bool(objptr, \"bool_true\", &vint32) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            511 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_12047: {
        if binn_object_get_bool(
            objptr,
            b"bool_true\0" as *const u8 as *const libc::c_char,
            &mut vint32,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get_bool(objptr, \"bool_true\", &vint32) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                511 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(b"bool true: %d\n\0" as *const u8 as *const libc::c_char, vint32);
    if vint32 == 1 as libc::c_int {} else {
        __assert_fail(
            b"vint32 == TRUE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            513 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_12004: {
        if vint32 == 1 as libc::c_int {} else {
            __assert_fail(
                b"vint32 == TRUE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                513 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = 999 as libc::c_int;
    if binn_object_get_bool(
        objptr,
        b"bool_false\0" as *const u8 as *const libc::c_char,
        &mut vint32,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get_bool(objptr, \"bool_false\", &vint32) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            516 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_11950: {
        if binn_object_get_bool(
            objptr,
            b"bool_false\0" as *const u8 as *const libc::c_char,
            &mut vint32,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get_bool(objptr, \"bool_false\", &vint32) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                516 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(b"bool false: %d\n\0" as *const u8 as *const libc::c_char, vint32);
    if vint32 == 0 as libc::c_int {} else {
        __assert_fail(
            b"vint32 == FALSE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            518 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_11907: {
        if vint32 == 0 as libc::c_int {} else {
            __assert_fail(
                b"vint32 == FALSE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                518 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vbool = 0 as libc::c_int;
    if binn_object_null(objptr, b"null\0" as *const u8 as *const libc::c_char)
        == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_null(objptr, \"null\") == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            522 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_11858: {
        if binn_object_null(objptr, b"null\0" as *const u8 as *const libc::c_char)
            == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_null(objptr, \"null\") == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                522 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_null(objptr, b"bool_true\0" as *const u8 as *const libc::c_char)
        == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_null(objptr, \"bool_true\") == FALSE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            524 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_11811: {
        if binn_object_null(objptr, b"bool_true\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_null(objptr, \"bool_true\") == FALSE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                524 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_get_list(
        objptr,
        b"list\0" as *const u8 as *const libc::c_char,
        &mut listptr,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get_list(objptr, \"list\", &listptr) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            527 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_11760: {
        if binn_object_get_list(
            objptr,
            b"list\0" as *const u8 as *const libc::c_char,
            &mut listptr,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get_list(objptr, \"list\", &listptr) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                527 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(
        b"obj ptr: %p  list ptr: %p\n\0" as *const u8 as *const libc::c_char,
        objptr,
        listptr,
    );
    if !listptr.is_null() {} else {
        __assert_fail(
            b"listptr != 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            529 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_11713: {
        if !listptr.is_null() {} else {
            __assert_fail(
                b"listptr != 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                529 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    if listptr > objptr {} else {
        __assert_fail(
            b"listptr > objptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            530 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_11675: {
        if listptr > objptr {} else {
            __assert_fail(
                b"listptr > objptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                530 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = 0 as libc::c_int;
    if binn_list_get_int32(listptr, 2 as libc::c_int, &mut vint32) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_list_get_int32(listptr, 2, &vint32) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            533 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_11622: {
        if binn_list_get_int32(listptr, 2 as libc::c_int, &mut vint32)
            == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_list_get_int32(listptr, 2, &vint32) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                533 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(b"int32: %d\n\0" as *const u8 as *const libc::c_char, vint32);
    if vint32 == 123 as libc::c_int {} else {
        __assert_fail(
            b"vint32 == 123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            535 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_11579: {
        if vint32 == 123 as libc::c_int {} else {
            __assert_fail(
                b"vint32 == 123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                535 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    ptr = 0 as *mut libc::c_char;
    if binn_list_get_str(listptr, 3 as libc::c_int, &mut ptr) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_list_get_str(listptr, 3, &ptr) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            538 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_11526: {
        if binn_list_get_str(listptr, 3 as libc::c_int, &mut ptr) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_list_get_str(listptr, 3, &ptr) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                538 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    printf(b"ptr: (%p) '%s'\n\0" as *const u8 as *const libc::c_char, ptr, ptr);
    if strcmp(ptr, b"this is a string\0" as *const u8 as *const libc::c_char)
        == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp(ptr, \"this is a string\") == 0\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            540 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_11469: {
        if strcmp(ptr, b"this is a string\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp(ptr, \"this is a string\") == 0\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                540 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = binn_object_int32(objptr, b"int32\0" as *const u8 as *const libc::c_char);
    printf(b"int32: %d\n\0" as *const u8 as *const libc::c_char, vint32);
    if vint32 == -(12345 as libc::c_int) {} else {
        __assert_fail(
            b"vint32 == -12345\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            549 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_11414: {
        if vint32 == -(12345 as libc::c_int) {} else {
            __assert_fail(
                b"vint32 == -12345\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                549 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vint16 = binn_object_int16(objptr, b"int16\0" as *const u8 as *const libc::c_char);
    printf(b"int16: %d\n\0" as *const u8 as *const libc::c_char, vint16 as libc::c_int);
    if vint16 as libc::c_int == -(258 as libc::c_int) {} else {
        __assert_fail(
            b"vint16 == -258\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            553 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_11356: {
        if vint16 as libc::c_int == -(258 as libc::c_int) {} else {
            __assert_fail(
                b"vint16 == -258\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                553 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vint8 = binn_object_int8(objptr, b"int8\0" as *const u8 as *const libc::c_char);
    printf(b"int8: %d\n\0" as *const u8 as *const libc::c_char, vint8 as libc::c_int);
    if vint8 as libc::c_int == -(120 as libc::c_int) {} else {
        __assert_fail(
            b"vint8 == -120\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            557 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_11298: {
        if vint8 as libc::c_int == -(120 as libc::c_int) {} else {
            __assert_fail(
                b"vint8 == -120\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                557 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vint64 = binn_object_int64(objptr, b"int64\0" as *const u8 as *const libc::c_char);
    printf(b"int64: %lli\n\0" as *const u8 as *const libc::c_char, vint64);
    if vint64 == -(1234567890123 as libc::c_long) as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == -1234567890123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            561 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_11241: {
        if vint64 == -(1234567890123 as libc::c_long) as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == -1234567890123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                561 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vuint32 = binn_object_uint32(
        objptr,
        b"uint32\0" as *const u8 as *const libc::c_char,
    );
    printf(b"uint32: %d\n\0" as *const u8 as *const libc::c_char, vuint32);
    if vuint32 == 123456 as libc::c_int as libc::c_uint {} else {
        __assert_fail(
            b"vuint32 == 123456\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            566 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_11186: {
        if vuint32 == 123456 as libc::c_int as libc::c_uint {} else {
            __assert_fail(
                b"vuint32 == 123456\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                566 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vuint16 = binn_object_uint16(
        objptr,
        b"uint16\0" as *const u8 as *const libc::c_char,
    );
    printf(
        b"uint16: %d\n\0" as *const u8 as *const libc::c_char,
        vuint16 as libc::c_int,
    );
    if vuint16 as libc::c_int == 60500 as libc::c_int {} else {
        __assert_fail(
            b"vuint16 == 60500\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            570 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_11130: {
        if vuint16 as libc::c_int == 60500 as libc::c_int {} else {
            __assert_fail(
                b"vuint16 == 60500\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                570 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vuint8 = binn_object_uint8(objptr, b"uint8\0" as *const u8 as *const libc::c_char);
    printf(b"uint8: %d\n\0" as *const u8 as *const libc::c_char, vuint8 as libc::c_int);
    if vuint8 as libc::c_int == 250 as libc::c_int {} else {
        __assert_fail(
            b"vuint8 == 250\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            574 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_11074: {
        if vuint8 as libc::c_int == 250 as libc::c_int {} else {
            __assert_fail(
                b"vuint8 == 250\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                574 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vuint64 = binn_object_uint64(
        objptr,
        b"uint64\0" as *const u8 as *const libc::c_char,
    );
    printf(b"uint64: %llu\n\0" as *const u8 as *const libc::c_char, vuint64);
    if vuint64 == 1234567890123 as libc::c_long as libc::c_ulonglong {} else {
        __assert_fail(
            b"vuint64 == 1234567890123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            578 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_11019: {
        if vuint64 == 1234567890123 as libc::c_long as libc::c_ulonglong {} else {
            __assert_fail(
                b"vuint64 == 1234567890123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                578 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vfloat32 = binn_object_float(
        objptr,
        b"float32\0" as *const u8 as *const libc::c_char,
    );
    printf(
        b"float32: %f\n\0" as *const u8 as *const libc::c_char,
        vfloat32 as libc::c_double,
    );
    if AlmostEqualFloats(vfloat32, -12.345f64 as libc::c_float, 2 as libc::c_int)
        == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"AlmostEqualFloats(vfloat32, -12.345, 2) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            583 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_10951: {
        if AlmostEqualFloats(vfloat32, -12.345f64 as libc::c_float, 2 as libc::c_int)
            == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"AlmostEqualFloats(vfloat32, -12.345, 2) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                583 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vfloat64 = binn_object_double(
        objptr,
        b"float64\0" as *const u8 as *const libc::c_char,
    );
    printf(b"float64: %f\n\0" as *const u8 as *const libc::c_char, vfloat64);
    if AlmostEqualFloats(vfloat32, -12.345f64 as libc::c_float, 2 as libc::c_int)
        == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"AlmostEqualFloats(vfloat32, -12.345, 2) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            587 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_10883: {
        if AlmostEqualFloats(vfloat32, -12.345f64 as libc::c_float, 2 as libc::c_int)
            == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"AlmostEqualFloats(vfloat32, -12.345, 2) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                587 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    ptr = binn_object_str(objptr, b"str\0" as *const u8 as *const libc::c_char);
    printf(b"ptr: (%p) '%s'\n\0" as *const u8 as *const libc::c_char, ptr, ptr);
    if strcmp(ptr, b"the value\0" as *const u8 as *const libc::c_char)
        == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp(ptr, \"the value\") == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            592 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_10815: {
        if strcmp(ptr, b"the value\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp(ptr, \"the value\") == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                592 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = binn_object_bool(
        objptr,
        b"bool_true\0" as *const u8 as *const libc::c_char,
    );
    printf(b"bool true: %d\n\0" as *const u8 as *const libc::c_char, vint32);
    if vint32 == 1 as libc::c_int {} else {
        __assert_fail(
            b"vint32 == TRUE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            597 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_10763: {
        if vint32 == 1 as libc::c_int {} else {
            __assert_fail(
                b"vint32 == TRUE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                597 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = binn_object_bool(
        objptr,
        b"bool_false\0" as *const u8 as *const libc::c_char,
    );
    printf(b"bool false: %d\n\0" as *const u8 as *const libc::c_char, vint32);
    if vint32 == 0 as libc::c_int {} else {
        __assert_fail(
            b"vint32 == FALSE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            601 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_10711: {
        if vint32 == 0 as libc::c_int {} else {
            __assert_fail(
                b"vint32 == FALSE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                601 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_null(objptr, b"null\0" as *const u8 as *const libc::c_char)
        == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_null(objptr, \"null\") == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            604 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_10664: {
        if binn_object_null(objptr, b"null\0" as *const u8 as *const libc::c_char)
            == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_null(objptr, \"null\") == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                604 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_null(objptr, b"nonull\0" as *const u8 as *const libc::c_char)
        == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_null(objptr, \"nonull\") == FALSE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            605 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_10616: {
        if binn_object_null(objptr, b"nonull\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_null(objptr, \"nonull\") == FALSE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                605 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    listptr = binn_object_list(objptr, b"list\0" as *const u8 as *const libc::c_char);
    printf(
        b"obj ptr: %p  list ptr: %p\n\0" as *const u8 as *const libc::c_char,
        objptr,
        listptr,
    );
    if !listptr.is_null() {} else {
        __assert_fail(
            b"listptr != 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            610 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_10558: {
        if !listptr.is_null() {} else {
            __assert_fail(
                b"listptr != 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                610 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    if listptr > objptr {} else {
        __assert_fail(
            b"listptr > objptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            611 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_10520: {
        if listptr > objptr {} else {
            __assert_fail(
                b"listptr > objptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                611 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = binn_list_int32(listptr, 2 as libc::c_int);
    printf(b"int32: %d\n\0" as *const u8 as *const libc::c_char, vint32);
    if vint32 == 123 as libc::c_int {} else {
        __assert_fail(
            b"vint32 == 123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            615 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_10468: {
        if vint32 == 123 as libc::c_int {} else {
            __assert_fail(
                b"vint32 == 123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                615 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    ptr = binn_list_str(listptr, 3 as libc::c_int);
    printf(b"ptr: (%p) '%s'\n\0" as *const u8 as *const libc::c_char, ptr, ptr);
    if strcmp(ptr, b"this is a string\0" as *const u8 as *const libc::c_char)
        == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp(ptr, \"this is a string\") == 0\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            619 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_10397: {
        if strcmp(ptr, b"this is a string\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp(ptr, \"this is a string\") == 0\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                619 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_get_value(
        objptr,
        b"int32\0" as *const u8 as *const libc::c_char,
        &mut value,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get_value(objptr, \"int32\", &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            626 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_10347: {
        if binn_object_get_value(
            objptr,
            b"int32\0" as *const u8 as *const libc::c_char,
            &mut value,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get_value(objptr, \"int32\", &value) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                626 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0x41 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_INT16\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            628 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_10309: {
        if value.type_0 == 0x41 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_INT16\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                628 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.c2rust_unnamed.vint16 as libc::c_int == -(12345 as libc::c_int) {} else {
        __assert_fail(
            b"value.vint16 == -12345\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            629 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_10265: {
        if value.c2rust_unnamed.vint16 as libc::c_int == -(12345 as libc::c_int)
        {} else {
            __assert_fail(
                b"value.vint16 == -12345\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                629 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_get_value(
        objptr,
        b"int16\0" as *const u8 as *const libc::c_char,
        &mut value,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get_value(objptr, \"int16\", &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            635 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_10215: {
        if binn_object_get_value(
            objptr,
            b"int16\0" as *const u8 as *const libc::c_char,
            &mut value,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get_value(objptr, \"int16\", &value) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                635 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0x41 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_INT16\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            636 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_10177: {
        if value.type_0 == 0x41 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_INT16\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                636 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.c2rust_unnamed.vint16 as libc::c_int == -(258 as libc::c_int) {} else {
        __assert_fail(
            b"value.vint16 == -258\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            637 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_10132: {
        if value.c2rust_unnamed.vint16 as libc::c_int == -(258 as libc::c_int) {} else {
            __assert_fail(
                b"value.vint16 == -258\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                637 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_get_value(
        objptr,
        b"int8\0" as *const u8 as *const libc::c_char,
        &mut value,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get_value(objptr, \"int8\", &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            639 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_10082: {
        if binn_object_get_value(
            objptr,
            b"int8\0" as *const u8 as *const libc::c_char,
            &mut value,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get_value(objptr, \"int8\", &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                639 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0x21 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_INT8\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            640 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_10044: {
        if value.type_0 == 0x21 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_INT8\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                640 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.c2rust_unnamed.vint8 as libc::c_int == -(120 as libc::c_int) {} else {
        __assert_fail(
            b"value.vint8 == -120\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            641 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_10000: {
        if value.c2rust_unnamed.vint8 as libc::c_int == -(120 as libc::c_int) {} else {
            __assert_fail(
                b"value.vint8 == -120\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                641 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_get_value(
        objptr,
        b"int64\0" as *const u8 as *const libc::c_char,
        &mut value,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get_value(objptr, \"int64\", &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            643 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_9950: {
        if binn_object_get_value(
            objptr,
            b"int64\0" as *const u8 as *const libc::c_char,
            &mut value,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get_value(objptr, \"int64\", &value) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                643 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0x81 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_INT64\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            644 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_9912: {
        if value.type_0 == 0x81 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_INT64\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                644 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.c2rust_unnamed.vint64
        == -(1234567890123 as libc::c_long) as libc::c_longlong
    {} else {
        __assert_fail(
            b"value.vint64 == -1234567890123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            645 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_9868: {
        if value.c2rust_unnamed.vint64
            == -(1234567890123 as libc::c_long) as libc::c_longlong
        {} else {
            __assert_fail(
                b"value.vint64 == -1234567890123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                645 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_get_value(
        objptr,
        b"uint32\0" as *const u8 as *const libc::c_char,
        &mut value,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get_value(objptr, \"uint32\", &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            648 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_9818: {
        if binn_object_get_value(
            objptr,
            b"uint32\0" as *const u8 as *const libc::c_char,
            &mut value,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get_value(objptr, \"uint32\", &value) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                648 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0x60 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_UINT32\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            649 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_9780: {
        if value.type_0 == 0x60 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_UINT32\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                649 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.c2rust_unnamed.vuint32 == 123456 as libc::c_int as libc::c_uint {} else {
        __assert_fail(
            b"value.vuint32 == 123456\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            650 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_9737: {
        if value.c2rust_unnamed.vuint32 == 123456 as libc::c_int as libc::c_uint
        {} else {
            __assert_fail(
                b"value.vuint32 == 123456\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                650 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_get_value(
        objptr,
        b"uint16\0" as *const u8 as *const libc::c_char,
        &mut value,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get_value(objptr, \"uint16\", &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            652 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_9687: {
        if binn_object_get_value(
            objptr,
            b"uint16\0" as *const u8 as *const libc::c_char,
            &mut value,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get_value(objptr, \"uint16\", &value) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                652 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0x40 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_UINT16\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            653 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_9649: {
        if value.type_0 == 0x40 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_UINT16\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                653 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.c2rust_unnamed.vuint16 as libc::c_int == 60500 as libc::c_int {} else {
        __assert_fail(
            b"value.vuint16 == 60500\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            654 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_9606: {
        if value.c2rust_unnamed.vuint16 as libc::c_int == 60500 as libc::c_int {} else {
            __assert_fail(
                b"value.vuint16 == 60500\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                654 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_get_value(
        objptr,
        b"uint8\0" as *const u8 as *const libc::c_char,
        &mut value,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get_value(objptr, \"uint8\", &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            656 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_9556: {
        if binn_object_get_value(
            objptr,
            b"uint8\0" as *const u8 as *const libc::c_char,
            &mut value,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get_value(objptr, \"uint8\", &value) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                656 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0x20 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_UINT8\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            657 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_9517: {
        if value.type_0 == 0x20 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_UINT8\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                657 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.c2rust_unnamed.vuint8 as libc::c_int == 250 as libc::c_int {} else {
        __assert_fail(
            b"value.vuint8 == 250\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            658 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_9474: {
        if value.c2rust_unnamed.vuint8 as libc::c_int == 250 as libc::c_int {} else {
            __assert_fail(
                b"value.vuint8 == 250\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                658 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_get_value(
        objptr,
        b"uint64\0" as *const u8 as *const libc::c_char,
        &mut value,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get_value(objptr, \"uint64\", &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            660 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_9422: {
        if binn_object_get_value(
            objptr,
            b"uint64\0" as *const u8 as *const libc::c_char,
            &mut value,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get_value(objptr, \"uint64\", &value) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                660 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0x80 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_UINT64\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            661 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_9383: {
        if value.type_0 == 0x80 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_UINT64\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                661 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.c2rust_unnamed.vuint64 == 1234567890123 as libc::c_long as libc::c_ulonglong
    {} else {
        __assert_fail(
            b"value.vuint64 == 1234567890123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            662 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 28],
                &[libc::c_char; 28],
            >(b"void test_binn_read(void *)\0"))
                .as_ptr(),
        );
    }
    'c_9321: {
        if value.c2rust_unnamed.vuint64
            == 1234567890123 as libc::c_long as libc::c_ulonglong
        {} else {
            __assert_fail(
                b"value.vuint64 == 1234567890123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                662 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 28],
                    &[libc::c_char; 28],
                >(b"void test_binn_read(void *)\0"))
                    .as_ptr(),
            );
        }
    };
    puts(b"reading... OK\0" as *const u8 as *const libc::c_char);
}
pub unsafe extern "C" fn init_udts() {
    let mut obj: *mut binn = 0 as *mut binn;
    let mut date: libc::c_ushort = 0;
    let mut value: uint64 = 0;
    let mut ptr: *mut libc::c_void = 0 as *mut libc::c_void;
    puts(b"testing UDTs...\0" as *const u8 as *const libc::c_char);
    if strcmp(
        date_to_str(
            str_to_date(
                b"1950-08-15\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
            ),
        ),
        b"1950-08-15\0" as *const u8 as *const libc::c_char,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp(date_to_str(str_to_date(\"1950-08-15\")), \"1950-08-15\") == 0\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            678 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 17],
                &[libc::c_char; 17],
            >(b"void init_udts()\0"))
                .as_ptr(),
        );
    }
    'c_17463: {
        if strcmp(
            date_to_str(
                str_to_date(
                    b"1950-08-15\0" as *const u8 as *const libc::c_char
                        as *mut libc::c_char,
                ),
            ),
            b"1950-08-15\0" as *const u8 as *const libc::c_char,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp(date_to_str(str_to_date(\"1950-08-15\")), \"1950-08-15\") == 0\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                678 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 17],
                    &[libc::c_char; 17],
                >(b"void init_udts()\0"))
                    .as_ptr(),
            );
        }
    };
    if strcmp(
        date_to_str(
            str_to_date(
                b"1900-12-01\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
            ),
        ),
        b"1900-12-01\0" as *const u8 as *const libc::c_char,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp(date_to_str(str_to_date(\"1900-12-01\")), \"1900-12-01\") == 0\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            679 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 17],
                &[libc::c_char; 17],
            >(b"void init_udts()\0"))
                .as_ptr(),
        );
    }
    'c_17401: {
        if strcmp(
            date_to_str(
                str_to_date(
                    b"1900-12-01\0" as *const u8 as *const libc::c_char
                        as *mut libc::c_char,
                ),
            ),
            b"1900-12-01\0" as *const u8 as *const libc::c_char,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp(date_to_str(str_to_date(\"1900-12-01\")), \"1900-12-01\") == 0\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                679 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 17],
                    &[libc::c_char; 17],
                >(b"void init_udts()\0"))
                    .as_ptr(),
            );
        }
    };
    if strcmp(
        date_to_str(
            str_to_date(
                b"2000-10-31\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
            ),
        ),
        b"2000-10-31\0" as *const u8 as *const libc::c_char,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp(date_to_str(str_to_date(\"2000-10-31\")), \"2000-10-31\") == 0\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            680 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 17],
                &[libc::c_char; 17],
            >(b"void init_udts()\0"))
                .as_ptr(),
        );
    }
    'c_17339: {
        if strcmp(
            date_to_str(
                str_to_date(
                    b"2000-10-31\0" as *const u8 as *const libc::c_char
                        as *mut libc::c_char,
                ),
            ),
            b"2000-10-31\0" as *const u8 as *const libc::c_char,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp(date_to_str(str_to_date(\"2000-10-31\")), \"2000-10-31\") == 0\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                680 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 17],
                    &[libc::c_char; 17],
                >(b"void init_udts()\0"))
                    .as_ptr(),
            );
        }
    };
    if strcmp(
        date_to_str(
            str_to_date(
                b"2014-03-19\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
            ),
        ),
        b"2014-03-19\0" as *const u8 as *const libc::c_char,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp(date_to_str(str_to_date(\"2014-03-19\")), \"2014-03-19\") == 0\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            681 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 17],
                &[libc::c_char; 17],
            >(b"void init_udts()\0"))
                .as_ptr(),
        );
    }
    'c_17277: {
        if strcmp(
            date_to_str(
                str_to_date(
                    b"2014-03-19\0" as *const u8 as *const libc::c_char
                        as *mut libc::c_char,
                ),
            ),
            b"2014-03-19\0" as *const u8 as *const libc::c_char,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp(date_to_str(str_to_date(\"2014-03-19\")), \"2014-03-19\") == 0\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                681 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 17],
                    &[libc::c_char; 17],
                >(b"void init_udts()\0"))
                    .as_ptr(),
            );
        }
    };
    printf(
        b"curr=%s\n\0" as *const u8 as *const libc::c_char,
        currency_to_str(
            str_to_currency(
                b"123.456\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
            ),
        ),
    );
    printf(
        b"curr=%s\n\0" as *const u8 as *const libc::c_char,
        currency_to_str(
            str_to_currency(
                b"123.45\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
            ),
        ),
    );
    printf(
        b"curr=%s\n\0" as *const u8 as *const libc::c_char,
        currency_to_str(
            str_to_currency(
                b"123.4\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
            ),
        ),
    );
    printf(
        b"curr=%s\n\0" as *const u8 as *const libc::c_char,
        currency_to_str(
            str_to_currency(
                b"123.\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
            ),
        ),
    );
    printf(
        b"curr=%s\n\0" as *const u8 as *const libc::c_char,
        currency_to_str(
            str_to_currency(
                b"123\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
            ),
        ),
    );
    printf(
        b"curr=%s\n\0" as *const u8 as *const libc::c_char,
        currency_to_str(
            str_to_currency(
                b"1.2\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
            ),
        ),
    );
    printf(
        b"curr=%s\n\0" as *const u8 as *const libc::c_char,
        currency_to_str(
            str_to_currency(
                b"0.987\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
            ),
        ),
    );
    printf(
        b"curr=%s\n\0" as *const u8 as *const libc::c_char,
        currency_to_str(
            str_to_currency(
                b"0.98\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
            ),
        ),
    );
    printf(
        b"curr=%s\n\0" as *const u8 as *const libc::c_char,
        currency_to_str(
            str_to_currency(
                b"0.9\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
            ),
        ),
    );
    printf(
        b"curr=%s\n\0" as *const u8 as *const libc::c_char,
        currency_to_str(
            str_to_currency(
                b"0.0\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
            ),
        ),
    );
    printf(
        b"curr=%s\n\0" as *const u8 as *const libc::c_char,
        currency_to_str(
            str_to_currency(
                b"0\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
            ),
        ),
    );
    printf(
        b"curr=%s\n\0" as *const u8 as *const libc::c_char,
        currency_to_str(
            str_to_currency(
                b"123.4567\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
            ),
        ),
    );
    printf(
        b"curr=%s\n\0" as *const u8 as *const libc::c_char,
        currency_to_str(
            str_to_currency(
                b"123.45678\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
            ),
        ),
    );
    printf(
        b"curr=%s\n\0" as *const u8 as *const libc::c_char,
        currency_to_str(
            str_to_currency(
                b"123.456789\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
            ),
        ),
    );
    printf(
        b"curr=%s\n\0" as *const u8 as *const libc::c_char,
        currency_to_str(
            str_to_currency(
                b"0.1234\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
            ),
        ),
    );
    printf(
        b"curr=%s\n\0" as *const u8 as *const libc::c_char,
        currency_to_str(
            str_to_currency(
                b".1234\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
            ),
        ),
    );
    if float_to_currency(2.5f64) == 25000 as libc::c_int as libc::c_longlong {} else {
        __assert_fail(
            b"float_to_currency(2.5) == 25000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            700 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 17],
                &[libc::c_char; 17],
            >(b"void init_udts()\0"))
                .as_ptr(),
        );
    }
    'c_17010: {
        if float_to_currency(2.5f64) == 25000 as libc::c_int as libc::c_longlong
        {} else {
            __assert_fail(
                b"float_to_currency(2.5) == 25000\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                700 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 17],
                    &[libc::c_char; 17],
                >(b"void init_udts()\0"))
                    .as_ptr(),
            );
        }
    };
    if float_to_currency(5 as libc::c_int as libc::c_double)
        == 50000 as libc::c_int as libc::c_longlong
    {} else {
        __assert_fail(
            b"float_to_currency(5) == 50000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            701 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 17],
                &[libc::c_char; 17],
            >(b"void init_udts()\0"))
                .as_ptr(),
        );
    }
    'c_16966: {
        if float_to_currency(5 as libc::c_int as libc::c_double)
            == 50000 as libc::c_int as libc::c_longlong
        {} else {
            __assert_fail(
                b"float_to_currency(5) == 50000\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                701 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 17],
                    &[libc::c_char; 17],
                >(b"void init_udts()\0"))
                    .as_ptr(),
            );
        }
    };
    if str_to_currency(b"1.1\0" as *const u8 as *const libc::c_char as *mut libc::c_char)
        == 11000 as libc::c_int as libc::c_longlong
    {} else {
        __assert_fail(
            b"str_to_currency(\"1.1\") == 11000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            702 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 17],
                &[libc::c_char; 17],
            >(b"void init_udts()\0"))
                .as_ptr(),
        );
    }
    'c_16920: {
        if str_to_currency(
            b"1.1\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
        ) == 11000 as libc::c_int as libc::c_longlong
        {} else {
            __assert_fail(
                b"str_to_currency(\"1.1\") == 11000\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                702 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 17],
                    &[libc::c_char; 17],
                >(b"void init_udts()\0"))
                    .as_ptr(),
            );
        }
    };
    if str_to_currency(b"12\0" as *const u8 as *const libc::c_char as *mut libc::c_char)
        == 120000 as libc::c_int as libc::c_longlong
    {} else {
        __assert_fail(
            b"str_to_currency(\"12\") == 120000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            703 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 17],
                &[libc::c_char; 17],
            >(b"void init_udts()\0"))
                .as_ptr(),
        );
    }
    'c_16873: {
        if str_to_currency(
            b"12\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
        ) == 120000 as libc::c_int as libc::c_longlong
        {} else {
            __assert_fail(
                b"str_to_currency(\"12\") == 120000\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                703 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 17],
                    &[libc::c_char; 17],
                >(b"void init_udts()\0"))
                    .as_ptr(),
            );
        }
    };
    if mul_currency(20000 as libc::c_int as int64, 20000 as libc::c_int as int64)
        == 40000 as libc::c_int as libc::c_longlong
    {} else {
        __assert_fail(
            b"mul_currency(20000, 20000) == 40000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            704 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 17],
                &[libc::c_char; 17],
            >(b"void init_udts()\0"))
                .as_ptr(),
        );
    }
    'c_16825: {
        if mul_currency(20000 as libc::c_int as int64, 20000 as libc::c_int as int64)
            == 40000 as libc::c_int as libc::c_longlong
        {} else {
            __assert_fail(
                b"mul_currency(20000, 20000) == 40000\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                704 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 17],
                    &[libc::c_char; 17],
                >(b"void init_udts()\0"))
                    .as_ptr(),
            );
        }
    };
    if mul_currency(20000 as libc::c_int as int64, 25000 as libc::c_int as int64)
        == 50000 as libc::c_int as libc::c_longlong
    {} else {
        __assert_fail(
            b"mul_currency(20000, 25000) == 50000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            705 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 17],
                &[libc::c_char; 17],
            >(b"void init_udts()\0"))
                .as_ptr(),
        );
    }
    'c_16777: {
        if mul_currency(20000 as libc::c_int as int64, 25000 as libc::c_int as int64)
            == 50000 as libc::c_int as libc::c_longlong
        {} else {
            __assert_fail(
                b"mul_currency(20000, 25000) == 50000\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                705 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 17],
                    &[libc::c_char; 17],
                >(b"void init_udts()\0"))
                    .as_ptr(),
            );
        }
    };
    if mul_currency(30000 as libc::c_int as int64, 40000 as libc::c_int as int64)
        == 120000 as libc::c_int as libc::c_longlong
    {} else {
        __assert_fail(
            b"mul_currency(30000, 40000) == 120000\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            706 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 17],
                &[libc::c_char; 17],
            >(b"void init_udts()\0"))
                .as_ptr(),
        );
    }
    'c_16729: {
        if mul_currency(30000 as libc::c_int as int64, 40000 as libc::c_int as int64)
            == 120000 as libc::c_int as libc::c_longlong
        {} else {
            __assert_fail(
                b"mul_currency(30000, 40000) == 120000\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                706 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 17],
                    &[libc::c_char; 17],
                >(b"void init_udts()\0"))
                    .as_ptr(),
            );
        }
    };
    if div_currency(80000 as libc::c_int as int64, 20000 as libc::c_int as int64)
        == 40000 as libc::c_int as libc::c_longlong
    {} else {
        __assert_fail(
            b"div_currency(80000, 20000) == 40000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            707 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 17],
                &[libc::c_char; 17],
            >(b"void init_udts()\0"))
                .as_ptr(),
        );
    }
    'c_16680: {
        if div_currency(80000 as libc::c_int as int64, 20000 as libc::c_int as int64)
            == 40000 as libc::c_int as libc::c_longlong
        {} else {
            __assert_fail(
                b"div_currency(80000, 20000) == 40000\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                707 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 17],
                    &[libc::c_char; 17],
                >(b"void init_udts()\0"))
                    .as_ptr(),
            );
        }
    };
    if div_currency(120000 as libc::c_int as int64, 40000 as libc::c_int as int64)
        == 30000 as libc::c_int as libc::c_longlong
    {} else {
        __assert_fail(
            b"div_currency(120000, 40000) == 30000\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            708 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 17],
                &[libc::c_char; 17],
            >(b"void init_udts()\0"))
                .as_ptr(),
        );
    }
    'c_16632: {
        if div_currency(120000 as libc::c_int as int64, 40000 as libc::c_int as int64)
            == 30000 as libc::c_int as libc::c_longlong
        {} else {
            __assert_fail(
                b"div_currency(120000, 40000) == 30000\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                708 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 17],
                    &[libc::c_char; 17],
                >(b"void init_udts()\0"))
                    .as_ptr(),
            );
        }
    };
    if div_currency(100000 as libc::c_int as int64, 40000 as libc::c_int as int64)
        == 25000 as libc::c_int as libc::c_longlong
    {} else {
        __assert_fail(
            b"div_currency(100000, 40000) == 25000\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            709 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 17],
                &[libc::c_char; 17],
            >(b"void init_udts()\0"))
                .as_ptr(),
        );
    }
    'c_16584: {
        if div_currency(100000 as libc::c_int as int64, 40000 as libc::c_int as int64)
            == 25000 as libc::c_int as libc::c_longlong
        {} else {
            __assert_fail(
                b"div_currency(100000, 40000) == 25000\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                709 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 17],
                    &[libc::c_char; 17],
                >(b"void init_udts()\0"))
                    .as_ptr(),
            );
        }
    };
    printf(
        b"1.1 * 2.5 = %s\n\0" as *const u8 as *const libc::c_char,
        currency_to_str(
            mul_currency(
                str_to_currency(
                    b"1.1\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
                ),
                float_to_currency(2.5f64),
            ),
        ),
    );
    printf(
        b"12 / 5 = %s\n\0" as *const u8 as *const libc::c_char,
        currency_to_str(
            div_currency(
                str_to_currency(
                    b"12\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
                ),
                float_to_currency(5 as libc::c_int as libc::c_double),
            ),
        ),
    );
    MY_DATE = binn_create_type(0x40 as libc::c_int, 0xa as libc::c_int);
    MY_CURRENCY = binn_create_type(0x80 as libc::c_int, 0xa as libc::c_int);
    obj = binn_object();
    if !obj.is_null() {} else {
        __assert_fail(
            b"obj != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            723 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 17],
                &[libc::c_char; 17],
            >(b"void init_udts()\0"))
                .as_ptr(),
        );
    }
    'c_16474: {
        if !obj.is_null() {} else {
            __assert_fail(
                b"obj != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                723 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 17],
                    &[libc::c_char; 17],
                >(b"void init_udts()\0"))
                    .as_ptr(),
            );
        }
    };
    date = str_to_date(
        b"1950-08-15\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
    );
    printf(
        b" date 1: %d %s\n\0" as *const u8 as *const libc::c_char,
        date as libc::c_int,
        date_to_str(date),
    );
    if binn_object_set(
        obj,
        b"date1\0" as *const u8 as *const libc::c_char,
        MY_DATE,
        &mut date as *mut libc::c_ushort as *mut libc::c_void,
        0 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set(obj, \"date1\", MY_DATE, &date, 0) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            727 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 17],
                &[libc::c_char; 17],
            >(b"void init_udts()\0"))
                .as_ptr(),
        );
    }
    'c_16395: {
        if binn_object_set(
            obj,
            b"date1\0" as *const u8 as *const libc::c_char,
            MY_DATE,
            &mut date as *mut libc::c_ushort as *mut libc::c_void,
            0 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set(obj, \"date1\", MY_DATE, &date, 0) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                727 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 17],
                    &[libc::c_char; 17],
                >(b"void init_udts()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set(
        obj,
        b"date1\0" as *const u8 as *const libc::c_char,
        MY_DATE,
        &mut date as *mut libc::c_ushort as *mut libc::c_void,
        0 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set(obj, \"date1\", MY_DATE, &date, 0) == FALSE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            728 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 17],
                &[libc::c_char; 17],
            >(b"void init_udts()\0"))
                .as_ptr(),
        );
    }
    'c_16336: {
        if binn_object_set(
            obj,
            b"date1\0" as *const u8 as *const libc::c_char,
            MY_DATE,
            &mut date as *mut libc::c_ushort as *mut libc::c_void,
            0 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set(obj, \"date1\", MY_DATE, &date, 0) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                728 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 17],
                    &[libc::c_char; 17],
                >(b"void init_udts()\0"))
                    .as_ptr(),
            );
        }
    };
    date = str_to_date(
        b"1999-12-31\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
    );
    printf(
        b" date 2: %d %s\n\0" as *const u8 as *const libc::c_char,
        date as libc::c_int,
        date_to_str(date),
    );
    binn_object_set(
        obj,
        b"date2\0" as *const u8 as *const libc::c_char,
        MY_DATE,
        &mut date as *mut libc::c_ushort as *mut libc::c_void,
        0 as libc::c_int,
    );
    value = str_to_currency(
        b"123.456\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
    ) as uint64;
    printf(
        b" curr 1: %llu %s\n\0" as *const u8 as *const libc::c_char,
        value,
        currency_to_str(value as int64),
    );
    binn_object_set(
        obj,
        b"curr1\0" as *const u8 as *const libc::c_char,
        MY_CURRENCY,
        &mut value as *mut uint64 as *mut libc::c_void,
        0 as libc::c_int,
    );
    value = str_to_currency(
        b"123.45\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
    ) as uint64;
    printf(
        b" curr 2: %llu %s\n\0" as *const u8 as *const libc::c_char,
        value,
        currency_to_str(value as int64),
    );
    binn_object_set(
        obj,
        b"curr2\0" as *const u8 as *const libc::c_char,
        MY_CURRENCY,
        &mut value as *mut uint64 as *mut libc::c_void,
        0 as libc::c_int,
    );
    value = str_to_currency(
        b"12.5\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
    ) as uint64;
    printf(
        b" curr 3: %llu %s\n\0" as *const u8 as *const libc::c_char,
        value,
        currency_to_str(value as int64),
    );
    binn_object_set(
        obj,
        b"curr3\0" as *const u8 as *const libc::c_char,
        MY_CURRENCY,
        &mut value as *mut uint64 as *mut libc::c_void,
        0 as libc::c_int,
    );
    value = str_to_currency(
        b"5\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
    ) as uint64;
    printf(
        b" curr 4: %llu %s\n\0" as *const u8 as *const libc::c_char,
        value,
        currency_to_str(value as int64),
    );
    binn_object_set(
        obj,
        b"curr4\0" as *const u8 as *const libc::c_char,
        MY_CURRENCY,
        &mut value as *mut uint64 as *mut libc::c_void,
        0 as libc::c_int,
    );
    value = str_to_currency(
        b"0.75\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
    ) as uint64;
    printf(
        b" curr 5: %llu %s\n\0" as *const u8 as *const libc::c_char,
        value,
        currency_to_str(value as int64),
    );
    binn_object_set(
        obj,
        b"curr5\0" as *const u8 as *const libc::c_char,
        MY_CURRENCY,
        &mut value as *mut uint64 as *mut libc::c_void,
        0 as libc::c_int,
    );
    ptr = binn_ptr(obj as *mut libc::c_void);
    if binn_object_get(
        ptr,
        b"date1\0" as *const u8 as *const libc::c_char,
        MY_DATE,
        &mut date as *mut libc::c_ushort as *mut libc::c_void,
        0 as *mut libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get(ptr, \"date1\", MY_DATE, &date, NULL) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            759 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 17],
                &[libc::c_char; 17],
            >(b"void init_udts()\0"))
                .as_ptr(),
        );
    }
    'c_16054: {
        if binn_object_get(
            ptr,
            b"date1\0" as *const u8 as *const libc::c_char,
            MY_DATE,
            &mut date as *mut libc::c_ushort as *mut libc::c_void,
            0 as *mut libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get(ptr, \"date1\", MY_DATE, &date, NULL) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                759 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 17],
                    &[libc::c_char; 17],
                >(b"void init_udts()\0"))
                    .as_ptr(),
            );
        }
    };
    printf(
        b" date 1: %d %s\n\0" as *const u8 as *const libc::c_char,
        date as libc::c_int,
        date_to_str(date),
    );
    if binn_object_get(
        ptr,
        b"date2\0" as *const u8 as *const libc::c_char,
        MY_DATE,
        &mut date as *mut libc::c_ushort as *mut libc::c_void,
        0 as *mut libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get(ptr, \"date2\", MY_DATE, &date, NULL) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            762 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 17],
                &[libc::c_char; 17],
            >(b"void init_udts()\0"))
                .as_ptr(),
        );
    }
    'c_15977: {
        if binn_object_get(
            ptr,
            b"date2\0" as *const u8 as *const libc::c_char,
            MY_DATE,
            &mut date as *mut libc::c_ushort as *mut libc::c_void,
            0 as *mut libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get(ptr, \"date2\", MY_DATE, &date, NULL) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                762 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 17],
                    &[libc::c_char; 17],
                >(b"void init_udts()\0"))
                    .as_ptr(),
            );
        }
    };
    printf(
        b" date 2: %d %s\n\0" as *const u8 as *const libc::c_char,
        date as libc::c_int,
        date_to_str(date),
    );
    if binn_object_get(
        ptr,
        b"curr1\0" as *const u8 as *const libc::c_char,
        MY_CURRENCY,
        &mut value as *mut uint64 as *mut libc::c_void,
        0 as *mut libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get(ptr, \"curr1\", MY_CURRENCY, &value, NULL) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            766 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 17],
                &[libc::c_char; 17],
            >(b"void init_udts()\0"))
                .as_ptr(),
        );
    }
    'c_15898: {
        if binn_object_get(
            ptr,
            b"curr1\0" as *const u8 as *const libc::c_char,
            MY_CURRENCY,
            &mut value as *mut uint64 as *mut libc::c_void,
            0 as *mut libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get(ptr, \"curr1\", MY_CURRENCY, &value, NULL) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                766 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 17],
                    &[libc::c_char; 17],
                >(b"void init_udts()\0"))
                    .as_ptr(),
            );
        }
    };
    printf(
        b" curr 1: %llu %s\n\0" as *const u8 as *const libc::c_char,
        value,
        currency_to_str(value as int64),
    );
    if binn_object_get(
        ptr,
        b"curr2\0" as *const u8 as *const libc::c_char,
        MY_CURRENCY,
        &mut value as *mut uint64 as *mut libc::c_void,
        0 as *mut libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get(ptr, \"curr2\", MY_CURRENCY, &value, NULL) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            769 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 17],
                &[libc::c_char; 17],
            >(b"void init_udts()\0"))
                .as_ptr(),
        );
    }
    'c_15821: {
        if binn_object_get(
            ptr,
            b"curr2\0" as *const u8 as *const libc::c_char,
            MY_CURRENCY,
            &mut value as *mut uint64 as *mut libc::c_void,
            0 as *mut libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get(ptr, \"curr2\", MY_CURRENCY, &value, NULL) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                769 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 17],
                    &[libc::c_char; 17],
                >(b"void init_udts()\0"))
                    .as_ptr(),
            );
        }
    };
    printf(
        b" curr 2: %llu %s\n\0" as *const u8 as *const libc::c_char,
        value,
        currency_to_str(value as int64),
    );
    if binn_object_get(
        ptr,
        b"curr3\0" as *const u8 as *const libc::c_char,
        MY_CURRENCY,
        &mut value as *mut uint64 as *mut libc::c_void,
        0 as *mut libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get(ptr, \"curr3\", MY_CURRENCY, &value, NULL) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            772 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 17],
                &[libc::c_char; 17],
            >(b"void init_udts()\0"))
                .as_ptr(),
        );
    }
    'c_15744: {
        if binn_object_get(
            ptr,
            b"curr3\0" as *const u8 as *const libc::c_char,
            MY_CURRENCY,
            &mut value as *mut uint64 as *mut libc::c_void,
            0 as *mut libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get(ptr, \"curr3\", MY_CURRENCY, &value, NULL) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                772 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 17],
                    &[libc::c_char; 17],
                >(b"void init_udts()\0"))
                    .as_ptr(),
            );
        }
    };
    printf(
        b" curr 3: %llu %s\n\0" as *const u8 as *const libc::c_char,
        value,
        currency_to_str(value as int64),
    );
    if binn_object_get(
        ptr,
        b"curr4\0" as *const u8 as *const libc::c_char,
        MY_CURRENCY,
        &mut value as *mut uint64 as *mut libc::c_void,
        0 as *mut libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get(ptr, \"curr4\", MY_CURRENCY, &value, NULL) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            775 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 17],
                &[libc::c_char; 17],
            >(b"void init_udts()\0"))
                .as_ptr(),
        );
    }
    'c_15667: {
        if binn_object_get(
            ptr,
            b"curr4\0" as *const u8 as *const libc::c_char,
            MY_CURRENCY,
            &mut value as *mut uint64 as *mut libc::c_void,
            0 as *mut libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get(ptr, \"curr4\", MY_CURRENCY, &value, NULL) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                775 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 17],
                    &[libc::c_char; 17],
                >(b"void init_udts()\0"))
                    .as_ptr(),
            );
        }
    };
    printf(
        b" curr 4: %llu %s\n\0" as *const u8 as *const libc::c_char,
        value,
        currency_to_str(value as int64),
    );
    if binn_object_get(
        ptr,
        b"curr5\0" as *const u8 as *const libc::c_char,
        MY_CURRENCY,
        &mut value as *mut uint64 as *mut libc::c_void,
        0 as *mut libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_get(ptr, \"curr5\", MY_CURRENCY, &value, NULL) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            778 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 17],
                &[libc::c_char; 17],
            >(b"void init_udts()\0"))
                .as_ptr(),
        );
    }
    'c_15589: {
        if binn_object_get(
            ptr,
            b"curr5\0" as *const u8 as *const libc::c_char,
            MY_CURRENCY,
            &mut value as *mut uint64 as *mut libc::c_void,
            0 as *mut libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_get(ptr, \"curr5\", MY_CURRENCY, &value, NULL) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                778 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 17],
                    &[libc::c_char; 17],
                >(b"void init_udts()\0"))
                    .as_ptr(),
            );
        }
    };
    printf(
        b" curr 5: %llu %s\n\0" as *const u8 as *const libc::c_char,
        value,
        currency_to_str(value as int64),
    );
    binn_free(obj);
    puts(b"testing UDTs... OK\0" as *const u8 as *const libc::c_char);
}
pub unsafe extern "C" fn test_int_conversion() {
    printf(b"testing integer conversion...\0" as *const u8 as *const libc::c_char);
    vint8 = -(110 as libc::c_int) as libc::c_schar;
    vuint8 = 0 as libc::c_int as libc::c_uchar;
    if copy_int_value(
        &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
        &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
        0x21 as libc::c_int,
        0x20 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint8, &vuint8, BINN_INT8, BINN_UINT8) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            799 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_28281: {
        if copy_int_value(
            &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
            &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
            0x21 as libc::c_int,
            0x20 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint8, &vuint8, BINN_INT8, BINN_UINT8) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                799 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint8 as libc::c_int == -(110 as libc::c_int) {} else {
        __assert_fail(
            b"vint8 == -110\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            800 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_28241: {
        if vint8 as libc::c_int == -(110 as libc::c_int) {} else {
            __assert_fail(
                b"vint8 == -110\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                800 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint8 as libc::c_int == 0 as libc::c_int {} else {
        __assert_fail(
            b"vuint8 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            801 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_28203: {
        if vuint8 as libc::c_int == 0 as libc::c_int {} else {
            __assert_fail(
                b"vuint8 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                801 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint8 = -(110 as libc::c_int) as libc::c_schar;
    vuint16 = 0 as libc::c_int as libc::c_ushort;
    if copy_int_value(
        &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
        &mut vuint16 as *mut libc::c_ushort as *mut libc::c_void,
        0x21 as libc::c_int,
        0x40 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint8, &vuint16, BINN_INT8, BINN_UINT16) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            804 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_28140: {
        if copy_int_value(
            &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
            &mut vuint16 as *mut libc::c_ushort as *mut libc::c_void,
            0x21 as libc::c_int,
            0x40 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint8, &vuint16, BINN_INT8, BINN_UINT16) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                804 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint8 as libc::c_int == -(110 as libc::c_int) {} else {
        __assert_fail(
            b"vint8 == -110\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            805 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_28100: {
        if vint8 as libc::c_int == -(110 as libc::c_int) {} else {
            __assert_fail(
                b"vint8 == -110\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                805 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint16 as libc::c_int == 0 as libc::c_int {} else {
        __assert_fail(
            b"vuint16 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            806 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_28062: {
        if vuint16 as libc::c_int == 0 as libc::c_int {} else {
            __assert_fail(
                b"vuint16 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                806 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint8 = -(110 as libc::c_int) as libc::c_schar;
    vuint32 = 0 as libc::c_int as libc::c_uint;
    if copy_int_value(
        &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
        &mut vuint32 as *mut libc::c_uint as *mut libc::c_void,
        0x21 as libc::c_int,
        0x60 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint8, &vuint32, BINN_INT8, BINN_UINT32) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            809 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_27999: {
        if copy_int_value(
            &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
            &mut vuint32 as *mut libc::c_uint as *mut libc::c_void,
            0x21 as libc::c_int,
            0x60 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint8, &vuint32, BINN_INT8, BINN_UINT32) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                809 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint8 as libc::c_int == -(110 as libc::c_int) {} else {
        __assert_fail(
            b"vint8 == -110\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            810 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_27959: {
        if vint8 as libc::c_int == -(110 as libc::c_int) {} else {
            __assert_fail(
                b"vint8 == -110\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                810 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint32 == 0 as libc::c_int as libc::c_uint {} else {
        __assert_fail(
            b"vuint32 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            811 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_27921: {
        if vuint32 == 0 as libc::c_int as libc::c_uint {} else {
            __assert_fail(
                b"vuint32 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                811 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint8 = -(110 as libc::c_int) as libc::c_schar;
    vuint64 = 0 as libc::c_int as uint64;
    if copy_int_value(
        &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
        &mut vuint64 as *mut uint64 as *mut libc::c_void,
        0x21 as libc::c_int,
        0x80 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint8, &vuint64, BINN_INT8, BINN_UINT64) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            814 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_27858: {
        if copy_int_value(
            &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
            &mut vuint64 as *mut uint64 as *mut libc::c_void,
            0x21 as libc::c_int,
            0x80 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint8, &vuint64, BINN_INT8, BINN_UINT64) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                814 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint8 as libc::c_int == -(110 as libc::c_int) {} else {
        __assert_fail(
            b"vint8 == -110\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            815 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_27818: {
        if vint8 as libc::c_int == -(110 as libc::c_int) {} else {
            __assert_fail(
                b"vint8 == -110\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                815 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint64 == 0 as libc::c_int as libc::c_ulonglong {} else {
        __assert_fail(
            b"vuint64 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            816 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_27780: {
        if vuint64 == 0 as libc::c_int as libc::c_ulonglong {} else {
            __assert_fail(
                b"vuint64 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                816 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint16 = -(123 as libc::c_int) as libc::c_short;
    vuint8 = 0 as libc::c_int as libc::c_uchar;
    if copy_int_value(
        &mut vint16 as *mut libc::c_short as *mut libc::c_void,
        &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
        0x41 as libc::c_int,
        0x20 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint16, &vuint8, BINN_INT16, BINN_UINT8) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            820 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_27717: {
        if copy_int_value(
            &mut vint16 as *mut libc::c_short as *mut libc::c_void,
            &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
            0x41 as libc::c_int,
            0x20 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint16, &vuint8, BINN_INT16, BINN_UINT8) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                820 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint16 as libc::c_int == -(123 as libc::c_int) {} else {
        __assert_fail(
            b"vint16 == -123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            821 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_27677: {
        if vint16 as libc::c_int == -(123 as libc::c_int) {} else {
            __assert_fail(
                b"vint16 == -123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                821 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint8 as libc::c_int == 0 as libc::c_int {} else {
        __assert_fail(
            b"vuint8 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            822 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_27639: {
        if vuint8 as libc::c_int == 0 as libc::c_int {} else {
            __assert_fail(
                b"vuint8 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                822 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint16 = -(123 as libc::c_int) as libc::c_short;
    vuint16 = 0 as libc::c_int as libc::c_ushort;
    if copy_int_value(
        &mut vint16 as *mut libc::c_short as *mut libc::c_void,
        &mut vuint16 as *mut libc::c_ushort as *mut libc::c_void,
        0x41 as libc::c_int,
        0x40 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint16, &vuint16, BINN_INT16, BINN_UINT16) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            825 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_27576: {
        if copy_int_value(
            &mut vint16 as *mut libc::c_short as *mut libc::c_void,
            &mut vuint16 as *mut libc::c_ushort as *mut libc::c_void,
            0x41 as libc::c_int,
            0x40 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint16, &vuint16, BINN_INT16, BINN_UINT16) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                825 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint16 as libc::c_int == -(123 as libc::c_int) {} else {
        __assert_fail(
            b"vint16 == -123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            826 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_27536: {
        if vint16 as libc::c_int == -(123 as libc::c_int) {} else {
            __assert_fail(
                b"vint16 == -123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                826 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint16 as libc::c_int == 0 as libc::c_int {} else {
        __assert_fail(
            b"vuint16 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            827 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_27498: {
        if vuint16 as libc::c_int == 0 as libc::c_int {} else {
            __assert_fail(
                b"vuint16 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                827 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint16 = -(32000 as libc::c_int) as libc::c_short;
    vuint32 = 0 as libc::c_int as libc::c_uint;
    if copy_int_value(
        &mut vint16 as *mut libc::c_short as *mut libc::c_void,
        &mut vuint32 as *mut libc::c_uint as *mut libc::c_void,
        0x41 as libc::c_int,
        0x60 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint16, &vuint32, BINN_INT16, BINN_UINT32) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            830 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_27435: {
        if copy_int_value(
            &mut vint16 as *mut libc::c_short as *mut libc::c_void,
            &mut vuint32 as *mut libc::c_uint as *mut libc::c_void,
            0x41 as libc::c_int,
            0x60 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint16, &vuint32, BINN_INT16, BINN_UINT32) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                830 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint16 as libc::c_int == -(32000 as libc::c_int) {} else {
        __assert_fail(
            b"vint16 == -32000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            831 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_27395: {
        if vint16 as libc::c_int == -(32000 as libc::c_int) {} else {
            __assert_fail(
                b"vint16 == -32000\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                831 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint32 == 0 as libc::c_int as libc::c_uint {} else {
        __assert_fail(
            b"vuint32 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            832 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_27357: {
        if vuint32 == 0 as libc::c_int as libc::c_uint {} else {
            __assert_fail(
                b"vuint32 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                832 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint16 = -(32000 as libc::c_int) as libc::c_short;
    vuint64 = 0 as libc::c_int as uint64;
    if copy_int_value(
        &mut vint16 as *mut libc::c_short as *mut libc::c_void,
        &mut vuint64 as *mut uint64 as *mut libc::c_void,
        0x41 as libc::c_int,
        0x80 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint16, &vuint64, BINN_INT16, BINN_UINT64) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            835 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_27294: {
        if copy_int_value(
            &mut vint16 as *mut libc::c_short as *mut libc::c_void,
            &mut vuint64 as *mut uint64 as *mut libc::c_void,
            0x41 as libc::c_int,
            0x80 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint16, &vuint64, BINN_INT16, BINN_UINT64) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                835 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint16 as libc::c_int == -(32000 as libc::c_int) {} else {
        __assert_fail(
            b"vint16 == -32000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            836 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_27254: {
        if vint16 as libc::c_int == -(32000 as libc::c_int) {} else {
            __assert_fail(
                b"vint16 == -32000\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                836 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint64 == 0 as libc::c_int as libc::c_ulonglong {} else {
        __assert_fail(
            b"vuint64 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            837 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_27216: {
        if vuint64 == 0 as libc::c_int as libc::c_ulonglong {} else {
            __assert_fail(
                b"vuint64 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                837 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = -(123 as libc::c_int);
    vuint8 = 0 as libc::c_int as libc::c_uchar;
    if copy_int_value(
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
        0x61 as libc::c_int,
        0x20 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint32, &vuint8, BINN_INT32, BINN_UINT8) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            841 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_27154: {
        if copy_int_value(
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
            0x61 as libc::c_int,
            0x20 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint32, &vuint8, BINN_INT32, BINN_UINT8) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                841 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32 == -(123 as libc::c_int) {} else {
        __assert_fail(
            b"vint32 == -123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            842 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_27116: {
        if vint32 == -(123 as libc::c_int) {} else {
            __assert_fail(
                b"vint32 == -123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                842 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint8 as libc::c_int == 0 as libc::c_int {} else {
        __assert_fail(
            b"vuint8 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            843 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_27078: {
        if vuint8 as libc::c_int == 0 as libc::c_int {} else {
            __assert_fail(
                b"vuint8 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                843 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = -(123 as libc::c_int);
    vuint16 = 0 as libc::c_int as libc::c_ushort;
    if copy_int_value(
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        &mut vuint16 as *mut libc::c_ushort as *mut libc::c_void,
        0x61 as libc::c_int,
        0x40 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint32, &vuint16, BINN_INT32, BINN_UINT16) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            846 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_27016: {
        if copy_int_value(
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            &mut vuint16 as *mut libc::c_ushort as *mut libc::c_void,
            0x61 as libc::c_int,
            0x40 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint32, &vuint16, BINN_INT32, BINN_UINT16) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                846 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32 == -(123 as libc::c_int) {} else {
        __assert_fail(
            b"vint32 == -123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            847 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_26978: {
        if vint32 == -(123 as libc::c_int) {} else {
            __assert_fail(
                b"vint32 == -123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                847 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint16 as libc::c_int == 0 as libc::c_int {} else {
        __assert_fail(
            b"vuint16 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            848 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_26940: {
        if vuint16 as libc::c_int == 0 as libc::c_int {} else {
            __assert_fail(
                b"vuint16 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                848 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = -(123 as libc::c_int);
    vuint32 = 0 as libc::c_int as libc::c_uint;
    if copy_int_value(
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        &mut vuint32 as *mut libc::c_uint as *mut libc::c_void,
        0x61 as libc::c_int,
        0x60 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint32, &vuint32, BINN_INT32, BINN_UINT32) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            851 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_26878: {
        if copy_int_value(
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            &mut vuint32 as *mut libc::c_uint as *mut libc::c_void,
            0x61 as libc::c_int,
            0x60 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint32, &vuint32, BINN_INT32, BINN_UINT32) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                851 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32 == -(123 as libc::c_int) {} else {
        __assert_fail(
            b"vint32 == -123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            852 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_26840: {
        if vint32 == -(123 as libc::c_int) {} else {
            __assert_fail(
                b"vint32 == -123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                852 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint32 == 0 as libc::c_int as libc::c_uint {} else {
        __assert_fail(
            b"vuint32 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            853 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_26802: {
        if vuint32 == 0 as libc::c_int as libc::c_uint {} else {
            __assert_fail(
                b"vuint32 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                853 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = -(123 as libc::c_int);
    vuint64 = 0 as libc::c_int as uint64;
    if copy_int_value(
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        &mut vuint64 as *mut uint64 as *mut libc::c_void,
        0x61 as libc::c_int,
        0x80 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint32, &vuint64, BINN_INT32, BINN_UINT64) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            856 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_26740: {
        if copy_int_value(
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            &mut vuint64 as *mut uint64 as *mut libc::c_void,
            0x61 as libc::c_int,
            0x80 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint32, &vuint64, BINN_INT32, BINN_UINT64) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                856 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32 == -(123 as libc::c_int) {} else {
        __assert_fail(
            b"vint32 == -123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            857 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_26702: {
        if vint32 == -(123 as libc::c_int) {} else {
            __assert_fail(
                b"vint32 == -123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                857 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint64 == 0 as libc::c_int as libc::c_ulonglong {} else {
        __assert_fail(
            b"vuint64 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            858 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_26664: {
        if vuint64 == 0 as libc::c_int as libc::c_ulonglong {} else {
            __assert_fail(
                b"vuint64 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                858 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint64 = -(123 as libc::c_int) as int64;
    vuint8 = 0 as libc::c_int as libc::c_uchar;
    if copy_int_value(
        &mut vint64 as *mut int64 as *mut libc::c_void,
        &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
        0x81 as libc::c_int,
        0x20 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint64, &vuint8, BINN_INT64, BINN_UINT8) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            862 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_26601: {
        if copy_int_value(
            &mut vint64 as *mut int64 as *mut libc::c_void,
            &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
            0x81 as libc::c_int,
            0x20 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint64, &vuint8, BINN_INT64, BINN_UINT8) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                862 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64 == -(123 as libc::c_int) as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == -123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            863 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_26561: {
        if vint64 == -(123 as libc::c_int) as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == -123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                863 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint8 as libc::c_int == 0 as libc::c_int {} else {
        __assert_fail(
            b"vuint8 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            864 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_26523: {
        if vuint8 as libc::c_int == 0 as libc::c_int {} else {
            __assert_fail(
                b"vuint8 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                864 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint64 = -(123 as libc::c_int) as int64;
    vuint16 = 0 as libc::c_int as libc::c_ushort;
    if copy_int_value(
        &mut vint64 as *mut int64 as *mut libc::c_void,
        &mut vuint16 as *mut libc::c_ushort as *mut libc::c_void,
        0x81 as libc::c_int,
        0x40 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint64, &vuint16, BINN_INT64, BINN_UINT16) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            867 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_26460: {
        if copy_int_value(
            &mut vint64 as *mut int64 as *mut libc::c_void,
            &mut vuint16 as *mut libc::c_ushort as *mut libc::c_void,
            0x81 as libc::c_int,
            0x40 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint64, &vuint16, BINN_INT64, BINN_UINT16) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                867 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64 == -(123 as libc::c_int) as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == -123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            868 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_26420: {
        if vint64 == -(123 as libc::c_int) as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == -123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                868 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint16 as libc::c_int == 0 as libc::c_int {} else {
        __assert_fail(
            b"vuint16 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            869 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_26382: {
        if vuint16 as libc::c_int == 0 as libc::c_int {} else {
            __assert_fail(
                b"vuint16 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                869 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint64 = -(123 as libc::c_int) as int64;
    vuint32 = 0 as libc::c_int as libc::c_uint;
    if copy_int_value(
        &mut vint64 as *mut int64 as *mut libc::c_void,
        &mut vuint32 as *mut libc::c_uint as *mut libc::c_void,
        0x81 as libc::c_int,
        0x60 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint64, &vuint32, BINN_INT64, BINN_UINT32) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            872 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_26319: {
        if copy_int_value(
            &mut vint64 as *mut int64 as *mut libc::c_void,
            &mut vuint32 as *mut libc::c_uint as *mut libc::c_void,
            0x81 as libc::c_int,
            0x60 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint64, &vuint32, BINN_INT64, BINN_UINT32) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                872 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64 == -(123 as libc::c_int) as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == -123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            873 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_26279: {
        if vint64 == -(123 as libc::c_int) as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == -123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                873 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint32 == 0 as libc::c_int as libc::c_uint {} else {
        __assert_fail(
            b"vuint32 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            874 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_26241: {
        if vuint32 == 0 as libc::c_int as libc::c_uint {} else {
            __assert_fail(
                b"vuint32 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                874 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint64 = -(123 as libc::c_int) as int64;
    vuint64 = 0 as libc::c_int as uint64;
    if copy_int_value(
        &mut vint64 as *mut int64 as *mut libc::c_void,
        &mut vuint64 as *mut uint64 as *mut libc::c_void,
        0x81 as libc::c_int,
        0x80 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint64, &vuint64, BINN_INT64, BINN_UINT64) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            877 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_26178: {
        if copy_int_value(
            &mut vint64 as *mut int64 as *mut libc::c_void,
            &mut vuint64 as *mut uint64 as *mut libc::c_void,
            0x81 as libc::c_int,
            0x80 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint64, &vuint64, BINN_INT64, BINN_UINT64) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                877 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64 == -(123 as libc::c_int) as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == -123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            878 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_26138: {
        if vint64 == -(123 as libc::c_int) as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == -123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                878 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint64 == 0 as libc::c_int as libc::c_ulonglong {} else {
        __assert_fail(
            b"vuint64 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            879 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_26100: {
        if vuint64 == 0 as libc::c_int as libc::c_ulonglong {} else {
            __assert_fail(
                b"vuint64 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                879 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint16 = -(32000 as libc::c_int) as libc::c_short;
    vint8 = 0 as libc::c_int as libc::c_schar;
    if copy_int_value(
        &mut vint16 as *mut libc::c_short as *mut libc::c_void,
        &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
        0x41 as libc::c_int,
        0x21 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint16, &vint8, BINN_INT16, BINN_INT8) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            885 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_26037: {
        if copy_int_value(
            &mut vint16 as *mut libc::c_short as *mut libc::c_void,
            &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
            0x41 as libc::c_int,
            0x21 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint16, &vint8, BINN_INT16, BINN_INT8) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                885 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint16 as libc::c_int == -(32000 as libc::c_int) {} else {
        __assert_fail(
            b"vint16 == -32000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            886 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_25997: {
        if vint16 as libc::c_int == -(32000 as libc::c_int) {} else {
            __assert_fail(
                b"vint16 == -32000\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                886 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint8 as libc::c_int == 0 as libc::c_int {} else {
        __assert_fail(
            b"vint8 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            887 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_25959: {
        if vint8 as libc::c_int == 0 as libc::c_int {} else {
            __assert_fail(
                b"vint8 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                887 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = -(250 as libc::c_int);
    vint8 = 0 as libc::c_int as libc::c_schar;
    if copy_int_value(
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
        0x61 as libc::c_int,
        0x21 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint32, &vint8, BINN_INT32, BINN_INT8) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            891 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_25897: {
        if copy_int_value(
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
            0x61 as libc::c_int,
            0x21 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint32, &vint8, BINN_INT32, BINN_INT8) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                891 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32 == -(250 as libc::c_int) {} else {
        __assert_fail(
            b"vint32 == -250\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            892 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_25859: {
        if vint32 == -(250 as libc::c_int) {} else {
            __assert_fail(
                b"vint32 == -250\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                892 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint8 as libc::c_int == 0 as libc::c_int {} else {
        __assert_fail(
            b"vint8 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            893 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_25821: {
        if vint8 as libc::c_int == 0 as libc::c_int {} else {
            __assert_fail(
                b"vint8 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                893 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = -(35000 as libc::c_int);
    vint16 = 0 as libc::c_int as libc::c_short;
    if copy_int_value(
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        &mut vint16 as *mut libc::c_short as *mut libc::c_void,
        0x61 as libc::c_int,
        0x41 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint32, &vint16, BINN_INT32, BINN_INT16) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            896 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_25759: {
        if copy_int_value(
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            &mut vint16 as *mut libc::c_short as *mut libc::c_void,
            0x61 as libc::c_int,
            0x41 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint32, &vint16, BINN_INT32, BINN_INT16) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                896 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32 == -(35000 as libc::c_int) {} else {
        __assert_fail(
            b"vint32 == -35000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            897 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_25721: {
        if vint32 == -(35000 as libc::c_int) {} else {
            __assert_fail(
                b"vint32 == -35000\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                897 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint16 as libc::c_int == 0 as libc::c_int {} else {
        __assert_fail(
            b"vint16 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            898 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_25683: {
        if vint16 as libc::c_int == 0 as libc::c_int {} else {
            __assert_fail(
                b"vint16 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                898 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint64 = -(250 as libc::c_int) as int64;
    vint8 = 0 as libc::c_int as libc::c_schar;
    if copy_int_value(
        &mut vint64 as *mut int64 as *mut libc::c_void,
        &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
        0x81 as libc::c_int,
        0x21 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint64, &vint8, BINN_INT64, BINN_INT8) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            902 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_25620: {
        if copy_int_value(
            &mut vint64 as *mut int64 as *mut libc::c_void,
            &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
            0x81 as libc::c_int,
            0x21 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint64, &vint8, BINN_INT64, BINN_INT8) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                902 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64 == -(250 as libc::c_int) as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == -250\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            903 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_25580: {
        if vint64 == -(250 as libc::c_int) as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == -250\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                903 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint8 as libc::c_int == 0 as libc::c_int {} else {
        __assert_fail(
            b"vint8 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            904 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_25542: {
        if vint8 as libc::c_int == 0 as libc::c_int {} else {
            __assert_fail(
                b"vint8 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                904 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint64 = -(35000 as libc::c_int) as int64;
    vint16 = 0 as libc::c_int as libc::c_short;
    if copy_int_value(
        &mut vint64 as *mut int64 as *mut libc::c_void,
        &mut vint16 as *mut libc::c_short as *mut libc::c_void,
        0x81 as libc::c_int,
        0x41 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint64, &vint16, BINN_INT64, BINN_INT16) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            907 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_25479: {
        if copy_int_value(
            &mut vint64 as *mut int64 as *mut libc::c_void,
            &mut vint16 as *mut libc::c_short as *mut libc::c_void,
            0x81 as libc::c_int,
            0x41 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint64, &vint16, BINN_INT64, BINN_INT16) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                907 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64 == -(35000 as libc::c_int) as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == -35000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            908 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_25439: {
        if vint64 == -(35000 as libc::c_int) as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == -35000\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                908 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint16 as libc::c_int == 0 as libc::c_int {} else {
        __assert_fail(
            b"vint16 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            909 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_25401: {
        if vint16 as libc::c_int == 0 as libc::c_int {} else {
            __assert_fail(
                b"vint16 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                909 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint64 = -(25470000000 as libc::c_long) as int64;
    vint32 = 0 as libc::c_int;
    if copy_int_value(
        &mut vint64 as *mut int64 as *mut libc::c_void,
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        0x81 as libc::c_int,
        0x61 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint64, &vint32, BINN_INT64, BINN_INT32) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            912 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_25339: {
        if copy_int_value(
            &mut vint64 as *mut int64 as *mut libc::c_void,
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            0x81 as libc::c_int,
            0x61 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint64, &vint32, BINN_INT64, BINN_INT32) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                912 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64 == -(25470000000 as libc::c_long) as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == -25470000000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            913 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_25299: {
        if vint64 == -(25470000000 as libc::c_long) as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == -25470000000\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                913 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32 == 0 as libc::c_int {} else {
        __assert_fail(
            b"vint32 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            914 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_25263: {
        if vint32 == 0 as libc::c_int {} else {
            __assert_fail(
                b"vint32 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                914 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint16 = 250 as libc::c_int as libc::c_short;
    vint8 = 0 as libc::c_int as libc::c_schar;
    if copy_int_value(
        &mut vint16 as *mut libc::c_short as *mut libc::c_void,
        &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
        0x41 as libc::c_int,
        0x21 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint16, &vint8, BINN_INT16, BINN_INT8) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            920 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_25201: {
        if copy_int_value(
            &mut vint16 as *mut libc::c_short as *mut libc::c_void,
            &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
            0x41 as libc::c_int,
            0x21 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint16, &vint8, BINN_INT16, BINN_INT8) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                920 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint16 as libc::c_int == 250 as libc::c_int {} else {
        __assert_fail(
            b"vint16 == 250\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            921 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_25163: {
        if vint16 as libc::c_int == 250 as libc::c_int {} else {
            __assert_fail(
                b"vint16 == 250\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                921 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint8 as libc::c_int == 0 as libc::c_int {} else {
        __assert_fail(
            b"vint8 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            922 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_25125: {
        if vint8 as libc::c_int == 0 as libc::c_int {} else {
            __assert_fail(
                b"vint8 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                922 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = 250 as libc::c_int;
    vint8 = 0 as libc::c_int as libc::c_schar;
    if copy_int_value(
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
        0x61 as libc::c_int,
        0x21 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint32, &vint8, BINN_INT32, BINN_INT8) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            926 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_25064: {
        if copy_int_value(
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
            0x61 as libc::c_int,
            0x21 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint32, &vint8, BINN_INT32, BINN_INT8) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                926 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32 == 250 as libc::c_int {} else {
        __assert_fail(
            b"vint32 == 250\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            927 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_25028: {
        if vint32 == 250 as libc::c_int {} else {
            __assert_fail(
                b"vint32 == 250\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                927 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint8 as libc::c_int == 0 as libc::c_int {} else {
        __assert_fail(
            b"vint8 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            928 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_24990: {
        if vint8 as libc::c_int == 0 as libc::c_int {} else {
            __assert_fail(
                b"vint8 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                928 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = 35000 as libc::c_int;
    vint16 = 0 as libc::c_int as libc::c_short;
    if copy_int_value(
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        &mut vint16 as *mut libc::c_short as *mut libc::c_void,
        0x61 as libc::c_int,
        0x41 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint32, &vint16, BINN_INT32, BINN_INT16) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            931 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_24929: {
        if copy_int_value(
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            &mut vint16 as *mut libc::c_short as *mut libc::c_void,
            0x61 as libc::c_int,
            0x41 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint32, &vint16, BINN_INT32, BINN_INT16) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                931 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32 == 35000 as libc::c_int {} else {
        __assert_fail(
            b"vint32 == 35000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            932 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_24893: {
        if vint32 == 35000 as libc::c_int {} else {
            __assert_fail(
                b"vint32 == 35000\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                932 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint16 as libc::c_int == 0 as libc::c_int {} else {
        __assert_fail(
            b"vint16 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            933 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_24855: {
        if vint16 as libc::c_int == 0 as libc::c_int {} else {
            __assert_fail(
                b"vint16 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                933 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint64 = 250 as libc::c_int as int64;
    vint8 = 0 as libc::c_int as libc::c_schar;
    if copy_int_value(
        &mut vint64 as *mut int64 as *mut libc::c_void,
        &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
        0x81 as libc::c_int,
        0x21 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint64, &vint8, BINN_INT64, BINN_INT8) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            937 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_24793: {
        if copy_int_value(
            &mut vint64 as *mut int64 as *mut libc::c_void,
            &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
            0x81 as libc::c_int,
            0x21 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint64, &vint8, BINN_INT64, BINN_INT8) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                937 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64 == 250 as libc::c_int as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == 250\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            938 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_24755: {
        if vint64 == 250 as libc::c_int as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == 250\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                938 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint8 as libc::c_int == 0 as libc::c_int {} else {
        __assert_fail(
            b"vint8 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            939 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_24717: {
        if vint8 as libc::c_int == 0 as libc::c_int {} else {
            __assert_fail(
                b"vint8 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                939 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint64 = 35000 as libc::c_int as int64;
    vint16 = 0 as libc::c_int as libc::c_short;
    if copy_int_value(
        &mut vint64 as *mut int64 as *mut libc::c_void,
        &mut vint16 as *mut libc::c_short as *mut libc::c_void,
        0x81 as libc::c_int,
        0x41 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint64, &vint16, BINN_INT64, BINN_INT16) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            942 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_24655: {
        if copy_int_value(
            &mut vint64 as *mut int64 as *mut libc::c_void,
            &mut vint16 as *mut libc::c_short as *mut libc::c_void,
            0x81 as libc::c_int,
            0x41 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint64, &vint16, BINN_INT64, BINN_INT16) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                942 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64 == 35000 as libc::c_int as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == 35000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            943 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_24617: {
        if vint64 == 35000 as libc::c_int as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == 35000\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                943 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint16 as libc::c_int == 0 as libc::c_int {} else {
        __assert_fail(
            b"vint16 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            944 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_24579: {
        if vint16 as libc::c_int == 0 as libc::c_int {} else {
            __assert_fail(
                b"vint16 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                944 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint64 = 25470000000 as libc::c_long as int64;
    vint32 = 0 as libc::c_int;
    if copy_int_value(
        &mut vint64 as *mut int64 as *mut libc::c_void,
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        0x81 as libc::c_int,
        0x61 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint64, &vint32, BINN_INT64, BINN_INT32) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            947 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_24518: {
        if copy_int_value(
            &mut vint64 as *mut int64 as *mut libc::c_void,
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            0x81 as libc::c_int,
            0x61 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint64, &vint32, BINN_INT64, BINN_INT32) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                947 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64 == 25470000000 as libc::c_long as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == 25470000000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            948 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_24480: {
        if vint64 == 25470000000 as libc::c_long as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == 25470000000\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                948 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32 == 0 as libc::c_int {} else {
        __assert_fail(
            b"vint32 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            949 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_24444: {
        if vint32 == 0 as libc::c_int {} else {
            __assert_fail(
                b"vint32 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                949 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint16 = 300 as libc::c_int as libc::c_short;
    vuint8 = 0 as libc::c_int as libc::c_uchar;
    if copy_int_value(
        &mut vint16 as *mut libc::c_short as *mut libc::c_void,
        &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
        0x41 as libc::c_int,
        0x20 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint16, &vuint8, BINN_INT16, BINN_UINT8) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            956 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_24382: {
        if copy_int_value(
            &mut vint16 as *mut libc::c_short as *mut libc::c_void,
            &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
            0x41 as libc::c_int,
            0x20 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint16, &vuint8, BINN_INT16, BINN_UINT8) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                956 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint16 as libc::c_int == 300 as libc::c_int {} else {
        __assert_fail(
            b"vint16 == 300\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            957 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_24344: {
        if vint16 as libc::c_int == 300 as libc::c_int {} else {
            __assert_fail(
                b"vint16 == 300\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                957 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint8 as libc::c_int == 0 as libc::c_int {} else {
        __assert_fail(
            b"vuint8 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            958 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_24306: {
        if vuint8 as libc::c_int == 0 as libc::c_int {} else {
            __assert_fail(
                b"vuint8 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                958 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = 300 as libc::c_int;
    vuint8 = 0 as libc::c_int as libc::c_uchar;
    if copy_int_value(
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
        0x61 as libc::c_int,
        0x20 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint32, &vuint8, BINN_INT32, BINN_UINT8) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            962 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_24245: {
        if copy_int_value(
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
            0x61 as libc::c_int,
            0x20 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint32, &vuint8, BINN_INT32, BINN_UINT8) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                962 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32 == 300 as libc::c_int {} else {
        __assert_fail(
            b"vint32 == 300\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            963 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_24209: {
        if vint32 == 300 as libc::c_int {} else {
            __assert_fail(
                b"vint32 == 300\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                963 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint8 as libc::c_int == 0 as libc::c_int {} else {
        __assert_fail(
            b"vuint8 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            964 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_24171: {
        if vuint8 as libc::c_int == 0 as libc::c_int {} else {
            __assert_fail(
                b"vuint8 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                964 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = 70000 as libc::c_int;
    vuint16 = 0 as libc::c_int as libc::c_ushort;
    if copy_int_value(
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        &mut vuint16 as *mut libc::c_ushort as *mut libc::c_void,
        0x61 as libc::c_int,
        0x40 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint32, &vuint16, BINN_INT32, BINN_UINT16) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            967 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_24110: {
        if copy_int_value(
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            &mut vuint16 as *mut libc::c_ushort as *mut libc::c_void,
            0x61 as libc::c_int,
            0x40 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint32, &vuint16, BINN_INT32, BINN_UINT16) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                967 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32 == 70000 as libc::c_int {} else {
        __assert_fail(
            b"vint32 == 70000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            968 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_24074: {
        if vint32 == 70000 as libc::c_int {} else {
            __assert_fail(
                b"vint32 == 70000\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                968 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint16 as libc::c_int == 0 as libc::c_int {} else {
        __assert_fail(
            b"vuint16 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            969 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_24036: {
        if vuint16 as libc::c_int == 0 as libc::c_int {} else {
            __assert_fail(
                b"vuint16 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                969 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint64 = 300 as libc::c_int as int64;
    vuint8 = 0 as libc::c_int as libc::c_uchar;
    if copy_int_value(
        &mut vint64 as *mut int64 as *mut libc::c_void,
        &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
        0x81 as libc::c_int,
        0x20 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint64, &vuint8, BINN_INT64, BINN_UINT8) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            973 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_23974: {
        if copy_int_value(
            &mut vint64 as *mut int64 as *mut libc::c_void,
            &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
            0x81 as libc::c_int,
            0x20 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint64, &vuint8, BINN_INT64, BINN_UINT8) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                973 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64 == 300 as libc::c_int as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == 300\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            974 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_23936: {
        if vint64 == 300 as libc::c_int as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == 300\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                974 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint8 as libc::c_int == 0 as libc::c_int {} else {
        __assert_fail(
            b"vuint8 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            975 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_23898: {
        if vuint8 as libc::c_int == 0 as libc::c_int {} else {
            __assert_fail(
                b"vuint8 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                975 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint64 = 70000 as libc::c_int as int64;
    vuint16 = 0 as libc::c_int as libc::c_ushort;
    if copy_int_value(
        &mut vint64 as *mut int64 as *mut libc::c_void,
        &mut vuint16 as *mut libc::c_ushort as *mut libc::c_void,
        0x81 as libc::c_int,
        0x40 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint64, &vuint16, BINN_INT64, BINN_UINT16) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            978 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_23836: {
        if copy_int_value(
            &mut vint64 as *mut int64 as *mut libc::c_void,
            &mut vuint16 as *mut libc::c_ushort as *mut libc::c_void,
            0x81 as libc::c_int,
            0x40 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint64, &vuint16, BINN_INT64, BINN_UINT16) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                978 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64 == 70000 as libc::c_int as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == 70000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            979 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_23798: {
        if vint64 == 70000 as libc::c_int as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == 70000\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                979 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint16 as libc::c_int == 0 as libc::c_int {} else {
        __assert_fail(
            b"vuint16 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            980 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_23760: {
        if vuint16 as libc::c_int == 0 as libc::c_int {} else {
            __assert_fail(
                b"vuint16 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                980 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint64 = 25470000000 as libc::c_long as int64;
    vuint32 = 0 as libc::c_int as libc::c_uint;
    if copy_int_value(
        &mut vint64 as *mut int64 as *mut libc::c_void,
        &mut vuint32 as *mut libc::c_uint as *mut libc::c_void,
        0x81 as libc::c_int,
        0x60 as libc::c_int,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint64, &vuint32, BINN_INT64, BINN_UINT32) == FALSE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            983 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_23698: {
        if copy_int_value(
            &mut vint64 as *mut int64 as *mut libc::c_void,
            &mut vuint32 as *mut libc::c_uint as *mut libc::c_void,
            0x81 as libc::c_int,
            0x60 as libc::c_int,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint64, &vuint32, BINN_INT64, BINN_UINT32) == FALSE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                983 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64 == 25470000000 as libc::c_long as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == 25470000000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            984 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_23660: {
        if vint64 == 25470000000 as libc::c_long as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == 25470000000\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                984 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint32 == 0 as libc::c_int as libc::c_uint {} else {
        __assert_fail(
            b"vuint32 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            985 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_23622: {
        if vuint32 == 0 as libc::c_int as libc::c_uint {} else {
            __assert_fail(
                b"vuint32 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                985 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint8 = 123 as libc::c_int as libc::c_schar;
    vint16 = 0 as libc::c_int as libc::c_short;
    if copy_int_value(
        &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
        &mut vint16 as *mut libc::c_short as *mut libc::c_void,
        0x21 as libc::c_int,
        0x41 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint8, &vint16, BINN_INT8, BINN_INT16) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            995 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_23560: {
        if copy_int_value(
            &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
            &mut vint16 as *mut libc::c_short as *mut libc::c_void,
            0x21 as libc::c_int,
            0x41 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint8, &vint16, BINN_INT8, BINN_INT16) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                995 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint8 as libc::c_int == 123 as libc::c_int {} else {
        __assert_fail(
            b"vint8 == 123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            996 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_23522: {
        if vint8 as libc::c_int == 123 as libc::c_int {} else {
            __assert_fail(
                b"vint8 == 123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                996 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint16 as libc::c_int == 123 as libc::c_int {} else {
        __assert_fail(
            b"vint16 == 123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            997 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_23484: {
        if vint16 as libc::c_int == 123 as libc::c_int {} else {
            __assert_fail(
                b"vint16 == 123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                997 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint8 = -(110 as libc::c_int) as libc::c_schar;
    vint16 = 0 as libc::c_int as libc::c_short;
    if copy_int_value(
        &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
        &mut vint16 as *mut libc::c_short as *mut libc::c_void,
        0x21 as libc::c_int,
        0x41 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint8, &vint16, BINN_INT8, BINN_INT16) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1000 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_23421: {
        if copy_int_value(
            &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
            &mut vint16 as *mut libc::c_short as *mut libc::c_void,
            0x21 as libc::c_int,
            0x41 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint8, &vint16, BINN_INT8, BINN_INT16) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1000 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint8 as libc::c_int == -(110 as libc::c_int) {} else {
        __assert_fail(
            b"vint8 == -110\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1001 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_23381: {
        if vint8 as libc::c_int == -(110 as libc::c_int) {} else {
            __assert_fail(
                b"vint8 == -110\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1001 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint16 as libc::c_int == -(110 as libc::c_int) {} else {
        __assert_fail(
            b"vint16 == -110\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1002 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_23341: {
        if vint16 as libc::c_int == -(110 as libc::c_int) {} else {
            __assert_fail(
                b"vint16 == -110\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1002 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint8 = 123 as libc::c_int as libc::c_schar;
    vint32 = 0 as libc::c_int;
    if copy_int_value(
        &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        0x21 as libc::c_int,
        0x61 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint8, &vint32, BINN_INT8, BINN_INT32) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1005 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_23280: {
        if copy_int_value(
            &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            0x21 as libc::c_int,
            0x61 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint8, &vint32, BINN_INT8, BINN_INT32) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1005 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint8 as libc::c_int == 123 as libc::c_int {} else {
        __assert_fail(
            b"vint8 == 123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1006 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_23242: {
        if vint8 as libc::c_int == 123 as libc::c_int {} else {
            __assert_fail(
                b"vint8 == 123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1006 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32 == 123 as libc::c_int {} else {
        __assert_fail(
            b"vint32 == 123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1007 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_23206: {
        if vint32 == 123 as libc::c_int {} else {
            __assert_fail(
                b"vint32 == 123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1007 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint8 = -(110 as libc::c_int) as libc::c_schar;
    vint32 = 0 as libc::c_int;
    if copy_int_value(
        &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        0x21 as libc::c_int,
        0x61 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint8, &vint32, BINN_INT8, BINN_INT32) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1010 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_23144: {
        if copy_int_value(
            &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            0x21 as libc::c_int,
            0x61 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint8, &vint32, BINN_INT8, BINN_INT32) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1010 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint8 as libc::c_int == -(110 as libc::c_int) {} else {
        __assert_fail(
            b"vint8 == -110\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1011 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_23104: {
        if vint8 as libc::c_int == -(110 as libc::c_int) {} else {
            __assert_fail(
                b"vint8 == -110\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1011 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32 == -(110 as libc::c_int) {} else {
        __assert_fail(
            b"vint32 == -110\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1012 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_23066: {
        if vint32 == -(110 as libc::c_int) {} else {
            __assert_fail(
                b"vint32 == -110\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1012 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint8 = 123 as libc::c_int as libc::c_schar;
    vint64 = 0 as libc::c_int as int64;
    if copy_int_value(
        &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
        &mut vint64 as *mut int64 as *mut libc::c_void,
        0x21 as libc::c_int,
        0x81 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint8, &vint64, BINN_INT8, BINN_INT64) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1015 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_23004: {
        if copy_int_value(
            &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
            &mut vint64 as *mut int64 as *mut libc::c_void,
            0x21 as libc::c_int,
            0x81 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint8, &vint64, BINN_INT8, BINN_INT64) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1015 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint8 as libc::c_int == 123 as libc::c_int {} else {
        __assert_fail(
            b"vint8 == 123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1016 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_22966: {
        if vint8 as libc::c_int == 123 as libc::c_int {} else {
            __assert_fail(
                b"vint8 == 123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1016 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64 == 123 as libc::c_int as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == 123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1017 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_22928: {
        if vint64 == 123 as libc::c_int as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == 123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1017 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint8 = -(120 as libc::c_int) as libc::c_schar;
    vint64 = 0 as libc::c_int as int64;
    if copy_int_value(
        &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
        &mut vint64 as *mut int64 as *mut libc::c_void,
        0x21 as libc::c_int,
        0x81 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint8, &vint64, BINN_INT8, BINN_INT64) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1020 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_22865: {
        if copy_int_value(
            &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
            &mut vint64 as *mut int64 as *mut libc::c_void,
            0x21 as libc::c_int,
            0x81 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint8, &vint64, BINN_INT8, BINN_INT64) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1020 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint8 as libc::c_int == -(120 as libc::c_int) {} else {
        __assert_fail(
            b"vint8 == -120\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1021 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_22825: {
        if vint8 as libc::c_int == -(120 as libc::c_int) {} else {
            __assert_fail(
                b"vint8 == -120\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1021 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64 == -(120 as libc::c_int) as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == -120\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1022 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_22785: {
        if vint64 == -(120 as libc::c_int) as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == -120\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1022 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint8 = 123 as libc::c_int as libc::c_schar;
    vuint16 = 0 as libc::c_int as libc::c_ushort;
    if copy_int_value(
        &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
        &mut vuint16 as *mut libc::c_ushort as *mut libc::c_void,
        0x21 as libc::c_int,
        0x40 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint8, &vuint16, BINN_INT8, BINN_UINT16) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1028 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_22723: {
        if copy_int_value(
            &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
            &mut vuint16 as *mut libc::c_ushort as *mut libc::c_void,
            0x21 as libc::c_int,
            0x40 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint8, &vuint16, BINN_INT8, BINN_UINT16) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1028 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint8 as libc::c_int == 123 as libc::c_int {} else {
        __assert_fail(
            b"vint8 == 123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1029 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_22685: {
        if vint8 as libc::c_int == 123 as libc::c_int {} else {
            __assert_fail(
                b"vint8 == 123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1029 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint16 as libc::c_int == 123 as libc::c_int {} else {
        __assert_fail(
            b"vuint16 == 123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1030 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_22647: {
        if vuint16 as libc::c_int == 123 as libc::c_int {} else {
            __assert_fail(
                b"vuint16 == 123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1030 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint8 = 123 as libc::c_int as libc::c_schar;
    vuint32 = 0 as libc::c_int as libc::c_uint;
    if copy_int_value(
        &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
        &mut vuint32 as *mut libc::c_uint as *mut libc::c_void,
        0x21 as libc::c_int,
        0x60 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint8, &vuint32, BINN_INT8, BINN_UINT32) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1033 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_22585: {
        if copy_int_value(
            &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
            &mut vuint32 as *mut libc::c_uint as *mut libc::c_void,
            0x21 as libc::c_int,
            0x60 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint8, &vuint32, BINN_INT8, BINN_UINT32) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1033 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint8 as libc::c_int == 123 as libc::c_int {} else {
        __assert_fail(
            b"vint8 == 123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1034 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_22547: {
        if vint8 as libc::c_int == 123 as libc::c_int {} else {
            __assert_fail(
                b"vint8 == 123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1034 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint32 == 123 as libc::c_int as libc::c_uint {} else {
        __assert_fail(
            b"vuint32 == 123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1035 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_22509: {
        if vuint32 == 123 as libc::c_int as libc::c_uint {} else {
            __assert_fail(
                b"vuint32 == 123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1035 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint8 = 123 as libc::c_int as libc::c_schar;
    vuint64 = 0 as libc::c_int as uint64;
    if copy_int_value(
        &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
        &mut vuint64 as *mut uint64 as *mut libc::c_void,
        0x21 as libc::c_int,
        0x80 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint8, &vuint64, BINN_INT8, BINN_UINT64) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1038 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_22447: {
        if copy_int_value(
            &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
            &mut vuint64 as *mut uint64 as *mut libc::c_void,
            0x21 as libc::c_int,
            0x80 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint8, &vuint64, BINN_INT8, BINN_UINT64) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1038 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint8 as libc::c_int == 123 as libc::c_int {} else {
        __assert_fail(
            b"vint8 == 123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1039 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_22409: {
        if vint8 as libc::c_int == 123 as libc::c_int {} else {
            __assert_fail(
                b"vint8 == 123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1039 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint64 == 123 as libc::c_int as libc::c_ulonglong {} else {
        __assert_fail(
            b"vuint64 == 123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1040 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_22371: {
        if vuint64 == 123 as libc::c_int as libc::c_ulonglong {} else {
            __assert_fail(
                b"vuint64 == 123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1040 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vuint8 = 123 as libc::c_int as libc::c_uchar;
    vint16 = 0 as libc::c_int as libc::c_short;
    if copy_int_value(
        &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
        &mut vint16 as *mut libc::c_short as *mut libc::c_void,
        0x20 as libc::c_int,
        0x41 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vuint8, &vint16, BINN_UINT8, BINN_INT16) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1047 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_22309: {
        if copy_int_value(
            &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
            &mut vint16 as *mut libc::c_short as *mut libc::c_void,
            0x20 as libc::c_int,
            0x41 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vuint8, &vint16, BINN_UINT8, BINN_INT16) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1047 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint8 as libc::c_int == 123 as libc::c_int {} else {
        __assert_fail(
            b"vuint8 == 123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1048 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_22271: {
        if vuint8 as libc::c_int == 123 as libc::c_int {} else {
            __assert_fail(
                b"vuint8 == 123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1048 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint16 as libc::c_int == 123 as libc::c_int {} else {
        __assert_fail(
            b"vint16 == 123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1049 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_22233: {
        if vint16 as libc::c_int == 123 as libc::c_int {} else {
            __assert_fail(
                b"vint16 == 123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1049 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vuint8 = 250 as libc::c_int as libc::c_uchar;
    vint16 = 0 as libc::c_int as libc::c_short;
    if copy_int_value(
        &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
        &mut vint16 as *mut libc::c_short as *mut libc::c_void,
        0x20 as libc::c_int,
        0x41 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vuint8, &vint16, BINN_UINT8, BINN_INT16) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1052 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_22171: {
        if copy_int_value(
            &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
            &mut vint16 as *mut libc::c_short as *mut libc::c_void,
            0x20 as libc::c_int,
            0x41 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vuint8, &vint16, BINN_UINT8, BINN_INT16) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1052 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint8 as libc::c_int == 250 as libc::c_int {} else {
        __assert_fail(
            b"vuint8 == 250\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1053 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_22133: {
        if vuint8 as libc::c_int == 250 as libc::c_int {} else {
            __assert_fail(
                b"vuint8 == 250\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1053 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint16 as libc::c_int == 250 as libc::c_int {} else {
        __assert_fail(
            b"vint16 == 250\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1054 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_22095: {
        if vint16 as libc::c_int == 250 as libc::c_int {} else {
            __assert_fail(
                b"vint16 == 250\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1054 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vuint8 = 123 as libc::c_int as libc::c_uchar;
    vint32 = 0 as libc::c_int;
    if copy_int_value(
        &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        0x20 as libc::c_int,
        0x61 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vuint8, &vint32, BINN_UINT8, BINN_INT32) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1057 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_22034: {
        if copy_int_value(
            &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            0x20 as libc::c_int,
            0x61 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vuint8, &vint32, BINN_UINT8, BINN_INT32) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1057 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint8 as libc::c_int == 123 as libc::c_int {} else {
        __assert_fail(
            b"vuint8 == 123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1058 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_21996: {
        if vuint8 as libc::c_int == 123 as libc::c_int {} else {
            __assert_fail(
                b"vuint8 == 123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1058 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32 == 123 as libc::c_int {} else {
        __assert_fail(
            b"vint32 == 123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1059 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_21960: {
        if vint32 == 123 as libc::c_int {} else {
            __assert_fail(
                b"vint32 == 123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1059 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vuint8 = 250 as libc::c_int as libc::c_uchar;
    vint32 = 0 as libc::c_int;
    if copy_int_value(
        &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        0x20 as libc::c_int,
        0x61 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vuint8, &vint32, BINN_UINT8, BINN_INT32) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1062 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_21899: {
        if copy_int_value(
            &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            0x20 as libc::c_int,
            0x61 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vuint8, &vint32, BINN_UINT8, BINN_INT32) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1062 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint8 as libc::c_int == 250 as libc::c_int {} else {
        __assert_fail(
            b"vuint8 == 250\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1063 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_21861: {
        if vuint8 as libc::c_int == 250 as libc::c_int {} else {
            __assert_fail(
                b"vuint8 == 250\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1063 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32 == 250 as libc::c_int {} else {
        __assert_fail(
            b"vint32 == 250\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1064 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_21825: {
        if vint32 == 250 as libc::c_int {} else {
            __assert_fail(
                b"vint32 == 250\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1064 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vuint8 = 123 as libc::c_int as libc::c_uchar;
    vint64 = 0 as libc::c_int as int64;
    if copy_int_value(
        &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
        &mut vint64 as *mut int64 as *mut libc::c_void,
        0x20 as libc::c_int,
        0x81 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vuint8, &vint64, BINN_UINT8, BINN_INT64) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1067 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_21763: {
        if copy_int_value(
            &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
            &mut vint64 as *mut int64 as *mut libc::c_void,
            0x20 as libc::c_int,
            0x81 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vuint8, &vint64, BINN_UINT8, BINN_INT64) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1067 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint8 as libc::c_int == 123 as libc::c_int {} else {
        __assert_fail(
            b"vuint8 == 123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1068 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_21725: {
        if vuint8 as libc::c_int == 123 as libc::c_int {} else {
            __assert_fail(
                b"vuint8 == 123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1068 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64 == 123 as libc::c_int as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == 123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1069 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_21687: {
        if vint64 == 123 as libc::c_int as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == 123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1069 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vuint8 = 250 as libc::c_int as libc::c_uchar;
    vint64 = 0 as libc::c_int as int64;
    if copy_int_value(
        &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
        &mut vint64 as *mut int64 as *mut libc::c_void,
        0x20 as libc::c_int,
        0x81 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vuint8, &vint64, BINN_UINT8, BINN_INT64) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1072 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_21625: {
        if copy_int_value(
            &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
            &mut vint64 as *mut int64 as *mut libc::c_void,
            0x20 as libc::c_int,
            0x81 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vuint8, &vint64, BINN_UINT8, BINN_INT64) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1072 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint8 as libc::c_int == 250 as libc::c_int {} else {
        __assert_fail(
            b"vuint8 == 250\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1073 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_21587: {
        if vuint8 as libc::c_int == 250 as libc::c_int {} else {
            __assert_fail(
                b"vuint8 == 250\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1073 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64 == 250 as libc::c_int as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == 250\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1074 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_21549: {
        if vint64 == 250 as libc::c_int as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == 250\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1074 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vuint8 = 123 as libc::c_int as libc::c_uchar;
    vuint16 = 0 as libc::c_int as libc::c_ushort;
    if copy_int_value(
        &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
        &mut vuint16 as *mut libc::c_ushort as *mut libc::c_void,
        0x20 as libc::c_int,
        0x40 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vuint8, &vuint16, BINN_UINT8, BINN_UINT16) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1080 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_21487: {
        if copy_int_value(
            &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
            &mut vuint16 as *mut libc::c_ushort as *mut libc::c_void,
            0x20 as libc::c_int,
            0x40 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vuint8, &vuint16, BINN_UINT8, BINN_UINT16) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1080 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint8 as libc::c_int == 123 as libc::c_int {} else {
        __assert_fail(
            b"vuint8 == 123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1081 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_21449: {
        if vuint8 as libc::c_int == 123 as libc::c_int {} else {
            __assert_fail(
                b"vuint8 == 123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1081 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint16 as libc::c_int == 123 as libc::c_int {} else {
        __assert_fail(
            b"vuint16 == 123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1082 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_21411: {
        if vuint16 as libc::c_int == 123 as libc::c_int {} else {
            __assert_fail(
                b"vuint16 == 123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1082 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vuint8 = 250 as libc::c_int as libc::c_uchar;
    vuint16 = 0 as libc::c_int as libc::c_ushort;
    if copy_int_value(
        &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
        &mut vuint16 as *mut libc::c_ushort as *mut libc::c_void,
        0x20 as libc::c_int,
        0x40 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vuint8, &vuint16, BINN_UINT8, BINN_UINT16) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1085 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_21349: {
        if copy_int_value(
            &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
            &mut vuint16 as *mut libc::c_ushort as *mut libc::c_void,
            0x20 as libc::c_int,
            0x40 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vuint8, &vuint16, BINN_UINT8, BINN_UINT16) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1085 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint8 as libc::c_int == 250 as libc::c_int {} else {
        __assert_fail(
            b"vuint8 == 250\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1086 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_21311: {
        if vuint8 as libc::c_int == 250 as libc::c_int {} else {
            __assert_fail(
                b"vuint8 == 250\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1086 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint16 as libc::c_int == 250 as libc::c_int {} else {
        __assert_fail(
            b"vuint16 == 250\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1087 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_21273: {
        if vuint16 as libc::c_int == 250 as libc::c_int {} else {
            __assert_fail(
                b"vuint16 == 250\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1087 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vuint8 = 123 as libc::c_int as libc::c_uchar;
    vuint32 = 0 as libc::c_int as libc::c_uint;
    if copy_int_value(
        &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
        &mut vuint32 as *mut libc::c_uint as *mut libc::c_void,
        0x20 as libc::c_int,
        0x60 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vuint8, &vuint32, BINN_UINT8, BINN_UINT32) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1090 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_21211: {
        if copy_int_value(
            &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
            &mut vuint32 as *mut libc::c_uint as *mut libc::c_void,
            0x20 as libc::c_int,
            0x60 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vuint8, &vuint32, BINN_UINT8, BINN_UINT32) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1090 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint8 as libc::c_int == 123 as libc::c_int {} else {
        __assert_fail(
            b"vuint8 == 123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1091 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_21173: {
        if vuint8 as libc::c_int == 123 as libc::c_int {} else {
            __assert_fail(
                b"vuint8 == 123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1091 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint32 == 123 as libc::c_int as libc::c_uint {} else {
        __assert_fail(
            b"vuint32 == 123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1092 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_21135: {
        if vuint32 == 123 as libc::c_int as libc::c_uint {} else {
            __assert_fail(
                b"vuint32 == 123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1092 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vuint8 = 250 as libc::c_int as libc::c_uchar;
    vuint32 = 0 as libc::c_int as libc::c_uint;
    if copy_int_value(
        &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
        &mut vuint32 as *mut libc::c_uint as *mut libc::c_void,
        0x20 as libc::c_int,
        0x60 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vuint8, &vuint32, BINN_UINT8, BINN_UINT32) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1095 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_21073: {
        if copy_int_value(
            &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
            &mut vuint32 as *mut libc::c_uint as *mut libc::c_void,
            0x20 as libc::c_int,
            0x60 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vuint8, &vuint32, BINN_UINT8, BINN_UINT32) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1095 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint8 as libc::c_int == 250 as libc::c_int {} else {
        __assert_fail(
            b"vuint8 == 250\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1096 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_21035: {
        if vuint8 as libc::c_int == 250 as libc::c_int {} else {
            __assert_fail(
                b"vuint8 == 250\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1096 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint32 == 250 as libc::c_int as libc::c_uint {} else {
        __assert_fail(
            b"vuint32 == 250\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1097 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_20997: {
        if vuint32 == 250 as libc::c_int as libc::c_uint {} else {
            __assert_fail(
                b"vuint32 == 250\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1097 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vuint8 = 123 as libc::c_int as libc::c_uchar;
    vuint64 = 0 as libc::c_int as uint64;
    if copy_int_value(
        &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
        &mut vuint64 as *mut uint64 as *mut libc::c_void,
        0x20 as libc::c_int,
        0x80 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vuint8, &vuint64, BINN_UINT8, BINN_UINT64) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1100 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_20935: {
        if copy_int_value(
            &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
            &mut vuint64 as *mut uint64 as *mut libc::c_void,
            0x20 as libc::c_int,
            0x80 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vuint8, &vuint64, BINN_UINT8, BINN_UINT64) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1100 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint8 as libc::c_int == 123 as libc::c_int {} else {
        __assert_fail(
            b"vuint8 == 123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1101 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_20897: {
        if vuint8 as libc::c_int == 123 as libc::c_int {} else {
            __assert_fail(
                b"vuint8 == 123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1101 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint64 == 123 as libc::c_int as libc::c_ulonglong {} else {
        __assert_fail(
            b"vuint64 == 123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1102 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_20859: {
        if vuint64 == 123 as libc::c_int as libc::c_ulonglong {} else {
            __assert_fail(
                b"vuint64 == 123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1102 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vuint8 = 250 as libc::c_int as libc::c_uchar;
    vuint64 = 0 as libc::c_int as uint64;
    if copy_int_value(
        &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
        &mut vuint64 as *mut uint64 as *mut libc::c_void,
        0x20 as libc::c_int,
        0x80 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vuint8, &vuint64, BINN_UINT8, BINN_UINT64) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1105 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_20797: {
        if copy_int_value(
            &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
            &mut vuint64 as *mut uint64 as *mut libc::c_void,
            0x20 as libc::c_int,
            0x80 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vuint8, &vuint64, BINN_UINT8, BINN_UINT64) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1105 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint8 as libc::c_int == 250 as libc::c_int {} else {
        __assert_fail(
            b"vuint8 == 250\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1106 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_20759: {
        if vuint8 as libc::c_int == 250 as libc::c_int {} else {
            __assert_fail(
                b"vuint8 == 250\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1106 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint64 == 250 as libc::c_int as libc::c_ulonglong {} else {
        __assert_fail(
            b"vuint64 == 250\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1107 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_20721: {
        if vuint64 == 250 as libc::c_int as libc::c_ulonglong {} else {
            __assert_fail(
                b"vuint64 == 250\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1107 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint16 = 250 as libc::c_int as libc::c_short;
    vuint8 = 0 as libc::c_int as libc::c_uchar;
    if copy_int_value(
        &mut vint16 as *mut libc::c_short as *mut libc::c_void,
        &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
        0x41 as libc::c_int,
        0x20 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint16, &vuint8, BINN_INT16, BINN_UINT8) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1113 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_20659: {
        if copy_int_value(
            &mut vint16 as *mut libc::c_short as *mut libc::c_void,
            &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
            0x41 as libc::c_int,
            0x20 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint16, &vuint8, BINN_INT16, BINN_UINT8) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1113 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint16 as libc::c_int == 250 as libc::c_int {} else {
        __assert_fail(
            b"vint16 == 250\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1114 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_20621: {
        if vint16 as libc::c_int == 250 as libc::c_int {} else {
            __assert_fail(
                b"vint16 == 250\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1114 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint8 as libc::c_int == 250 as libc::c_int {} else {
        __assert_fail(
            b"vuint8 == 250\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1115 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_20583: {
        if vuint8 as libc::c_int == 250 as libc::c_int {} else {
            __assert_fail(
                b"vuint8 == 250\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1115 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = 250 as libc::c_int;
    vuint8 = 0 as libc::c_int as libc::c_uchar;
    if copy_int_value(
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
        0x61 as libc::c_int,
        0x20 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint32, &vuint8, BINN_INT32, BINN_UINT8) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1119 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_20522: {
        if copy_int_value(
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
            0x61 as libc::c_int,
            0x20 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint32, &vuint8, BINN_INT32, BINN_UINT8) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1119 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32 == 250 as libc::c_int {} else {
        __assert_fail(
            b"vint32 == 250\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1120 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_20486: {
        if vint32 == 250 as libc::c_int {} else {
            __assert_fail(
                b"vint32 == 250\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1120 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint8 as libc::c_int == 250 as libc::c_int {} else {
        __assert_fail(
            b"vuint8 == 250\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1121 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_20448: {
        if vuint8 as libc::c_int == 250 as libc::c_int {} else {
            __assert_fail(
                b"vuint8 == 250\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1121 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = 35000 as libc::c_int;
    vuint16 = 0 as libc::c_int as libc::c_ushort;
    if copy_int_value(
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        &mut vuint16 as *mut libc::c_ushort as *mut libc::c_void,
        0x61 as libc::c_int,
        0x40 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint32, &vuint16, BINN_INT32, BINN_UINT16) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1124 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_20387: {
        if copy_int_value(
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            &mut vuint16 as *mut libc::c_ushort as *mut libc::c_void,
            0x61 as libc::c_int,
            0x40 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint32, &vuint16, BINN_INT32, BINN_UINT16) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1124 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32 == 35000 as libc::c_int {} else {
        __assert_fail(
            b"vint32 == 35000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1125 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_20351: {
        if vint32 == 35000 as libc::c_int {} else {
            __assert_fail(
                b"vint32 == 35000\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1125 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint16 as libc::c_int == 35000 as libc::c_int {} else {
        __assert_fail(
            b"vuint16 == 35000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1126 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_20313: {
        if vuint16 as libc::c_int == 35000 as libc::c_int {} else {
            __assert_fail(
                b"vuint16 == 35000\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1126 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint64 = 250 as libc::c_int as int64;
    vuint8 = 0 as libc::c_int as libc::c_uchar;
    if copy_int_value(
        &mut vint64 as *mut int64 as *mut libc::c_void,
        &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
        0x81 as libc::c_int,
        0x20 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint64, &vuint8, BINN_INT64, BINN_UINT8) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1130 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_20251: {
        if copy_int_value(
            &mut vint64 as *mut int64 as *mut libc::c_void,
            &mut vuint8 as *mut libc::c_uchar as *mut libc::c_void,
            0x81 as libc::c_int,
            0x20 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint64, &vuint8, BINN_INT64, BINN_UINT8) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1130 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64 == 250 as libc::c_int as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == 250\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1131 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_20213: {
        if vint64 == 250 as libc::c_int as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == 250\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1131 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint8 as libc::c_int == 250 as libc::c_int {} else {
        __assert_fail(
            b"vuint8 == 250\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1132 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_20175: {
        if vuint8 as libc::c_int == 250 as libc::c_int {} else {
            __assert_fail(
                b"vuint8 == 250\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1132 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint64 = 35000 as libc::c_int as int64;
    vuint16 = 0 as libc::c_int as libc::c_ushort;
    if copy_int_value(
        &mut vint64 as *mut int64 as *mut libc::c_void,
        &mut vuint16 as *mut libc::c_ushort as *mut libc::c_void,
        0x81 as libc::c_int,
        0x40 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint64, &vuint16, BINN_INT64, BINN_UINT16) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1135 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_20113: {
        if copy_int_value(
            &mut vint64 as *mut int64 as *mut libc::c_void,
            &mut vuint16 as *mut libc::c_ushort as *mut libc::c_void,
            0x81 as libc::c_int,
            0x40 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint64, &vuint16, BINN_INT64, BINN_UINT16) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1135 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64 == 35000 as libc::c_int as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == 35000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1136 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_20075: {
        if vint64 == 35000 as libc::c_int as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == 35000\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1136 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint16 as libc::c_int == 35000 as libc::c_int {} else {
        __assert_fail(
            b"vuint16 == 35000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1137 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_20037: {
        if vuint16 as libc::c_int == 35000 as libc::c_int {} else {
            __assert_fail(
                b"vuint16 == 35000\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1137 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint64 = 2147000000 as libc::c_int as int64;
    vuint32 = 0 as libc::c_int as libc::c_uint;
    if copy_int_value(
        &mut vint64 as *mut int64 as *mut libc::c_void,
        &mut vuint32 as *mut libc::c_uint as *mut libc::c_void,
        0x81 as libc::c_int,
        0x60 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint64, &vuint32, BINN_INT64, BINN_UINT32) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1140 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_19975: {
        if copy_int_value(
            &mut vint64 as *mut int64 as *mut libc::c_void,
            &mut vuint32 as *mut libc::c_uint as *mut libc::c_void,
            0x81 as libc::c_int,
            0x60 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint64, &vuint32, BINN_INT64, BINN_UINT32) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1140 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64 == 2147000000 as libc::c_int as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == 2147000000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1141 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_19937: {
        if vint64 == 2147000000 as libc::c_int as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == 2147000000\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1141 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vuint32 == 2147000000 as libc::c_int as libc::c_uint {} else {
        __assert_fail(
            b"vuint32 == 2147000000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1142 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_19899: {
        if vuint32 == 2147000000 as libc::c_int as libc::c_uint {} else {
            __assert_fail(
                b"vuint32 == 2147000000\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1142 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint8 = -(110 as libc::c_int) as libc::c_schar;
    vint16 = 0 as libc::c_int as libc::c_short;
    if copy_int_value(
        &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
        &mut vint16 as *mut libc::c_short as *mut libc::c_void,
        0x21 as libc::c_int,
        0x41 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint8, &vint16, BINN_INT8, BINN_INT16) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1151 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_19836: {
        if copy_int_value(
            &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
            &mut vint16 as *mut libc::c_short as *mut libc::c_void,
            0x21 as libc::c_int,
            0x41 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint8, &vint16, BINN_INT8, BINN_INT16) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1151 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint8 as libc::c_int == -(110 as libc::c_int) {} else {
        __assert_fail(
            b"vint8 == -110\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1152 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_19796: {
        if vint8 as libc::c_int == -(110 as libc::c_int) {} else {
            __assert_fail(
                b"vint8 == -110\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1152 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint16 as libc::c_int == -(110 as libc::c_int) {} else {
        __assert_fail(
            b"vint16 == -110\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1153 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_19756: {
        if vint16 as libc::c_int == -(110 as libc::c_int) {} else {
            __assert_fail(
                b"vint16 == -110\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1153 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint8 = -(110 as libc::c_int) as libc::c_schar;
    vint32 = 0 as libc::c_int;
    if copy_int_value(
        &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        0x21 as libc::c_int,
        0x61 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint8, &vint32, BINN_INT8, BINN_INT32) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1156 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_19694: {
        if copy_int_value(
            &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            0x21 as libc::c_int,
            0x61 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint8, &vint32, BINN_INT8, BINN_INT32) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1156 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint8 as libc::c_int == -(110 as libc::c_int) {} else {
        __assert_fail(
            b"vint8 == -110\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1157 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_19654: {
        if vint8 as libc::c_int == -(110 as libc::c_int) {} else {
            __assert_fail(
                b"vint8 == -110\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1157 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32 == -(110 as libc::c_int) {} else {
        __assert_fail(
            b"vint32 == -110\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1158 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_19616: {
        if vint32 == -(110 as libc::c_int) {} else {
            __assert_fail(
                b"vint32 == -110\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1158 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint8 = -(110 as libc::c_int) as libc::c_schar;
    vint64 = 0 as libc::c_int as int64;
    if copy_int_value(
        &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
        &mut vint64 as *mut int64 as *mut libc::c_void,
        0x21 as libc::c_int,
        0x81 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint8, &vint64, BINN_INT8, BINN_INT64) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1161 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_19553: {
        if copy_int_value(
            &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
            &mut vint64 as *mut int64 as *mut libc::c_void,
            0x21 as libc::c_int,
            0x81 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint8, &vint64, BINN_INT8, BINN_INT64) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1161 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint8 as libc::c_int == -(110 as libc::c_int) {} else {
        __assert_fail(
            b"vint8 == -110\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1162 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_19513: {
        if vint8 as libc::c_int == -(110 as libc::c_int) {} else {
            __assert_fail(
                b"vint8 == -110\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1162 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64 == -(110 as libc::c_int) as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == -110\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1163 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_19473: {
        if vint64 == -(110 as libc::c_int) as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == -110\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1163 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint16 = -(123 as libc::c_int) as libc::c_short;
    vint8 = 0 as libc::c_int as libc::c_schar;
    if copy_int_value(
        &mut vint16 as *mut libc::c_short as *mut libc::c_void,
        &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
        0x41 as libc::c_int,
        0x21 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint16, &vint8, BINN_INT16, BINN_INT8) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1167 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_19410: {
        if copy_int_value(
            &mut vint16 as *mut libc::c_short as *mut libc::c_void,
            &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
            0x41 as libc::c_int,
            0x21 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint16, &vint8, BINN_INT16, BINN_INT8) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1167 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint16 as libc::c_int == -(123 as libc::c_int) {} else {
        __assert_fail(
            b"vint16 == -123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1168 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_19370: {
        if vint16 as libc::c_int == -(123 as libc::c_int) {} else {
            __assert_fail(
                b"vint16 == -123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1168 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint8 as libc::c_int == -(123 as libc::c_int) {} else {
        __assert_fail(
            b"vint8 == -123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1169 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_19330: {
        if vint8 as libc::c_int == -(123 as libc::c_int) {} else {
            __assert_fail(
                b"vint8 == -123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1169 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint16 = -(32000 as libc::c_int) as libc::c_short;
    vint32 = 0 as libc::c_int;
    if copy_int_value(
        &mut vint16 as *mut libc::c_short as *mut libc::c_void,
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        0x41 as libc::c_int,
        0x61 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint16, &vint32, BINN_INT16, BINN_INT32) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1172 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_19268: {
        if copy_int_value(
            &mut vint16 as *mut libc::c_short as *mut libc::c_void,
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            0x41 as libc::c_int,
            0x61 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint16, &vint32, BINN_INT16, BINN_INT32) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1172 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint16 as libc::c_int == -(32000 as libc::c_int) {} else {
        __assert_fail(
            b"vint16 == -32000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1173 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_19228: {
        if vint16 as libc::c_int == -(32000 as libc::c_int) {} else {
            __assert_fail(
                b"vint16 == -32000\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1173 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32 == -(32000 as libc::c_int) {} else {
        __assert_fail(
            b"vint32 == -32000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1174 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_19190: {
        if vint32 == -(32000 as libc::c_int) {} else {
            __assert_fail(
                b"vint32 == -32000\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1174 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint16 = -(32000 as libc::c_int) as libc::c_short;
    vint64 = 0 as libc::c_int as int64;
    if copy_int_value(
        &mut vint16 as *mut libc::c_short as *mut libc::c_void,
        &mut vint64 as *mut int64 as *mut libc::c_void,
        0x41 as libc::c_int,
        0x81 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint16, &vint64, BINN_INT16, BINN_INT64) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1177 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_19127: {
        if copy_int_value(
            &mut vint16 as *mut libc::c_short as *mut libc::c_void,
            &mut vint64 as *mut int64 as *mut libc::c_void,
            0x41 as libc::c_int,
            0x81 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint16, &vint64, BINN_INT16, BINN_INT64) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1177 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint16 as libc::c_int == -(32000 as libc::c_int) {} else {
        __assert_fail(
            b"vint16 == -32000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1178 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_19087: {
        if vint16 as libc::c_int == -(32000 as libc::c_int) {} else {
            __assert_fail(
                b"vint16 == -32000\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1178 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64 == -(32000 as libc::c_int) as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == -32000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1179 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_19047: {
        if vint64 == -(32000 as libc::c_int) as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == -32000\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1179 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = -(123 as libc::c_int);
    vint8 = 0 as libc::c_int as libc::c_schar;
    if copy_int_value(
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
        0x61 as libc::c_int,
        0x21 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint32, &vint8, BINN_INT32, BINN_INT8) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1183 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_18985: {
        if copy_int_value(
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
            0x61 as libc::c_int,
            0x21 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint32, &vint8, BINN_INT32, BINN_INT8) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1183 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32 == -(123 as libc::c_int) {} else {
        __assert_fail(
            b"vint32 == -123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1184 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_18947: {
        if vint32 == -(123 as libc::c_int) {} else {
            __assert_fail(
                b"vint32 == -123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1184 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint8 as libc::c_int == -(123 as libc::c_int) {} else {
        __assert_fail(
            b"vint8 == -123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1185 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_18907: {
        if vint8 as libc::c_int == -(123 as libc::c_int) {} else {
            __assert_fail(
                b"vint8 == -123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1185 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = -(123 as libc::c_int);
    vint16 = 0 as libc::c_int as libc::c_short;
    if copy_int_value(
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        &mut vint16 as *mut libc::c_short as *mut libc::c_void,
        0x61 as libc::c_int,
        0x41 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint32, &vint16, BINN_INT32, BINN_INT16) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1188 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_18845: {
        if copy_int_value(
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            &mut vint16 as *mut libc::c_short as *mut libc::c_void,
            0x61 as libc::c_int,
            0x41 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint32, &vint16, BINN_INT32, BINN_INT16) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1188 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32 == -(123 as libc::c_int) {} else {
        __assert_fail(
            b"vint32 == -123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1189 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_18807: {
        if vint32 == -(123 as libc::c_int) {} else {
            __assert_fail(
                b"vint32 == -123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1189 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint16 as libc::c_int == -(123 as libc::c_int) {} else {
        __assert_fail(
            b"vint16 == -123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1190 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_18767: {
        if vint16 as libc::c_int == -(123 as libc::c_int) {} else {
            __assert_fail(
                b"vint16 == -123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1190 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = -(32000 as libc::c_int);
    vint16 = 0 as libc::c_int as libc::c_short;
    if copy_int_value(
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        &mut vint16 as *mut libc::c_short as *mut libc::c_void,
        0x61 as libc::c_int,
        0x41 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint32, &vint16, BINN_INT32, BINN_INT16) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1193 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_18705: {
        if copy_int_value(
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            &mut vint16 as *mut libc::c_short as *mut libc::c_void,
            0x61 as libc::c_int,
            0x41 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint32, &vint16, BINN_INT32, BINN_INT16) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1193 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32 == -(32000 as libc::c_int) {} else {
        __assert_fail(
            b"vint32 == -32000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1194 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_18667: {
        if vint32 == -(32000 as libc::c_int) {} else {
            __assert_fail(
                b"vint32 == -32000\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1194 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint16 as libc::c_int == -(32000 as libc::c_int) {} else {
        __assert_fail(
            b"vint16 == -32000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1195 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_18627: {
        if vint16 as libc::c_int == -(32000 as libc::c_int) {} else {
            __assert_fail(
                b"vint16 == -32000\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1195 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = -(123 as libc::c_int);
    vint64 = 0 as libc::c_int as int64;
    if copy_int_value(
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        &mut vint64 as *mut int64 as *mut libc::c_void,
        0x61 as libc::c_int,
        0x81 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint32, &vint64, BINN_INT32, BINN_INT64) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1198 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_18565: {
        if copy_int_value(
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            &mut vint64 as *mut int64 as *mut libc::c_void,
            0x61 as libc::c_int,
            0x81 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint32, &vint64, BINN_INT32, BINN_INT64) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1198 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32 == -(123 as libc::c_int) {} else {
        __assert_fail(
            b"vint32 == -123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1199 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_18527: {
        if vint32 == -(123 as libc::c_int) {} else {
            __assert_fail(
                b"vint32 == -123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1199 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64 == -(123 as libc::c_int) as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == -123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1200 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_18487: {
        if vint64 == -(123 as libc::c_int) as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == -123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1200 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint32 = -(2147000000 as libc::c_int);
    vint64 = 0 as libc::c_int as int64;
    if copy_int_value(
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        &mut vint64 as *mut int64 as *mut libc::c_void,
        0x61 as libc::c_int,
        0x81 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint32, &vint64, BINN_INT32, BINN_INT64) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1203 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_18425: {
        if copy_int_value(
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            &mut vint64 as *mut int64 as *mut libc::c_void,
            0x61 as libc::c_int,
            0x81 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint32, &vint64, BINN_INT32, BINN_INT64) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1203 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32 == -(2147000000 as libc::c_int) {} else {
        __assert_fail(
            b"vint32 == -2147000000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1204 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_18387: {
        if vint32 == -(2147000000 as libc::c_int) {} else {
            __assert_fail(
                b"vint32 == -2147000000\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1204 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64 == -(2147000000 as libc::c_int) as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == -2147000000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1205 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_18347: {
        if vint64 == -(2147000000 as libc::c_int) as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == -2147000000\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1205 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint64 = -(123 as libc::c_int) as int64;
    vint8 = 0 as libc::c_int as libc::c_schar;
    if copy_int_value(
        &mut vint64 as *mut int64 as *mut libc::c_void,
        &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
        0x81 as libc::c_int,
        0x21 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint64, &vint8, BINN_INT64, BINN_INT8) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1209 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_18284: {
        if copy_int_value(
            &mut vint64 as *mut int64 as *mut libc::c_void,
            &mut vint8 as *mut libc::c_schar as *mut libc::c_void,
            0x81 as libc::c_int,
            0x21 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint64, &vint8, BINN_INT64, BINN_INT8) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1209 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64 == -(123 as libc::c_int) as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == -123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1210 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_18244: {
        if vint64 == -(123 as libc::c_int) as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == -123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1210 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint8 as libc::c_int == -(123 as libc::c_int) {} else {
        __assert_fail(
            b"vint8 == -123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1211 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_18204: {
        if vint8 as libc::c_int == -(123 as libc::c_int) {} else {
            __assert_fail(
                b"vint8 == -123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1211 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint64 = -(250 as libc::c_int) as int64;
    vint16 = 0 as libc::c_int as libc::c_short;
    if copy_int_value(
        &mut vint64 as *mut int64 as *mut libc::c_void,
        &mut vint16 as *mut libc::c_short as *mut libc::c_void,
        0x81 as libc::c_int,
        0x41 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint64, &vint16, BINN_INT64, BINN_INT16) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1214 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_18141: {
        if copy_int_value(
            &mut vint64 as *mut int64 as *mut libc::c_void,
            &mut vint16 as *mut libc::c_short as *mut libc::c_void,
            0x81 as libc::c_int,
            0x41 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint64, &vint16, BINN_INT64, BINN_INT16) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1214 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64 == -(250 as libc::c_int) as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == -250\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1215 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_18101: {
        if vint64 == -(250 as libc::c_int) as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == -250\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1215 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint16 as libc::c_int == -(250 as libc::c_int) {} else {
        __assert_fail(
            b"vint16 == -250\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1216 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_18061: {
        if vint16 as libc::c_int == -(250 as libc::c_int) {} else {
            __assert_fail(
                b"vint16 == -250\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1216 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    vint64 = -(35000 as libc::c_int) as int64;
    vint32 = 0 as libc::c_int;
    if copy_int_value(
        &mut vint64 as *mut int64 as *mut libc::c_void,
        &mut vint32 as *mut libc::c_int as *mut libc::c_void,
        0x81 as libc::c_int,
        0x61 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"copy_int_value(&vint64, &vint32, BINN_INT64, BINN_INT32) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1219 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_17998: {
        if copy_int_value(
            &mut vint64 as *mut int64 as *mut libc::c_void,
            &mut vint32 as *mut libc::c_int as *mut libc::c_void,
            0x81 as libc::c_int,
            0x61 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"copy_int_value(&vint64, &vint32, BINN_INT64, BINN_INT32) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1219 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64 == -(35000 as libc::c_int) as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == -35000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1220 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_17958: {
        if vint64 == -(35000 as libc::c_int) as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == -35000\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1220 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32 == -(35000 as libc::c_int) {} else {
        __assert_fail(
            b"vint32 == -35000\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1221 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 27],
                &[libc::c_char; 27],
            >(b"void test_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_17920: {
        if vint32 == -(35000 as libc::c_int) {} else {
            __assert_fail(
                b"vint32 == -35000\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1221 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 27],
                    &[libc::c_char; 27],
                >(b"void test_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    puts(b"OK\0" as *const u8 as *const libc::c_char);
}
pub unsafe extern "C" fn test_binn_int_conversion() {
    let mut obj: *mut binn = 0 as *mut binn;
    let mut ptr: *mut libc::c_void = 0 as *mut libc::c_void;
    printf(
        b"testing binn integer read conversion... \0" as *const u8 as *const libc::c_char,
    );
    obj = binn_object();
    if !obj.is_null() {} else {
        __assert_fail(
            b"obj != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1237 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_30385: {
        if !obj.is_null() {} else {
            __assert_fail(
                b"obj != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1237 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_int8(
        obj,
        b"int8\0" as *const u8 as *const libc::c_char,
        -(8 as libc::c_int) as libc::c_schar,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_int8(obj, \"int8\", -8) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1239 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_30332: {
        if binn_object_set_int8(
            obj,
            b"int8\0" as *const u8 as *const libc::c_char,
            -(8 as libc::c_int) as libc::c_schar,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_int8(obj, \"int8\", -8) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1239 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_int16(
        obj,
        b"int16\0" as *const u8 as *const libc::c_char,
        -(16 as libc::c_int) as libc::c_short,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_int16(obj, \"int16\", -16) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1240 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_30280: {
        if binn_object_set_int16(
            obj,
            b"int16\0" as *const u8 as *const libc::c_char,
            -(16 as libc::c_int) as libc::c_short,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_int16(obj, \"int16\", -16) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1240 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_int32(
        obj,
        b"int32\0" as *const u8 as *const libc::c_char,
        -(32 as libc::c_int),
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_int32(obj, \"int32\", -32) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1241 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_30230: {
        if binn_object_set_int32(
            obj,
            b"int32\0" as *const u8 as *const libc::c_char,
            -(32 as libc::c_int),
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_int32(obj, \"int32\", -32) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1241 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_int64(
        obj,
        b"int64\0" as *const u8 as *const libc::c_char,
        -(64 as libc::c_int) as int64,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_int64(obj, \"int64\", -64) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1242 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_30178: {
        if binn_object_set_int64(
            obj,
            b"int64\0" as *const u8 as *const libc::c_char,
            -(64 as libc::c_int) as int64,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_int64(obj, \"int64\", -64) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1242 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_uint8(
        obj,
        b"uint8\0" as *const u8 as *const libc::c_char,
        111 as libc::c_int as libc::c_uchar,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_uint8(obj, \"uint8\", 111) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1244 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_30127: {
        if binn_object_set_uint8(
            obj,
            b"uint8\0" as *const u8 as *const libc::c_char,
            111 as libc::c_int as libc::c_uchar,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_uint8(obj, \"uint8\", 111) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1244 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_uint16(
        obj,
        b"uint16\0" as *const u8 as *const libc::c_char,
        112 as libc::c_int as libc::c_ushort,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_uint16(obj, \"uint16\", 112) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1245 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_30076: {
        if binn_object_set_uint16(
            obj,
            b"uint16\0" as *const u8 as *const libc::c_char,
            112 as libc::c_int as libc::c_ushort,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_uint16(obj, \"uint16\", 112) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1245 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_uint32(
        obj,
        b"uint32\0" as *const u8 as *const libc::c_char,
        113 as libc::c_int as libc::c_uint,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_uint32(obj, \"uint32\", 113) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1246 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_30026: {
        if binn_object_set_uint32(
            obj,
            b"uint32\0" as *const u8 as *const libc::c_char,
            113 as libc::c_int as libc::c_uint,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_uint32(obj, \"uint32\", 113) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1246 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_uint64(
        obj,
        b"uint64\0" as *const u8 as *const libc::c_char,
        114 as libc::c_int as uint64,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_uint64(obj, \"uint64\", 114) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1247 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_29975: {
        if binn_object_set_uint64(
            obj,
            b"uint64\0" as *const u8 as *const libc::c_char,
            114 as libc::c_int as uint64,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_uint64(obj, \"uint64\", 114) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1247 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    ptr = binn_ptr(obj as *mut libc::c_void);
    if binn_object_int8(ptr, b"int8\0" as *const u8 as *const libc::c_char)
        as libc::c_int == -(8 as libc::c_int)
    {} else {
        __assert_fail(
            b"binn_object_int8(ptr, \"int8\") == -8\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1251 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_29917: {
        if binn_object_int8(ptr, b"int8\0" as *const u8 as *const libc::c_char)
            as libc::c_int == -(8 as libc::c_int)
        {} else {
            __assert_fail(
                b"binn_object_int8(ptr, \"int8\") == -8\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1251 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_int8(ptr, b"int16\0" as *const u8 as *const libc::c_char)
        as libc::c_int == -(16 as libc::c_int)
    {} else {
        __assert_fail(
            b"binn_object_int8(ptr, \"int16\") == -16\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1252 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_29867: {
        if binn_object_int8(ptr, b"int16\0" as *const u8 as *const libc::c_char)
            as libc::c_int == -(16 as libc::c_int)
        {} else {
            __assert_fail(
                b"binn_object_int8(ptr, \"int16\") == -16\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1252 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_int8(ptr, b"int32\0" as *const u8 as *const libc::c_char)
        as libc::c_int == -(32 as libc::c_int)
    {} else {
        __assert_fail(
            b"binn_object_int8(ptr, \"int32\") == -32\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1253 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_29817: {
        if binn_object_int8(ptr, b"int32\0" as *const u8 as *const libc::c_char)
            as libc::c_int == -(32 as libc::c_int)
        {} else {
            __assert_fail(
                b"binn_object_int8(ptr, \"int32\") == -32\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1253 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_int8(ptr, b"int64\0" as *const u8 as *const libc::c_char)
        as libc::c_int == -(64 as libc::c_int)
    {} else {
        __assert_fail(
            b"binn_object_int8(ptr, \"int64\") == -64\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1254 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_29767: {
        if binn_object_int8(ptr, b"int64\0" as *const u8 as *const libc::c_char)
            as libc::c_int == -(64 as libc::c_int)
        {} else {
            __assert_fail(
                b"binn_object_int8(ptr, \"int64\") == -64\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1254 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_int16(ptr, b"int8\0" as *const u8 as *const libc::c_char)
        as libc::c_int == -(8 as libc::c_int)
    {} else {
        __assert_fail(
            b"binn_object_int16(ptr, \"int8\") == -8\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1256 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_29717: {
        if binn_object_int16(ptr, b"int8\0" as *const u8 as *const libc::c_char)
            as libc::c_int == -(8 as libc::c_int)
        {} else {
            __assert_fail(
                b"binn_object_int16(ptr, \"int8\") == -8\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1256 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_int16(ptr, b"int16\0" as *const u8 as *const libc::c_char)
        as libc::c_int == -(16 as libc::c_int)
    {} else {
        __assert_fail(
            b"binn_object_int16(ptr, \"int16\") == -16\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1257 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_29667: {
        if binn_object_int16(ptr, b"int16\0" as *const u8 as *const libc::c_char)
            as libc::c_int == -(16 as libc::c_int)
        {} else {
            __assert_fail(
                b"binn_object_int16(ptr, \"int16\") == -16\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1257 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_int16(ptr, b"int32\0" as *const u8 as *const libc::c_char)
        as libc::c_int == -(32 as libc::c_int)
    {} else {
        __assert_fail(
            b"binn_object_int16(ptr, \"int32\") == -32\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1258 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_29617: {
        if binn_object_int16(ptr, b"int32\0" as *const u8 as *const libc::c_char)
            as libc::c_int == -(32 as libc::c_int)
        {} else {
            __assert_fail(
                b"binn_object_int16(ptr, \"int32\") == -32\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1258 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_int16(ptr, b"int64\0" as *const u8 as *const libc::c_char)
        as libc::c_int == -(64 as libc::c_int)
    {} else {
        __assert_fail(
            b"binn_object_int16(ptr, \"int64\") == -64\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1259 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_29567: {
        if binn_object_int16(ptr, b"int64\0" as *const u8 as *const libc::c_char)
            as libc::c_int == -(64 as libc::c_int)
        {} else {
            __assert_fail(
                b"binn_object_int16(ptr, \"int64\") == -64\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1259 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_int32(ptr, b"int8\0" as *const u8 as *const libc::c_char)
        == -(8 as libc::c_int)
    {} else {
        __assert_fail(
            b"binn_object_int32(ptr, \"int8\") == -8\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1261 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_29519: {
        if binn_object_int32(ptr, b"int8\0" as *const u8 as *const libc::c_char)
            == -(8 as libc::c_int)
        {} else {
            __assert_fail(
                b"binn_object_int32(ptr, \"int8\") == -8\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1261 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_int32(ptr, b"int16\0" as *const u8 as *const libc::c_char)
        == -(16 as libc::c_int)
    {} else {
        __assert_fail(
            b"binn_object_int32(ptr, \"int16\") == -16\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1262 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_29471: {
        if binn_object_int32(ptr, b"int16\0" as *const u8 as *const libc::c_char)
            == -(16 as libc::c_int)
        {} else {
            __assert_fail(
                b"binn_object_int32(ptr, \"int16\") == -16\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1262 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_int32(ptr, b"int32\0" as *const u8 as *const libc::c_char)
        == -(32 as libc::c_int)
    {} else {
        __assert_fail(
            b"binn_object_int32(ptr, \"int32\") == -32\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1263 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_29423: {
        if binn_object_int32(ptr, b"int32\0" as *const u8 as *const libc::c_char)
            == -(32 as libc::c_int)
        {} else {
            __assert_fail(
                b"binn_object_int32(ptr, \"int32\") == -32\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1263 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_int32(ptr, b"int64\0" as *const u8 as *const libc::c_char)
        == -(64 as libc::c_int)
    {} else {
        __assert_fail(
            b"binn_object_int32(ptr, \"int64\") == -64\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1264 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_29375: {
        if binn_object_int32(ptr, b"int64\0" as *const u8 as *const libc::c_char)
            == -(64 as libc::c_int)
        {} else {
            __assert_fail(
                b"binn_object_int32(ptr, \"int64\") == -64\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1264 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_int64(ptr, b"int8\0" as *const u8 as *const libc::c_char)
        == -(8 as libc::c_int) as libc::c_longlong
    {} else {
        __assert_fail(
            b"binn_object_int64(ptr, \"int8\") == -8\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1266 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_29325: {
        if binn_object_int64(ptr, b"int8\0" as *const u8 as *const libc::c_char)
            == -(8 as libc::c_int) as libc::c_longlong
        {} else {
            __assert_fail(
                b"binn_object_int64(ptr, \"int8\") == -8\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1266 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_int64(ptr, b"int16\0" as *const u8 as *const libc::c_char)
        == -(16 as libc::c_int) as libc::c_longlong
    {} else {
        __assert_fail(
            b"binn_object_int64(ptr, \"int16\") == -16\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1267 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_29275: {
        if binn_object_int64(ptr, b"int16\0" as *const u8 as *const libc::c_char)
            == -(16 as libc::c_int) as libc::c_longlong
        {} else {
            __assert_fail(
                b"binn_object_int64(ptr, \"int16\") == -16\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1267 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_int64(ptr, b"int32\0" as *const u8 as *const libc::c_char)
        == -(32 as libc::c_int) as libc::c_longlong
    {} else {
        __assert_fail(
            b"binn_object_int64(ptr, \"int32\") == -32\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1268 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_29225: {
        if binn_object_int64(ptr, b"int32\0" as *const u8 as *const libc::c_char)
            == -(32 as libc::c_int) as libc::c_longlong
        {} else {
            __assert_fail(
                b"binn_object_int64(ptr, \"int32\") == -32\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1268 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_int64(ptr, b"int64\0" as *const u8 as *const libc::c_char)
        == -(64 as libc::c_int) as libc::c_longlong
    {} else {
        __assert_fail(
            b"binn_object_int64(ptr, \"int64\") == -64\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1269 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_29175: {
        if binn_object_int64(ptr, b"int64\0" as *const u8 as *const libc::c_char)
            == -(64 as libc::c_int) as libc::c_longlong
        {} else {
            __assert_fail(
                b"binn_object_int64(ptr, \"int64\") == -64\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1269 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_int8(ptr, b"uint8\0" as *const u8 as *const libc::c_char)
        as libc::c_int == 111 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_int8(ptr, \"uint8\") == 111\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1272 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_29126: {
        if binn_object_int8(ptr, b"uint8\0" as *const u8 as *const libc::c_char)
            as libc::c_int == 111 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_int8(ptr, \"uint8\") == 111\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1272 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_int8(ptr, b"uint16\0" as *const u8 as *const libc::c_char)
        as libc::c_int == 112 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_int8(ptr, \"uint16\") == 112\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1273 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_29078: {
        if binn_object_int8(ptr, b"uint16\0" as *const u8 as *const libc::c_char)
            as libc::c_int == 112 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_int8(ptr, \"uint16\") == 112\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1273 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_int8(ptr, b"uint32\0" as *const u8 as *const libc::c_char)
        as libc::c_int == 113 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_int8(ptr, \"uint32\") == 113\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1274 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_29030: {
        if binn_object_int8(ptr, b"uint32\0" as *const u8 as *const libc::c_char)
            as libc::c_int == 113 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_int8(ptr, \"uint32\") == 113\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1274 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_int8(ptr, b"uint64\0" as *const u8 as *const libc::c_char)
        as libc::c_int == 114 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_int8(ptr, \"uint64\") == 114\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1275 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_28982: {
        if binn_object_int8(ptr, b"uint64\0" as *const u8 as *const libc::c_char)
            as libc::c_int == 114 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_int8(ptr, \"uint64\") == 114\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1275 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_int16(ptr, b"uint8\0" as *const u8 as *const libc::c_char)
        as libc::c_int == 111 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_int16(ptr, \"uint8\") == 111\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1277 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_28934: {
        if binn_object_int16(ptr, b"uint8\0" as *const u8 as *const libc::c_char)
            as libc::c_int == 111 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_int16(ptr, \"uint8\") == 111\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1277 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_int16(ptr, b"uint16\0" as *const u8 as *const libc::c_char)
        as libc::c_int == 112 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_int16(ptr, \"uint16\") == 112\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1278 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_28886: {
        if binn_object_int16(ptr, b"uint16\0" as *const u8 as *const libc::c_char)
            as libc::c_int == 112 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_int16(ptr, \"uint16\") == 112\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1278 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_int16(ptr, b"uint32\0" as *const u8 as *const libc::c_char)
        as libc::c_int == 113 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_int16(ptr, \"uint32\") == 113\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1279 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_28838: {
        if binn_object_int16(ptr, b"uint32\0" as *const u8 as *const libc::c_char)
            as libc::c_int == 113 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_int16(ptr, \"uint32\") == 113\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1279 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_int16(ptr, b"uint64\0" as *const u8 as *const libc::c_char)
        as libc::c_int == 114 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_int16(ptr, \"uint64\") == 114\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1280 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_28790: {
        if binn_object_int16(ptr, b"uint64\0" as *const u8 as *const libc::c_char)
            as libc::c_int == 114 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_int16(ptr, \"uint64\") == 114\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1280 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_int32(ptr, b"uint8\0" as *const u8 as *const libc::c_char)
        == 111 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_int32(ptr, \"uint8\") == 111\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1282 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_28744: {
        if binn_object_int32(ptr, b"uint8\0" as *const u8 as *const libc::c_char)
            == 111 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_int32(ptr, \"uint8\") == 111\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1282 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_int32(ptr, b"uint16\0" as *const u8 as *const libc::c_char)
        == 112 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_int32(ptr, \"uint16\") == 112\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1283 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_28698: {
        if binn_object_int32(ptr, b"uint16\0" as *const u8 as *const libc::c_char)
            == 112 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_int32(ptr, \"uint16\") == 112\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1283 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_int32(ptr, b"uint32\0" as *const u8 as *const libc::c_char)
        == 113 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_int32(ptr, \"uint32\") == 113\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1284 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_28652: {
        if binn_object_int32(ptr, b"uint32\0" as *const u8 as *const libc::c_char)
            == 113 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_int32(ptr, \"uint32\") == 113\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1284 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_int32(ptr, b"uint64\0" as *const u8 as *const libc::c_char)
        == 114 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_int32(ptr, \"uint64\") == 114\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1285 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_28606: {
        if binn_object_int32(ptr, b"uint64\0" as *const u8 as *const libc::c_char)
            == 114 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_int32(ptr, \"uint64\") == 114\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1285 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_int64(ptr, b"uint8\0" as *const u8 as *const libc::c_char)
        == 111 as libc::c_int as libc::c_longlong
    {} else {
        __assert_fail(
            b"binn_object_int64(ptr, \"uint8\") == 111\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1287 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_28558: {
        if binn_object_int64(ptr, b"uint8\0" as *const u8 as *const libc::c_char)
            == 111 as libc::c_int as libc::c_longlong
        {} else {
            __assert_fail(
                b"binn_object_int64(ptr, \"uint8\") == 111\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1287 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_int64(ptr, b"uint16\0" as *const u8 as *const libc::c_char)
        == 112 as libc::c_int as libc::c_longlong
    {} else {
        __assert_fail(
            b"binn_object_int64(ptr, \"uint16\") == 112\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1288 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_28510: {
        if binn_object_int64(ptr, b"uint16\0" as *const u8 as *const libc::c_char)
            == 112 as libc::c_int as libc::c_longlong
        {} else {
            __assert_fail(
                b"binn_object_int64(ptr, \"uint16\") == 112\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1288 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_int64(ptr, b"uint32\0" as *const u8 as *const libc::c_char)
        == 113 as libc::c_int as libc::c_longlong
    {} else {
        __assert_fail(
            b"binn_object_int64(ptr, \"uint32\") == 113\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1289 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_28462: {
        if binn_object_int64(ptr, b"uint32\0" as *const u8 as *const libc::c_char)
            == 113 as libc::c_int as libc::c_longlong
        {} else {
            __assert_fail(
                b"binn_object_int64(ptr, \"uint32\") == 113\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1289 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_int64(ptr, b"uint64\0" as *const u8 as *const libc::c_char)
        == 114 as libc::c_int as libc::c_longlong
    {} else {
        __assert_fail(
            b"binn_object_int64(ptr, \"uint64\") == 114\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1290 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 32],
                &[libc::c_char; 32],
            >(b"void test_binn_int_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_28412: {
        if binn_object_int64(ptr, b"uint64\0" as *const u8 as *const libc::c_char)
            == 114 as libc::c_int as libc::c_longlong
        {} else {
            __assert_fail(
                b"binn_object_int64(ptr, \"uint64\") == 114\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1290 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 32],
                    &[libc::c_char; 32],
                >(b"void test_binn_int_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(obj);
    puts(b"OK\0" as *const u8 as *const libc::c_char);
}
pub unsafe extern "C" fn test_value_conversion() {
    let mut value: *mut binn = 0 as *mut binn;
    let mut ptr: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut blob: [libc::c_char; 64] = *::std::mem::transmute::<
        &[u8; 64],
        &mut [libc::c_char; 64],
    >(
        b"test blob\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
    );
    let mut pblob: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut size: libc::c_int = 0;
    let mut vint32_0: libc::c_int = 0;
    let mut vint64_0: int64 = 0;
    let mut vdouble: libc::c_double = 0.;
    let mut vbool_0: BOOL = 0;
    printf(b"testing binn value conversion... \0" as *const u8 as *const libc::c_char);
    ptr = b"static string\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
    value = binn_string(ptr, None);
    if !value.is_null() {} else {
        __assert_fail(
            b"value != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1316 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_42455: {
        if !value.is_null() {} else {
            __assert_fail(
                b"value != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1316 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0xa0 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_STRING\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1317 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_42415: {
        if (*value).type_0 == 0xa0 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_STRING\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1317 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if !((*value).ptr).is_null() {} else {
        __assert_fail(
            b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1318 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_42371: {
        if !((*value).ptr).is_null() {} else {
            __assert_fail(
                b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1318 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).ptr == ptr as *mut libc::c_void {} else {
        __assert_fail(
            b"value->ptr == ptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1319 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_42327: {
        if (*value).ptr == ptr as *mut libc::c_void {} else {
            __assert_fail(
                b"value->ptr == ptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1319 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if ((*value).freefn).is_none() {} else {
        __assert_fail(
            b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1320 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_42281: {
        if ((*value).freefn).is_none() {} else {
            __assert_fail(
                b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1320 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(value);
    ptr = b"transient string\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
    value = binn_string(
        ptr,
        ::std::mem::transmute::<
            libc::intptr_t,
            binn_mem_free,
        >(-(1 as libc::c_int) as libc::intptr_t),
    );
    if !value.is_null() {} else {
        __assert_fail(
            b"value != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1325 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_42218: {
        if !value.is_null() {} else {
            __assert_fail(
                b"value != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1325 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0xa0 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_STRING\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1326 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_42178: {
        if (*value).type_0 == 0xa0 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_STRING\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1326 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if !((*value).ptr).is_null() {} else {
        __assert_fail(
            b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1327 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_42134: {
        if !((*value).ptr).is_null() {} else {
            __assert_fail(
                b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1327 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).ptr != ptr as *mut libc::c_void {} else {
        __assert_fail(
            b"value->ptr != ptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1328 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_42090: {
        if (*value).ptr != ptr as *mut libc::c_void {} else {
            __assert_fail(
                b"value->ptr != ptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1328 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if strcmp((*value).ptr as *mut libc::c_char, ptr) == 0 as libc::c_int {} else {
        __assert_fail(
            b"strcmp((char*)value->ptr, ptr) == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1329 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_42034: {
        if strcmp((*value).ptr as *mut libc::c_char, ptr) == 0 as libc::c_int {} else {
            __assert_fail(
                b"strcmp((char*)value->ptr, ptr) == 0\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1329 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if ((*value).freefn).is_some() {} else {
        __assert_fail(
            b"value->freefn != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1330 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_41988: {
        if ((*value).freefn).is_some() {} else {
            __assert_fail(
                b"value->freefn != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1330 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(value);
    ptr = strdup(b"dynamic allocated string\0" as *const u8 as *const libc::c_char);
    value = binn_string(
        ptr,
        Some(free as unsafe extern "C" fn(*mut libc::c_void) -> ()),
    );
    if !value.is_null() {} else {
        __assert_fail(
            b"value != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1335 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_41924: {
        if !value.is_null() {} else {
            __assert_fail(
                b"value != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1335 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0xa0 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_STRING\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1336 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_41884: {
        if (*value).type_0 == 0xa0 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_STRING\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1336 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if !((*value).ptr).is_null() {} else {
        __assert_fail(
            b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1337 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_41840: {
        if !((*value).ptr).is_null() {} else {
            __assert_fail(
                b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1337 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).ptr == ptr as *mut libc::c_void {} else {
        __assert_fail(
            b"value->ptr == ptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1338 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_41796: {
        if (*value).ptr == ptr as *mut libc::c_void {} else {
            __assert_fail(
                b"value->ptr == ptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1338 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if ((*value).freefn).is_some() {} else {
        __assert_fail(
            b"value->freefn != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1339 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_41750: {
        if ((*value).freefn).is_some() {} else {
            __assert_fail(
                b"value->freefn != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1339 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).freefn == Some(free as unsafe extern "C" fn(*mut libc::c_void) -> ())
    {} else {
        __assert_fail(
            b"value->freefn == &free\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1340 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_41708: {
        if (*value).freefn == Some(free as unsafe extern "C" fn(*mut libc::c_void) -> ())
        {} else {
            __assert_fail(
                b"value->freefn == &free\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1340 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(value);
    size = 64 as libc::c_int;
    pblob = blob.as_mut_ptr() as *mut libc::c_void;
    value = binn_blob(pblob, size, None);
    if !value.is_null() {} else {
        __assert_fail(
            b"value != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1348 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_41641: {
        if !value.is_null() {} else {
            __assert_fail(
                b"value != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1348 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0xc0 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_BLOB\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1349 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_41601: {
        if (*value).type_0 == 0xc0 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_BLOB\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1349 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if !((*value).ptr).is_null() {} else {
        __assert_fail(
            b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1350 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_41557: {
        if !((*value).ptr).is_null() {} else {
            __assert_fail(
                b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1350 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).ptr == pblob {} else {
        __assert_fail(
            b"value->ptr == pblob\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1351 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_41515: {
        if (*value).ptr == pblob {} else {
            __assert_fail(
                b"value->ptr == pblob\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1351 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if ((*value).freefn).is_none() {} else {
        __assert_fail(
            b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1352 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_41469: {
        if ((*value).freefn).is_none() {} else {
            __assert_fail(
                b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1352 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(value);
    size = 64 as libc::c_int;
    pblob = blob.as_mut_ptr() as *mut libc::c_void;
    value = binn_blob(
        pblob,
        size,
        ::std::mem::transmute::<
            libc::intptr_t,
            binn_mem_free,
        >(-(1 as libc::c_int) as libc::intptr_t),
    );
    if !value.is_null() {} else {
        __assert_fail(
            b"value != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1358 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_41400: {
        if !value.is_null() {} else {
            __assert_fail(
                b"value != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1358 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0xc0 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_BLOB\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1359 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_41360: {
        if (*value).type_0 == 0xc0 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_BLOB\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1359 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if !((*value).ptr).is_null() {} else {
        __assert_fail(
            b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1360 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_41316: {
        if !((*value).ptr).is_null() {} else {
            __assert_fail(
                b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1360 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).ptr != pblob {} else {
        __assert_fail(
            b"value->ptr != pblob\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1361 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_41274: {
        if (*value).ptr != pblob {} else {
            __assert_fail(
                b"value->ptr != pblob\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1361 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if memcmp((*value).ptr, pblob, size as libc::c_ulong) == 0 as libc::c_int {} else {
        __assert_fail(
            b"memcmp(value->ptr, pblob, size) == 0\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1362 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_41213: {
        if memcmp((*value).ptr, pblob, size as libc::c_ulong) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"memcmp(value->ptr, pblob, size) == 0\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1362 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if ((*value).freefn).is_some() {} else {
        __assert_fail(
            b"value->freefn != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1363 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_41167: {
        if ((*value).freefn).is_some() {} else {
            __assert_fail(
                b"value->freefn != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1363 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(value);
    size = 64 as libc::c_int;
    pblob = memdup(blob.as_mut_ptr() as *mut libc::c_void, size);
    value = binn_blob(
        pblob,
        size,
        Some(free as unsafe extern "C" fn(*mut libc::c_void) -> ()),
    );
    if !value.is_null() {} else {
        __assert_fail(
            b"value != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1369 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_41090: {
        if !value.is_null() {} else {
            __assert_fail(
                b"value != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1369 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0xc0 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_BLOB\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1370 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_41050: {
        if (*value).type_0 == 0xc0 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_BLOB\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1370 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if !((*value).ptr).is_null() {} else {
        __assert_fail(
            b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1371 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_41006: {
        if !((*value).ptr).is_null() {} else {
            __assert_fail(
                b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1371 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).ptr == pblob {} else {
        __assert_fail(
            b"value->ptr == pblob\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1372 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_40963: {
        if (*value).ptr == pblob {} else {
            __assert_fail(
                b"value->ptr == pblob\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1372 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).freefn == Some(free as unsafe extern "C" fn(*mut libc::c_void) -> ())
    {} else {
        __assert_fail(
            b"value->freefn == &free\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1373 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_40920: {
        if (*value).freefn == Some(free as unsafe extern "C" fn(*mut libc::c_void) -> ())
        {} else {
            __assert_fail(
                b"value->freefn == &free\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1373 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(value);
    ptr = b"123\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
    value = binn_string(ptr, None);
    if !value.is_null() {} else {
        __assert_fail(
            b"value != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1381 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_40858: {
        if !value.is_null() {} else {
            __assert_fail(
                b"value != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1381 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0xa0 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_STRING\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1382 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_40818: {
        if (*value).type_0 == 0xa0 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_STRING\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1382 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if !((*value).ptr).is_null() {} else {
        __assert_fail(
            b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1383 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_40774: {
        if !((*value).ptr).is_null() {} else {
            __assert_fail(
                b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1383 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).ptr == ptr as *mut libc::c_void {} else {
        __assert_fail(
            b"value->ptr == ptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1384 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_40730: {
        if (*value).ptr == ptr as *mut libc::c_void {} else {
            __assert_fail(
                b"value->ptr == ptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1384 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if ((*value).freefn).is_none() {} else {
        __assert_fail(
            b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1385 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_40684: {
        if ((*value).freefn).is_none() {} else {
            __assert_fail(
                b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1385 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_str(value) == ptr {} else {
        __assert_fail(
            b"binn_get_str(value) == ptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1387 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_40640: {
        if binn_get_str(value) == ptr {} else {
            __assert_fail(
                b"binn_get_str(value) == ptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1387 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_int32(value, &mut vint32_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_int32(value, &vint32) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1388 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_40594: {
        if binn_get_int32(value, &mut vint32_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_int32(value, &vint32) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1388 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32_0 == 123 as libc::c_int {} else {
        __assert_fail(
            b"vint32 == 123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1389 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_40558: {
        if vint32_0 == 123 as libc::c_int {} else {
            __assert_fail(
                b"vint32 == 123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1389 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_int64(value, &mut vint64_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_int64(value, &vint64) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1390 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_40512: {
        if binn_get_int64(value, &mut vint64_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_int64(value, &vint64) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1390 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64_0 == 123 as libc::c_int as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == 123\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1391 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_40474: {
        if vint64_0 == 123 as libc::c_int as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == 123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1391 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_double(value, &mut vdouble) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_double(value, &vdouble) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1392 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_40428: {
        if binn_get_double(value, &mut vdouble) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_double(value, &vdouble) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1392 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if AlmostEqualFloats(
        vdouble as libc::c_float,
        123 as libc::c_int as libc::c_float,
        4 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"AlmostEqualFloats(vdouble, 123, 4) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1393 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_40377: {
        if AlmostEqualFloats(
            vdouble as libc::c_float,
            123 as libc::c_int as libc::c_float,
            4 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"AlmostEqualFloats(vdouble, 123, 4) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1393 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1394 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_40331: {
        if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1394 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vbool_0 == 1 as libc::c_int {} else {
        __assert_fail(
            b"vbool == TRUE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1395 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_40295: {
        if vbool_0 == 1 as libc::c_int {} else {
            __assert_fail(
                b"vbool == TRUE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1395 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0xa0 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_STRING\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1397 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_40255: {
        if (*value).type_0 == 0xa0 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_STRING\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1397 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if !((*value).ptr).is_null() {} else {
        __assert_fail(
            b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1398 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_40211: {
        if !((*value).ptr).is_null() {} else {
            __assert_fail(
                b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1398 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).ptr == ptr as *mut libc::c_void {} else {
        __assert_fail(
            b"value->ptr == ptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1399 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_40167: {
        if (*value).ptr == ptr as *mut libc::c_void {} else {
            __assert_fail(
                b"value->ptr == ptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1399 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if ((*value).freefn).is_none() {} else {
        __assert_fail(
            b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1400 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_40121: {
        if ((*value).freefn).is_none() {} else {
            __assert_fail(
                b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1400 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(value);
    ptr = b"-456\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
    value = binn_string(ptr, None);
    if !value.is_null() {} else {
        __assert_fail(
            b"value != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1407 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_40059: {
        if !value.is_null() {} else {
            __assert_fail(
                b"value != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1407 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0xa0 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_STRING\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1408 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_40019: {
        if (*value).type_0 == 0xa0 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_STRING\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1408 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if !((*value).ptr).is_null() {} else {
        __assert_fail(
            b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1409 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_39975: {
        if !((*value).ptr).is_null() {} else {
            __assert_fail(
                b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1409 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).ptr == ptr as *mut libc::c_void {} else {
        __assert_fail(
            b"value->ptr == ptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1410 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_39931: {
        if (*value).ptr == ptr as *mut libc::c_void {} else {
            __assert_fail(
                b"value->ptr == ptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1410 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if ((*value).freefn).is_none() {} else {
        __assert_fail(
            b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1411 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_39885: {
        if ((*value).freefn).is_none() {} else {
            __assert_fail(
                b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1411 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_str(value) == ptr {} else {
        __assert_fail(
            b"binn_get_str(value) == ptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1413 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_39841: {
        if binn_get_str(value) == ptr {} else {
            __assert_fail(
                b"binn_get_str(value) == ptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1413 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_int32(value, &mut vint32_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_int32(value, &vint32) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1414 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_39795: {
        if binn_get_int32(value, &mut vint32_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_int32(value, &vint32) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1414 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32_0 == -(456 as libc::c_int) {} else {
        __assert_fail(
            b"vint32 == -456\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1415 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_39757: {
        if vint32_0 == -(456 as libc::c_int) {} else {
            __assert_fail(
                b"vint32 == -456\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1415 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_int64(value, &mut vint64_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_int64(value, &vint64) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1416 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_39711: {
        if binn_get_int64(value, &mut vint64_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_int64(value, &vint64) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1416 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64_0 == -(456 as libc::c_int) as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == -456\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1417 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_39671: {
        if vint64_0 == -(456 as libc::c_int) as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == -456\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1417 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_double(value, &mut vdouble) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_double(value, &vdouble) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1418 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_39625: {
        if binn_get_double(value, &mut vdouble) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_double(value, &vdouble) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1418 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if AlmostEqualFloats(
        vdouble as libc::c_float,
        -(456 as libc::c_int) as libc::c_float,
        4 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"AlmostEqualFloats(vdouble, -456, 4) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1419 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_39573: {
        if AlmostEqualFloats(
            vdouble as libc::c_float,
            -(456 as libc::c_int) as libc::c_float,
            4 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"AlmostEqualFloats(vdouble, -456, 4) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1419 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1420 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_39527: {
        if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1420 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vbool_0 == 1 as libc::c_int {} else {
        __assert_fail(
            b"vbool == TRUE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1421 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_39491: {
        if vbool_0 == 1 as libc::c_int {} else {
            __assert_fail(
                b"vbool == TRUE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1421 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0xa0 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_STRING\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1423 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_39451: {
        if (*value).type_0 == 0xa0 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_STRING\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1423 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if !((*value).ptr).is_null() {} else {
        __assert_fail(
            b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1424 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_39407: {
        if !((*value).ptr).is_null() {} else {
            __assert_fail(
                b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1424 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).ptr == ptr as *mut libc::c_void {} else {
        __assert_fail(
            b"value->ptr == ptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1425 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_39363: {
        if (*value).ptr == ptr as *mut libc::c_void {} else {
            __assert_fail(
                b"value->ptr == ptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1425 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if ((*value).freefn).is_none() {} else {
        __assert_fail(
            b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1426 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_39317: {
        if ((*value).freefn).is_none() {} else {
            __assert_fail(
                b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1426 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(value);
    ptr = b"-4.56\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
    value = binn_string(ptr, None);
    if !value.is_null() {} else {
        __assert_fail(
            b"value != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1433 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_39255: {
        if !value.is_null() {} else {
            __assert_fail(
                b"value != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1433 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0xa0 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_STRING\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1434 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_39215: {
        if (*value).type_0 == 0xa0 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_STRING\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1434 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if !((*value).ptr).is_null() {} else {
        __assert_fail(
            b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1435 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_39171: {
        if !((*value).ptr).is_null() {} else {
            __assert_fail(
                b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1435 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).ptr == ptr as *mut libc::c_void {} else {
        __assert_fail(
            b"value->ptr == ptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1436 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_39127: {
        if (*value).ptr == ptr as *mut libc::c_void {} else {
            __assert_fail(
                b"value->ptr == ptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1436 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if ((*value).freefn).is_none() {} else {
        __assert_fail(
            b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1437 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_39081: {
        if ((*value).freefn).is_none() {} else {
            __assert_fail(
                b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1437 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_str(value) == ptr {} else {
        __assert_fail(
            b"binn_get_str(value) == ptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1439 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_39037: {
        if binn_get_str(value) == ptr {} else {
            __assert_fail(
                b"binn_get_str(value) == ptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1439 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_int32(value, &mut vint32_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_int32(value, &vint32) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1440 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_38991: {
        if binn_get_int32(value, &mut vint32_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_int32(value, &vint32) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1440 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32_0 == -(4 as libc::c_int) {} else {
        __assert_fail(
            b"vint32 == -4\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1441 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_38953: {
        if vint32_0 == -(4 as libc::c_int) {} else {
            __assert_fail(
                b"vint32 == -4\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1441 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_int64(value, &mut vint64_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_int64(value, &vint64) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1442 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_38907: {
        if binn_get_int64(value, &mut vint64_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_int64(value, &vint64) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1442 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64_0 == -(4 as libc::c_int) as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == -4\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1443 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_38867: {
        if vint64_0 == -(4 as libc::c_int) as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == -4\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1443 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_double(value, &mut vdouble) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_double(value, &vdouble) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1444 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_38821: {
        if binn_get_double(value, &mut vdouble) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_double(value, &vdouble) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1444 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if AlmostEqualFloats(
        vdouble as libc::c_float,
        -4.56f64 as libc::c_float,
        4 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"AlmostEqualFloats(vdouble, -4.56, 4) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1445 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_38768: {
        if AlmostEqualFloats(
            vdouble as libc::c_float,
            -4.56f64 as libc::c_float,
            4 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"AlmostEqualFloats(vdouble, -4.56, 4) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1445 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1446 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_38722: {
        if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1446 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vbool_0 == 1 as libc::c_int {} else {
        __assert_fail(
            b"vbool == TRUE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1447 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_38686: {
        if vbool_0 == 1 as libc::c_int {} else {
            __assert_fail(
                b"vbool == TRUE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1447 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0xa0 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_STRING\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1449 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_38646: {
        if (*value).type_0 == 0xa0 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_STRING\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1449 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if !((*value).ptr).is_null() {} else {
        __assert_fail(
            b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1450 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_38602: {
        if !((*value).ptr).is_null() {} else {
            __assert_fail(
                b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1450 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).ptr == ptr as *mut libc::c_void {} else {
        __assert_fail(
            b"value->ptr == ptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1451 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_38558: {
        if (*value).ptr == ptr as *mut libc::c_void {} else {
            __assert_fail(
                b"value->ptr == ptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1451 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if ((*value).freefn).is_none() {} else {
        __assert_fail(
            b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1452 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_38512: {
        if ((*value).freefn).is_none() {} else {
            __assert_fail(
                b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1452 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(value);
    ptr = b"yes\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
    value = binn_string(ptr, None);
    if !value.is_null() {} else {
        __assert_fail(
            b"value != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1461 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_38450: {
        if !value.is_null() {} else {
            __assert_fail(
                b"value != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1461 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_str(value) == ptr {} else {
        __assert_fail(
            b"binn_get_str(value) == ptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1462 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_38406: {
        if binn_get_str(value) == ptr {} else {
            __assert_fail(
                b"binn_get_str(value) == ptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1462 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1463 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_38360: {
        if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1463 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vbool_0 == 1 as libc::c_int {} else {
        __assert_fail(
            b"vbool == TRUE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1464 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_38324: {
        if vbool_0 == 1 as libc::c_int {} else {
            __assert_fail(
                b"vbool == TRUE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1464 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(value);
    ptr = b"no\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
    value = binn_string(ptr, None);
    if !value.is_null() {} else {
        __assert_fail(
            b"value != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1469 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_38262: {
        if !value.is_null() {} else {
            __assert_fail(
                b"value != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1469 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1470 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_38216: {
        if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1470 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vbool_0 == 0 as libc::c_int {} else {
        __assert_fail(
            b"vbool == FALSE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1471 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_38180: {
        if vbool_0 == 0 as libc::c_int {} else {
            __assert_fail(
                b"vbool == FALSE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1471 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(value);
    ptr = b"on\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
    value = binn_string(ptr, None);
    if !value.is_null() {} else {
        __assert_fail(
            b"value != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1476 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_38118: {
        if !value.is_null() {} else {
            __assert_fail(
                b"value != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1476 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1477 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_38072: {
        if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1477 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vbool_0 == 1 as libc::c_int {} else {
        __assert_fail(
            b"vbool == TRUE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1478 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_38036: {
        if vbool_0 == 1 as libc::c_int {} else {
            __assert_fail(
                b"vbool == TRUE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1478 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(value);
    ptr = b"off\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
    value = binn_string(ptr, None);
    if !value.is_null() {} else {
        __assert_fail(
            b"value != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1483 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_37974: {
        if !value.is_null() {} else {
            __assert_fail(
                b"value != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1483 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1484 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_37928: {
        if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1484 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vbool_0 == 0 as libc::c_int {} else {
        __assert_fail(
            b"vbool == FALSE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1485 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_37892: {
        if vbool_0 == 0 as libc::c_int {} else {
            __assert_fail(
                b"vbool == FALSE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1485 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(value);
    ptr = b"true\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
    value = binn_string(ptr, None);
    if !value.is_null() {} else {
        __assert_fail(
            b"value != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1490 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_37830: {
        if !value.is_null() {} else {
            __assert_fail(
                b"value != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1490 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1491 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_37784: {
        if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1491 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vbool_0 == 1 as libc::c_int {} else {
        __assert_fail(
            b"vbool == TRUE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1492 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_37748: {
        if vbool_0 == 1 as libc::c_int {} else {
            __assert_fail(
                b"vbool == TRUE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1492 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(value);
    ptr = b"false\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
    value = binn_string(ptr, None);
    if !value.is_null() {} else {
        __assert_fail(
            b"value != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1497 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_37686: {
        if !value.is_null() {} else {
            __assert_fail(
                b"value != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1497 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1498 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_37640: {
        if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1498 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vbool_0 == 0 as libc::c_int {} else {
        __assert_fail(
            b"vbool == FALSE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1499 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_37604: {
        if vbool_0 == 0 as libc::c_int {} else {
            __assert_fail(
                b"vbool == FALSE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1499 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(value);
    ptr = b"1\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
    value = binn_string(ptr, None);
    if !value.is_null() {} else {
        __assert_fail(
            b"value != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1504 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_37542: {
        if !value.is_null() {} else {
            __assert_fail(
                b"value != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1504 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1505 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_37496: {
        if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1505 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vbool_0 == 1 as libc::c_int {} else {
        __assert_fail(
            b"vbool == TRUE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1506 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_37460: {
        if vbool_0 == 1 as libc::c_int {} else {
            __assert_fail(
                b"vbool == TRUE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1506 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(value);
    ptr = b"0\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
    value = binn_string(ptr, None);
    if !value.is_null() {} else {
        __assert_fail(
            b"value != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1511 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_37396: {
        if !value.is_null() {} else {
            __assert_fail(
                b"value != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1511 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1512 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_37350: {
        if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1512 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vbool_0 == 0 as libc::c_int {} else {
        __assert_fail(
            b"vbool == FALSE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1513 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_37314: {
        if vbool_0 == 0 as libc::c_int {} else {
            __assert_fail(
                b"vbool == FALSE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1513 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(value);
    value = binn_int32(-(345 as libc::c_int));
    if !value.is_null() {} else {
        __assert_fail(
            b"value != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1520 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_37260: {
        if !value.is_null() {} else {
            __assert_fail(
                b"value != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1520 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0x61 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_INT32\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1521 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_37220: {
        if (*value).type_0 == 0x61 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_INT32\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1521 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).c2rust_unnamed.vint32 == -(345 as libc::c_int) {} else {
        __assert_fail(
            b"value->vint32 == -345\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1522 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_37176: {
        if (*value).c2rust_unnamed.vint32 == -(345 as libc::c_int) {} else {
            __assert_fail(
                b"value->vint32 == -345\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1522 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if ((*value).freefn).is_none() {} else {
        __assert_fail(
            b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1523 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_37130: {
        if ((*value).freefn).is_none() {} else {
            __assert_fail(
                b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1523 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_int32(value, &mut vint32_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_int32(value, &vint32) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1525 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_37084: {
        if binn_get_int32(value, &mut vint32_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_int32(value, &vint32) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1525 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32_0 == -(345 as libc::c_int) {} else {
        __assert_fail(
            b"vint32 == -345\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1526 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_37046: {
        if vint32_0 == -(345 as libc::c_int) {} else {
            __assert_fail(
                b"vint32 == -345\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1526 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_int64(value, &mut vint64_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_int64(value, &vint64) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1527 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_37000: {
        if binn_get_int64(value, &mut vint64_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_int64(value, &vint64) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1527 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64_0 == -(345 as libc::c_int) as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == -345\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1528 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_36960: {
        if vint64_0 == -(345 as libc::c_int) as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == -345\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1528 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_double(value, &mut vdouble) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_double(value, &vdouble) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1529 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_36914: {
        if binn_get_double(value, &mut vdouble) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_double(value, &vdouble) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1529 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if AlmostEqualFloats(
        vdouble as libc::c_float,
        -(345 as libc::c_int) as libc::c_float,
        4 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"AlmostEqualFloats(vdouble, -345, 4) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1530 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_36862: {
        if AlmostEqualFloats(
            vdouble as libc::c_float,
            -(345 as libc::c_int) as libc::c_float,
            4 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"AlmostEqualFloats(vdouble, -345, 4) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1530 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1531 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_36816: {
        if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1531 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vbool_0 == 1 as libc::c_int {} else {
        __assert_fail(
            b"vbool == TRUE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1532 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_36780: {
        if vbool_0 == 1 as libc::c_int {} else {
            __assert_fail(
                b"vbool == TRUE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1532 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0x61 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_INT32\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1534 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_36740: {
        if (*value).type_0 == 0x61 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_INT32\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1534 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).c2rust_unnamed.vint32 == -(345 as libc::c_int) {} else {
        __assert_fail(
            b"value->vint32 == -345\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1535 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_36696: {
        if (*value).c2rust_unnamed.vint32 == -(345 as libc::c_int) {} else {
            __assert_fail(
                b"value->vint32 == -345\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1535 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if ((*value).freefn).is_none() {} else {
        __assert_fail(
            b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1536 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_36650: {
        if ((*value).freefn).is_none() {} else {
            __assert_fail(
                b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1536 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    ptr = binn_get_str(value);
    if !ptr.is_null() {} else {
        __assert_fail(
            b"ptr != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1539 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_36601: {
        if !ptr.is_null() {} else {
            __assert_fail(
                b"ptr != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1539 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if strcmp(ptr, b"-345\0" as *const u8 as *const libc::c_char) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp(ptr, \"-345\") == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1540 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_36553: {
        if strcmp(ptr, b"-345\0" as *const u8 as *const libc::c_char) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp(ptr, \"-345\") == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1540 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0xa0 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_STRING\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1541 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_36513: {
        if (*value).type_0 == 0xa0 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_STRING\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1541 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if !((*value).ptr).is_null() {} else {
        __assert_fail(
            b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1542 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_36469: {
        if !((*value).ptr).is_null() {} else {
            __assert_fail(
                b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1542 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).ptr == ptr as *mut libc::c_void {} else {
        __assert_fail(
            b"value->ptr == ptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1543 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_36425: {
        if (*value).ptr == ptr as *mut libc::c_void {} else {
            __assert_fail(
                b"value->ptr == ptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1543 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if ((*value).freefn).is_some() {} else {
        __assert_fail(
            b"value->freefn != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1544 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_36379: {
        if ((*value).freefn).is_some() {} else {
            __assert_fail(
                b"value->freefn != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1544 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(value);
    value = binn_int32(0 as libc::c_int);
    if !value.is_null() {} else {
        __assert_fail(
            b"value != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1550 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_36325: {
        if !value.is_null() {} else {
            __assert_fail(
                b"value != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1550 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0x61 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_INT32\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1551 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_36285: {
        if (*value).type_0 == 0x61 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_INT32\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1551 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).c2rust_unnamed.vint32 == 0 as libc::c_int {} else {
        __assert_fail(
            b"value->vint32 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1552 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_36243: {
        if (*value).c2rust_unnamed.vint32 == 0 as libc::c_int {} else {
            __assert_fail(
                b"value->vint32 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1552 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if ((*value).freefn).is_none() {} else {
        __assert_fail(
            b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1553 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_36197: {
        if ((*value).freefn).is_none() {} else {
            __assert_fail(
                b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1553 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_int32(value, &mut vint32_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_int32(value, &vint32) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1555 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_36151: {
        if binn_get_int32(value, &mut vint32_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_int32(value, &vint32) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1555 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32_0 == 0 as libc::c_int {} else {
        __assert_fail(
            b"vint32 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1556 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_36115: {
        if vint32_0 == 0 as libc::c_int {} else {
            __assert_fail(
                b"vint32 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1556 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_int64(value, &mut vint64_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_int64(value, &vint64) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1557 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_36069: {
        if binn_get_int64(value, &mut vint64_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_int64(value, &vint64) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1557 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64_0 == 0 as libc::c_int as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1558 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_36031: {
        if vint64_0 == 0 as libc::c_int as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1558 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_double(value, &mut vdouble) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_double(value, &vdouble) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1559 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_35985: {
        if binn_get_double(value, &mut vdouble) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_double(value, &vdouble) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1559 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if AlmostEqualFloats(
        vdouble as libc::c_float,
        0 as libc::c_int as libc::c_float,
        4 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"AlmostEqualFloats(vdouble, 0, 4) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1560 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_35935: {
        if AlmostEqualFloats(
            vdouble as libc::c_float,
            0 as libc::c_int as libc::c_float,
            4 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"AlmostEqualFloats(vdouble, 0, 4) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1560 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1561 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_35889: {
        if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1561 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vbool_0 == 0 as libc::c_int {} else {
        __assert_fail(
            b"vbool == FALSE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1562 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_35853: {
        if vbool_0 == 0 as libc::c_int {} else {
            __assert_fail(
                b"vbool == FALSE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1562 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0x61 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_INT32\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1564 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_35813: {
        if (*value).type_0 == 0x61 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_INT32\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1564 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).c2rust_unnamed.vint32 == 0 as libc::c_int {} else {
        __assert_fail(
            b"value->vint32 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1565 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_35771: {
        if (*value).c2rust_unnamed.vint32 == 0 as libc::c_int {} else {
            __assert_fail(
                b"value->vint32 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1565 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if ((*value).freefn).is_none() {} else {
        __assert_fail(
            b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1566 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_35725: {
        if ((*value).freefn).is_none() {} else {
            __assert_fail(
                b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1566 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    ptr = binn_get_str(value);
    if !ptr.is_null() {} else {
        __assert_fail(
            b"ptr != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1569 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_35676: {
        if !ptr.is_null() {} else {
            __assert_fail(
                b"ptr != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1569 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if strcmp(ptr, b"0\0" as *const u8 as *const libc::c_char) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp(ptr, \"0\") == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1570 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_35628: {
        if strcmp(ptr, b"0\0" as *const u8 as *const libc::c_char) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp(ptr, \"0\") == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1570 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0xa0 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_STRING\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1571 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_35588: {
        if (*value).type_0 == 0xa0 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_STRING\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1571 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if !((*value).ptr).is_null() {} else {
        __assert_fail(
            b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1572 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_35544: {
        if !((*value).ptr).is_null() {} else {
            __assert_fail(
                b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1572 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).ptr == ptr as *mut libc::c_void {} else {
        __assert_fail(
            b"value->ptr == ptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1573 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_35500: {
        if (*value).ptr == ptr as *mut libc::c_void {} else {
            __assert_fail(
                b"value->ptr == ptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1573 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if ((*value).freefn).is_some() {} else {
        __assert_fail(
            b"value->freefn != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1574 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_35454: {
        if ((*value).freefn).is_some() {} else {
            __assert_fail(
                b"value->freefn != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1574 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(value);
    value = binn_int64(-(345678 as libc::c_int) as int64);
    if !value.is_null() {} else {
        __assert_fail(
            b"value != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1582 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_35398: {
        if !value.is_null() {} else {
            __assert_fail(
                b"value != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1582 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0x81 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_INT64\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1583 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_35358: {
        if (*value).type_0 == 0x81 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_INT64\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1583 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).c2rust_unnamed.vint64 == -(345678 as libc::c_int) as libc::c_longlong
    {} else {
        __assert_fail(
            b"value->vint64 == -345678\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1584 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_35312: {
        if (*value).c2rust_unnamed.vint64 == -(345678 as libc::c_int) as libc::c_longlong
        {} else {
            __assert_fail(
                b"value->vint64 == -345678\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1584 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if ((*value).freefn).is_none() {} else {
        __assert_fail(
            b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1585 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_35266: {
        if ((*value).freefn).is_none() {} else {
            __assert_fail(
                b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1585 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_int32(value, &mut vint32_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_int32(value, &vint32) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1587 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_35220: {
        if binn_get_int32(value, &mut vint32_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_int32(value, &vint32) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1587 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32_0 == -(345678 as libc::c_int) {} else {
        __assert_fail(
            b"vint32 == -345678\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1588 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_35182: {
        if vint32_0 == -(345678 as libc::c_int) {} else {
            __assert_fail(
                b"vint32 == -345678\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1588 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_int64(value, &mut vint64_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_int64(value, &vint64) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1589 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_35136: {
        if binn_get_int64(value, &mut vint64_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_int64(value, &vint64) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1589 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64_0 == -(345678 as libc::c_int) as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == -345678\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1590 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_35096: {
        if vint64_0 == -(345678 as libc::c_int) as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == -345678\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1590 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_double(value, &mut vdouble) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_double(value, &vdouble) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1591 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_35050: {
        if binn_get_double(value, &mut vdouble) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_double(value, &vdouble) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1591 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if AlmostEqualFloats(
        vdouble as libc::c_float,
        -(345678 as libc::c_int) as libc::c_float,
        4 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"AlmostEqualFloats(vdouble, -345678, 4) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1592 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_34998: {
        if AlmostEqualFloats(
            vdouble as libc::c_float,
            -(345678 as libc::c_int) as libc::c_float,
            4 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"AlmostEqualFloats(vdouble, -345678, 4) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1592 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1593 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_34952: {
        if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1593 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vbool_0 == 1 as libc::c_int {} else {
        __assert_fail(
            b"vbool == TRUE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1594 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_34916: {
        if vbool_0 == 1 as libc::c_int {} else {
            __assert_fail(
                b"vbool == TRUE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1594 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0x81 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_INT64\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1596 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_34876: {
        if (*value).type_0 == 0x81 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_INT64\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1596 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).c2rust_unnamed.vint64 == -(345678 as libc::c_int) as libc::c_longlong
    {} else {
        __assert_fail(
            b"value->vint64 == -345678\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1597 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_34830: {
        if (*value).c2rust_unnamed.vint64 == -(345678 as libc::c_int) as libc::c_longlong
        {} else {
            __assert_fail(
                b"value->vint64 == -345678\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1597 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if ((*value).freefn).is_none() {} else {
        __assert_fail(
            b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1598 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_34784: {
        if ((*value).freefn).is_none() {} else {
            __assert_fail(
                b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1598 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    ptr = binn_get_str(value);
    if !ptr.is_null() {} else {
        __assert_fail(
            b"ptr != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1601 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_34735: {
        if !ptr.is_null() {} else {
            __assert_fail(
                b"ptr != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1601 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if strcmp(ptr, b"-345678\0" as *const u8 as *const libc::c_char) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp(ptr, \"-345678\") == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1602 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_34687: {
        if strcmp(ptr, b"-345678\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp(ptr, \"-345678\") == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1602 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0xa0 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_STRING\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1603 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_34647: {
        if (*value).type_0 == 0xa0 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_STRING\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1603 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if !((*value).ptr).is_null() {} else {
        __assert_fail(
            b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1604 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_34603: {
        if !((*value).ptr).is_null() {} else {
            __assert_fail(
                b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1604 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).ptr == ptr as *mut libc::c_void {} else {
        __assert_fail(
            b"value->ptr == ptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1605 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_34559: {
        if (*value).ptr == ptr as *mut libc::c_void {} else {
            __assert_fail(
                b"value->ptr == ptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1605 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if ((*value).freefn).is_some() {} else {
        __assert_fail(
            b"value->freefn != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1606 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_34513: {
        if ((*value).freefn).is_some() {} else {
            __assert_fail(
                b"value->freefn != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1606 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(value);
    value = binn_double(-345.678f64);
    if !value.is_null() {} else {
        __assert_fail(
            b"value != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1614 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_34459: {
        if !value.is_null() {} else {
            __assert_fail(
                b"value != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1614 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0x82 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_DOUBLE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1615 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_34419: {
        if (*value).type_0 == 0x82 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_DOUBLE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1615 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).c2rust_unnamed.vdouble == -345.678f64 {} else {
        __assert_fail(
            b"value->vdouble == -345.678\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1616 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_34375: {
        if (*value).c2rust_unnamed.vdouble == -345.678f64 {} else {
            __assert_fail(
                b"value->vdouble == -345.678\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1616 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if ((*value).freefn).is_none() {} else {
        __assert_fail(
            b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1617 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_34329: {
        if ((*value).freefn).is_none() {} else {
            __assert_fail(
                b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1617 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_int32(value, &mut vint32_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_int32(value, &vint32) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1619 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_34283: {
        if binn_get_int32(value, &mut vint32_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_int32(value, &vint32) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1619 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32_0 == -(345 as libc::c_int) {} else {
        __assert_fail(
            b"vint32 == -345\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1620 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_34245: {
        if vint32_0 == -(345 as libc::c_int) {} else {
            __assert_fail(
                b"vint32 == -345\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1620 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_int64(value, &mut vint64_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_int64(value, &vint64) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1621 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_34199: {
        if binn_get_int64(value, &mut vint64_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_int64(value, &vint64) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1621 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64_0 == -(345 as libc::c_int) as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == -345\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1622 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_34159: {
        if vint64_0 == -(345 as libc::c_int) as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == -345\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1622 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_double(value, &mut vdouble) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_double(value, &vdouble) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1623 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_34113: {
        if binn_get_double(value, &mut vdouble) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_double(value, &vdouble) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1623 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if AlmostEqualFloats(
        vdouble as libc::c_float,
        -345.678f64 as libc::c_float,
        4 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"AlmostEqualFloats(vdouble, -345.678, 4) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1624 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_34061: {
        if AlmostEqualFloats(
            vdouble as libc::c_float,
            -345.678f64 as libc::c_float,
            4 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"AlmostEqualFloats(vdouble, -345.678, 4) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1624 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1625 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_34015: {
        if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1625 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vbool_0 == 1 as libc::c_int {} else {
        __assert_fail(
            b"vbool == TRUE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1626 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_33979: {
        if vbool_0 == 1 as libc::c_int {} else {
            __assert_fail(
                b"vbool == TRUE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1626 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0x82 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_DOUBLE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1628 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_33939: {
        if (*value).type_0 == 0x82 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_DOUBLE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1628 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).c2rust_unnamed.vdouble == -345.678f64 {} else {
        __assert_fail(
            b"value->vdouble == -345.678\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1629 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_33895: {
        if (*value).c2rust_unnamed.vdouble == -345.678f64 {} else {
            __assert_fail(
                b"value->vdouble == -345.678\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1629 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if ((*value).freefn).is_none() {} else {
        __assert_fail(
            b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1630 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_33849: {
        if ((*value).freefn).is_none() {} else {
            __assert_fail(
                b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1630 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    ptr = binn_get_str(value);
    if !ptr.is_null() {} else {
        __assert_fail(
            b"ptr != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1633 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_33800: {
        if !ptr.is_null() {} else {
            __assert_fail(
                b"ptr != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1633 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if strcmp(ptr, b"-345.678\0" as *const u8 as *const libc::c_char) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp(ptr, \"-345.678\") == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1634 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_33752: {
        if strcmp(ptr, b"-345.678\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp(ptr, \"-345.678\") == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1634 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0xa0 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_STRING\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1635 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_33712: {
        if (*value).type_0 == 0xa0 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_STRING\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1635 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if !((*value).ptr).is_null() {} else {
        __assert_fail(
            b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1636 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_33668: {
        if !((*value).ptr).is_null() {} else {
            __assert_fail(
                b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1636 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).ptr == ptr as *mut libc::c_void {} else {
        __assert_fail(
            b"value->ptr == ptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1637 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_33624: {
        if (*value).ptr == ptr as *mut libc::c_void {} else {
            __assert_fail(
                b"value->ptr == ptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1637 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if ((*value).freefn).is_some() {} else {
        __assert_fail(
            b"value->freefn != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1638 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_33578: {
        if ((*value).freefn).is_some() {} else {
            __assert_fail(
                b"value->freefn != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1638 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(value);
    value = binn_double(0.0f64);
    if !value.is_null() {} else {
        __assert_fail(
            b"value != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1644 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_33524: {
        if !value.is_null() {} else {
            __assert_fail(
                b"value != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1644 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0x82 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_DOUBLE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1645 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_33484: {
        if (*value).type_0 == 0x82 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_DOUBLE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1645 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).c2rust_unnamed.vdouble == 0.0f64 {} else {
        __assert_fail(
            b"value->vdouble == 0.0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1646 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_33442: {
        if (*value).c2rust_unnamed.vdouble == 0.0f64 {} else {
            __assert_fail(
                b"value->vdouble == 0.0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1646 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if ((*value).freefn).is_none() {} else {
        __assert_fail(
            b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1647 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_33396: {
        if ((*value).freefn).is_none() {} else {
            __assert_fail(
                b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1647 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_int32(value, &mut vint32_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_int32(value, &vint32) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1649 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_33350: {
        if binn_get_int32(value, &mut vint32_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_int32(value, &vint32) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1649 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32_0 == 0 as libc::c_int {} else {
        __assert_fail(
            b"vint32 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1650 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_33314: {
        if vint32_0 == 0 as libc::c_int {} else {
            __assert_fail(
                b"vint32 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1650 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_int64(value, &mut vint64_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_int64(value, &vint64) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1651 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_33268: {
        if binn_get_int64(value, &mut vint64_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_int64(value, &vint64) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1651 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64_0 == 0 as libc::c_int as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1652 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_33230: {
        if vint64_0 == 0 as libc::c_int as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1652 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_double(value, &mut vdouble) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_double(value, &vdouble) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1653 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_33184: {
        if binn_get_double(value, &mut vdouble) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_double(value, &vdouble) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1653 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if AlmostEqualFloats(
        vdouble as libc::c_float,
        0 as libc::c_int as libc::c_float,
        4 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"AlmostEqualFloats(vdouble, 0, 4) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1654 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_33134: {
        if AlmostEqualFloats(
            vdouble as libc::c_float,
            0 as libc::c_int as libc::c_float,
            4 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"AlmostEqualFloats(vdouble, 0, 4) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1654 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1655 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_33088: {
        if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1655 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vbool_0 == 0 as libc::c_int {} else {
        __assert_fail(
            b"vbool == FALSE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1656 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_33052: {
        if vbool_0 == 0 as libc::c_int {} else {
            __assert_fail(
                b"vbool == FALSE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1656 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0x82 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_DOUBLE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1658 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_33012: {
        if (*value).type_0 == 0x82 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_DOUBLE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1658 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).c2rust_unnamed.vdouble == 0.0f64 {} else {
        __assert_fail(
            b"value->vdouble == 0.0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1659 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_32970: {
        if (*value).c2rust_unnamed.vdouble == 0.0f64 {} else {
            __assert_fail(
                b"value->vdouble == 0.0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1659 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if ((*value).freefn).is_none() {} else {
        __assert_fail(
            b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1660 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_32924: {
        if ((*value).freefn).is_none() {} else {
            __assert_fail(
                b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1660 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    ptr = binn_get_str(value);
    if !ptr.is_null() {} else {
        __assert_fail(
            b"ptr != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1663 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_32875: {
        if !ptr.is_null() {} else {
            __assert_fail(
                b"ptr != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1663 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if strcmp(ptr, b"0\0" as *const u8 as *const libc::c_char) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp(ptr, \"0\") == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1664 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_32827: {
        if strcmp(ptr, b"0\0" as *const u8 as *const libc::c_char) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp(ptr, \"0\") == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1664 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0xa0 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_STRING\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1665 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_32787: {
        if (*value).type_0 == 0xa0 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_STRING\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1665 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if !((*value).ptr).is_null() {} else {
        __assert_fail(
            b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1666 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_32743: {
        if !((*value).ptr).is_null() {} else {
            __assert_fail(
                b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1666 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).ptr == ptr as *mut libc::c_void {} else {
        __assert_fail(
            b"value->ptr == ptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1667 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_32699: {
        if (*value).ptr == ptr as *mut libc::c_void {} else {
            __assert_fail(
                b"value->ptr == ptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1667 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if ((*value).freefn).is_some() {} else {
        __assert_fail(
            b"value->freefn != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1668 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_32653: {
        if ((*value).freefn).is_some() {} else {
            __assert_fail(
                b"value->freefn != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1668 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(value);
    value = binn_bool(0 as libc::c_int);
    if !value.is_null() {} else {
        __assert_fail(
            b"value != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1676 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_32600: {
        if !value.is_null() {} else {
            __assert_fail(
                b"value != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1676 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0x80061 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_BOOL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1677 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_32560: {
        if (*value).type_0 == 0x80061 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_BOOL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1677 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).c2rust_unnamed.vbool == 0 as libc::c_int {} else {
        __assert_fail(
            b"value->vbool == FALSE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1678 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_32518: {
        if (*value).c2rust_unnamed.vbool == 0 as libc::c_int {} else {
            __assert_fail(
                b"value->vbool == FALSE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1678 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if ((*value).freefn).is_none() {} else {
        __assert_fail(
            b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1679 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_32472: {
        if ((*value).freefn).is_none() {} else {
            __assert_fail(
                b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1679 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_int32(value, &mut vint32_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_int32(value, &vint32) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1681 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_32426: {
        if binn_get_int32(value, &mut vint32_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_int32(value, &vint32) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1681 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32_0 == 0 as libc::c_int {} else {
        __assert_fail(
            b"vint32 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1682 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_32390: {
        if vint32_0 == 0 as libc::c_int {} else {
            __assert_fail(
                b"vint32 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1682 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_int64(value, &mut vint64_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_int64(value, &vint64) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1683 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_32344: {
        if binn_get_int64(value, &mut vint64_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_int64(value, &vint64) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1683 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64_0 == 0 as libc::c_int as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1684 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_32306: {
        if vint64_0 == 0 as libc::c_int as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1684 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_double(value, &mut vdouble) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_double(value, &vdouble) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1685 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_32260: {
        if binn_get_double(value, &mut vdouble) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_double(value, &vdouble) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1685 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if AlmostEqualFloats(
        vdouble as libc::c_float,
        0 as libc::c_int as libc::c_float,
        4 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"AlmostEqualFloats(vdouble, 0, 4) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1686 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_32210: {
        if AlmostEqualFloats(
            vdouble as libc::c_float,
            0 as libc::c_int as libc::c_float,
            4 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"AlmostEqualFloats(vdouble, 0, 4) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1686 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1687 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_32164: {
        if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1687 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vbool_0 == 0 as libc::c_int {} else {
        __assert_fail(
            b"vbool == FALSE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1688 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_32128: {
        if vbool_0 == 0 as libc::c_int {} else {
            __assert_fail(
                b"vbool == FALSE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1688 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0x80061 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_BOOL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1690 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_32088: {
        if (*value).type_0 == 0x80061 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_BOOL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1690 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).c2rust_unnamed.vbool == 0 as libc::c_int {} else {
        __assert_fail(
            b"value->vbool == FALSE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1691 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_32046: {
        if (*value).c2rust_unnamed.vbool == 0 as libc::c_int {} else {
            __assert_fail(
                b"value->vbool == FALSE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1691 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if ((*value).freefn).is_none() {} else {
        __assert_fail(
            b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1692 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_32000: {
        if ((*value).freefn).is_none() {} else {
            __assert_fail(
                b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1692 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    ptr = binn_get_str(value);
    if !ptr.is_null() {} else {
        __assert_fail(
            b"ptr != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1695 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_31951: {
        if !ptr.is_null() {} else {
            __assert_fail(
                b"ptr != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1695 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if strcmp(ptr, b"false\0" as *const u8 as *const libc::c_char) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp(ptr, \"false\") == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1696 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_31903: {
        if strcmp(ptr, b"false\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp(ptr, \"false\") == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1696 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0xa0 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_STRING\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1697 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_31863: {
        if (*value).type_0 == 0xa0 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_STRING\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1697 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if !((*value).ptr).is_null() {} else {
        __assert_fail(
            b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1698 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_31819: {
        if !((*value).ptr).is_null() {} else {
            __assert_fail(
                b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1698 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).ptr == ptr as *mut libc::c_void {} else {
        __assert_fail(
            b"value->ptr == ptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1699 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_31775: {
        if (*value).ptr == ptr as *mut libc::c_void {} else {
            __assert_fail(
                b"value->ptr == ptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1699 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if ((*value).freefn).is_some() {} else {
        __assert_fail(
            b"value->freefn != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1700 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_31729: {
        if ((*value).freefn).is_some() {} else {
            __assert_fail(
                b"value->freefn != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1700 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(value);
    value = binn_bool(1 as libc::c_int);
    if !value.is_null() {} else {
        __assert_fail(
            b"value != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1706 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_31675: {
        if !value.is_null() {} else {
            __assert_fail(
                b"value != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1706 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0x80061 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_BOOL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1707 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_31635: {
        if (*value).type_0 == 0x80061 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_BOOL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1707 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).c2rust_unnamed.vbool == 1 as libc::c_int {} else {
        __assert_fail(
            b"value->vbool == TRUE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1708 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_31593: {
        if (*value).c2rust_unnamed.vbool == 1 as libc::c_int {} else {
            __assert_fail(
                b"value->vbool == TRUE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1708 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if ((*value).freefn).is_none() {} else {
        __assert_fail(
            b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1709 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_31547: {
        if ((*value).freefn).is_none() {} else {
            __assert_fail(
                b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1709 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_int32(value, &mut vint32_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_int32(value, &vint32) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1711 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_31500: {
        if binn_get_int32(value, &mut vint32_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_int32(value, &vint32) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1711 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint32_0 == 1 as libc::c_int {} else {
        __assert_fail(
            b"vint32 == 1\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1712 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_31463: {
        if vint32_0 == 1 as libc::c_int {} else {
            __assert_fail(
                b"vint32 == 1\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1712 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_int64(value, &mut vint64_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_int64(value, &vint64) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1713 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_31416: {
        if binn_get_int64(value, &mut vint64_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_int64(value, &vint64) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1713 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vint64_0 == 1 as libc::c_int as libc::c_longlong {} else {
        __assert_fail(
            b"vint64 == 1\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1714 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_31377: {
        if vint64_0 == 1 as libc::c_int as libc::c_longlong {} else {
            __assert_fail(
                b"vint64 == 1\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1714 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_double(value, &mut vdouble) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_double(value, &vdouble) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1715 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_31330: {
        if binn_get_double(value, &mut vdouble) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_double(value, &vdouble) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1715 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if AlmostEqualFloats(
        vdouble as libc::c_float,
        1 as libc::c_int as libc::c_float,
        4 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"AlmostEqualFloats(vdouble, 1, 4) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1716 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_31279: {
        if AlmostEqualFloats(
            vdouble as libc::c_float,
            1 as libc::c_int as libc::c_float,
            4 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"AlmostEqualFloats(vdouble, 1, 4) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1716 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1717 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_31232: {
        if binn_get_bool(value, &mut vbool_0) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_get_bool(value, &vbool) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1717 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if vbool_0 == 1 as libc::c_int {} else {
        __assert_fail(
            b"vbool == TRUE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1718 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_31195: {
        if vbool_0 == 1 as libc::c_int {} else {
            __assert_fail(
                b"vbool == TRUE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1718 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0x80061 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_BOOL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1720 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_31155: {
        if (*value).type_0 == 0x80061 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_BOOL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1720 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).c2rust_unnamed.vbool == 1 as libc::c_int {} else {
        __assert_fail(
            b"value->vbool == TRUE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1721 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_31113: {
        if (*value).c2rust_unnamed.vbool == 1 as libc::c_int {} else {
            __assert_fail(
                b"value->vbool == TRUE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1721 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if ((*value).freefn).is_none() {} else {
        __assert_fail(
            b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1722 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_31067: {
        if ((*value).freefn).is_none() {} else {
            __assert_fail(
                b"value->freefn == NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1722 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    ptr = binn_get_str(value);
    if !ptr.is_null() {} else {
        __assert_fail(
            b"ptr != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1725 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_31017: {
        if !ptr.is_null() {} else {
            __assert_fail(
                b"ptr != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1725 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if strcmp(ptr, b"true\0" as *const u8 as *const libc::c_char) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp(ptr, \"true\") == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1726 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_30969: {
        if strcmp(ptr, b"true\0" as *const u8 as *const libc::c_char) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp(ptr, \"true\") == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1726 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).type_0 == 0xa0 as libc::c_int {} else {
        __assert_fail(
            b"value->type == BINN_STRING\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1727 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_30929: {
        if (*value).type_0 == 0xa0 as libc::c_int {} else {
            __assert_fail(
                b"value->type == BINN_STRING\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1727 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if !((*value).ptr).is_null() {} else {
        __assert_fail(
            b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1728 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_30885: {
        if !((*value).ptr).is_null() {} else {
            __assert_fail(
                b"value->ptr != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1728 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if (*value).ptr == ptr as *mut libc::c_void {} else {
        __assert_fail(
            b"value->ptr == ptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1729 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_30840: {
        if (*value).ptr == ptr as *mut libc::c_void {} else {
            __assert_fail(
                b"value->ptr == ptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1729 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    if ((*value).freefn).is_some() {} else {
        __assert_fail(
            b"value->freefn != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1730 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 29],
                &[libc::c_char; 29],
            >(b"void test_value_conversion()\0"))
                .as_ptr(),
        );
    }
    'c_30793: {
        if ((*value).freefn).is_some() {} else {
            __assert_fail(
                b"value->freefn != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1730 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 29],
                    &[libc::c_char; 29],
                >(b"void test_value_conversion()\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(value);
    puts(b"OK\0" as *const u8 as *const libc::c_char);
}
pub unsafe extern "C" fn test_value_copy() {
    printf(b"testing binn value copy... \0" as *const u8 as *const libc::c_char);
    puts(b"TODO!!!\0" as *const u8 as *const libc::c_char);
}
pub unsafe extern "C" fn test_virtual_types() {
    let mut list: *mut binn = 0 as *mut binn;
    let mut ptr: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut storage_type: libc::c_int = 0;
    let mut extra_type: libc::c_int = 0;
    let mut value: BOOL = 0;
    printf(b"testing binn virtual types... \0" as *const u8 as *const libc::c_char);
    if binn_get_type_info(0x80061 as libc::c_int, &mut storage_type, &mut extra_type)
        == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_get_type_info(BINN_BOOL, &storage_type, &extra_type) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1761 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_virtual_types()\0"))
                .as_ptr(),
        );
    }
    'c_43222: {
        if binn_get_type_info(0x80061 as libc::c_int, &mut storage_type, &mut extra_type)
            == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_get_type_info(BINN_BOOL, &storage_type, &extra_type) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1761 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_virtual_types()\0"))
                    .as_ptr(),
            );
        }
    };
    if storage_type == 0x60 as libc::c_int {} else {
        __assert_fail(
            b"storage_type == BINN_STORAGE_DWORD\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1762 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_virtual_types()\0"))
                .as_ptr(),
        );
    }
    'c_43184: {
        if storage_type == 0x60 as libc::c_int {} else {
            __assert_fail(
                b"storage_type == BINN_STORAGE_DWORD\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1762 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_virtual_types()\0"))
                    .as_ptr(),
            );
        }
    };
    if extra_type == 1 as libc::c_int {} else {
        __assert_fail(
            b"extra_type == 1\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1763 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_virtual_types()\0"))
                .as_ptr(),
        );
    }
    'c_43147: {
        if extra_type == 1 as libc::c_int {} else {
            __assert_fail(
                b"extra_type == 1\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1763 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_virtual_types()\0"))
                    .as_ptr(),
            );
        }
    };
    list = binn_list();
    if !list.is_null() {} else {
        __assert_fail(
            b"list != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1766 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_virtual_types()\0"))
                .as_ptr(),
        );
    }
    'c_43100: {
        if !list.is_null() {} else {
            __assert_fail(
                b"list != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1766 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_virtual_types()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_add_bool(list, 1 as libc::c_int) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_add_bool(list, TRUE) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1768 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_virtual_types()\0"))
                .as_ptr(),
        );
    }
    'c_43056: {
        if binn_list_add_bool(list, 1 as libc::c_int) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_add_bool(list, TRUE) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1768 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_virtual_types()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_add_bool(list, 0 as libc::c_int) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_add_bool(list, FALSE) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1769 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_virtual_types()\0"))
                .as_ptr(),
        );
    }
    'c_43011: {
        if binn_list_add_bool(list, 0 as libc::c_int) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_add_bool(list, FALSE) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1769 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_virtual_types()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_add_null(list) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_add_null(list) == TRUE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1770 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_virtual_types()\0"))
                .as_ptr(),
        );
    }
    'c_42969: {
        if binn_list_add_null(list) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_add_null(list) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1770 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_virtual_types()\0"))
                    .as_ptr(),
            );
        }
    };
    ptr = binn_ptr(list as *mut libc::c_void);
    if !ptr.is_null() {} else {
        __assert_fail(
            b"ptr != 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1773 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_virtual_types()\0"))
                .as_ptr(),
        );
    }
    'c_42923: {
        if !ptr.is_null() {} else {
            __assert_fail(
                b"ptr != 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1773 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_virtual_types()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_get_bool(ptr, 1 as libc::c_int, &mut value) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_list_get_bool(ptr, 1, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1775 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_virtual_types()\0"))
                .as_ptr(),
        );
    }
    'c_42875: {
        if binn_list_get_bool(ptr, 1 as libc::c_int, &mut value) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_list_get_bool(ptr, 1, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1775 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_virtual_types()\0"))
                    .as_ptr(),
            );
        }
    };
    if value == 1 as libc::c_int {} else {
        __assert_fail(
            b"value == TRUE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1776 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_virtual_types()\0"))
                .as_ptr(),
        );
    }
    'c_42839: {
        if value == 1 as libc::c_int {} else {
            __assert_fail(
                b"value == TRUE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1776 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_virtual_types()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_get_bool(ptr, 2 as libc::c_int, &mut value) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_list_get_bool(ptr, 2, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1778 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_virtual_types()\0"))
                .as_ptr(),
        );
    }
    'c_42791: {
        if binn_list_get_bool(ptr, 2 as libc::c_int, &mut value) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_list_get_bool(ptr, 2, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1778 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_virtual_types()\0"))
                    .as_ptr(),
            );
        }
    };
    if value == 0 as libc::c_int {} else {
        __assert_fail(
            b"value == FALSE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1779 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_virtual_types()\0"))
                .as_ptr(),
        );
    }
    'c_42755: {
        if value == 0 as libc::c_int {} else {
            __assert_fail(
                b"value == FALSE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1779 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_virtual_types()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_null(ptr, 3 as libc::c_int) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_null(ptr, 3) == TRUE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1781 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_virtual_types()\0"))
                .as_ptr(),
        );
    }
    'c_42711: {
        if binn_list_null(ptr, 3 as libc::c_int) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_null(ptr, 3) == TRUE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1781 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_virtual_types()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_null(ptr, 1 as libc::c_int) == 0 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_null(ptr, 1) == FALSE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1784 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_virtual_types()\0"))
                .as_ptr(),
        );
    }
    'c_42667: {
        if binn_list_null(ptr, 1 as libc::c_int) == 0 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_null(ptr, 1) == FALSE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1784 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_virtual_types()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_null(ptr, 2 as libc::c_int) == 0 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_null(ptr, 2) == FALSE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1785 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_virtual_types()\0"))
                .as_ptr(),
        );
    }
    'c_42622: {
        if binn_list_null(ptr, 2 as libc::c_int) == 0 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_null(ptr, 2) == FALSE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1785 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_virtual_types()\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_get_bool(ptr, 3 as libc::c_int, &mut value) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_list_get_bool(ptr, 3, &value) == FALSE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1786 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_virtual_types()\0"))
                .as_ptr(),
        );
    }
    'c_42571: {
        if binn_list_get_bool(ptr, 3 as libc::c_int, &mut value) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_list_get_bool(ptr, 3, &value) == FALSE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1786 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_virtual_types()\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(list);
    puts(b"OK\0" as *const u8 as *const libc::c_char);
}
pub unsafe extern "C" fn test_binn_iter(mut use_int_compression: BOOL) {
    let mut list: *mut binn = 0 as *mut binn;
    let mut map: *mut binn = 0 as *mut binn;
    let mut obj: *mut binn = 0 as *mut binn;
    let mut list2: *mut binn = 0 as *mut binn;
    let mut copy: *mut binn = 0 as *mut binn;
    let mut iter: binn_iter = binn_iter {
        pnext: 0 as *mut libc::c_uchar,
        plimit: 0 as *mut libc::c_uchar,
        type_0: 0,
        count: 0,
        current: 0,
    };
    let mut iter2: binn_iter = binn_iter {
        pnext: 0 as *mut libc::c_uchar,
        plimit: 0 as *mut libc::c_uchar,
        type_0: 0,
        count: 0,
        current: 0,
    };
    let mut value: binn = binn {
        header: 0,
        allocated: 0,
        writable: 0,
        dirty: 0,
        pbuf: 0 as *mut libc::c_void,
        pre_allocated: 0,
        alloc_size: 0,
        used_size: 0,
        type_0: 0,
        ptr: 0 as *mut libc::c_void,
        size: 0,
        count: 0,
        freefn: None,
        c2rust_unnamed: C2RustUnnamed { vint8: 0 },
        disable_int_compression: 0,
    };
    let mut value2: binn = binn {
        header: 0,
        allocated: 0,
        writable: 0,
        dirty: 0,
        pbuf: 0 as *mut libc::c_void,
        pre_allocated: 0,
        alloc_size: 0,
        used_size: 0,
        type_0: 0,
        ptr: 0 as *mut libc::c_void,
        size: 0,
        count: 0,
        freefn: None,
        c2rust_unnamed: C2RustUnnamed { vint8: 0 },
        disable_int_compression: 0,
    };
    let mut blob_size: libc::c_int = 0;
    let mut id: libc::c_int = 0;
    let mut id2: libc::c_int = 0;
    let mut list2size: libc::c_int = 0;
    let mut ptr: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut blob_ptr: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut key: [libc::c_char; 256] = [0; 256];
    let mut key2: [libc::c_char; 256] = [0; 256];
    blob_ptr = b"key\0value\0\0\0" as *const u8 as *const libc::c_char
        as *mut libc::c_void;
    blob_size = 11 as libc::c_int;
    printf(
        b"testing binn sequential read (use_int_compression = %d)... \0" as *const u8
            as *const libc::c_char,
        use_int_compression,
    );
    list = binn_list();
    list2 = binn_list();
    map = binn_map();
    obj = binn_object();
    if !list.is_null() {} else {
        __assert_fail(
            b"list != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1816 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_59445: {
        if !list.is_null() {} else {
            __assert_fail(
                b"list != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1816 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if !list2.is_null() {} else {
        __assert_fail(
            b"list2 != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1817 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_59403: {
        if !list2.is_null() {} else {
            __assert_fail(
                b"list2 != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1817 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if !map.is_null() {} else {
        __assert_fail(
            b"map != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1818 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_59361: {
        if !map.is_null() {} else {
            __assert_fail(
                b"map != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1818 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if !obj.is_null() {} else {
        __assert_fail(
            b"obj != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1819 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_59319: {
        if !obj.is_null() {} else {
            __assert_fail(
                b"obj != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1819 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if use_int_compression == 0 as libc::c_int {
        (*list).disable_int_compression = 1 as libc::c_int;
        (*map).disable_int_compression = 1 as libc::c_int;
        (*obj).disable_int_compression = 1 as libc::c_int;
    }
    if binn_list_add_int32(list2, 250 as libc::c_int) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_add_int32(list2, 250) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1827 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_59252: {
        if binn_list_add_int32(list2, 250 as libc::c_int) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_add_int32(list2, 250) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1827 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_add_null(list2) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_add_null(list2) == TRUE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1828 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_59210: {
        if binn_list_add_null(list2) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_add_null(list2) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1828 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_add_str(
        list2,
        b"l1st2\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_list_add_str(list2, \"l1st2\") == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1829 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_59162: {
        if binn_list_add_str(
            list2,
            b"l1st2\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_list_add_str(list2, \"l1st2\") == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1829 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_add_bool(list2, 1 as libc::c_int) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_add_bool(list2, TRUE) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1830 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_59118: {
        if binn_list_add_bool(list2, 1 as libc::c_int) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_add_bool(list2, TRUE) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1830 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    list2size = binn_size(list2 as *mut libc::c_void);
    if binn_list_add_int8(list, 111 as libc::c_int as libc::c_schar) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_list_add_int8(list, 111) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1834 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_59063: {
        if binn_list_add_int8(list, 111 as libc::c_int as libc::c_schar)
            == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_list_add_int8(list, 111) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1834 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_add_int32(list, 123456789 as libc::c_int) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_add_int32(list, 123456789) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1835 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_59019: {
        if binn_list_add_int32(list, 123456789 as libc::c_int) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_list_add_int32(list, 123456789) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1835 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_add_int16(list, -(123 as libc::c_int) as libc::c_short)
        == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_list_add_int16(list, -123) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1836 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_58970: {
        if binn_list_add_int16(list, -(123 as libc::c_int) as libc::c_short)
            == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_list_add_int16(list, -123) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1836 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_add_int64(list, 9876543210 as libc::c_long as int64) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_list_add_int64(list, 9876543210) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1837 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_58923: {
        if binn_list_add_int64(list, 9876543210 as libc::c_long as int64)
            == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_list_add_int64(list, 9876543210) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1837 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_add_float(list, 1.25f64 as libc::c_float) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_add_float(list, 1.25) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1838 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_58876: {
        if binn_list_add_float(list, 1.25f64 as libc::c_float) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_list_add_float(list, 1.25) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1838 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_add_double(list, 25.987654321f64) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_add_double(list, 25.987654321) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1839 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_58831: {
        if binn_list_add_double(list, 25.987654321f64) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_add_double(list, 25.987654321) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1839 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_add_bool(list, 1 as libc::c_int) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_add_bool(list, TRUE) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1840 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_58787: {
        if binn_list_add_bool(list, 1 as libc::c_int) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_add_bool(list, TRUE) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1840 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_add_bool(list, 0 as libc::c_int) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_add_bool(list, FALSE) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1841 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_58743: {
        if binn_list_add_bool(list, 0 as libc::c_int) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_add_bool(list, FALSE) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1841 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_add_null(list) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_add_null(list) == TRUE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1842 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_58701: {
        if binn_list_add_null(list) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_add_null(list) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1842 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_add_str(
        list,
        b"testing...\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_list_add_str(list, \"testing...\") == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1843 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_58653: {
        if binn_list_add_str(
            list,
            b"testing...\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_list_add_str(list, \"testing...\") == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1843 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_add_blob(
        list,
        blob_ptr as *mut libc::c_char as *mut libc::c_void,
        blob_size,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_list_add_blob(list, (char *)blob_ptr, blob_size) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1844 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_58598: {
        if binn_list_add_blob(
            list,
            blob_ptr as *mut libc::c_char as *mut libc::c_void,
            blob_size,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_list_add_blob(list, (char *)blob_ptr, blob_size) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1844 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_add_list(list, list2 as *mut libc::c_void) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_add_list(list, list2) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1845 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_58549: {
        if binn_list_add_list(list, list2 as *mut libc::c_void) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_list_add_list(list, list2) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1845 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_int8(
        obj,
        b"a\0" as *const u8 as *const libc::c_char,
        111 as libc::c_int as libc::c_schar,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_int8(obj, \"a\", 111) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1847 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_58499: {
        if binn_object_set_int8(
            obj,
            b"a\0" as *const u8 as *const libc::c_char,
            111 as libc::c_int as libc::c_schar,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_int8(obj, \"a\", 111) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1847 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_int32(
        obj,
        b"b\0" as *const u8 as *const libc::c_char,
        123456789 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_int32(obj, \"b\", 123456789) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1848 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_58451: {
        if binn_object_set_int32(
            obj,
            b"b\0" as *const u8 as *const libc::c_char,
            123456789 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_int32(obj, \"b\", 123456789) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1848 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_int16(
        obj,
        b"c\0" as *const u8 as *const libc::c_char,
        -(123 as libc::c_int) as libc::c_short,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_int16(obj, \"c\", -123) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1849 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_58399: {
        if binn_object_set_int16(
            obj,
            b"c\0" as *const u8 as *const libc::c_char,
            -(123 as libc::c_int) as libc::c_short,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_int16(obj, \"c\", -123) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1849 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_int64(
        obj,
        b"d\0" as *const u8 as *const libc::c_char,
        9876543210 as libc::c_long as int64,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_int64(obj, \"d\", 9876543210) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1850 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_58349: {
        if binn_object_set_int64(
            obj,
            b"d\0" as *const u8 as *const libc::c_char,
            9876543210 as libc::c_long as int64,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_int64(obj, \"d\", 9876543210) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1850 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_float(
        obj,
        b"e\0" as *const u8 as *const libc::c_char,
        1.25f64 as libc::c_float,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_float(obj, \"e\", 1.25) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1851 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_58299: {
        if binn_object_set_float(
            obj,
            b"e\0" as *const u8 as *const libc::c_char,
            1.25f64 as libc::c_float,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_float(obj, \"e\", 1.25) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1851 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_double(
        obj,
        b"f\0" as *const u8 as *const libc::c_char,
        25.987654321f64,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_double(obj, \"f\", 25.987654321) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1852 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_58251: {
        if binn_object_set_double(
            obj,
            b"f\0" as *const u8 as *const libc::c_char,
            25.987654321f64,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_double(obj, \"f\", 25.987654321) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1852 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_bool(
        obj,
        b"g\0" as *const u8 as *const libc::c_char,
        1 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_bool(obj, \"g\", TRUE) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1853 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_58203: {
        if binn_object_set_bool(
            obj,
            b"g\0" as *const u8 as *const libc::c_char,
            1 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_bool(obj, \"g\", TRUE) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1853 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_bool(
        obj,
        b"h\0" as *const u8 as *const libc::c_char,
        0 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_bool(obj, \"h\", FALSE) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1854 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_58155: {
        if binn_object_set_bool(
            obj,
            b"h\0" as *const u8 as *const libc::c_char,
            0 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_bool(obj, \"h\", FALSE) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1854 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_null(obj, b"i\0" as *const u8 as *const libc::c_char)
        == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_null(obj, \"i\") == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1855 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_58109: {
        if binn_object_set_null(obj, b"i\0" as *const u8 as *const libc::c_char)
            == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_null(obj, \"i\") == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1855 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_str(
        obj,
        b"j\0" as *const u8 as *const libc::c_char,
        b"testing...\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_str(obj, \"j\", \"testing...\") == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1856 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_58057: {
        if binn_object_set_str(
            obj,
            b"j\0" as *const u8 as *const libc::c_char,
            b"testing...\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_str(obj, \"j\", \"testing...\") == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1856 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_blob(
        obj,
        b"k\0" as *const u8 as *const libc::c_char,
        blob_ptr as *mut libc::c_char as *mut libc::c_void,
        blob_size,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_blob(obj, \"k\", (char *)blob_ptr, blob_size) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1857 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_57998: {
        if binn_object_set_blob(
            obj,
            b"k\0" as *const u8 as *const libc::c_char,
            blob_ptr as *mut libc::c_char as *mut libc::c_void,
            blob_size,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_blob(obj, \"k\", (char *)blob_ptr, blob_size) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1857 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_set_list(
        obj,
        b"l\0" as *const u8 as *const libc::c_char,
        list2 as *mut libc::c_void,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_list(obj, \"l\", list2) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1858 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_57946: {
        if binn_object_set_list(
            obj,
            b"l\0" as *const u8 as *const libc::c_char,
            list2 as *mut libc::c_void,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_list(obj, \"l\", list2) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1858 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_map_set_int8(map, 55010 as libc::c_int, 111 as libc::c_int as libc::c_schar)
        == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_map_set_int8(map, 55010, 111) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1860 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_57897: {
        if binn_map_set_int8(
            map,
            55010 as libc::c_int,
            111 as libc::c_int as libc::c_schar,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_map_set_int8(map, 55010, 111) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1860 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_map_set_int32(map, 55020 as libc::c_int, 123456789 as libc::c_int)
        == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_map_set_int32(map, 55020, 123456789) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1861 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_57851: {
        if binn_map_set_int32(map, 55020 as libc::c_int, 123456789 as libc::c_int)
            == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_map_set_int32(map, 55020, 123456789) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1861 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_map_set_int16(
        map,
        55030 as libc::c_int,
        -(123 as libc::c_int) as libc::c_short,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_map_set_int16(map, 55030, -123) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1862 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_57800: {
        if binn_map_set_int16(
            map,
            55030 as libc::c_int,
            -(123 as libc::c_int) as libc::c_short,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_map_set_int16(map, 55030, -123) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1862 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_map_set_int64(map, 55040 as libc::c_int, 9876543210 as libc::c_long as int64)
        == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_map_set_int64(map, 55040, 9876543210) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1863 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_57751: {
        if binn_map_set_int64(
            map,
            55040 as libc::c_int,
            9876543210 as libc::c_long as int64,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_map_set_int64(map, 55040, 9876543210) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1863 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_map_set_float(map, 55050 as libc::c_int, 1.25f64 as libc::c_float)
        == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_map_set_float(map, 55050, 1.25) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1864 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_57702: {
        if binn_map_set_float(map, 55050 as libc::c_int, 1.25f64 as libc::c_float)
            == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_map_set_float(map, 55050, 1.25) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1864 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_map_set_double(map, 55060 as libc::c_int, 25.987654321f64)
        == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_map_set_double(map, 55060, 25.987654321) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1865 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_57655: {
        if binn_map_set_double(map, 55060 as libc::c_int, 25.987654321f64)
            == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_map_set_double(map, 55060, 25.987654321) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1865 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_map_set_bool(map, 55070 as libc::c_int, 1 as libc::c_int) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_map_set_bool(map, 55070, TRUE) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1866 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_57609: {
        if binn_map_set_bool(map, 55070 as libc::c_int, 1 as libc::c_int)
            == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_map_set_bool(map, 55070, TRUE) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1866 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_map_set_bool(map, 55080 as libc::c_int, 0 as libc::c_int) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_map_set_bool(map, 55080, FALSE) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1867 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_57562: {
        if binn_map_set_bool(map, 55080 as libc::c_int, 0 as libc::c_int)
            == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_map_set_bool(map, 55080, FALSE) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1867 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_map_set_null(map, 55090 as libc::c_int) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_map_set_null(map, 55090) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1868 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_57518: {
        if binn_map_set_null(map, 55090 as libc::c_int) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_map_set_null(map, 55090) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1868 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_map_set_str(
        map,
        55100 as libc::c_int,
        b"testing...\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_map_set_str(map, 55100, \"testing...\") == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1869 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_57467: {
        if binn_map_set_str(
            map,
            55100 as libc::c_int,
            b"testing...\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_map_set_str(map, 55100, \"testing...\") == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1869 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_map_set_blob(
        map,
        55110 as libc::c_int,
        blob_ptr as *mut libc::c_char as *mut libc::c_void,
        blob_size,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_map_set_blob(map, 55110, (char *)blob_ptr, blob_size) == TRUE\0"
                as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1870 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_57411: {
        if binn_map_set_blob(
            map,
            55110 as libc::c_int,
            blob_ptr as *mut libc::c_char as *mut libc::c_void,
            blob_size,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_map_set_blob(map, 55110, (char *)blob_ptr, blob_size) == TRUE\0"
                    as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1870 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_map_set_list(map, 55120 as libc::c_int, list2 as *mut libc::c_void)
        == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_map_set_list(map, 55120, list2) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1871 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_57360: {
        if binn_map_set_list(map, 55120 as libc::c_int, list2 as *mut libc::c_void)
            == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_map_set_list(map, 55120, list2) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1871 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    ptr = binn_ptr(list as *mut libc::c_void);
    if !ptr.is_null() {} else {
        __assert_fail(
            b"ptr != 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1886 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_57314: {
        if !ptr.is_null() {} else {
            __assert_fail(
                b"ptr != 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1886 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_iter_init(&mut iter, ptr, 0xe0 as libc::c_int) != 0 {} else {
        __assert_fail(
            b"binn_iter_init(&iter, ptr, BINN_LIST)\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1887 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_57270: {
        if binn_iter_init(&mut iter, ptr, 0xe0 as libc::c_int) != 0 {} else {
            __assert_fail(
                b"binn_iter_init(&iter, ptr, BINN_LIST)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1887 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.pnext > ptr as *mut libc::c_uchar {} else {
        __assert_fail(
            b"iter.pnext > ptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1888 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_57228: {
        if iter.pnext > ptr as *mut libc::c_uchar {} else {
            __assert_fail(
                b"iter.pnext > ptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1888 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.plimit > ptr as *mut libc::c_uchar {} else {
        __assert_fail(
            b"iter.plimit > ptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1889 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_57186: {
        if iter.plimit > ptr as *mut libc::c_uchar {} else {
            __assert_fail(
                b"iter.plimit > ptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1889 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.count == 12 as libc::c_int {} else {
        __assert_fail(
            b"iter.count == 12\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1890 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_57148: {
        if iter.count == 12 as libc::c_int {} else {
            __assert_fail(
                b"iter.count == 12\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1890 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 0 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1891 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_57110: {
        if iter.current == 0 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1891 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_next(&mut iter, &mut value) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_next(&iter, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1893 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_57064: {
        if binn_list_next(&mut iter, &mut value) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_next(&iter, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1893 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.pnext > ptr as *mut libc::c_uchar {} else {
        __assert_fail(
            b"iter.pnext > ptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1894 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_57022: {
        if iter.pnext > ptr as *mut libc::c_uchar {} else {
            __assert_fail(
                b"iter.pnext > ptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1894 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.plimit > ptr as *mut libc::c_uchar {} else {
        __assert_fail(
            b"iter.plimit > ptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1895 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_56980: {
        if iter.plimit > ptr as *mut libc::c_uchar {} else {
            __assert_fail(
                b"iter.plimit > ptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1895 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.count == 12 as libc::c_int {} else {
        __assert_fail(
            b"iter.count == 12\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1896 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_56942: {
        if iter.count == 12 as libc::c_int {} else {
            __assert_fail(
                b"iter.count == 12\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1896 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 1 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 1\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1897 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_56904: {
        if iter.current == 1 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 1\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1897 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0x21 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_INT8\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1898 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_56866: {
        if value.type_0 == 0x21 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_INT8\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1898 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.c2rust_unnamed.vint8 as libc::c_int == 111 as libc::c_int {} else {
        __assert_fail(
            b"value.vint8 == 111\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1899 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_56824: {
        if value.c2rust_unnamed.vint8 as libc::c_int == 111 as libc::c_int {} else {
            __assert_fail(
                b"value.vint8 == 111\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1899 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_next(&mut iter, &mut value) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_next(&iter, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1901 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_56778: {
        if binn_list_next(&mut iter, &mut value) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_next(&iter, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1901 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 2 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 2\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1902 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_56740: {
        if iter.current == 2 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 2\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1902 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if use_int_compression != 0 {
        if value.type_0 == 0x60 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_UINT32\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1904 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_56701: {
            if value.type_0 == 0x60 as libc::c_int {} else {
                __assert_fail(
                    b"value.type == BINN_UINT32\0" as *const u8 as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    1904 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
    } else {
        if value.type_0 == 0x61 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_INT32\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1906 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_56662: {
            if value.type_0 == 0x61 as libc::c_int {} else {
                __assert_fail(
                    b"value.type == BINN_INT32\0" as *const u8 as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    1906 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
    }
    if value.c2rust_unnamed.vint32 == 123456789 as libc::c_int {} else {
        __assert_fail(
            b"value.vint32 == 123456789\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1908 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_56618: {
        if value.c2rust_unnamed.vint32 == 123456789 as libc::c_int {} else {
            __assert_fail(
                b"value.vint32 == 123456789\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1908 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_next(&mut iter, &mut value) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_next(&iter, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1910 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_56572: {
        if binn_list_next(&mut iter, &mut value) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_next(&iter, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1910 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 3 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 3\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1911 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_56534: {
        if iter.current == 3 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 3\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1911 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if use_int_compression != 0 {
        if value.type_0 == 0x21 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_INT8\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1913 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_56495: {
            if value.type_0 == 0x21 as libc::c_int {} else {
                __assert_fail(
                    b"value.type == BINN_INT8\0" as *const u8 as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    1913 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
        if value.c2rust_unnamed.vint8 as libc::c_int == -(123 as libc::c_int) {} else {
            __assert_fail(
                b"value.vint8 == -123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1914 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_56451: {
            if value.c2rust_unnamed.vint8 as libc::c_int == -(123 as libc::c_int)
            {} else {
                __assert_fail(
                    b"value.vint8 == -123\0" as *const u8 as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    1914 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
    } else {
        if value.type_0 == 0x41 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_INT16\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1916 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_56411: {
            if value.type_0 == 0x41 as libc::c_int {} else {
                __assert_fail(
                    b"value.type == BINN_INT16\0" as *const u8 as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    1916 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
        if value.c2rust_unnamed.vint16 as libc::c_int == -(123 as libc::c_int) {} else {
            __assert_fail(
                b"value.vint16 == -123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1917 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_56367: {
            if value.c2rust_unnamed.vint16 as libc::c_int == -(123 as libc::c_int)
            {} else {
                __assert_fail(
                    b"value.vint16 == -123\0" as *const u8 as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    1917 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
    }
    if binn_list_next(&mut iter, &mut value) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_next(&iter, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1920 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_56316: {
        if binn_list_next(&mut iter, &mut value) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_next(&iter, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1920 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 4 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 4\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1921 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_56278: {
        if iter.current == 4 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 4\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1921 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0x81 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_INT64\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1922 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_56240: {
        if value.type_0 == 0x81 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_INT64\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1922 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.c2rust_unnamed.vint64 == 9876543210 as libc::c_long as libc::c_longlong
    {} else {
        __assert_fail(
            b"value.vint64 == 9876543210\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1923 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_56198: {
        if value.c2rust_unnamed.vint64 == 9876543210 as libc::c_long as libc::c_longlong
        {} else {
            __assert_fail(
                b"value.vint64 == 9876543210\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1923 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_next(&mut iter, &mut value) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_next(&iter, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1925 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_56152: {
        if binn_list_next(&mut iter, &mut value) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_next(&iter, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1925 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 5 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 5\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1926 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_56114: {
        if iter.current == 5 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 5\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1926 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0x62 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_FLOAT32\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1927 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_56076: {
        if value.type_0 == 0x62 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_FLOAT32\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1927 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if AlmostEqualFloats(
        value.c2rust_unnamed.vfloat,
        1.25f64 as libc::c_float,
        2 as libc::c_int,
    ) != 0
    {} else {
        __assert_fail(
            b"AlmostEqualFloats(value.vfloat, 1.25, 2)\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1928 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_56028: {
        if AlmostEqualFloats(
            value.c2rust_unnamed.vfloat,
            1.25f64 as libc::c_float,
            2 as libc::c_int,
        ) != 0
        {} else {
            __assert_fail(
                b"AlmostEqualFloats(value.vfloat, 1.25, 2)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1928 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_next(&mut iter, &mut value) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_next(&iter, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1930 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_55982: {
        if binn_list_next(&mut iter, &mut value) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_next(&iter, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1930 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 6 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 6\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1931 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_55944: {
        if iter.current == 6 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 6\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1931 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0x82 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_FLOAT64\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1932 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_55906: {
        if value.type_0 == 0x82 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_FLOAT64\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1932 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.c2rust_unnamed.vdouble - 25.987654321f64 < 0.00000001f64 {} else {
        __assert_fail(
            b"value.vdouble - 25.987654321 < 0.00000001\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1933 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_55862: {
        if value.c2rust_unnamed.vdouble - 25.987654321f64 < 0.00000001f64 {} else {
            __assert_fail(
                b"value.vdouble - 25.987654321 < 0.00000001\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1933 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_next(&mut iter, &mut value) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_next(&iter, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1935 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_55816: {
        if binn_list_next(&mut iter, &mut value) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_next(&iter, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1935 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 7 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 7\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1936 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_55778: {
        if iter.current == 7 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 7\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1936 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0x80061 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_BOOL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1937 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_55740: {
        if value.type_0 == 0x80061 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_BOOL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1937 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.c2rust_unnamed.vbool == 1 as libc::c_int {} else {
        __assert_fail(
            b"value.vbool == TRUE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1938 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_55700: {
        if value.c2rust_unnamed.vbool == 1 as libc::c_int {} else {
            __assert_fail(
                b"value.vbool == TRUE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1938 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_next(&mut iter, &mut value) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_next(&iter, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1940 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_55654: {
        if binn_list_next(&mut iter, &mut value) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_next(&iter, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1940 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 8 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 8\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1941 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_55616: {
        if iter.current == 8 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 8\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1941 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0x80061 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_BOOL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1942 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_55578: {
        if value.type_0 == 0x80061 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_BOOL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1942 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.c2rust_unnamed.vbool == 0 as libc::c_int {} else {
        __assert_fail(
            b"value.vbool == FALSE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1943 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_55538: {
        if value.c2rust_unnamed.vbool == 0 as libc::c_int {} else {
            __assert_fail(
                b"value.vbool == FALSE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1943 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_next(&mut iter, &mut value) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_next(&iter, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1945 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_55492: {
        if binn_list_next(&mut iter, &mut value) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_next(&iter, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1945 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 9 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 9\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1946 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_55454: {
        if iter.current == 9 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 9\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1946 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1947 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_55416: {
        if value.type_0 == 0 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1947 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_next(&mut iter, &mut value) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_next(&iter, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1949 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_55370: {
        if binn_list_next(&mut iter, &mut value) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_next(&iter, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1949 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 10 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 10\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1950 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_55332: {
        if iter.current == 10 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 10\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1950 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0xa0 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_STRING\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1951 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_55294: {
        if value.type_0 == 0xa0 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_STRING\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1951 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if strcmp(
        value.ptr as *mut libc::c_char,
        b"testing...\0" as *const u8 as *const libc::c_char,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp((char *)value.ptr, \"testing...\") == 0\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1952 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_55242: {
        if strcmp(
            value.ptr as *mut libc::c_char,
            b"testing...\0" as *const u8 as *const libc::c_char,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp((char *)value.ptr, \"testing...\") == 0\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1952 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_next(&mut iter, &mut value) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_next(&iter, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1954 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_55196: {
        if binn_list_next(&mut iter, &mut value) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_next(&iter, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1954 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 11 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 11\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1955 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_55158: {
        if iter.current == 11 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 11\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1955 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0xc0 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_BLOB\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1956 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_55120: {
        if value.type_0 == 0xc0 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_BLOB\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1956 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if memcmp(value.ptr, blob_ptr, blob_size as libc::c_ulong) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"memcmp(value.ptr, blob_ptr, blob_size) == 0\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1957 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_55062: {
        if memcmp(value.ptr, blob_ptr, blob_size as libc::c_ulong) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"memcmp(value.ptr, blob_ptr, blob_size) == 0\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1957 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_next(&mut iter, &mut value) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_next(&iter, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1959 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_55016: {
        if binn_list_next(&mut iter, &mut value) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_next(&iter, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1959 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 12 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 12\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1960 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_54978: {
        if iter.current == 12 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 12\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1960 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0xe0 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_LIST\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1961 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_54940: {
        if value.type_0 == 0xe0 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_LIST\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1961 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.size == list2size {} else {
        __assert_fail(
            b"value.size == list2size\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1962 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_54900: {
        if value.size == list2size {} else {
            __assert_fail(
                b"value.size == list2size\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1962 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.count == 4 as libc::c_int {} else {
        __assert_fail(
            b"value.count == 4\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1963 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_54862: {
        if value.count == 4 as libc::c_int {} else {
            __assert_fail(
                b"value.count == 4\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1963 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if !(value.ptr).is_null() {} else {
        __assert_fail(
            b"value.ptr != 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1964 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_54822: {
        if !(value.ptr).is_null() {} else {
            __assert_fail(
                b"value.ptr != 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1964 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_int32(value.ptr, 1 as libc::c_int) == 250 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_int32(value.ptr, 1) == 250\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1965 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_54776: {
        if binn_list_int32(value.ptr, 1 as libc::c_int) == 250 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_int32(value.ptr, 1) == 250\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1965 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_null(value.ptr, 2 as libc::c_int) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_null(value.ptr, 2) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1966 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_54730: {
        if binn_list_null(value.ptr, 2 as libc::c_int) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_null(value.ptr, 2) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1966 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    ptr = binn_list_str(value.ptr, 3 as libc::c_int) as *mut libc::c_void;
    if !ptr.is_null() {} else {
        __assert_fail(
            b"ptr != 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1968 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_54682: {
        if !ptr.is_null() {} else {
            __assert_fail(
                b"ptr != 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1968 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if strcmp(ptr as *mut libc::c_char, b"l1st2\0" as *const u8 as *const libc::c_char)
        == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp((char *)ptr, \"l1st2\") == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1969 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_54632: {
        if strcmp(
            ptr as *mut libc::c_char,
            b"l1st2\0" as *const u8 as *const libc::c_char,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp((char *)ptr, \"l1st2\") == 0\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1969 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_bool(value.ptr, 4 as libc::c_int) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_bool(value.ptr, 4) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1970 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_54586: {
        if binn_list_bool(value.ptr, 4 as libc::c_int) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_bool(value.ptr, 4) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1970 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_next(&mut iter, &mut value) == 0 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_next(&iter, &value) == FALSE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1972 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_54540: {
        if binn_list_next(&mut iter, &mut value) == 0 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_next(&iter, &value) == FALSE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1972 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_next(&mut iter, &mut value) == 0 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_next(&iter, &value) == FALSE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1976 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_54494: {
        if binn_list_next(&mut iter, &mut value) == 0 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_next(&iter, &value) == FALSE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1976 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    ptr = binn_ptr(obj as *mut libc::c_void);
    if !ptr.is_null() {} else {
        __assert_fail(
            b"ptr != 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1985 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_54448: {
        if !ptr.is_null() {} else {
            __assert_fail(
                b"ptr != 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1985 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_iter_init(&mut iter, ptr, 0xe2 as libc::c_int) != 0 {} else {
        __assert_fail(
            b"binn_iter_init(&iter, ptr, BINN_OBJECT)\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1986 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_54404: {
        if binn_iter_init(&mut iter, ptr, 0xe2 as libc::c_int) != 0 {} else {
            __assert_fail(
                b"binn_iter_init(&iter, ptr, BINN_OBJECT)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1986 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.pnext > ptr as *mut libc::c_uchar {} else {
        __assert_fail(
            b"iter.pnext > ptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1987 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_54362: {
        if iter.pnext > ptr as *mut libc::c_uchar {} else {
            __assert_fail(
                b"iter.pnext > ptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1987 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.plimit > ptr as *mut libc::c_uchar {} else {
        __assert_fail(
            b"iter.plimit > ptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1988 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_54320: {
        if iter.plimit > ptr as *mut libc::c_uchar {} else {
            __assert_fail(
                b"iter.plimit > ptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1988 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.count == 12 as libc::c_int {} else {
        __assert_fail(
            b"iter.count == 12\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1989 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_54282: {
        if iter.count == 12 as libc::c_int {} else {
            __assert_fail(
                b"iter.count == 12\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1989 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 0 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1990 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_54244: {
        if iter.current == 0 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1990 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_next(&mut iter, key.as_mut_ptr(), &mut value) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_next(&iter, key, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1992 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_54194: {
        if binn_object_next(&mut iter, key.as_mut_ptr(), &mut value) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_next(&iter, key, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1992 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.pnext > ptr as *mut libc::c_uchar {} else {
        __assert_fail(
            b"iter.pnext > ptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1993 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_54152: {
        if iter.pnext > ptr as *mut libc::c_uchar {} else {
            __assert_fail(
                b"iter.pnext > ptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1993 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.plimit > ptr as *mut libc::c_uchar {} else {
        __assert_fail(
            b"iter.plimit > ptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1994 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_54110: {
        if iter.plimit > ptr as *mut libc::c_uchar {} else {
            __assert_fail(
                b"iter.plimit > ptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1994 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.count == 12 as libc::c_int {} else {
        __assert_fail(
            b"iter.count == 12\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1995 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_54072: {
        if iter.count == 12 as libc::c_int {} else {
            __assert_fail(
                b"iter.count == 12\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1995 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 1 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 1\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1996 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_54034: {
        if iter.current == 1 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 1\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1996 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0x21 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_INT8\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1997 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_53996: {
        if value.type_0 == 0x21 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_INT8\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1997 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.c2rust_unnamed.vint8 as libc::c_int == 111 as libc::c_int {} else {
        __assert_fail(
            b"value.vint8 == 111\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            1998 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_53954: {
        if value.c2rust_unnamed.vint8 as libc::c_int == 111 as libc::c_int {} else {
            __assert_fail(
                b"value.vint8 == 111\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                1998 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if strcmp(key.as_mut_ptr(), b"a\0" as *const u8 as *const libc::c_char)
        == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp(key, \"a\") == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2000 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_53906: {
        if strcmp(key.as_mut_ptr(), b"a\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp(key, \"a\") == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2000 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_next(&mut iter, key.as_mut_ptr(), &mut value) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_next(&iter, key, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2002 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_53856: {
        if binn_object_next(&mut iter, key.as_mut_ptr(), &mut value) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_next(&iter, key, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2002 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 2 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 2\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2003 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_53818: {
        if iter.current == 2 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 2\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2003 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if use_int_compression != 0 {
        if value.type_0 == 0x60 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_UINT32\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2005 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_53779: {
            if value.type_0 == 0x60 as libc::c_int {} else {
                __assert_fail(
                    b"value.type == BINN_UINT32\0" as *const u8 as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    2005 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
    } else {
        if value.type_0 == 0x61 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_INT32\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2007 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_53740: {
            if value.type_0 == 0x61 as libc::c_int {} else {
                __assert_fail(
                    b"value.type == BINN_INT32\0" as *const u8 as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    2007 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
    }
    if value.c2rust_unnamed.vint32 == 123456789 as libc::c_int {} else {
        __assert_fail(
            b"value.vint32 == 123456789\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2009 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_53696: {
        if value.c2rust_unnamed.vint32 == 123456789 as libc::c_int {} else {
            __assert_fail(
                b"value.vint32 == 123456789\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2009 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if strcmp(key.as_mut_ptr(), b"b\0" as *const u8 as *const libc::c_char)
        == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp(key, \"b\") == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2011 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_53648: {
        if strcmp(key.as_mut_ptr(), b"b\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp(key, \"b\") == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2011 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_next(&mut iter, key.as_mut_ptr(), &mut value) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_next(&iter, key, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2013 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_53598: {
        if binn_object_next(&mut iter, key.as_mut_ptr(), &mut value) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_next(&iter, key, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2013 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 3 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 3\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2014 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_53560: {
        if iter.current == 3 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 3\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2014 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if use_int_compression != 0 {
        if value.type_0 == 0x21 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_INT8\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2016 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_53521: {
            if value.type_0 == 0x21 as libc::c_int {} else {
                __assert_fail(
                    b"value.type == BINN_INT8\0" as *const u8 as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    2016 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
        if value.c2rust_unnamed.vint8 as libc::c_int == -(123 as libc::c_int) {} else {
            __assert_fail(
                b"value.vint8 == -123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2017 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_53477: {
            if value.c2rust_unnamed.vint8 as libc::c_int == -(123 as libc::c_int)
            {} else {
                __assert_fail(
                    b"value.vint8 == -123\0" as *const u8 as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    2017 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
    } else {
        if value.type_0 == 0x41 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_INT16\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2019 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_53437: {
            if value.type_0 == 0x41 as libc::c_int {} else {
                __assert_fail(
                    b"value.type == BINN_INT16\0" as *const u8 as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    2019 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
        if value.c2rust_unnamed.vint16 as libc::c_int == -(123 as libc::c_int) {} else {
            __assert_fail(
                b"value.vint16 == -123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2020 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_53393: {
            if value.c2rust_unnamed.vint16 as libc::c_int == -(123 as libc::c_int)
            {} else {
                __assert_fail(
                    b"value.vint16 == -123\0" as *const u8 as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    2020 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
    }
    if strcmp(key.as_mut_ptr(), b"c\0" as *const u8 as *const libc::c_char)
        == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp(key, \"c\") == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2023 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_53340: {
        if strcmp(key.as_mut_ptr(), b"c\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp(key, \"c\") == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2023 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_next(&mut iter, key.as_mut_ptr(), &mut value) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_next(&iter, key, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2025 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_53290: {
        if binn_object_next(&mut iter, key.as_mut_ptr(), &mut value) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_next(&iter, key, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2025 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 4 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 4\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2026 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_53252: {
        if iter.current == 4 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 4\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2026 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0x81 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_INT64\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2027 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_53214: {
        if value.type_0 == 0x81 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_INT64\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2027 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.c2rust_unnamed.vint64 == 9876543210 as libc::c_long as libc::c_longlong
    {} else {
        __assert_fail(
            b"value.vint64 == 9876543210\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2028 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_53172: {
        if value.c2rust_unnamed.vint64 == 9876543210 as libc::c_long as libc::c_longlong
        {} else {
            __assert_fail(
                b"value.vint64 == 9876543210\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2028 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if strcmp(key.as_mut_ptr(), b"d\0" as *const u8 as *const libc::c_char)
        == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp(key, \"d\") == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2030 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_53124: {
        if strcmp(key.as_mut_ptr(), b"d\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp(key, \"d\") == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2030 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_next(&mut iter, key.as_mut_ptr(), &mut value) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_next(&iter, key, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2032 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_53074: {
        if binn_object_next(&mut iter, key.as_mut_ptr(), &mut value) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_next(&iter, key, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2032 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 5 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 5\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2033 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_53036: {
        if iter.current == 5 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 5\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2033 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0x62 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_FLOAT32\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2034 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_52998: {
        if value.type_0 == 0x62 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_FLOAT32\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2034 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if AlmostEqualFloats(
        value.c2rust_unnamed.vfloat,
        1.25f64 as libc::c_float,
        2 as libc::c_int,
    ) != 0
    {} else {
        __assert_fail(
            b"AlmostEqualFloats(value.vfloat, 1.25, 2)\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2035 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_52950: {
        if AlmostEqualFloats(
            value.c2rust_unnamed.vfloat,
            1.25f64 as libc::c_float,
            2 as libc::c_int,
        ) != 0
        {} else {
            __assert_fail(
                b"AlmostEqualFloats(value.vfloat, 1.25, 2)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2035 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if strcmp(key.as_mut_ptr(), b"e\0" as *const u8 as *const libc::c_char)
        == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp(key, \"e\") == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2037 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_52902: {
        if strcmp(key.as_mut_ptr(), b"e\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp(key, \"e\") == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2037 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_next(&mut iter, key.as_mut_ptr(), &mut value) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_next(&iter, key, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2039 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_52852: {
        if binn_object_next(&mut iter, key.as_mut_ptr(), &mut value) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_next(&iter, key, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2039 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 6 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 6\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2040 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_52814: {
        if iter.current == 6 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 6\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2040 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0x82 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_FLOAT64\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2041 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_52776: {
        if value.type_0 == 0x82 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_FLOAT64\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2041 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.c2rust_unnamed.vdouble - 25.987654321f64 < 0.00000001f64 {} else {
        __assert_fail(
            b"value.vdouble - 25.987654321 < 0.00000001\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2042 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_52732: {
        if value.c2rust_unnamed.vdouble - 25.987654321f64 < 0.00000001f64 {} else {
            __assert_fail(
                b"value.vdouble - 25.987654321 < 0.00000001\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2042 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if strcmp(key.as_mut_ptr(), b"f\0" as *const u8 as *const libc::c_char)
        == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp(key, \"f\") == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2044 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_52684: {
        if strcmp(key.as_mut_ptr(), b"f\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp(key, \"f\") == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2044 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_next(&mut iter, key.as_mut_ptr(), &mut value) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_next(&iter, key, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2046 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_52634: {
        if binn_object_next(&mut iter, key.as_mut_ptr(), &mut value) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_next(&iter, key, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2046 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 7 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 7\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2047 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_52596: {
        if iter.current == 7 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 7\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2047 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0x80061 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_BOOL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2048 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_52558: {
        if value.type_0 == 0x80061 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_BOOL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2048 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.c2rust_unnamed.vbool == 1 as libc::c_int {} else {
        __assert_fail(
            b"value.vbool == TRUE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2049 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_52518: {
        if value.c2rust_unnamed.vbool == 1 as libc::c_int {} else {
            __assert_fail(
                b"value.vbool == TRUE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2049 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if strcmp(key.as_mut_ptr(), b"g\0" as *const u8 as *const libc::c_char)
        == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp(key, \"g\") == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2051 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_52470: {
        if strcmp(key.as_mut_ptr(), b"g\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp(key, \"g\") == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2051 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_next(&mut iter, key.as_mut_ptr(), &mut value) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_next(&iter, key, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2053 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_52420: {
        if binn_object_next(&mut iter, key.as_mut_ptr(), &mut value) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_next(&iter, key, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2053 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 8 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 8\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2054 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_52382: {
        if iter.current == 8 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 8\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2054 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0x80061 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_BOOL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2055 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_52344: {
        if value.type_0 == 0x80061 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_BOOL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2055 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.c2rust_unnamed.vbool == 0 as libc::c_int {} else {
        __assert_fail(
            b"value.vbool == FALSE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2056 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_52304: {
        if value.c2rust_unnamed.vbool == 0 as libc::c_int {} else {
            __assert_fail(
                b"value.vbool == FALSE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2056 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if strcmp(key.as_mut_ptr(), b"h\0" as *const u8 as *const libc::c_char)
        == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp(key, \"h\") == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2058 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_52256: {
        if strcmp(key.as_mut_ptr(), b"h\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp(key, \"h\") == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2058 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_next(&mut iter, key.as_mut_ptr(), &mut value) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_next(&iter, key, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2060 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_52206: {
        if binn_object_next(&mut iter, key.as_mut_ptr(), &mut value) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_next(&iter, key, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2060 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 9 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 9\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2061 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_52168: {
        if iter.current == 9 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 9\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2061 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2062 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_52130: {
        if value.type_0 == 0 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2062 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if strcmp(key.as_mut_ptr(), b"i\0" as *const u8 as *const libc::c_char)
        == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp(key, \"i\") == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2064 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_52082: {
        if strcmp(key.as_mut_ptr(), b"i\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp(key, \"i\") == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2064 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_next(&mut iter, key.as_mut_ptr(), &mut value) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_next(&iter, key, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2066 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_52032: {
        if binn_object_next(&mut iter, key.as_mut_ptr(), &mut value) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_next(&iter, key, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2066 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 10 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 10\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2067 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_51994: {
        if iter.current == 10 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 10\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2067 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0xa0 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_STRING\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2068 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_51956: {
        if value.type_0 == 0xa0 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_STRING\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2068 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if strcmp(
        value.ptr as *mut libc::c_char,
        b"testing...\0" as *const u8 as *const libc::c_char,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp((char *)value.ptr, \"testing...\") == 0\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2069 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_51904: {
        if strcmp(
            value.ptr as *mut libc::c_char,
            b"testing...\0" as *const u8 as *const libc::c_char,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp((char *)value.ptr, \"testing...\") == 0\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2069 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if strcmp(key.as_mut_ptr(), b"j\0" as *const u8 as *const libc::c_char)
        == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp(key, \"j\") == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2071 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_51856: {
        if strcmp(key.as_mut_ptr(), b"j\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp(key, \"j\") == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2071 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_next(&mut iter, key.as_mut_ptr(), &mut value) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_next(&iter, key, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2073 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_51806: {
        if binn_object_next(&mut iter, key.as_mut_ptr(), &mut value) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_next(&iter, key, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2073 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 11 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 11\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2074 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_51768: {
        if iter.current == 11 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 11\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2074 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0xc0 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_BLOB\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2075 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_51730: {
        if value.type_0 == 0xc0 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_BLOB\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2075 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if memcmp(value.ptr, blob_ptr, blob_size as libc::c_ulong) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"memcmp(value.ptr, blob_ptr, blob_size) == 0\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2076 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_51672: {
        if memcmp(value.ptr, blob_ptr, blob_size as libc::c_ulong) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"memcmp(value.ptr, blob_ptr, blob_size) == 0\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2076 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if strcmp(key.as_mut_ptr(), b"k\0" as *const u8 as *const libc::c_char)
        == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp(key, \"k\") == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2078 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_51624: {
        if strcmp(key.as_mut_ptr(), b"k\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp(key, \"k\") == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2078 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_next(&mut iter, key.as_mut_ptr(), &mut value) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_next(&iter, key, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2080 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_51574: {
        if binn_object_next(&mut iter, key.as_mut_ptr(), &mut value) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_next(&iter, key, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2080 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 12 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 12\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2081 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_51536: {
        if iter.current == 12 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 12\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2081 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0xe0 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_LIST\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2082 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_51498: {
        if value.type_0 == 0xe0 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_LIST\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2082 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.size == list2size {} else {
        __assert_fail(
            b"value.size == list2size\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2083 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_51458: {
        if value.size == list2size {} else {
            __assert_fail(
                b"value.size == list2size\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2083 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.count == 4 as libc::c_int {} else {
        __assert_fail(
            b"value.count == 4\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2084 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_51420: {
        if value.count == 4 as libc::c_int {} else {
            __assert_fail(
                b"value.count == 4\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2084 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if !(value.ptr).is_null() {} else {
        __assert_fail(
            b"value.ptr != 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2085 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_51380: {
        if !(value.ptr).is_null() {} else {
            __assert_fail(
                b"value.ptr != 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2085 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_int32(value.ptr, 1 as libc::c_int) == 250 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_int32(value.ptr, 1) == 250\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2086 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_51334: {
        if binn_list_int32(value.ptr, 1 as libc::c_int) == 250 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_int32(value.ptr, 1) == 250\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2086 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_null(value.ptr, 2 as libc::c_int) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_null(value.ptr, 2) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2087 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_51288: {
        if binn_list_null(value.ptr, 2 as libc::c_int) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_null(value.ptr, 2) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2087 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    ptr = binn_list_str(value.ptr, 3 as libc::c_int) as *mut libc::c_void;
    if !ptr.is_null() {} else {
        __assert_fail(
            b"ptr != 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2089 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_51240: {
        if !ptr.is_null() {} else {
            __assert_fail(
                b"ptr != 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2089 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if strcmp(ptr as *mut libc::c_char, b"l1st2\0" as *const u8 as *const libc::c_char)
        == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp((char *)ptr, \"l1st2\") == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2090 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_51190: {
        if strcmp(
            ptr as *mut libc::c_char,
            b"l1st2\0" as *const u8 as *const libc::c_char,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp((char *)ptr, \"l1st2\") == 0\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2090 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_bool(value.ptr, 4 as libc::c_int) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_bool(value.ptr, 4) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2091 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_51144: {
        if binn_list_bool(value.ptr, 4 as libc::c_int) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_bool(value.ptr, 4) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2091 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if strcmp(key.as_mut_ptr(), b"l\0" as *const u8 as *const libc::c_char)
        == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp(key, \"l\") == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2093 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_51096: {
        if strcmp(key.as_mut_ptr(), b"l\0" as *const u8 as *const libc::c_char)
            == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp(key, \"l\") == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2093 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_next(&mut iter, key.as_mut_ptr(), &mut value) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_next(&iter, key, &value) == FALSE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2095 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_51046: {
        if binn_object_next(&mut iter, key.as_mut_ptr(), &mut value) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_next(&iter, key, &value) == FALSE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2095 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_object_next(&mut iter, key.as_mut_ptr(), &mut value) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_next(&iter, key, &value) == FALSE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2099 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_50996: {
        if binn_object_next(&mut iter, key.as_mut_ptr(), &mut value) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_next(&iter, key, &value) == FALSE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2099 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    ptr = binn_ptr(map as *mut libc::c_void);
    if !ptr.is_null() {} else {
        __assert_fail(
            b"ptr != 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2109 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_50950: {
        if !ptr.is_null() {} else {
            __assert_fail(
                b"ptr != 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2109 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_iter_init(&mut iter, ptr, 0xe1 as libc::c_int) != 0 {} else {
        __assert_fail(
            b"binn_iter_init(&iter, ptr, BINN_MAP)\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2110 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_50906: {
        if binn_iter_init(&mut iter, ptr, 0xe1 as libc::c_int) != 0 {} else {
            __assert_fail(
                b"binn_iter_init(&iter, ptr, BINN_MAP)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2110 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.pnext > ptr as *mut libc::c_uchar {} else {
        __assert_fail(
            b"iter.pnext > ptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2111 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_50864: {
        if iter.pnext > ptr as *mut libc::c_uchar {} else {
            __assert_fail(
                b"iter.pnext > ptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2111 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.plimit > ptr as *mut libc::c_uchar {} else {
        __assert_fail(
            b"iter.plimit > ptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2112 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_50822: {
        if iter.plimit > ptr as *mut libc::c_uchar {} else {
            __assert_fail(
                b"iter.plimit > ptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2112 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.count == 12 as libc::c_int {} else {
        __assert_fail(
            b"iter.count == 12\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2113 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_50784: {
        if iter.count == 12 as libc::c_int {} else {
            __assert_fail(
                b"iter.count == 12\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2113 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 0 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2114 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_50746: {
        if iter.current == 0 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2114 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_map_next(&mut iter, &mut id, &mut value) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_map_next(&iter, &id, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2116 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_50696: {
        if binn_map_next(&mut iter, &mut id, &mut value) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_map_next(&iter, &id, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2116 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.pnext > ptr as *mut libc::c_uchar {} else {
        __assert_fail(
            b"iter.pnext > ptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2117 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_50654: {
        if iter.pnext > ptr as *mut libc::c_uchar {} else {
            __assert_fail(
                b"iter.pnext > ptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2117 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.plimit > ptr as *mut libc::c_uchar {} else {
        __assert_fail(
            b"iter.plimit > ptr\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2118 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_50612: {
        if iter.plimit > ptr as *mut libc::c_uchar {} else {
            __assert_fail(
                b"iter.plimit > ptr\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2118 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.count == 12 as libc::c_int {} else {
        __assert_fail(
            b"iter.count == 12\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2119 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_50574: {
        if iter.count == 12 as libc::c_int {} else {
            __assert_fail(
                b"iter.count == 12\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2119 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 1 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 1\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2120 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_50536: {
        if iter.current == 1 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 1\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2120 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0x21 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_INT8\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2121 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_50498: {
        if value.type_0 == 0x21 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_INT8\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2121 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.c2rust_unnamed.vint8 as libc::c_int == 111 as libc::c_int {} else {
        __assert_fail(
            b"value.vint8 == 111\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2122 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_50456: {
        if value.c2rust_unnamed.vint8 as libc::c_int == 111 as libc::c_int {} else {
            __assert_fail(
                b"value.vint8 == 111\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2122 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if id == 55010 as libc::c_int {} else {
        __assert_fail(
            b"id == 55010\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2123 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_50420: {
        if id == 55010 as libc::c_int {} else {
            __assert_fail(
                b"id == 55010\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2123 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_map_next(&mut iter, &mut id, &mut value) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_map_next(&iter, &id, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2125 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_50370: {
        if binn_map_next(&mut iter, &mut id, &mut value) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_map_next(&iter, &id, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2125 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 2 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 2\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2126 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_50332: {
        if iter.current == 2 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 2\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2126 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if use_int_compression != 0 {
        if value.type_0 == 0x60 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_UINT32\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2128 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_50293: {
            if value.type_0 == 0x60 as libc::c_int {} else {
                __assert_fail(
                    b"value.type == BINN_UINT32\0" as *const u8 as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    2128 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
    } else {
        if value.type_0 == 0x61 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_INT32\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2130 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_50254: {
            if value.type_0 == 0x61 as libc::c_int {} else {
                __assert_fail(
                    b"value.type == BINN_INT32\0" as *const u8 as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    2130 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
    }
    if value.c2rust_unnamed.vint32 == 123456789 as libc::c_int {} else {
        __assert_fail(
            b"value.vint32 == 123456789\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2132 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_50210: {
        if value.c2rust_unnamed.vint32 == 123456789 as libc::c_int {} else {
            __assert_fail(
                b"value.vint32 == 123456789\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2132 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if id == 55020 as libc::c_int {} else {
        __assert_fail(
            b"id == 55020\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2133 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_50174: {
        if id == 55020 as libc::c_int {} else {
            __assert_fail(
                b"id == 55020\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2133 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_map_next(&mut iter, &mut id, &mut value) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_map_next(&iter, &id, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2135 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_50124: {
        if binn_map_next(&mut iter, &mut id, &mut value) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_map_next(&iter, &id, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2135 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 3 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 3\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2136 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_50086: {
        if iter.current == 3 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 3\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2136 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if use_int_compression != 0 {
        if value.type_0 == 0x21 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_INT8\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2138 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_50047: {
            if value.type_0 == 0x21 as libc::c_int {} else {
                __assert_fail(
                    b"value.type == BINN_INT8\0" as *const u8 as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    2138 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
        if value.c2rust_unnamed.vint8 as libc::c_int == -(123 as libc::c_int) {} else {
            __assert_fail(
                b"value.vint8 == -123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2139 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_50003: {
            if value.c2rust_unnamed.vint8 as libc::c_int == -(123 as libc::c_int)
            {} else {
                __assert_fail(
                    b"value.vint8 == -123\0" as *const u8 as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    2139 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
    } else {
        if value.type_0 == 0x41 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_INT16\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2141 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_49963: {
            if value.type_0 == 0x41 as libc::c_int {} else {
                __assert_fail(
                    b"value.type == BINN_INT16\0" as *const u8 as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    2141 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
        if value.c2rust_unnamed.vint16 as libc::c_int == -(123 as libc::c_int) {} else {
            __assert_fail(
                b"value.vint16 == -123\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2142 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_49919: {
            if value.c2rust_unnamed.vint16 as libc::c_int == -(123 as libc::c_int)
            {} else {
                __assert_fail(
                    b"value.vint16 == -123\0" as *const u8 as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    2142 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
    }
    if id == 55030 as libc::c_int {} else {
        __assert_fail(
            b"id == 55030\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2144 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_49878: {
        if id == 55030 as libc::c_int {} else {
            __assert_fail(
                b"id == 55030\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2144 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_map_next(&mut iter, &mut id, &mut value) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_map_next(&iter, &id, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2146 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_49828: {
        if binn_map_next(&mut iter, &mut id, &mut value) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_map_next(&iter, &id, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2146 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 4 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 4\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2147 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_49790: {
        if iter.current == 4 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 4\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2147 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0x81 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_INT64\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2148 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_49752: {
        if value.type_0 == 0x81 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_INT64\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2148 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.c2rust_unnamed.vint64 == 9876543210 as libc::c_long as libc::c_longlong
    {} else {
        __assert_fail(
            b"value.vint64 == 9876543210\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2149 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_49710: {
        if value.c2rust_unnamed.vint64 == 9876543210 as libc::c_long as libc::c_longlong
        {} else {
            __assert_fail(
                b"value.vint64 == 9876543210\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2149 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if id == 55040 as libc::c_int {} else {
        __assert_fail(
            b"id == 55040\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2150 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_49674: {
        if id == 55040 as libc::c_int {} else {
            __assert_fail(
                b"id == 55040\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2150 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_map_next(&mut iter, &mut id, &mut value) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_map_next(&iter, &id, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2152 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_49624: {
        if binn_map_next(&mut iter, &mut id, &mut value) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_map_next(&iter, &id, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2152 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 5 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 5\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2153 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_49586: {
        if iter.current == 5 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 5\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2153 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0x62 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_FLOAT32\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2154 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_49548: {
        if value.type_0 == 0x62 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_FLOAT32\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2154 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if AlmostEqualFloats(
        value.c2rust_unnamed.vfloat,
        1.25f64 as libc::c_float,
        2 as libc::c_int,
    ) != 0
    {} else {
        __assert_fail(
            b"AlmostEqualFloats(value.vfloat, 1.25, 2)\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2155 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_49500: {
        if AlmostEqualFloats(
            value.c2rust_unnamed.vfloat,
            1.25f64 as libc::c_float,
            2 as libc::c_int,
        ) != 0
        {} else {
            __assert_fail(
                b"AlmostEqualFloats(value.vfloat, 1.25, 2)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2155 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if id == 55050 as libc::c_int {} else {
        __assert_fail(
            b"id == 55050\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2156 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_49464: {
        if id == 55050 as libc::c_int {} else {
            __assert_fail(
                b"id == 55050\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2156 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_map_next(&mut iter, &mut id, &mut value) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_map_next(&iter, &id, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2158 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_49414: {
        if binn_map_next(&mut iter, &mut id, &mut value) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_map_next(&iter, &id, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2158 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 6 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 6\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2159 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_49376: {
        if iter.current == 6 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 6\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2159 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0x82 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_FLOAT64\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2160 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_49338: {
        if value.type_0 == 0x82 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_FLOAT64\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2160 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.c2rust_unnamed.vdouble - 25.987654321f64 < 0.00000001f64 {} else {
        __assert_fail(
            b"value.vdouble - 25.987654321 < 0.00000001\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2161 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_49294: {
        if value.c2rust_unnamed.vdouble - 25.987654321f64 < 0.00000001f64 {} else {
            __assert_fail(
                b"value.vdouble - 25.987654321 < 0.00000001\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2161 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if id == 55060 as libc::c_int {} else {
        __assert_fail(
            b"id == 55060\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2162 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_49258: {
        if id == 55060 as libc::c_int {} else {
            __assert_fail(
                b"id == 55060\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2162 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_map_next(&mut iter, &mut id, &mut value) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_map_next(&iter, &id, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2164 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_49208: {
        if binn_map_next(&mut iter, &mut id, &mut value) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_map_next(&iter, &id, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2164 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 7 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 7\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2165 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_49170: {
        if iter.current == 7 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 7\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2165 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0x80061 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_BOOL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2166 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_49132: {
        if value.type_0 == 0x80061 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_BOOL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2166 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.c2rust_unnamed.vbool == 1 as libc::c_int {} else {
        __assert_fail(
            b"value.vbool == TRUE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2167 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_49092: {
        if value.c2rust_unnamed.vbool == 1 as libc::c_int {} else {
            __assert_fail(
                b"value.vbool == TRUE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2167 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if id == 55070 as libc::c_int {} else {
        __assert_fail(
            b"id == 55070\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2168 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_49056: {
        if id == 55070 as libc::c_int {} else {
            __assert_fail(
                b"id == 55070\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2168 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_map_next(&mut iter, &mut id, &mut value) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_map_next(&iter, &id, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2170 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_49006: {
        if binn_map_next(&mut iter, &mut id, &mut value) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_map_next(&iter, &id, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2170 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 8 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 8\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2171 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_48968: {
        if iter.current == 8 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 8\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2171 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0x80061 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_BOOL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2172 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_48930: {
        if value.type_0 == 0x80061 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_BOOL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2172 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.c2rust_unnamed.vbool == 0 as libc::c_int {} else {
        __assert_fail(
            b"value.vbool == FALSE\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2173 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_48890: {
        if value.c2rust_unnamed.vbool == 0 as libc::c_int {} else {
            __assert_fail(
                b"value.vbool == FALSE\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2173 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if id == 55080 as libc::c_int {} else {
        __assert_fail(
            b"id == 55080\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2174 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_48854: {
        if id == 55080 as libc::c_int {} else {
            __assert_fail(
                b"id == 55080\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2174 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_map_next(&mut iter, &mut id, &mut value) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_map_next(&iter, &id, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2176 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_48804: {
        if binn_map_next(&mut iter, &mut id, &mut value) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_map_next(&iter, &id, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2176 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 9 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 9\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2177 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_48766: {
        if iter.current == 9 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 9\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2177 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2178 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_48728: {
        if value.type_0 == 0 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2178 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if id == 55090 as libc::c_int {} else {
        __assert_fail(
            b"id == 55090\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2179 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_48692: {
        if id == 55090 as libc::c_int {} else {
            __assert_fail(
                b"id == 55090\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2179 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_map_next(&mut iter, &mut id, &mut value) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_map_next(&iter, &id, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2181 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_48642: {
        if binn_map_next(&mut iter, &mut id, &mut value) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_map_next(&iter, &id, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2181 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 10 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 10\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2182 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_48604: {
        if iter.current == 10 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 10\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2182 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0xa0 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_STRING\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2183 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_48566: {
        if value.type_0 == 0xa0 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_STRING\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2183 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if strcmp(
        value.ptr as *mut libc::c_char,
        b"testing...\0" as *const u8 as *const libc::c_char,
    ) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp((char *)value.ptr, \"testing...\") == 0\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2184 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_48514: {
        if strcmp(
            value.ptr as *mut libc::c_char,
            b"testing...\0" as *const u8 as *const libc::c_char,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp((char *)value.ptr, \"testing...\") == 0\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2184 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if id == 55100 as libc::c_int {} else {
        __assert_fail(
            b"id == 55100\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2185 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_48478: {
        if id == 55100 as libc::c_int {} else {
            __assert_fail(
                b"id == 55100\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2185 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_map_next(&mut iter, &mut id, &mut value) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_map_next(&iter, &id, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2187 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_48428: {
        if binn_map_next(&mut iter, &mut id, &mut value) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_map_next(&iter, &id, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2187 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 11 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 11\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2188 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_48390: {
        if iter.current == 11 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 11\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2188 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0xc0 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_BLOB\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2189 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_48352: {
        if value.type_0 == 0xc0 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_BLOB\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2189 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if memcmp(value.ptr, blob_ptr, blob_size as libc::c_ulong) == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"memcmp(value.ptr, blob_ptr, blob_size) == 0\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2190 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_48292: {
        if memcmp(value.ptr, blob_ptr, blob_size as libc::c_ulong) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"memcmp(value.ptr, blob_ptr, blob_size) == 0\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2190 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if id == 55110 as libc::c_int {} else {
        __assert_fail(
            b"id == 55110\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2191 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_48256: {
        if id == 55110 as libc::c_int {} else {
            __assert_fail(
                b"id == 55110\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2191 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_map_next(&mut iter, &mut id, &mut value) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_map_next(&iter, &id, &value) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2193 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_48206: {
        if binn_map_next(&mut iter, &mut id, &mut value) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_map_next(&iter, &id, &value) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2193 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if iter.current == 12 as libc::c_int {} else {
        __assert_fail(
            b"iter.current == 12\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2194 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_48168: {
        if iter.current == 12 as libc::c_int {} else {
            __assert_fail(
                b"iter.current == 12\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2194 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.type_0 == 0xe0 as libc::c_int {} else {
        __assert_fail(
            b"value.type == BINN_LIST\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2195 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_48130: {
        if value.type_0 == 0xe0 as libc::c_int {} else {
            __assert_fail(
                b"value.type == BINN_LIST\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2195 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.size == list2size {} else {
        __assert_fail(
            b"value.size == list2size\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2196 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_48089: {
        if value.size == list2size {} else {
            __assert_fail(
                b"value.size == list2size\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2196 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if value.count == 4 as libc::c_int {} else {
        __assert_fail(
            b"value.count == 4\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2197 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_48051: {
        if value.count == 4 as libc::c_int {} else {
            __assert_fail(
                b"value.count == 4\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2197 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if !(value.ptr).is_null() {} else {
        __assert_fail(
            b"value.ptr != 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2198 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_48011: {
        if !(value.ptr).is_null() {} else {
            __assert_fail(
                b"value.ptr != 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2198 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_int32(value.ptr, 1 as libc::c_int) == 250 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_int32(value.ptr, 1) == 250\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2199 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_47965: {
        if binn_list_int32(value.ptr, 1 as libc::c_int) == 250 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_int32(value.ptr, 1) == 250\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2199 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_null(value.ptr, 2 as libc::c_int) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_null(value.ptr, 2) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2200 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_47919: {
        if binn_list_null(value.ptr, 2 as libc::c_int) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_null(value.ptr, 2) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2200 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    ptr = binn_list_str(value.ptr, 3 as libc::c_int) as *mut libc::c_void;
    if !ptr.is_null() {} else {
        __assert_fail(
            b"ptr != 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2202 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_47871: {
        if !ptr.is_null() {} else {
            __assert_fail(
                b"ptr != 0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2202 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if strcmp(ptr as *mut libc::c_char, b"l1st2\0" as *const u8 as *const libc::c_char)
        == 0 as libc::c_int
    {} else {
        __assert_fail(
            b"strcmp((char *)ptr, \"l1st2\") == 0\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2203 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_47821: {
        if strcmp(
            ptr as *mut libc::c_char,
            b"l1st2\0" as *const u8 as *const libc::c_char,
        ) == 0 as libc::c_int
        {} else {
            __assert_fail(
                b"strcmp((char *)ptr, \"l1st2\") == 0\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2203 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_list_bool(value.ptr, 4 as libc::c_int) == 1 as libc::c_int {} else {
        __assert_fail(
            b"binn_list_bool(value.ptr, 4) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2204 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_47775: {
        if binn_list_bool(value.ptr, 4 as libc::c_int) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_bool(value.ptr, 4) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2204 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if id == 55120 as libc::c_int {} else {
        __assert_fail(
            b"id == 55120\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2205 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_47739: {
        if id == 55120 as libc::c_int {} else {
            __assert_fail(
                b"id == 55120\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2205 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_map_next(&mut iter, &mut id, &mut value) == 0 as libc::c_int {} else {
        __assert_fail(
            b"binn_map_next(&iter, &id, &value) == FALSE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2207 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_47689: {
        if binn_map_next(&mut iter, &mut id, &mut value) == 0 as libc::c_int {} else {
            __assert_fail(
                b"binn_map_next(&iter, &id, &value) == FALSE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2207 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_map_next(&mut iter, &mut id, &mut value) == 0 as libc::c_int {} else {
        __assert_fail(
            b"binn_map_next(&iter, &id, &value) == FALSE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2211 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_47639: {
        if binn_map_next(&mut iter, &mut id, &mut value) == 0 as libc::c_int {} else {
            __assert_fail(
                b"binn_map_next(&iter, &id, &value) == FALSE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2211 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    copy = binn_copy(list as *mut libc::c_void);
    if !copy.is_null() {} else {
        __assert_fail(
            b"copy!=NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2219 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_47589: {
        if !copy.is_null() {} else {
            __assert_fail(
                b"copy!=NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2219 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_type(copy as *mut libc::c_void) == binn_type(list as *mut libc::c_void)
    {} else {
        __assert_fail(
            b"binn_type(copy) == binn_type(list)\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2220 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_47535: {
        if binn_type(copy as *mut libc::c_void) == binn_type(list as *mut libc::c_void)
        {} else {
            __assert_fail(
                b"binn_type(copy) == binn_type(list)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2220 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_count(copy as *mut libc::c_void) == binn_count(list as *mut libc::c_void)
    {} else {
        __assert_fail(
            b"binn_count(copy) == binn_count(list)\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2221 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_47481: {
        if binn_count(copy as *mut libc::c_void) == binn_count(list as *mut libc::c_void)
        {} else {
            __assert_fail(
                b"binn_count(copy) == binn_count(list)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2221 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_size(copy as *mut libc::c_void) == binn_size(list as *mut libc::c_void)
    {} else {
        __assert_fail(
            b"binn_size(copy) == binn_size(list)\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2222 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_47427: {
        if binn_size(copy as *mut libc::c_void) == binn_size(list as *mut libc::c_void)
        {} else {
            __assert_fail(
                b"binn_size(copy) == binn_size(list)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2222 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_iter_init(&mut iter, list as *mut libc::c_void, 0xe0 as libc::c_int) != 0
    {} else {
        __assert_fail(
            b"binn_iter_init(&iter, list, BINN_LIST)\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2223 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_47381: {
        if binn_iter_init(&mut iter, list as *mut libc::c_void, 0xe0 as libc::c_int) != 0
        {} else {
            __assert_fail(
                b"binn_iter_init(&iter, list, BINN_LIST)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2223 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_iter_init(&mut iter2, copy as *mut libc::c_void, 0xe0 as libc::c_int) != 0
    {} else {
        __assert_fail(
            b"binn_iter_init(&iter2, copy, BINN_LIST)\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2224 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_47335: {
        if binn_iter_init(&mut iter2, copy as *mut libc::c_void, 0xe0 as libc::c_int)
            != 0
        {} else {
            __assert_fail(
                b"binn_iter_init(&iter2, copy, BINN_LIST)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2224 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    while binn_list_next(&mut iter, &mut value) != 0 {
        if binn_list_next(&mut iter2, &mut value2) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_next(&iter2, &value2) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2226 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_47283: {
            if binn_list_next(&mut iter2, &mut value2) == 1 as libc::c_int {} else {
                __assert_fail(
                    b"binn_list_next(&iter2, &value2) == TRUE\0" as *const u8
                        as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    2226 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
        if value.type_0 == value2.type_0 {} else {
            __assert_fail(
                b"value.type == value2.type\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2227 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_47241: {
            if value.type_0 == value2.type_0 {} else {
                __assert_fail(
                    b"value.type == value2.type\0" as *const u8 as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    2227 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
    }
    if binn_list_add_str(
        copy,
        b"testing...\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_list_add_str(copy, \"testing...\") == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2230 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_47189: {
        if binn_list_add_str(
            copy,
            b"testing...\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_list_add_str(copy, \"testing...\") == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2230 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_type(copy as *mut libc::c_void) == binn_type(list as *mut libc::c_void)
    {} else {
        __assert_fail(
            b"binn_type(copy) == binn_type(list)\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2231 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_47135: {
        if binn_type(copy as *mut libc::c_void) == binn_type(list as *mut libc::c_void)
        {} else {
            __assert_fail(
                b"binn_type(copy) == binn_type(list)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2231 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_count(copy as *mut libc::c_void)
        == binn_count(list as *mut libc::c_void) + 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_count(copy) == binn_count(list)+1\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2232 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_47077: {
        if binn_count(copy as *mut libc::c_void)
            == binn_count(list as *mut libc::c_void) + 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_count(copy) == binn_count(list)+1\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2232 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_size(copy as *mut libc::c_void) > binn_size(list as *mut libc::c_void)
    {} else {
        __assert_fail(
            b"binn_size(copy) > binn_size(list)\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2233 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_47023: {
        if binn_size(copy as *mut libc::c_void) > binn_size(list as *mut libc::c_void)
        {} else {
            __assert_fail(
                b"binn_size(copy) > binn_size(list)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2233 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(copy);
    copy = binn_copy(map as *mut libc::c_void);
    if !copy.is_null() {} else {
        __assert_fail(
            b"copy!=NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2237 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_46968: {
        if !copy.is_null() {} else {
            __assert_fail(
                b"copy!=NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2237 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_type(copy as *mut libc::c_void) == binn_type(map as *mut libc::c_void)
    {} else {
        __assert_fail(
            b"binn_type(copy) == binn_type(map)\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2238 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_46914: {
        if binn_type(copy as *mut libc::c_void) == binn_type(map as *mut libc::c_void)
        {} else {
            __assert_fail(
                b"binn_type(copy) == binn_type(map)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2238 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_count(copy as *mut libc::c_void) == binn_count(map as *mut libc::c_void)
    {} else {
        __assert_fail(
            b"binn_count(copy) == binn_count(map)\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2239 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_46860: {
        if binn_count(copy as *mut libc::c_void) == binn_count(map as *mut libc::c_void)
        {} else {
            __assert_fail(
                b"binn_count(copy) == binn_count(map)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2239 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_size(copy as *mut libc::c_void) == binn_size(map as *mut libc::c_void)
    {} else {
        __assert_fail(
            b"binn_size(copy) == binn_size(map)\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2240 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_46806: {
        if binn_size(copy as *mut libc::c_void) == binn_size(map as *mut libc::c_void)
        {} else {
            __assert_fail(
                b"binn_size(copy) == binn_size(map)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2240 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_iter_init(&mut iter, map as *mut libc::c_void, 0xe1 as libc::c_int) != 0
    {} else {
        __assert_fail(
            b"binn_iter_init(&iter, map, BINN_MAP)\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2241 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_46760: {
        if binn_iter_init(&mut iter, map as *mut libc::c_void, 0xe1 as libc::c_int) != 0
        {} else {
            __assert_fail(
                b"binn_iter_init(&iter, map, BINN_MAP)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2241 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_iter_init(&mut iter2, copy as *mut libc::c_void, 0xe1 as libc::c_int) != 0
    {} else {
        __assert_fail(
            b"binn_iter_init(&iter2, copy, BINN_MAP)\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2242 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_46714: {
        if binn_iter_init(&mut iter2, copy as *mut libc::c_void, 0xe1 as libc::c_int)
            != 0
        {} else {
            __assert_fail(
                b"binn_iter_init(&iter2, copy, BINN_MAP)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2242 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    while binn_map_next(&mut iter, &mut id, &mut value) != 0 {
        if binn_map_next(&mut iter2, &mut id2, &mut value2) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_map_next(&iter2, &id2, &value2) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2244 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_46656: {
            if binn_map_next(&mut iter2, &mut id2, &mut value2) == 1 as libc::c_int
            {} else {
                __assert_fail(
                    b"binn_map_next(&iter2, &id2, &value2) == TRUE\0" as *const u8
                        as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    2244 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
        if id == id2 {} else {
            __assert_fail(
                b"id == id2\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2245 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_46618: {
            if id == id2 {} else {
                __assert_fail(
                    b"id == id2\0" as *const u8 as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    2245 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
        if value.type_0 == value2.type_0 {} else {
            __assert_fail(
                b"value.type == value2.type\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2246 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_46576: {
            if value.type_0 == value2.type_0 {} else {
                __assert_fail(
                    b"value.type == value2.type\0" as *const u8 as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    2246 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
    }
    if binn_map_set_int32(copy, 5600 as libc::c_int, 123 as libc::c_int)
        == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_map_set_int32(copy, 5600, 123) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2249 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_46525: {
        if binn_map_set_int32(copy, 5600 as libc::c_int, 123 as libc::c_int)
            == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_map_set_int32(copy, 5600, 123) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2249 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_type(copy as *mut libc::c_void) == binn_type(map as *mut libc::c_void)
    {} else {
        __assert_fail(
            b"binn_type(copy) == binn_type(map)\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2250 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_46471: {
        if binn_type(copy as *mut libc::c_void) == binn_type(map as *mut libc::c_void)
        {} else {
            __assert_fail(
                b"binn_type(copy) == binn_type(map)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2250 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_count(copy as *mut libc::c_void)
        == binn_count(map as *mut libc::c_void) + 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_count(copy) == binn_count(map)+1\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2251 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_46413: {
        if binn_count(copy as *mut libc::c_void)
            == binn_count(map as *mut libc::c_void) + 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_count(copy) == binn_count(map)+1\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2251 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_size(copy as *mut libc::c_void) > binn_size(map as *mut libc::c_void)
    {} else {
        __assert_fail(
            b"binn_size(copy) > binn_size(map)\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2252 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_46359: {
        if binn_size(copy as *mut libc::c_void) > binn_size(map as *mut libc::c_void)
        {} else {
            __assert_fail(
                b"binn_size(copy) > binn_size(map)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2252 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(copy);
    copy = binn_copy(obj as *mut libc::c_void);
    if !copy.is_null() {} else {
        __assert_fail(
            b"copy!=NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2256 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_46304: {
        if !copy.is_null() {} else {
            __assert_fail(
                b"copy!=NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2256 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_type(copy as *mut libc::c_void) == binn_type(obj as *mut libc::c_void)
    {} else {
        __assert_fail(
            b"binn_type(copy) == binn_type(obj)\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2257 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_46250: {
        if binn_type(copy as *mut libc::c_void) == binn_type(obj as *mut libc::c_void)
        {} else {
            __assert_fail(
                b"binn_type(copy) == binn_type(obj)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2257 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_count(copy as *mut libc::c_void) == binn_count(obj as *mut libc::c_void)
    {} else {
        __assert_fail(
            b"binn_count(copy) == binn_count(obj)\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2258 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_46196: {
        if binn_count(copy as *mut libc::c_void) == binn_count(obj as *mut libc::c_void)
        {} else {
            __assert_fail(
                b"binn_count(copy) == binn_count(obj)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2258 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_size(copy as *mut libc::c_void) == binn_size(obj as *mut libc::c_void)
    {} else {
        __assert_fail(
            b"binn_size(copy) == binn_size(obj)\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2259 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_46142: {
        if binn_size(copy as *mut libc::c_void) == binn_size(obj as *mut libc::c_void)
        {} else {
            __assert_fail(
                b"binn_size(copy) == binn_size(obj)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2259 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_iter_init(&mut iter, obj as *mut libc::c_void, 0xe2 as libc::c_int) != 0
    {} else {
        __assert_fail(
            b"binn_iter_init(&iter, obj, BINN_OBJECT)\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2260 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_46096: {
        if binn_iter_init(&mut iter, obj as *mut libc::c_void, 0xe2 as libc::c_int) != 0
        {} else {
            __assert_fail(
                b"binn_iter_init(&iter, obj, BINN_OBJECT)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2260 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_iter_init(&mut iter2, copy as *mut libc::c_void, 0xe2 as libc::c_int) != 0
    {} else {
        __assert_fail(
            b"binn_iter_init(&iter2, copy, BINN_OBJECT)\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2261 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_46050: {
        if binn_iter_init(&mut iter2, copy as *mut libc::c_void, 0xe2 as libc::c_int)
            != 0
        {} else {
            __assert_fail(
                b"binn_iter_init(&iter2, copy, BINN_OBJECT)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2261 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    while binn_object_next(&mut iter, key.as_mut_ptr(), &mut value) != 0 {
        if binn_object_next(&mut iter2, key2.as_mut_ptr(), &mut value2)
            == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_next(&iter2, key2, &value2) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2263 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_45992: {
            if binn_object_next(&mut iter2, key2.as_mut_ptr(), &mut value2)
                == 1 as libc::c_int
            {} else {
                __assert_fail(
                    b"binn_object_next(&iter2, key2, &value2) == TRUE\0" as *const u8
                        as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    2263 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
        if strcmp(key.as_mut_ptr(), key2.as_mut_ptr()) == 0 as libc::c_int {} else {
            __assert_fail(
                b"strcmp(key,key2)==0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2264 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_45942: {
            if strcmp(key.as_mut_ptr(), key2.as_mut_ptr()) == 0 as libc::c_int {} else {
                __assert_fail(
                    b"strcmp(key,key2)==0\0" as *const u8 as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    2264 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
        if value.type_0 == value2.type_0 {} else {
            __assert_fail(
                b"value.type == value2.type\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2265 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_45900: {
            if value.type_0 == value2.type_0 {} else {
                __assert_fail(
                    b"value.type == value2.type\0" as *const u8 as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    2265 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
    }
    if binn_object_set_int32(
        copy,
        b"another\0" as *const u8 as *const libc::c_char,
        123 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_int32(copy, \"another\", 123) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2268 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_45847: {
        if binn_object_set_int32(
            copy,
            b"another\0" as *const u8 as *const libc::c_char,
            123 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_int32(copy, \"another\", 123) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2268 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_type(copy as *mut libc::c_void) == binn_type(obj as *mut libc::c_void)
    {} else {
        __assert_fail(
            b"binn_type(copy) == binn_type(obj)\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2269 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_45793: {
        if binn_type(copy as *mut libc::c_void) == binn_type(obj as *mut libc::c_void)
        {} else {
            __assert_fail(
                b"binn_type(copy) == binn_type(obj)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2269 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_count(copy as *mut libc::c_void)
        == binn_count(obj as *mut libc::c_void) + 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_count(copy) == binn_count(obj)+1\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2270 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_45735: {
        if binn_count(copy as *mut libc::c_void)
            == binn_count(obj as *mut libc::c_void) + 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_count(copy) == binn_count(obj)+1\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2270 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_size(copy as *mut libc::c_void) > binn_size(obj as *mut libc::c_void)
    {} else {
        __assert_fail(
            b"binn_size(copy) > binn_size(obj)\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2271 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_45681: {
        if binn_size(copy as *mut libc::c_void) > binn_size(obj as *mut libc::c_void)
        {} else {
            __assert_fail(
                b"binn_size(copy) > binn_size(obj)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2271 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(copy);
    ptr = binn_ptr(list as *mut libc::c_void);
    copy = binn_copy(ptr);
    if !copy.is_null() {} else {
        __assert_fail(
            b"copy!=NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2279 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_45619: {
        if !copy.is_null() {} else {
            __assert_fail(
                b"copy!=NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2279 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_type(copy as *mut libc::c_void) == binn_type(list as *mut libc::c_void)
    {} else {
        __assert_fail(
            b"binn_type(copy) == binn_type(list)\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2280 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_45565: {
        if binn_type(copy as *mut libc::c_void) == binn_type(list as *mut libc::c_void)
        {} else {
            __assert_fail(
                b"binn_type(copy) == binn_type(list)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2280 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_count(copy as *mut libc::c_void) == binn_count(list as *mut libc::c_void)
    {} else {
        __assert_fail(
            b"binn_count(copy) == binn_count(list)\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2281 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_45511: {
        if binn_count(copy as *mut libc::c_void) == binn_count(list as *mut libc::c_void)
        {} else {
            __assert_fail(
                b"binn_count(copy) == binn_count(list)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2281 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_size(copy as *mut libc::c_void) == binn_size(list as *mut libc::c_void)
    {} else {
        __assert_fail(
            b"binn_size(copy) == binn_size(list)\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2282 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_45457: {
        if binn_size(copy as *mut libc::c_void) == binn_size(list as *mut libc::c_void)
        {} else {
            __assert_fail(
                b"binn_size(copy) == binn_size(list)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2282 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_iter_init(&mut iter, ptr, 0xe0 as libc::c_int) != 0 {} else {
        __assert_fail(
            b"binn_iter_init(&iter, ptr, BINN_LIST)\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2283 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_45413: {
        if binn_iter_init(&mut iter, ptr, 0xe0 as libc::c_int) != 0 {} else {
            __assert_fail(
                b"binn_iter_init(&iter, ptr, BINN_LIST)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2283 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_iter_init(&mut iter2, copy as *mut libc::c_void, 0xe0 as libc::c_int) != 0
    {} else {
        __assert_fail(
            b"binn_iter_init(&iter2, copy, BINN_LIST)\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2284 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_45367: {
        if binn_iter_init(&mut iter2, copy as *mut libc::c_void, 0xe0 as libc::c_int)
            != 0
        {} else {
            __assert_fail(
                b"binn_iter_init(&iter2, copy, BINN_LIST)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2284 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    while binn_list_next(&mut iter, &mut value) != 0 {
        if binn_list_next(&mut iter2, &mut value2) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_list_next(&iter2, &value2) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2286 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_45314: {
            if binn_list_next(&mut iter2, &mut value2) == 1 as libc::c_int {} else {
                __assert_fail(
                    b"binn_list_next(&iter2, &value2) == TRUE\0" as *const u8
                        as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    2286 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
        if value.type_0 == value2.type_0 {} else {
            __assert_fail(
                b"value.type == value2.type\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2287 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_45272: {
            if value.type_0 == value2.type_0 {} else {
                __assert_fail(
                    b"value.type == value2.type\0" as *const u8 as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    2287 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
    }
    if binn_list_add_str(
        copy,
        b"testing...\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_list_add_str(copy, \"testing...\") == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2290 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_45220: {
        if binn_list_add_str(
            copy,
            b"testing...\0" as *const u8 as *const libc::c_char as *mut libc::c_char,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_list_add_str(copy, \"testing...\") == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2290 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_type(copy as *mut libc::c_void) == binn_type(list as *mut libc::c_void)
    {} else {
        __assert_fail(
            b"binn_type(copy) == binn_type(list)\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2291 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_45166: {
        if binn_type(copy as *mut libc::c_void) == binn_type(list as *mut libc::c_void)
        {} else {
            __assert_fail(
                b"binn_type(copy) == binn_type(list)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2291 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_count(copy as *mut libc::c_void)
        == binn_count(list as *mut libc::c_void) + 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_count(copy) == binn_count(list)+1\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2292 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_45108: {
        if binn_count(copy as *mut libc::c_void)
            == binn_count(list as *mut libc::c_void) + 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_count(copy) == binn_count(list)+1\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2292 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_size(copy as *mut libc::c_void) > binn_size(list as *mut libc::c_void)
    {} else {
        __assert_fail(
            b"binn_size(copy) > binn_size(list)\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2293 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_45054: {
        if binn_size(copy as *mut libc::c_void) > binn_size(list as *mut libc::c_void)
        {} else {
            __assert_fail(
                b"binn_size(copy) > binn_size(list)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2293 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(copy);
    ptr = binn_ptr(map as *mut libc::c_void);
    copy = binn_copy(ptr);
    if !copy.is_null() {} else {
        __assert_fail(
            b"copy!=NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2298 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_44992: {
        if !copy.is_null() {} else {
            __assert_fail(
                b"copy!=NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2298 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_type(copy as *mut libc::c_void) == binn_type(map as *mut libc::c_void)
    {} else {
        __assert_fail(
            b"binn_type(copy) == binn_type(map)\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2299 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_44938: {
        if binn_type(copy as *mut libc::c_void) == binn_type(map as *mut libc::c_void)
        {} else {
            __assert_fail(
                b"binn_type(copy) == binn_type(map)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2299 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_count(copy as *mut libc::c_void) == binn_count(map as *mut libc::c_void)
    {} else {
        __assert_fail(
            b"binn_count(copy) == binn_count(map)\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2300 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_44884: {
        if binn_count(copy as *mut libc::c_void) == binn_count(map as *mut libc::c_void)
        {} else {
            __assert_fail(
                b"binn_count(copy) == binn_count(map)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2300 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_size(copy as *mut libc::c_void) == binn_size(map as *mut libc::c_void)
    {} else {
        __assert_fail(
            b"binn_size(copy) == binn_size(map)\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2301 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_44830: {
        if binn_size(copy as *mut libc::c_void) == binn_size(map as *mut libc::c_void)
        {} else {
            __assert_fail(
                b"binn_size(copy) == binn_size(map)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2301 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_iter_init(&mut iter, ptr, 0xe1 as libc::c_int) != 0 {} else {
        __assert_fail(
            b"binn_iter_init(&iter, ptr, BINN_MAP)\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2302 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_44786: {
        if binn_iter_init(&mut iter, ptr, 0xe1 as libc::c_int) != 0 {} else {
            __assert_fail(
                b"binn_iter_init(&iter, ptr, BINN_MAP)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2302 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_iter_init(&mut iter2, copy as *mut libc::c_void, 0xe1 as libc::c_int) != 0
    {} else {
        __assert_fail(
            b"binn_iter_init(&iter2, copy, BINN_MAP)\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2303 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_44740: {
        if binn_iter_init(&mut iter2, copy as *mut libc::c_void, 0xe1 as libc::c_int)
            != 0
        {} else {
            __assert_fail(
                b"binn_iter_init(&iter2, copy, BINN_MAP)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2303 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    while binn_map_next(&mut iter, &mut id, &mut value) != 0 {
        if binn_map_next(&mut iter2, &mut id2, &mut value2) == 1 as libc::c_int {} else {
            __assert_fail(
                b"binn_map_next(&iter2, &id2, &value2) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2305 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_44681: {
            if binn_map_next(&mut iter2, &mut id2, &mut value2) == 1 as libc::c_int
            {} else {
                __assert_fail(
                    b"binn_map_next(&iter2, &id2, &value2) == TRUE\0" as *const u8
                        as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    2305 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
        if id == id2 {} else {
            __assert_fail(
                b"id == id2\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2306 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_44641: {
            if id == id2 {} else {
                __assert_fail(
                    b"id == id2\0" as *const u8 as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    2306 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
        if value.type_0 == value2.type_0 {} else {
            __assert_fail(
                b"value.type == value2.type\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2307 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_44599: {
            if value.type_0 == value2.type_0 {} else {
                __assert_fail(
                    b"value.type == value2.type\0" as *const u8 as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    2307 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
    }
    if binn_map_set_int32(copy, 5600 as libc::c_int, 123 as libc::c_int)
        == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_map_set_int32(copy, 5600, 123) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2310 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_44547: {
        if binn_map_set_int32(copy, 5600 as libc::c_int, 123 as libc::c_int)
            == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_map_set_int32(copy, 5600, 123) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2310 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_type(copy as *mut libc::c_void) == binn_type(map as *mut libc::c_void)
    {} else {
        __assert_fail(
            b"binn_type(copy) == binn_type(map)\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2311 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_44493: {
        if binn_type(copy as *mut libc::c_void) == binn_type(map as *mut libc::c_void)
        {} else {
            __assert_fail(
                b"binn_type(copy) == binn_type(map)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2311 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_count(copy as *mut libc::c_void)
        == binn_count(map as *mut libc::c_void) + 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_count(copy) == binn_count(map)+1\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2312 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_44435: {
        if binn_count(copy as *mut libc::c_void)
            == binn_count(map as *mut libc::c_void) + 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_count(copy) == binn_count(map)+1\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2312 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_size(copy as *mut libc::c_void) > binn_size(map as *mut libc::c_void)
    {} else {
        __assert_fail(
            b"binn_size(copy) > binn_size(map)\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2313 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_44381: {
        if binn_size(copy as *mut libc::c_void) > binn_size(map as *mut libc::c_void)
        {} else {
            __assert_fail(
                b"binn_size(copy) > binn_size(map)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2313 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(copy);
    ptr = binn_ptr(obj as *mut libc::c_void);
    copy = binn_copy(ptr);
    if !copy.is_null() {} else {
        __assert_fail(
            b"copy!=NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2318 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_44318: {
        if !copy.is_null() {} else {
            __assert_fail(
                b"copy!=NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2318 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_type(copy as *mut libc::c_void) == binn_type(obj as *mut libc::c_void)
    {} else {
        __assert_fail(
            b"binn_type(copy) == binn_type(obj)\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2319 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_44264: {
        if binn_type(copy as *mut libc::c_void) == binn_type(obj as *mut libc::c_void)
        {} else {
            __assert_fail(
                b"binn_type(copy) == binn_type(obj)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2319 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_count(copy as *mut libc::c_void) == binn_count(obj as *mut libc::c_void)
    {} else {
        __assert_fail(
            b"binn_count(copy) == binn_count(obj)\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2320 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_44210: {
        if binn_count(copy as *mut libc::c_void) == binn_count(obj as *mut libc::c_void)
        {} else {
            __assert_fail(
                b"binn_count(copy) == binn_count(obj)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2320 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_size(copy as *mut libc::c_void) == binn_size(obj as *mut libc::c_void)
    {} else {
        __assert_fail(
            b"binn_size(copy) == binn_size(obj)\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2321 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_44156: {
        if binn_size(copy as *mut libc::c_void) == binn_size(obj as *mut libc::c_void)
        {} else {
            __assert_fail(
                b"binn_size(copy) == binn_size(obj)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2321 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_iter_init(&mut iter, ptr, 0xe2 as libc::c_int) != 0 {} else {
        __assert_fail(
            b"binn_iter_init(&iter, ptr, BINN_OBJECT)\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2322 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_44111: {
        if binn_iter_init(&mut iter, ptr, 0xe2 as libc::c_int) != 0 {} else {
            __assert_fail(
                b"binn_iter_init(&iter, ptr, BINN_OBJECT)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2322 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_iter_init(&mut iter2, copy as *mut libc::c_void, 0xe2 as libc::c_int) != 0
    {} else {
        __assert_fail(
            b"binn_iter_init(&iter2, copy, BINN_OBJECT)\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2323 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_44064: {
        if binn_iter_init(&mut iter2, copy as *mut libc::c_void, 0xe2 as libc::c_int)
            != 0
        {} else {
            __assert_fail(
                b"binn_iter_init(&iter2, copy, BINN_OBJECT)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2323 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    while binn_object_next(&mut iter, key.as_mut_ptr(), &mut value) != 0 {
        if binn_object_next(&mut iter2, key2.as_mut_ptr(), &mut value2)
            == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_next(&iter2, key2, &value2) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2325 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_44003: {
            if binn_object_next(&mut iter2, key2.as_mut_ptr(), &mut value2)
                == 1 as libc::c_int
            {} else {
                __assert_fail(
                    b"binn_object_next(&iter2, key2, &value2) == TRUE\0" as *const u8
                        as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    2325 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
        if strcmp(key.as_mut_ptr(), key2.as_mut_ptr()) == 0 as libc::c_int {} else {
            __assert_fail(
                b"strcmp(key,key2)==0\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2326 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_43950: {
            if strcmp(key.as_mut_ptr(), key2.as_mut_ptr()) == 0 as libc::c_int {} else {
                __assert_fail(
                    b"strcmp(key,key2)==0\0" as *const u8 as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    2326 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
        if value.type_0 == value2.type_0 {} else {
            __assert_fail(
                b"value.type == value2.type\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2327 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
        'c_43906: {
            if value.type_0 == value2.type_0 {} else {
                __assert_fail(
                    b"value.type == value2.type\0" as *const u8 as *const libc::c_char,
                    b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                    2327 as libc::c_int as libc::c_uint,
                    (*::std::mem::transmute::<
                        &[u8; 26],
                        &[libc::c_char; 26],
                    >(b"void test_binn_iter(BOOL)\0"))
                        .as_ptr(),
                );
            }
        };
    }
    if binn_object_set_int32(
        copy,
        b"another\0" as *const u8 as *const libc::c_char,
        123 as libc::c_int,
    ) == 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_object_set_int32(copy, \"another\", 123) == TRUE\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2330 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_43853: {
        if binn_object_set_int32(
            copy,
            b"another\0" as *const u8 as *const libc::c_char,
            123 as libc::c_int,
        ) == 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_object_set_int32(copy, \"another\", 123) == TRUE\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2330 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_type(copy as *mut libc::c_void) == binn_type(obj as *mut libc::c_void)
    {} else {
        __assert_fail(
            b"binn_type(copy) == binn_type(obj)\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2331 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_43799: {
        if binn_type(copy as *mut libc::c_void) == binn_type(obj as *mut libc::c_void)
        {} else {
            __assert_fail(
                b"binn_type(copy) == binn_type(obj)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2331 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_count(copy as *mut libc::c_void)
        == binn_count(obj as *mut libc::c_void) + 1 as libc::c_int
    {} else {
        __assert_fail(
            b"binn_count(copy) == binn_count(obj)+1\0" as *const u8
                as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2332 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_43741: {
        if binn_count(copy as *mut libc::c_void)
            == binn_count(obj as *mut libc::c_void) + 1 as libc::c_int
        {} else {
            __assert_fail(
                b"binn_count(copy) == binn_count(obj)+1\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2332 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    if binn_size(copy as *mut libc::c_void) > binn_size(obj as *mut libc::c_void)
    {} else {
        __assert_fail(
            b"binn_size(copy) > binn_size(obj)\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2333 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 26],
                &[libc::c_char; 26],
            >(b"void test_binn_iter(BOOL)\0"))
                .as_ptr(),
        );
    }
    'c_43687: {
        if binn_size(copy as *mut libc::c_void) > binn_size(obj as *mut libc::c_void)
        {} else {
            __assert_fail(
                b"binn_size(copy) > binn_size(obj)\0" as *const u8
                    as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2333 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 26],
                    &[libc::c_char; 26],
                >(b"void test_binn_iter(BOOL)\0"))
                    .as_ptr(),
            );
        }
    };
    binn_free(copy);
    binn_free(list);
    binn_free(list2);
    binn_free(map);
    binn_free(obj);
    puts(b"OK\0" as *const u8 as *const libc::c_char);
}
pub unsafe extern "C" fn test_binn2() {
    let mut obj1ptr: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut obj2ptr: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut obj1size: libc::c_int = 0;
    let mut obj2size: libc::c_int = 0;
    test_virtual_types();
    test_int_conversion();
    test_binn_int_conversion();
    test_value_conversion();
    test_value_copy();
    init_udts();
    obj1ptr = test_create_object_1(&mut obj1size);
    obj2ptr = test_create_object_2(&mut obj2size);
    if !obj1ptr.is_null() {} else {
        __assert_fail(
            b"obj1ptr != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2364 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 18],
                &[libc::c_char; 18],
            >(b"void test_binn2()\0"))
                .as_ptr(),
        );
    }
    'c_59649: {
        if !obj1ptr.is_null() {} else {
            __assert_fail(
                b"obj1ptr != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2364 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 18],
                    &[libc::c_char; 18],
                >(b"void test_binn2()\0"))
                    .as_ptr(),
            );
        }
    };
    if !obj2ptr.is_null() {} else {
        __assert_fail(
            b"obj2ptr != NULL\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2365 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 18],
                &[libc::c_char; 18],
            >(b"void test_binn2()\0"))
                .as_ptr(),
        );
    }
    'c_59606: {
        if !obj2ptr.is_null() {} else {
            __assert_fail(
                b"obj2ptr != NULL\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2365 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 18],
                    &[libc::c_char; 18],
                >(b"void test_binn2()\0"))
                    .as_ptr(),
            );
        }
    };
    printf(
        b"obj1size=%d obj2size=%d\n\0" as *const u8 as *const libc::c_char,
        obj1size,
        obj2size,
    );
    if obj1size == obj2size {} else {
        __assert_fail(
            b"obj1size == obj2size\0" as *const u8 as *const libc::c_char,
            b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
            2368 as libc::c_int as libc::c_uint,
            (*::std::mem::transmute::<
                &[u8; 18],
                &[libc::c_char; 18],
            >(b"void test_binn2()\0"))
                .as_ptr(),
        );
    }
    'c_59557: {
        if obj1size == obj2size {} else {
            __assert_fail(
                b"obj1size == obj2size\0" as *const u8 as *const libc::c_char,
                b"test/test_binn2.c\0" as *const u8 as *const libc::c_char,
                2368 as libc::c_int as libc::c_uint,
                (*::std::mem::transmute::<
                    &[u8; 18],
                    &[libc::c_char; 18],
                >(b"void test_binn2()\0"))
                    .as_ptr(),
            );
        }
    };
    test_binn_read(obj1ptr as *mut libc::c_void);
    test_binn_iter(0 as libc::c_int);
    test_binn_iter(1 as libc::c_int);
}
