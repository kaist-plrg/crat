use ::libc;
use ::c2rust_bitfields;
use ::c2rust_asm_casts;
use c2rust_asm_casts::AsmCastTrait;
use std::arch::asm;
extern "C" {
    pub type _IO_wide_data;
    pub type _IO_codecvt;
    pub type _IO_marker;
    pub type re_dfa_t;
    fn close(__fd: libc::c_int) -> libc::c_int;
    fn read(__fd: libc::c_int, __buf: *mut libc::c_void, __nbytes: size_t) -> ssize_t;
    fn write(__fd: libc::c_int, __buf: *const libc::c_void, __n: size_t) -> ssize_t;
    fn pipe(__pipedes: *mut libc::c_int) -> libc::c_int;
    fn dup2(__fd: libc::c_int, __fd2: libc::c_int) -> libc::c_int;
    fn execvp(
        __file: *const libc::c_char,
        __argv: *const *mut libc::c_char,
    ) -> libc::c_int;
    fn getpid() -> __pid_t;
    fn fork() -> __pid_t;
    fn isatty(__fd: libc::c_int) -> libc::c_int;
    static mut optarg: *mut libc::c_char;
    static mut optind: libc::c_int;
    fn getopt_long(
        ___argc: libc::c_int,
        ___argv: *const *mut libc::c_char,
        __shortopts: *const libc::c_char,
        __longopts: *const option,
        __longind: *mut libc::c_int,
    ) -> libc::c_int;
    fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> libc::c_int;
    fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> libc::c_int;
    fn sigaction(
        __sig: libc::c_int,
        __act: *const sigaction,
        __oact: *mut sigaction,
    ) -> libc::c_int;
    static mut stdout: *mut FILE;
    static mut stderr: *mut FILE;
    fn fclose(__stream: *mut FILE) -> libc::c_int;
    fn fopen(_: *const libc::c_char, _: *const libc::c_char) -> *mut FILE;
    fn fprintf(_: *mut FILE, _: *const libc::c_char, _: ...) -> libc::c_int;
    fn printf(_: *const libc::c_char, _: ...) -> libc::c_int;
    fn vfprintf(
        _: *mut FILE,
        _: *const libc::c_char,
        _: ::std::ffi::VaList,
    ) -> libc::c_int;
    fn snprintf(
        _: *mut libc::c_char,
        _: libc::c_ulong,
        _: *const libc::c_char,
        _: ...
    ) -> libc::c_int;
    fn vsnprintf(
        _: *mut libc::c_char,
        _: libc::c_ulong,
        _: *const libc::c_char,
        _: ::std::ffi::VaList,
    ) -> libc::c_int;
    fn asprintf(
        __ptr: *mut *mut libc::c_char,
        __fmt: *const libc::c_char,
        _: ...
    ) -> libc::c_int;
    fn sscanf(_: *const libc::c_char, _: *const libc::c_char, _: ...) -> libc::c_int;
    fn fread(
        _: *mut libc::c_void,
        _: libc::c_ulong,
        _: libc::c_ulong,
        _: *mut FILE,
    ) -> libc::c_ulong;
    fn perror(__s: *const libc::c_char);
    fn fileno(__stream: *mut FILE) -> libc::c_int;
    fn popen(__command: *const libc::c_char, __modes: *const libc::c_char) -> *mut FILE;
    fn pclose(__stream: *mut FILE) -> libc::c_int;
    fn strtol(
        _: *const libc::c_char,
        _: *mut *mut libc::c_char,
        _: libc::c_int,
    ) -> libc::c_long;
    fn strtoul(
        _: *const libc::c_char,
        _: *mut *mut libc::c_char,
        _: libc::c_int,
    ) -> libc::c_ulong;
    fn strtoull(
        _: *const libc::c_char,
        _: *mut *mut libc::c_char,
        _: libc::c_int,
    ) -> libc::c_ulonglong;
    fn malloc(_: libc::c_ulong) -> *mut libc::c_void;
    fn calloc(_: libc::c_ulong, _: libc::c_ulong) -> *mut libc::c_void;
    fn realloc(_: *mut libc::c_void, _: libc::c_ulong) -> *mut libc::c_void;
    fn free(__ptr: *mut libc::c_void);
    fn exit(_: libc::c_int) -> !;
    fn getenv(__name: *const libc::c_char) -> *mut libc::c_char;
    fn memcpy(
        _: *mut libc::c_void,
        _: *const libc::c_void,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    fn memmove(
        _: *mut libc::c_void,
        _: *const libc::c_void,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    fn memset(
        _: *mut libc::c_void,
        _: libc::c_int,
        _: libc::c_ulong,
    ) -> *mut libc::c_void;
    fn memcmp(
        _: *const libc::c_void,
        _: *const libc::c_void,
        _: libc::c_ulong,
    ) -> libc::c_int;
    fn strncpy(
        _: *mut libc::c_char,
        _: *const libc::c_char,
        _: libc::c_ulong,
    ) -> *mut libc::c_char;
    fn strcmp(_: *const libc::c_char, _: *const libc::c_char) -> libc::c_int;
    fn strncmp(
        _: *const libc::c_char,
        _: *const libc::c_char,
        _: libc::c_ulong,
    ) -> libc::c_int;
    fn strdup(__s: *const libc::c_char) -> *mut libc::c_char;
    fn strchr(_: *const libc::c_char, _: libc::c_int) -> *mut libc::c_char;
    fn strrchr(_: *const libc::c_char, _: libc::c_int) -> *mut libc::c_char;
    fn strstr(_: *const libc::c_char, _: *const libc::c_char) -> *mut libc::c_char;
    fn strtok(_: *mut libc::c_char, _: *const libc::c_char) -> *mut libc::c_char;
    fn strlen(_: *const libc::c_char) -> libc::c_ulong;
    fn strerror(_: libc::c_int) -> *mut libc::c_char;
    fn strerror_r(
        __errnum: libc::c_int,
        __buf: *mut libc::c_char,
        __buflen: size_t,
    ) -> *mut libc::c_char;
    fn ptrace(__request: __ptrace_request, _: ...) -> libc::c_long;
    fn __fxstat(
        __ver: libc::c_int,
        __fildes: libc::c_int,
        __stat_buf: *mut stat,
    ) -> libc::c_int;
    fn process_vm_readv(
        __pid: pid_t,
        __lvec: *const iovec,
        __liovcnt: libc::c_ulong,
        __rvec: *const iovec,
        __riovcnt: libc::c_ulong,
        __flags: libc::c_ulong,
    ) -> ssize_t;
    fn waitpid(
        __pid: __pid_t,
        __stat_loc: *mut libc::c_int,
        __options: libc::c_int,
    ) -> __pid_t;
    fn open(__file: *const libc::c_char, __oflag: libc::c_int, _: ...) -> libc::c_int;
    fn ioctl(__fd: libc::c_int, __request: libc::c_ulong, _: ...) -> libc::c_int;
    fn tcgetattr(__fd: libc::c_int, __termios_p: *mut termios) -> libc::c_int;
    fn tcsetattr(
        __fd: libc::c_int,
        __optional_actions: libc::c_int,
        __termios_p: *const termios,
    ) -> libc::c_int;
    fn cfmakeraw(__termios_p: *mut termios);
    fn __errno_location() -> *mut libc::c_int;
    fn regcomp(
        __preg: *mut regex_t,
        __pattern: *const libc::c_char,
        __cflags: libc::c_int,
    ) -> libc::c_int;
    fn regfree(__preg: *mut regex_t);
    fn main_pgrep() -> libc::c_int;
    fn write_done_pipe();
    fn event_handler_callgrind(
        context: *mut trace_context_s,
        event_type: libc::c_int,
    ) -> libc::c_int;
    fn main_top(argc: libc::c_int, argv: *mut *mut libc::c_char) -> libc::c_int;
    fn event_handler_fout(
        context: *mut trace_context_s,
        event_type: libc::c_int,
    ) -> libc::c_int;
    fn get_symbol_addr(
        memo: *mut addr_memo_t,
        pid: pid_t,
        symbol: *const libc::c_char,
        raddr: *mut uint64_t,
    ) -> libc::c_int;
    fn select(
        __nfds: libc::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> libc::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1];
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __va_list_tag {
    pub gp_offset: libc::c_uint,
    pub fp_offset: libc::c_uint,
    pub overflow_arg_area: *mut libc::c_void,
    pub reg_save_area: *mut libc::c_void,
}
pub type __uint8_t = libc::c_uchar;
pub type __int16_t = libc::c_short;
pub type __uint16_t = libc::c_ushort;
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __uint64_t = libc::c_ulong;
pub type __dev_t = libc::c_ulong;
pub type __uid_t = libc::c_uint;
pub type __gid_t = libc::c_uint;
pub type __ino_t = libc::c_ulong;
pub type __mode_t = libc::c_uint;
pub type __nlink_t = libc::c_ulong;
pub type __off_t = libc::c_long;
pub type __off64_t = libc::c_long;
pub type __pid_t = libc::c_int;
pub type __clock_t = libc::c_long;
pub type __time_t = libc::c_long;
pub type __suseconds_t = libc::c_long;
pub type __clockid_t = libc::c_int;
pub type __blksize_t = libc::c_long;
pub type __blkcnt_t = libc::c_long;
pub type __ssize_t = libc::c_long;
pub type __syscall_slong_t = libc::c_long;
pub type size_t = libc::c_ulong;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct iovec {
    pub iov_base: *mut libc::c_void,
    pub iov_len: size_t,
}
pub type pid_t = __pid_t;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: libc::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct option {
    pub name: *const libc::c_char,
    pub has_arg: libc::c_int,
    pub flag: *mut libc::c_int,
    pub val: libc::c_int,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
pub type clockid_t = __clockid_t;
pub type __sigval_t = sigval;
#[derive(Copy, Clone)]
#[repr(C)]
pub union sigval {
    pub sival_int: libc::c_int,
    pub sival_ptr: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __sigset_t {
    pub __val: [libc::c_ulong; 16],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct siginfo_t {
    pub si_signo: libc::c_int,
    pub si_errno: libc::c_int,
    pub si_code: libc::c_int,
    pub __pad0: libc::c_int,
    pub _sifields: C2RustUnnamed,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed {
    pub _pad: [libc::c_int; 28],
    pub _kill: C2RustUnnamed_8,
    pub _timer: C2RustUnnamed_7,
    pub _rt: C2RustUnnamed_6,
    pub _sigchld: C2RustUnnamed_5,
    pub _sigfault: C2RustUnnamed_2,
    pub _sigpoll: C2RustUnnamed_1,
    pub _sigsys: C2RustUnnamed_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_0 {
    pub _call_addr: *mut libc::c_void,
    pub _syscall: libc::c_int,
    pub _arch: libc::c_uint,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_1 {
    pub si_band: libc::c_long,
    pub si_fd: libc::c_int,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_2 {
    pub si_addr: *mut libc::c_void,
    pub si_addr_lsb: libc::c_short,
    pub _bounds: C2RustUnnamed_3,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_3 {
    pub _addr_bnd: C2RustUnnamed_4,
    pub _pkey: __uint32_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_4 {
    pub _lower: *mut libc::c_void,
    pub _upper: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_5 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_status: libc::c_int,
    pub si_utime: __clock_t,
    pub si_stime: __clock_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_6 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_sigval: __sigval_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_7 {
    pub si_tid: libc::c_int,
    pub si_overrun: libc::c_int,
    pub si_sigval: __sigval_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_8 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
}
pub type __sighandler_t = Option::<unsafe extern "C" fn(libc::c_int) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct sigaction {
    pub __sigaction_handler: C2RustUnnamed_9,
    pub sa_mask: __sigset_t,
    pub sa_flags: libc::c_int,
    pub sa_restorer: Option::<unsafe extern "C" fn() -> ()>,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_9 {
    pub sa_handler: __sighandler_t,
    pub sa_sigaction: Option::<
        unsafe extern "C" fn(libc::c_int, *mut siginfo_t, *mut libc::c_void) -> (),
    >,
}
pub type va_list = __builtin_va_list;
pub type ptrdiff_t = libc::c_long;
pub type wchar_t = libc::c_int;
pub type int16_t = __int16_t;
pub type int32_t = __int32_t;
pub type uint8_t = __uint8_t;
pub type uint16_t = __uint16_t;
pub type uint32_t = __uint32_t;
pub type uint64_t = __uint64_t;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _IO_FILE {
    pub _flags: libc::c_int,
    pub _IO_read_ptr: *mut libc::c_char,
    pub _IO_read_end: *mut libc::c_char,
    pub _IO_read_base: *mut libc::c_char,
    pub _IO_write_base: *mut libc::c_char,
    pub _IO_write_ptr: *mut libc::c_char,
    pub _IO_write_end: *mut libc::c_char,
    pub _IO_buf_base: *mut libc::c_char,
    pub _IO_buf_end: *mut libc::c_char,
    pub _IO_save_base: *mut libc::c_char,
    pub _IO_backup_base: *mut libc::c_char,
    pub _IO_save_end: *mut libc::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: libc::c_int,
    pub _flags2: libc::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: libc::c_ushort,
    pub _vtable_offset: libc::c_schar,
    pub _shortbuf: [libc::c_char; 1],
    pub _lock: *mut libc::c_void,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut libc::c_void,
    pub __pad5: size_t,
    pub _mode: libc::c_int,
    pub _unused2: [libc::c_char; 20],
}
pub type _IO_lock_t = ();
pub type FILE = _IO_FILE;
pub type ssize_t = __ssize_t;
pub type __fd_mask = libc::c_long;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct fd_set {
    pub fds_bits: [__fd_mask; 16],
}
pub type __ptrace_request = libc::c_uint;
pub const PTRACE_GET_SYSCALL_INFO: __ptrace_request = 16910;
pub const PTRACE_SECCOMP_GET_METADATA: __ptrace_request = 16909;
pub const PTRACE_SECCOMP_GET_FILTER: __ptrace_request = 16908;
pub const PTRACE_SETSIGMASK: __ptrace_request = 16907;
pub const PTRACE_GETSIGMASK: __ptrace_request = 16906;
pub const PTRACE_PEEKSIGINFO: __ptrace_request = 16905;
pub const PTRACE_LISTEN: __ptrace_request = 16904;
pub const PTRACE_INTERRUPT: __ptrace_request = 16903;
pub const PTRACE_SEIZE: __ptrace_request = 16902;
pub const PTRACE_SETREGSET: __ptrace_request = 16901;
pub const PTRACE_GETREGSET: __ptrace_request = 16900;
pub const PTRACE_SETSIGINFO: __ptrace_request = 16899;
pub const PTRACE_GETSIGINFO: __ptrace_request = 16898;
pub const PTRACE_GETEVENTMSG: __ptrace_request = 16897;
pub const PTRACE_SETOPTIONS: __ptrace_request = 16896;
pub const PTRACE_SINGLEBLOCK: __ptrace_request = 33;
pub const PTRACE_SYSEMU_SINGLESTEP: __ptrace_request = 32;
pub const PTRACE_SYSEMU: __ptrace_request = 31;
pub const PTRACE_ARCH_PRCTL: __ptrace_request = 30;
pub const PTRACE_SET_THREAD_AREA: __ptrace_request = 26;
pub const PTRACE_GET_THREAD_AREA: __ptrace_request = 25;
pub const PTRACE_SYSCALL: __ptrace_request = 24;
pub const PTRACE_SETFPXREGS: __ptrace_request = 19;
pub const PTRACE_GETFPXREGS: __ptrace_request = 18;
pub const PTRACE_DETACH: __ptrace_request = 17;
pub const PTRACE_ATTACH: __ptrace_request = 16;
pub const PTRACE_SETFPREGS: __ptrace_request = 15;
pub const PTRACE_GETFPREGS: __ptrace_request = 14;
pub const PTRACE_SETREGS: __ptrace_request = 13;
pub const PTRACE_GETREGS: __ptrace_request = 12;
pub const PTRACE_SINGLESTEP: __ptrace_request = 9;
pub const PTRACE_KILL: __ptrace_request = 8;
pub const PTRACE_CONT: __ptrace_request = 7;
pub const PTRACE_POKEUSER: __ptrace_request = 6;
pub const PTRACE_POKEDATA: __ptrace_request = 5;
pub const PTRACE_POKETEXT: __ptrace_request = 4;
pub const PTRACE_PEEKUSER: __ptrace_request = 3;
pub const PTRACE_PEEKDATA: __ptrace_request = 2;
pub const PTRACE_PEEKTEXT: __ptrace_request = 1;
pub const PTRACE_TRACEME: __ptrace_request = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct winsize {
    pub ws_row: libc::c_ushort,
    pub ws_col: libc::c_ushort,
    pub ws_xpixel: libc::c_ushort,
    pub ws_ypixel: libc::c_ushort,
}
pub type cc_t = libc::c_uchar;
pub type speed_t = libc::c_uint;
pub type tcflag_t = libc::c_uint;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct termios {
    pub c_iflag: tcflag_t,
    pub c_oflag: tcflag_t,
    pub c_cflag: tcflag_t,
    pub c_lflag: tcflag_t,
    pub c_line: cc_t,
    pub c_cc: [cc_t; 32],
    pub c_ispeed: speed_t,
    pub c_ospeed: speed_t,
}
pub type uintattr_t = uint16_t;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct tb_cell {
    pub ch: uint32_t,
    pub fg: uintattr_t,
    pub bg: uintattr_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct tb_event {
    pub type_0: uint8_t,
    pub mod_0: uint8_t,
    pub key: uint16_t,
    pub ch: uint32_t,
    pub w: int32_t,
    pub h: int32_t,
    pub x: int32_t,
    pub y: int32_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct tb_global_t {
    pub ttyfd: libc::c_int,
    pub rfd: libc::c_int,
    pub wfd: libc::c_int,
    pub ttyfd_open: libc::c_int,
    pub resize_pipefd: [libc::c_int; 2],
    pub width: libc::c_int,
    pub height: libc::c_int,
    pub cursor_x: libc::c_int,
    pub cursor_y: libc::c_int,
    pub last_x: libc::c_int,
    pub last_y: libc::c_int,
    pub fg: uintattr_t,
    pub bg: uintattr_t,
    pub last_fg: uintattr_t,
    pub last_bg: uintattr_t,
    pub input_mode: libc::c_int,
    pub output_mode: libc::c_int,
    pub terminfo: *mut libc::c_char,
    pub nterminfo: size_t,
    pub caps: [*const libc::c_char; 38],
    pub cap_trie: cap_trie_t,
    pub in_0: bytebuf_t,
    pub out: bytebuf_t,
    pub back: cellbuf_t,
    pub front: cellbuf_t,
    pub orig_tios: termios,
    pub has_orig_tios: libc::c_int,
    pub last_errno: libc::c_int,
    pub initialized: libc::c_int,
    pub fn_extract_esc_pre: Option::<
        unsafe extern "C" fn(*mut tb_event, *mut size_t) -> libc::c_int,
    >,
    pub fn_extract_esc_post: Option::<
        unsafe extern "C" fn(*mut tb_event, *mut size_t) -> libc::c_int,
    >,
    pub errbuf: [libc::c_char; 1024],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct cellbuf_t {
    pub width: libc::c_int,
    pub height: libc::c_int,
    pub cells: *mut tb_cell,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct bytebuf_t {
    pub buf: *mut libc::c_char,
    pub len: size_t,
    pub cap: size_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct cap_trie_t {
    pub c: libc::c_char,
    pub children: *mut cap_trie_t,
    pub nchildren: size_t,
    pub is_leaf: libc::c_int,
    pub key: uint16_t,
    pub mod_0: uint8_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_10 {
    pub cap: *const libc::c_char,
    pub key: uint16_t,
    pub mod_0: uint8_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_11 {
    pub name: *const libc::c_char,
    pub caps: *mut *const libc::c_char,
    pub alias: *const libc::c_char,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_12 {
    pub range_start: uint32_t,
    pub range_end: uint32_t,
    pub width: libc::c_int,
}
pub const TYPE_MAX: C2RustUnnamed_14 = 3;
pub const LAST_SEMICOLON: C2RustUnnamed_13 = 2;
pub const FIRST_SEMICOLON: C2RustUnnamed_13 = 1;
pub const TYPE_1015: C2RustUnnamed_14 = 2;
pub const FIRST_M: C2RustUnnamed_13 = 0;
pub type C2RustUnnamed_13 = libc::c_uint;
pub const FIRST_LAST_MAX: C2RustUnnamed_13 = 3;
pub const TYPE_1006: C2RustUnnamed_14 = 1;
pub const TYPE_VT200: C2RustUnnamed_14 = 0;
pub type C2RustUnnamed_14 = libc::c_uint;
pub type __re_long_size_t = libc::c_ulong;
pub type reg_syntax_t = libc::c_ulong;
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct re_pattern_buffer {
    pub buffer: *mut re_dfa_t,
    pub allocated: __re_long_size_t,
    pub used: __re_long_size_t,
    pub syntax: reg_syntax_t,
    pub fastmap: *mut libc::c_char,
    pub translate: *mut libc::c_uchar,
    pub re_nsub: size_t,
    #[bitfield(name = "can_be_null", ty = "libc::c_uint", bits = "0..=0")]
    #[bitfield(name = "regs_allocated", ty = "libc::c_uint", bits = "1..=2")]
    #[bitfield(name = "fastmap_accurate", ty = "libc::c_uint", bits = "3..=3")]
    #[bitfield(name = "no_sub", ty = "libc::c_uint", bits = "4..=4")]
    #[bitfield(name = "not_bol", ty = "libc::c_uint", bits = "5..=5")]
    #[bitfield(name = "not_eol", ty = "libc::c_uint", bits = "6..=6")]
    #[bitfield(name = "newline_anchor", ty = "libc::c_uint", bits = "7..=7")]
    pub can_be_null_regs_allocated_fastmap_accurate_no_sub_not_bol_not_eol_newline_anchor: [u8; 1],
    #[bitfield(padding)]
    pub c2rust_padding: [u8; 7],
}
pub type regex_t = re_pattern_buffer;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_executor_globals_70 {
    pub pad0: [uint8_t; 304],
    pub symbol_table: zend_array_70,
    pub pad1: [uint8_t; 140],
    pub current_execute_data: *mut zend_execute_data_70,
}
pub type zend_execute_data_70 = _zend_execute_data_70;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_execute_data_70 {
    pub opline: *mut zend_op_70,
    pub pad0: [uint8_t; 16],
    pub func: *mut zend_function_70,
    pub pad1: [uint8_t; 24],
    pub prev_execute_data: *mut zend_execute_data_70,
    pub symbol_table: *mut zend_array_70,
}
pub type zend_array_70 = _zend_array_70;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_array_70 {
    pub pad0: [uint8_t; 12],
    pub nTableMask: uint32_t,
    pub arData: *mut Bucket_70,
    pub nNumUsed: uint32_t,
    pub nNumOfElements: uint32_t,
    pub nTableSize: uint32_t,
}
pub type Bucket_70 = _Bucket_70;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _Bucket_70 {
    pub val: zval_70,
    pub h: uint64_t,
    pub key: *mut zend_string_70,
}
pub type zend_string_70 = _zend_string_70;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_string_70 {
    pub pad0: [uint8_t; 16],
    pub len: size_t,
    pub val: [libc::c_char; 1],
}
pub type zval_70 = _zval_70;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zval_70 {
    pub value: zend_value_70,
    pub u1: C2RustUnnamed_16,
    pub u2: C2RustUnnamed_15,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_15 {
    pub next: uint32_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_16 {
    pub v: C2RustUnnamed_17,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_17 {
    pub type_0: uint8_t,
    pub pad0: [uint8_t; 3],
}
pub type zend_value_70 = _zend_value_70;
#[derive(Copy, Clone)]
#[repr(C)]
pub union _zend_value_70 {
    pub lval: libc::c_long,
    pub dval: libc::c_double,
    pub str_0: *mut zend_string_70,
    pub arr: *mut zend_array_70,
}
pub type zend_function_70 = _zend_function_70;
#[derive(Copy, Clone)]
#[repr(C)]
pub union _zend_function_70 {
    pub type_0: uint8_t,
    pub common: C2RustUnnamed_18,
    pub op_array: zend_op_array_70,
}
pub type zend_op_array_70 = _zend_op_array_70;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_op_array_70 {
    pub pad0: [uint8_t; 72],
    pub last_var: libc::c_int,
    pub pad1: [uint8_t; 4],
    pub vars: *mut *mut zend_string_70,
    pub pad2: [uint8_t; 32],
    pub filename: *mut zend_string_70,
    pub line_start: uint32_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_18 {
    pub pad0: [uint8_t; 8],
    pub function_name: *mut zend_string_70,
    pub scope: *mut zend_class_entry_70,
}
pub type zend_class_entry_70 = _zend_class_entry_70;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_class_entry_70 {
    pub pad0: [uint8_t; 8],
    pub name: *mut zend_string_70,
}
pub type zend_op_70 = _zend_op_70;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_op_70 {
    pub pad0: [uint8_t; 24],
    pub lineno: uint32_t,
}
pub type zend_executor_globals_70 = _zend_executor_globals_70;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _sapi_request_info_70 {
    pub pad0: [uint8_t; 8],
    pub query_string: *mut libc::c_char,
    pub cookie_data: *mut libc::c_char,
    pub pad1: [uint8_t; 8],
    pub path_translated: *mut libc::c_char,
    pub request_uri: *mut libc::c_char,
}
pub type sapi_request_info_70 = _sapi_request_info_70;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _sapi_globals_struct_70 {
    pub pad0: [uint8_t; 8],
    pub request_info: sapi_request_info_70,
    pub pad1: [uint8_t; 384],
    pub global_request_time: libc::c_double,
}
pub type sapi_globals_struct_70 = _sapi_globals_struct_70;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_alloc_globals_70 {
    pub mm_heap: *mut zend_mm_heap_70,
}
pub type zend_mm_heap_70 = _zend_mm_heap_70;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_mm_heap_70 {
    pub pad0: [uint8_t; 16],
    pub size: size_t,
    pub peak: size_t,
}
pub type zend_alloc_globals_70 = _zend_alloc_globals_70;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_executor_globals_71 {
    pub pad0: [uint8_t; 304],
    pub symbol_table: zend_array_71,
    pub pad1: [uint8_t; 140],
    pub current_execute_data: *mut zend_execute_data_71,
}
pub type zend_execute_data_71 = _zend_execute_data_71;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_execute_data_71 {
    pub opline: *mut zend_op_71,
    pub pad0: [uint8_t; 16],
    pub func: *mut zend_function_71,
    pub pad1: [uint8_t; 16],
    pub prev_execute_data: *mut zend_execute_data_71,
    pub symbol_table: *mut zend_array_71,
}
pub type zend_array_71 = _zend_array_71;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_array_71 {
    pub pad0: [uint8_t; 12],
    pub nTableMask: uint32_t,
    pub arData: *mut Bucket_71,
    pub nNumUsed: uint32_t,
    pub nNumOfElements: uint32_t,
    pub nTableSize: uint32_t,
}
pub type Bucket_71 = _Bucket_71;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _Bucket_71 {
    pub val: zval_71,
    pub h: uint64_t,
    pub key: *mut zend_string_71,
}
pub type zend_string_71 = _zend_string_71;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_string_71 {
    pub pad0: [uint8_t; 16],
    pub len: size_t,
    pub val: [libc::c_char; 1],
}
pub type zval_71 = _zval_71;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zval_71 {
    pub value: zend_value_71,
    pub u1: C2RustUnnamed_20,
    pub u2: C2RustUnnamed_19,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_19 {
    pub next: uint32_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_20 {
    pub v: C2RustUnnamed_21,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_21 {
    pub type_0: uint8_t,
    pub pad0: [uint8_t; 3],
}
pub type zend_value_71 = _zend_value_71;
#[derive(Copy, Clone)]
#[repr(C)]
pub union _zend_value_71 {
    pub lval: libc::c_long,
    pub dval: libc::c_double,
    pub str_0: *mut zend_string_71,
    pub arr: *mut zend_array_71,
}
pub type zend_function_71 = _zend_function_71;
#[derive(Copy, Clone)]
#[repr(C)]
pub union _zend_function_71 {
    pub type_0: uint8_t,
    pub common: C2RustUnnamed_22,
    pub op_array: zend_op_array_71,
}
pub type zend_op_array_71 = _zend_op_array_71;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_op_array_71 {
    pub pad0: [uint8_t; 72],
    pub last_var: libc::c_int,
    pub pad1: [uint8_t; 4],
    pub vars: *mut *mut zend_string_71,
    pub pad2: [uint8_t; 32],
    pub filename: *mut zend_string_71,
    pub line_start: uint32_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_22 {
    pub pad0: [uint8_t; 8],
    pub function_name: *mut zend_string_71,
    pub scope: *mut zend_class_entry_71,
}
pub type zend_class_entry_71 = _zend_class_entry_71;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_class_entry_71 {
    pub pad0: [uint8_t; 8],
    pub name: *mut zend_string_71,
}
pub type zend_op_71 = _zend_op_71;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_op_71 {
    pub pad0: [uint8_t; 24],
    pub lineno: uint32_t,
}
pub type zend_executor_globals_71 = _zend_executor_globals_71;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _sapi_request_info_71 {
    pub pad0: [uint8_t; 8],
    pub query_string: *mut libc::c_char,
    pub cookie_data: *mut libc::c_char,
    pub pad1: [uint8_t; 8],
    pub path_translated: *mut libc::c_char,
    pub request_uri: *mut libc::c_char,
}
pub type sapi_request_info_71 = _sapi_request_info_71;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _sapi_globals_struct_71 {
    pub pad0: [uint8_t; 8],
    pub request_info: sapi_request_info_71,
    pub pad1: [uint8_t; 384],
    pub global_request_time: libc::c_double,
}
pub type sapi_globals_struct_71 = _sapi_globals_struct_71;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_alloc_globals_71 {
    pub mm_heap: *mut zend_mm_heap_71,
}
pub type zend_mm_heap_71 = _zend_mm_heap_71;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_mm_heap_71 {
    pub pad0: [uint8_t; 16],
    pub size: size_t,
    pub peak: size_t,
}
pub type zend_alloc_globals_71 = _zend_alloc_globals_71;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_executor_globals_72 {
    pub pad0: [uint8_t; 304],
    pub symbol_table: zend_array_72,
    pub pad1: [uint8_t; 140],
    pub current_execute_data: *mut zend_execute_data_72,
}
pub type zend_execute_data_72 = _zend_execute_data_72;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_execute_data_72 {
    pub opline: *mut zend_op_72,
    pub pad0: [uint8_t; 16],
    pub func: *mut zend_function_72,
    pub pad1: [uint8_t; 16],
    pub prev_execute_data: *mut zend_execute_data_72,
    pub symbol_table: *mut zend_array_72,
}
pub type zend_array_72 = _zend_array_72;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_array_72 {
    pub pad0: [uint8_t; 12],
    pub nTableMask: uint32_t,
    pub arData: *mut Bucket_72,
    pub nNumUsed: uint32_t,
    pub nNumOfElements: uint32_t,
    pub nTableSize: uint32_t,
}
pub type Bucket_72 = _Bucket_72;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _Bucket_72 {
    pub val: zval_72,
    pub h: uint64_t,
    pub key: *mut zend_string_72,
}
pub type zend_string_72 = _zend_string_72;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_string_72 {
    pub pad0: [uint8_t; 16],
    pub len: size_t,
    pub val: [libc::c_char; 1],
}
pub type zval_72 = _zval_72;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zval_72 {
    pub value: zend_value_72,
    pub u1: C2RustUnnamed_24,
    pub u2: C2RustUnnamed_23,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_23 {
    pub next: uint32_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_24 {
    pub v: C2RustUnnamed_25,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_25 {
    pub type_0: uint8_t,
    pub pad0: [uint8_t; 3],
}
pub type zend_value_72 = _zend_value_72;
#[derive(Copy, Clone)]
#[repr(C)]
pub union _zend_value_72 {
    pub lval: libc::c_long,
    pub dval: libc::c_double,
    pub str_0: *mut zend_string_72,
    pub arr: *mut zend_array_72,
}
pub type zend_function_72 = _zend_function_72;
#[derive(Copy, Clone)]
#[repr(C)]
pub union _zend_function_72 {
    pub type_0: uint8_t,
    pub common: C2RustUnnamed_26,
    pub op_array: zend_op_array_72,
}
pub type zend_op_array_72 = _zend_op_array_72;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_op_array_72 {
    pub pad0: [uint8_t; 72],
    pub last_var: libc::c_int,
    pub pad1: [uint8_t; 4],
    pub vars: *mut *mut zend_string_72,
    pub pad2: [uint8_t; 32],
    pub filename: *mut zend_string_72,
    pub line_start: uint32_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_26 {
    pub pad0: [uint8_t; 8],
    pub function_name: *mut zend_string_72,
    pub scope: *mut zend_class_entry_72,
}
pub type zend_class_entry_72 = _zend_class_entry_72;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_class_entry_72 {
    pub pad0: [uint8_t; 8],
    pub name: *mut zend_string_72,
}
pub type zend_op_72 = _zend_op_72;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_op_72 {
    pub pad0: [uint8_t; 24],
    pub lineno: uint32_t,
}
pub type zend_executor_globals_72 = _zend_executor_globals_72;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _sapi_request_info_72 {
    pub pad0: [uint8_t; 8],
    pub query_string: *mut libc::c_char,
    pub cookie_data: *mut libc::c_char,
    pub pad1: [uint8_t; 8],
    pub path_translated: *mut libc::c_char,
    pub request_uri: *mut libc::c_char,
}
pub type sapi_request_info_72 = _sapi_request_info_72;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _sapi_globals_struct_72 {
    pub pad0: [uint8_t; 8],
    pub request_info: sapi_request_info_72,
    pub pad1: [uint8_t; 384],
    pub global_request_time: libc::c_double,
}
pub type sapi_globals_struct_72 = _sapi_globals_struct_72;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_alloc_globals_72 {
    pub mm_heap: *mut zend_mm_heap_72,
}
pub type zend_mm_heap_72 = _zend_mm_heap_72;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_mm_heap_72 {
    pub pad0: [uint8_t; 16],
    pub size: size_t,
    pub peak: size_t,
}
pub type zend_alloc_globals_72 = _zend_alloc_globals_72;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_executor_globals_73 {
    pub pad0: [uint8_t; 304],
    pub symbol_table: zend_array_73,
    pub pad1: [uint8_t; 148],
    pub current_execute_data: *mut zend_execute_data_73,
}
pub type zend_execute_data_73 = _zend_execute_data_73;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_execute_data_73 {
    pub opline: *mut zend_op_73,
    pub pad0: [uint8_t; 16],
    pub func: *mut zend_function_73,
    pub pad1: [uint8_t; 16],
    pub prev_execute_data: *mut zend_execute_data_73,
    pub symbol_table: *mut zend_array_73,
}
pub type zend_array_73 = _zend_array_73;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_array_73 {
    pub pad0: [uint8_t; 12],
    pub nTableMask: uint32_t,
    pub arData: *mut Bucket_73,
    pub nNumUsed: uint32_t,
    pub nNumOfElements: uint32_t,
    pub nTableSize: uint32_t,
}
pub type Bucket_73 = _Bucket_73;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _Bucket_73 {
    pub val: zval_73,
    pub h: uint64_t,
    pub key: *mut zend_string_73,
}
pub type zend_string_73 = _zend_string_73;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_string_73 {
    pub pad0: [uint8_t; 16],
    pub len: size_t,
    pub val: [libc::c_char; 1],
}
pub type zval_73 = _zval_73;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zval_73 {
    pub value: zend_value_73,
    pub u1: C2RustUnnamed_28,
    pub u2: C2RustUnnamed_27,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_27 {
    pub next: uint32_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_28 {
    pub v: C2RustUnnamed_29,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_29 {
    pub type_0: uint8_t,
    pub pad0: [uint8_t; 3],
}
pub type zend_value_73 = _zend_value_73;
#[derive(Copy, Clone)]
#[repr(C)]
pub union _zend_value_73 {
    pub lval: libc::c_long,
    pub dval: libc::c_double,
    pub str_0: *mut zend_string_73,
    pub arr: *mut zend_array_73,
}
pub type zend_function_73 = _zend_function_73;
#[derive(Copy, Clone)]
#[repr(C)]
pub union _zend_function_73 {
    pub type_0: uint8_t,
    pub common: C2RustUnnamed_30,
    pub op_array: zend_op_array_73,
}
pub type zend_op_array_73 = _zend_op_array_73;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_op_array_73 {
    pub pad0: [uint8_t; 52],
    pub last_var: libc::c_int,
    pub pad1: [uint8_t; 32],
    pub vars: *mut *mut zend_string_73,
    pub pad2: [uint8_t; 32],
    pub filename: *mut zend_string_73,
    pub line_start: uint32_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_30 {
    pub pad0: [uint8_t; 8],
    pub function_name: *mut zend_string_73,
    pub scope: *mut zend_class_entry_73,
}
pub type zend_class_entry_73 = _zend_class_entry_73;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_class_entry_73 {
    pub pad0: [uint8_t; 8],
    pub name: *mut zend_string_73,
}
pub type zend_op_73 = _zend_op_73;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_op_73 {
    pub pad0: [uint8_t; 24],
    pub lineno: uint32_t,
}
pub type zend_executor_globals_73 = _zend_executor_globals_73;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _sapi_request_info_73 {
    pub pad0: [uint8_t; 8],
    pub query_string: *mut libc::c_char,
    pub cookie_data: *mut libc::c_char,
    pub pad1: [uint8_t; 8],
    pub path_translated: *mut libc::c_char,
    pub request_uri: *mut libc::c_char,
}
pub type sapi_request_info_73 = _sapi_request_info_73;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _sapi_globals_struct_73 {
    pub pad0: [uint8_t; 8],
    pub request_info: sapi_request_info_73,
    pub pad1: [uint8_t; 384],
    pub global_request_time: libc::c_double,
}
pub type sapi_globals_struct_73 = _sapi_globals_struct_73;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_alloc_globals_73 {
    pub mm_heap: *mut zend_mm_heap_73,
}
pub type zend_mm_heap_73 = _zend_mm_heap_73;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_mm_heap_73 {
    pub pad0: [uint8_t; 16],
    pub size: size_t,
    pub peak: size_t,
}
pub type zend_alloc_globals_73 = _zend_alloc_globals_73;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_executor_globals_74 {
    pub pad0: [uint8_t; 304],
    pub symbol_table: zend_array_74,
    pub pad1: [uint8_t; 148],
    pub current_execute_data: *mut zend_execute_data_74,
}
pub type zend_execute_data_74 = _zend_execute_data_74;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_execute_data_74 {
    pub opline: *mut zend_op_74,
    pub pad0: [uint8_t; 16],
    pub func: *mut zend_function_74,
    pub pad1: [uint8_t; 16],
    pub prev_execute_data: *mut zend_execute_data_74,
    pub symbol_table: *mut zend_array_74,
}
pub type zend_array_74 = _zend_array_74;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_array_74 {
    pub pad0: [uint8_t; 12],
    pub nTableMask: uint32_t,
    pub arData: *mut Bucket_74,
    pub nNumUsed: uint32_t,
    pub nNumOfElements: uint32_t,
    pub nTableSize: uint32_t,
}
pub type Bucket_74 = _Bucket_74;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _Bucket_74 {
    pub val: zval_74,
    pub h: uint64_t,
    pub key: *mut zend_string_74,
}
pub type zend_string_74 = _zend_string_74;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_string_74 {
    pub pad0: [uint8_t; 16],
    pub len: size_t,
    pub val: [libc::c_char; 1],
}
pub type zval_74 = _zval_74;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zval_74 {
    pub value: zend_value_74,
    pub u1: C2RustUnnamed_32,
    pub u2: C2RustUnnamed_31,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_31 {
    pub next: uint32_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_32 {
    pub v: C2RustUnnamed_33,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_33 {
    pub type_0: uint8_t,
    pub pad0: [uint8_t; 3],
}
pub type zend_value_74 = _zend_value_74;
#[derive(Copy, Clone)]
#[repr(C)]
pub union _zend_value_74 {
    pub lval: libc::c_long,
    pub dval: libc::c_double,
    pub str_0: *mut zend_string_74,
    pub arr: *mut zend_array_74,
}
pub type zend_function_74 = _zend_function_74;
#[derive(Copy, Clone)]
#[repr(C)]
pub union _zend_function_74 {
    pub type_0: uint8_t,
    pub common: C2RustUnnamed_34,
    pub op_array: zend_op_array_74,
}
pub type zend_op_array_74 = _zend_op_array_74;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_op_array_74 {
    pub pad0: [uint8_t; 52],
    pub last_var: libc::c_int,
    pub pad1: [uint8_t; 40],
    pub vars: *mut *mut zend_string_74,
    pub pad2: [uint8_t; 32],
    pub filename: *mut zend_string_74,
    pub line_start: uint32_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_34 {
    pub pad0: [uint8_t; 8],
    pub function_name: *mut zend_string_74,
    pub scope: *mut zend_class_entry_74,
}
pub type zend_class_entry_74 = _zend_class_entry_74;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_class_entry_74 {
    pub pad0: [uint8_t; 8],
    pub name: *mut zend_string_74,
}
pub type zend_op_74 = _zend_op_74;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_op_74 {
    pub pad0: [uint8_t; 24],
    pub lineno: uint32_t,
}
pub type zend_executor_globals_74 = _zend_executor_globals_74;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _sapi_request_info_74 {
    pub pad0: [uint8_t; 8],
    pub query_string: *mut libc::c_char,
    pub cookie_data: *mut libc::c_char,
    pub pad1: [uint8_t; 8],
    pub path_translated: *mut libc::c_char,
    pub request_uri: *mut libc::c_char,
}
pub type sapi_request_info_74 = _sapi_request_info_74;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _sapi_globals_struct_74 {
    pub pad0: [uint8_t; 8],
    pub request_info: sapi_request_info_74,
    pub pad1: [uint8_t; 384],
    pub global_request_time: libc::c_double,
}
pub type sapi_globals_struct_74 = _sapi_globals_struct_74;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_alloc_globals_74 {
    pub mm_heap: *mut zend_mm_heap_74,
}
pub type zend_mm_heap_74 = _zend_mm_heap_74;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_mm_heap_74 {
    pub pad0: [uint8_t; 16],
    pub size: size_t,
    pub peak: size_t,
}
pub type zend_alloc_globals_74 = _zend_alloc_globals_74;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_executor_globals_80 {
    pub pad0: [uint8_t; 304],
    pub symbol_table: zend_array_80,
    pub pad1: [uint8_t; 148],
    pub current_execute_data: *mut zend_execute_data_80,
}
pub type zend_execute_data_80 = _zend_execute_data_80;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_execute_data_80 {
    pub opline: *mut zend_op_80,
    pub pad0: [uint8_t; 16],
    pub func: *mut zend_function_80,
    pub pad1: [uint8_t; 16],
    pub prev_execute_data: *mut zend_execute_data_80,
    pub symbol_table: *mut zend_array_80,
}
pub type zend_array_80 = _zend_array_80;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_array_80 {
    pub pad0: [uint8_t; 12],
    pub nTableMask: uint32_t,
    pub arData: *mut Bucket_80,
    pub nNumUsed: uint32_t,
    pub nNumOfElements: uint32_t,
    pub nTableSize: uint32_t,
}
pub type Bucket_80 = _Bucket_80;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _Bucket_80 {
    pub val: zval_80,
    pub h: uint64_t,
    pub key: *mut zend_string_80,
}
pub type zend_string_80 = _zend_string_80;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_string_80 {
    pub pad0: [uint8_t; 16],
    pub len: size_t,
    pub val: [libc::c_char; 1],
}
pub type zval_80 = _zval_80;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zval_80 {
    pub value: zend_value_80,
    pub u1: C2RustUnnamed_36,
    pub u2: C2RustUnnamed_35,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_35 {
    pub next: uint32_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_36 {
    pub v: C2RustUnnamed_37,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_37 {
    pub type_0: uint8_t,
    pub pad0: [uint8_t; 3],
}
pub type zend_value_80 = _zend_value_80;
#[derive(Copy, Clone)]
#[repr(C)]
pub union _zend_value_80 {
    pub lval: libc::c_long,
    pub dval: libc::c_double,
    pub str_0: *mut zend_string_80,
    pub arr: *mut zend_array_80,
}
pub type zend_function_80 = _zend_function_80;
#[derive(Copy, Clone)]
#[repr(C)]
pub union _zend_function_80 {
    pub type_0: uint8_t,
    pub common: C2RustUnnamed_38,
    pub op_array: zend_op_array_80,
}
pub type zend_op_array_80 = _zend_op_array_80;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_op_array_80 {
    pub pad0: [uint8_t; 60],
    pub last_var: libc::c_int,
    pub pad1: [uint8_t; 40],
    pub vars: *mut *mut zend_string_80,
    pub pad2: [uint8_t; 32],
    pub filename: *mut zend_string_80,
    pub line_start: uint32_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_38 {
    pub pad0: [uint8_t; 8],
    pub function_name: *mut zend_string_80,
    pub scope: *mut zend_class_entry_80,
}
pub type zend_class_entry_80 = _zend_class_entry_80;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_class_entry_80 {
    pub pad0: [uint8_t; 8],
    pub name: *mut zend_string_80,
}
pub type zend_op_80 = _zend_op_80;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_op_80 {
    pub pad0: [uint8_t; 24],
    pub lineno: uint32_t,
}
pub type zend_executor_globals_80 = _zend_executor_globals_80;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _sapi_request_info_80 {
    pub pad0: [uint8_t; 8],
    pub query_string: *mut libc::c_char,
    pub cookie_data: *mut libc::c_char,
    pub pad1: [uint8_t; 8],
    pub path_translated: *mut libc::c_char,
    pub request_uri: *mut libc::c_char,
}
pub type sapi_request_info_80 = _sapi_request_info_80;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _sapi_globals_struct_80 {
    pub pad0: [uint8_t; 8],
    pub request_info: sapi_request_info_80,
    pub pad1: [uint8_t; 384],
    pub global_request_time: libc::c_double,
}
pub type sapi_globals_struct_80 = _sapi_globals_struct_80;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_alloc_globals_80 {
    pub mm_heap: *mut zend_mm_heap_80,
}
pub type zend_mm_heap_80 = _zend_mm_heap_80;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_mm_heap_80 {
    pub pad0: [uint8_t; 16],
    pub size: size_t,
    pub peak: size_t,
}
pub type zend_alloc_globals_80 = _zend_alloc_globals_80;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_executor_globals_81 {
    pub pad0: [uint8_t; 304],
    pub symbol_table: zend_array_81,
    pub pad1: [uint8_t; 148],
    pub current_execute_data: *mut zend_execute_data_81,
}
pub type zend_execute_data_81 = _zend_execute_data_81;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_execute_data_81 {
    pub opline: *mut zend_op_81,
    pub pad0: [uint8_t; 16],
    pub func: *mut zend_function_81,
    pub pad1: [uint8_t; 16],
    pub prev_execute_data: *mut zend_execute_data_81,
    pub symbol_table: *mut zend_array_81,
}
pub type zend_array_81 = _zend_array_81;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_array_81 {
    pub pad0: [uint8_t; 12],
    pub nTableMask: uint32_t,
    pub arData: *mut Bucket_81,
    pub nNumUsed: uint32_t,
    pub nNumOfElements: uint32_t,
    pub nTableSize: uint32_t,
}
pub type Bucket_81 = _Bucket_81;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _Bucket_81 {
    pub val: zval_81,
    pub h: uint64_t,
    pub key: *mut zend_string_81,
}
pub type zend_string_81 = _zend_string_81;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_string_81 {
    pub pad0: [uint8_t; 16],
    pub len: size_t,
    pub val: [libc::c_char; 1],
}
pub type zval_81 = _zval_81;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zval_81 {
    pub value: zend_value_81,
    pub u1: C2RustUnnamed_40,
    pub u2: C2RustUnnamed_39,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_39 {
    pub next: uint32_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_40 {
    pub v: C2RustUnnamed_41,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_41 {
    pub type_0: uint8_t,
    pub pad0: [uint8_t; 3],
}
pub type zend_value_81 = _zend_value_81;
#[derive(Copy, Clone)]
#[repr(C)]
pub union _zend_value_81 {
    pub lval: libc::c_long,
    pub dval: libc::c_double,
    pub str_0: *mut zend_string_81,
    pub arr: *mut zend_array_81,
}
pub type zend_function_81 = _zend_function_81;
#[derive(Copy, Clone)]
#[repr(C)]
pub union _zend_function_81 {
    pub type_0: uint8_t,
    pub common: C2RustUnnamed_42,
    pub op_array: zend_op_array_81,
}
pub type zend_op_array_81 = _zend_op_array_81;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_op_array_81 {
    pub pad0: [uint8_t; 60],
    pub last_var: libc::c_int,
    pub pad1: [uint8_t; 40],
    pub vars: *mut *mut zend_string_81,
    pub pad2: [uint8_t; 32],
    pub filename: *mut zend_string_81,
    pub line_start: uint32_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_42 {
    pub pad0: [uint8_t; 8],
    pub function_name: *mut zend_string_81,
    pub scope: *mut zend_class_entry_81,
}
pub type zend_class_entry_81 = _zend_class_entry_81;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_class_entry_81 {
    pub pad0: [uint8_t; 8],
    pub name: *mut zend_string_81,
}
pub type zend_op_81 = _zend_op_81;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_op_81 {
    pub pad0: [uint8_t; 24],
    pub lineno: uint32_t,
}
pub type zend_executor_globals_81 = _zend_executor_globals_81;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _sapi_request_info_81 {
    pub pad0: [uint8_t; 8],
    pub query_string: *mut libc::c_char,
    pub cookie_data: *mut libc::c_char,
    pub pad1: [uint8_t; 8],
    pub path_translated: *mut libc::c_char,
    pub request_uri: *mut libc::c_char,
}
pub type sapi_request_info_81 = _sapi_request_info_81;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _sapi_globals_struct_81 {
    pub pad0: [uint8_t; 8],
    pub request_info: sapi_request_info_81,
    pub pad1: [uint8_t; 384],
    pub global_request_time: libc::c_double,
}
pub type sapi_globals_struct_81 = _sapi_globals_struct_81;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_alloc_globals_81 {
    pub mm_heap: *mut zend_mm_heap_81,
}
pub type zend_mm_heap_81 = _zend_mm_heap_81;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_mm_heap_81 {
    pub pad0: [uint8_t; 16],
    pub size: size_t,
    pub peak: size_t,
}
pub type zend_alloc_globals_81 = _zend_alloc_globals_81;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct UT_hash_bucket {
    pub hh_head: *mut UT_hash_handle,
    pub count: libc::c_uint,
    pub expand_mult: libc::c_uint,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct UT_hash_handle {
    pub tbl: *mut UT_hash_table,
    pub prev: *mut libc::c_void,
    pub next: *mut libc::c_void,
    pub hh_prev: *mut UT_hash_handle,
    pub hh_next: *mut UT_hash_handle,
    pub key: *mut libc::c_void,
    pub keylen: libc::c_uint,
    pub hashv: libc::c_uint,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct UT_hash_table {
    pub buckets: *mut UT_hash_bucket,
    pub num_buckets: libc::c_uint,
    pub log2_num_buckets: libc::c_uint,
    pub num_items: libc::c_uint,
    pub tail: *mut UT_hash_handle,
    pub hho: ptrdiff_t,
    pub ideal_chain_maxlen: libc::c_uint,
    pub nonideal_items: libc::c_uint,
    pub ineff_expands: libc::c_uint,
    pub noexpand: libc::c_uint,
    pub signature: uint32_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct varpeek_var_s {
    pub name: [libc::c_char; 256],
    pub hh: UT_hash_handle,
}
pub type varpeek_var_t = varpeek_var_s;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct varpeek_entry_s {
    pub filename_lineno: [libc::c_char; 256],
    pub varmap: *mut varpeek_var_t,
    pub hh: UT_hash_handle,
}
pub type varpeek_entry_t = varpeek_entry_s;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct glopeek_entry_s {
    pub key: [libc::c_char; 256],
    pub gloname: [libc::c_char; 256],
    pub varname: [libc::c_char; 256],
    pub hh: UT_hash_handle,
}
pub type glopeek_entry_t = glopeek_entry_s;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct trace_loc_s {
    pub func: [libc::c_char; 256],
    pub class: [libc::c_char; 256],
    pub file: [libc::c_char; 256],
    pub func_len: size_t,
    pub class_len: size_t,
    pub file_len: size_t,
    pub lineno: libc::c_int,
}
pub type trace_loc_t = trace_loc_s;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct trace_frame_s {
    pub loc: trace_loc_t,
    pub depth: libc::c_int,
}
pub type trace_frame_t = trace_frame_s;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct trace_request_s {
    pub uri: [libc::c_char; 256],
    pub path: [libc::c_char; 256],
    pub qstring: [libc::c_char; 256],
    pub cookie: [libc::c_char; 256],
    pub ts: libc::c_double,
}
pub type trace_request_t = trace_request_s;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct trace_mem_s {
    pub size: size_t,
    pub peak: size_t,
}
pub type trace_mem_t = trace_mem_s;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct trace_varpeek_s {
    pub entry: *mut varpeek_entry_t,
    pub var: *mut varpeek_var_t,
    pub zval_str: *mut libc::c_char,
}
pub type trace_varpeek_t = trace_varpeek_s;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct trace_glopeek_s {
    pub gentry: *mut glopeek_entry_t,
    pub zval_str: *mut libc::c_char,
}
pub type trace_glopeek_t = trace_glopeek_s;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct trace_target_s {
    pub pid: pid_t,
    pub executor_globals_addr: uint64_t,
    pub sapi_globals_addr: uint64_t,
    pub alloc_globals_addr: uint64_t,
    pub basic_functions_module_addr: uint64_t,
}
pub type trace_target_t = trace_target_s;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct trace_context_s {
    pub target: trace_target_t,
    pub event: C2RustUnnamed_43,
    pub event_udata: *mut libc::c_void,
    pub event_handler: Option::<
        unsafe extern "C" fn(*mut trace_context_s, libc::c_int) -> libc::c_int,
    >,
    pub buf: [libc::c_char; 256],
    pub buf_len: size_t,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_43 {
    pub frame: trace_frame_t,
    pub request: trace_request_t,
    pub mem: trace_mem_t,
    pub varpeek: trace_varpeek_t,
    pub glopeek: trace_glopeek_t,
}
pub type trace_context_t = trace_context_s;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct addr_memo_s {
    pub php_bin_path: [libc::c_char; 256],
    pub php_bin_path_root: [libc::c_char; 256],
    pub php_base_addr: uint64_t,
}
pub type addr_memo_t = addr_memo_s;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct _zend_module_entry {
    pub pad0: [uint8_t; 88],
    pub version: *const libc::c_char,
}
#[inline]
unsafe extern "C" fn atoi(mut __nptr: *const libc::c_char) -> libc::c_int {
    return strtol(
        __nptr,
        0 as *mut libc::c_void as *mut *mut libc::c_char,
        10 as libc::c_int,
    ) as libc::c_int;
}
#[inline]
unsafe extern "C" fn fstat(
    mut __fd: libc::c_int,
    mut __statbuf: *mut stat,
) -> libc::c_int {
    return __fxstat(1 as libc::c_int, __fd, __statbuf);
}
pub unsafe extern "C" fn tb_init() -> libc::c_int {
    return tb_init_file(b"/dev/tty\0" as *const u8 as *const libc::c_char);
}
pub unsafe extern "C" fn tb_init_file(mut path: *const libc::c_char) -> libc::c_int {
    if global.initialized != 0 {
        return -(3 as libc::c_int);
    }
    let mut ttyfd: libc::c_int = open(path, 0o2 as libc::c_int);
    if ttyfd < 0 as libc::c_int {
        global.last_errno = *__errno_location();
        return -(4 as libc::c_int);
    }
    global.ttyfd_open = 1 as libc::c_int;
    return tb_init_fd(ttyfd);
}
pub unsafe extern "C" fn tb_init_fd(mut ttyfd: libc::c_int) -> libc::c_int {
    return tb_init_rwfd(ttyfd, ttyfd);
}
pub unsafe extern "C" fn tb_init_rwfd(
    mut rfd: libc::c_int,
    mut wfd: libc::c_int,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    tb_reset();
    global
        .ttyfd = if rfd == wfd && isatty(rfd) != 0 { rfd } else { -(1 as libc::c_int) };
    global.rfd = rfd;
    global.wfd = wfd;
    rv = init_term_attrs();
    if !(rv != 0 as libc::c_int) {
        rv = init_term_caps();
        if !(rv != 0 as libc::c_int) {
            rv = init_cap_trie();
            if !(rv != 0 as libc::c_int) {
                rv = init_resize_handler();
                if !(rv != 0 as libc::c_int) {
                    rv = send_init_escape_codes();
                    if !(rv != 0 as libc::c_int) {
                        rv = send_clear();
                        if !(rv != 0 as libc::c_int) {
                            rv = update_term_size();
                            if !(rv != 0 as libc::c_int) {
                                rv = init_cellbuf();
                                if !(rv != 0 as libc::c_int) {
                                    global.initialized = 1 as libc::c_int;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if rv != 0 as libc::c_int {
        tb_deinit();
    }
    return rv;
}
unsafe extern "C" fn tb_deinit() -> libc::c_int {
    if !(global.caps[0 as libc::c_int as usize]).is_null()
        && global.wfd >= 0 as libc::c_int
    {
        bytebuf_puts(&mut global.out, global.caps[25 as libc::c_int as usize]);
        bytebuf_puts(&mut global.out, global.caps[28 as libc::c_int as usize]);
        bytebuf_puts(&mut global.out, global.caps[27 as libc::c_int as usize]);
        bytebuf_puts(&mut global.out, global.caps[24 as libc::c_int as usize]);
        bytebuf_puts(&mut global.out, global.caps[35 as libc::c_int as usize]);
        bytebuf_puts(
            &mut global.out,
            b"\x1B[?1006l\x1B[?1015l\x1B[?1002l\x1B[?1000l\0" as *const u8
                as *const libc::c_char,
        );
        bytebuf_flush(&mut global.out, global.wfd);
    }
    if global.ttyfd >= 0 as libc::c_int {
        if global.has_orig_tios != 0 {
            tcsetattr(global.ttyfd, 2 as libc::c_int, &mut global.orig_tios);
        }
        if global.ttyfd_open != 0 {
            close(global.ttyfd);
            global.ttyfd_open = 0 as libc::c_int;
        }
    }
    let mut sa: sigaction = sigaction {
        __sigaction_handler: C2RustUnnamed_9 {
            sa_handler: None,
        },
        sa_mask: __sigset_t { __val: [0; 16] },
        sa_flags: 0,
        sa_restorer: None,
    };
    memset(
        &mut sa as *mut sigaction as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<sigaction>() as libc::c_ulong,
    );
    sa.__sigaction_handler.sa_handler = None;
    sigaction(28 as libc::c_int, &mut sa, 0 as *mut sigaction);
    if global.resize_pipefd[0 as libc::c_int as usize] >= 0 as libc::c_int {
        close(global.resize_pipefd[0 as libc::c_int as usize]);
    }
    if global.resize_pipefd[1 as libc::c_int as usize] >= 0 as libc::c_int {
        close(global.resize_pipefd[1 as libc::c_int as usize]);
    }
    cellbuf_free(&mut global.back);
    cellbuf_free(&mut global.front);
    bytebuf_free(&mut global.in_0);
    bytebuf_free(&mut global.out);
    if !(global.terminfo).is_null() {
        free(global.terminfo as *mut libc::c_void);
    }
    cap_trie_deinit(&mut global.cap_trie);
    tb_reset();
    return 0 as libc::c_int;
}
unsafe extern "C" fn tb_reset() -> libc::c_int {
    let mut ttyfd_open: libc::c_int = global.ttyfd_open;
    memset(
        &mut global as *mut tb_global_t as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<tb_global_t>() as libc::c_ulong,
    );
    global.ttyfd = -(1 as libc::c_int);
    global.rfd = -(1 as libc::c_int);
    global.wfd = -(1 as libc::c_int);
    global.ttyfd_open = ttyfd_open;
    global.resize_pipefd[0 as libc::c_int as usize] = -(1 as libc::c_int);
    global.resize_pipefd[1 as libc::c_int as usize] = -(1 as libc::c_int);
    global.width = -(1 as libc::c_int);
    global.height = -(1 as libc::c_int);
    global.cursor_x = -(1 as libc::c_int);
    global.cursor_y = -(1 as libc::c_int);
    global.last_x = -(1 as libc::c_int);
    global.last_y = -(1 as libc::c_int);
    global.fg = 0 as libc::c_int as uintattr_t;
    global.bg = 0 as libc::c_int as uintattr_t;
    global.last_fg = !(global.fg as libc::c_int) as uintattr_t;
    global.last_bg = !(global.bg as libc::c_int) as uintattr_t;
    global.input_mode = 1 as libc::c_int;
    global.output_mode = 1 as libc::c_int;
    return 0 as libc::c_int;
}
static mut global: tb_global_t = {
    let mut init = tb_global_t {
        ttyfd: 0 as libc::c_int,
        rfd: 0,
        wfd: 0,
        ttyfd_open: 0,
        resize_pipefd: [0; 2],
        width: 0,
        height: 0,
        cursor_x: 0,
        cursor_y: 0,
        last_x: 0,
        last_y: 0,
        fg: 0,
        bg: 0,
        last_fg: 0,
        last_bg: 0,
        input_mode: 0,
        output_mode: 0,
        terminfo: 0 as *const libc::c_char as *mut libc::c_char,
        nterminfo: 0,
        caps: [0 as *const libc::c_char; 38],
        cap_trie: cap_trie_t {
            c: 0,
            children: 0 as *const cap_trie_t as *mut cap_trie_t,
            nchildren: 0,
            is_leaf: 0,
            key: 0,
            mod_0: 0,
        },
        in_0: bytebuf_t {
            buf: 0 as *const libc::c_char as *mut libc::c_char,
            len: 0,
            cap: 0,
        },
        out: bytebuf_t {
            buf: 0 as *const libc::c_char as *mut libc::c_char,
            len: 0,
            cap: 0,
        },
        back: cellbuf_t {
            width: 0,
            height: 0,
            cells: 0 as *const tb_cell as *mut tb_cell,
        },
        front: cellbuf_t {
            width: 0,
            height: 0,
            cells: 0 as *const tb_cell as *mut tb_cell,
        },
        orig_tios: termios {
            c_iflag: 0,
            c_oflag: 0,
            c_cflag: 0,
            c_lflag: 0,
            c_line: 0,
            c_cc: [0; 32],
            c_ispeed: 0,
            c_ospeed: 0,
        },
        has_orig_tios: 0,
        last_errno: 0,
        initialized: 0,
        fn_extract_esc_pre: None,
        fn_extract_esc_post: None,
        errbuf: [0; 1024],
    };
    init
};
unsafe extern "C" fn cap_trie_deinit(mut node: *mut cap_trie_t) -> libc::c_int {
    let mut j: size_t = 0;
    j = 0 as libc::c_int as size_t;
    while j < (*node).nchildren {
        cap_trie_deinit(&mut *((*node).children).offset(j as isize));
        j = j.wrapping_add(1);
        j;
    }
    if !((*node).children).is_null() {
        free((*node).children as *mut libc::c_void);
    }
    memset(
        node as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<cap_trie_t>() as libc::c_ulong,
    );
    return 0 as libc::c_int;
}
unsafe extern "C" fn bytebuf_free(mut b: *mut bytebuf_t) -> libc::c_int {
    if !((*b).buf).is_null() {
        free((*b).buf as *mut libc::c_void);
    }
    memset(
        b as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<bytebuf_t>() as libc::c_ulong,
    );
    return 0 as libc::c_int;
}
unsafe extern "C" fn cellbuf_free(mut c: *mut cellbuf_t) -> libc::c_int {
    if !((*c).cells).is_null() {
        let mut i: libc::c_int = 0;
        i = 0 as libc::c_int;
        while i < (*c).width * (*c).height {
            cell_free(&mut *((*c).cells).offset(i as isize));
            i += 1;
            i;
        }
        free((*c).cells as *mut libc::c_void);
    }
    memset(
        c as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<cellbuf_t>() as libc::c_ulong,
    );
    return 0 as libc::c_int;
}
unsafe extern "C" fn cell_free(mut cell: *mut tb_cell) -> libc::c_int {
    memset(
        cell as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<tb_cell>() as libc::c_ulong,
    );
    return 0 as libc::c_int;
}
unsafe extern "C" fn bytebuf_flush(
    mut b: *mut bytebuf_t,
    mut fd: libc::c_int,
) -> libc::c_int {
    if (*b).len <= 0 as libc::c_int as libc::c_ulong {
        return 0 as libc::c_int;
    }
    let mut write_rv: ssize_t = write(fd, (*b).buf as *const libc::c_void, (*b).len);
    if write_rv < 0 as libc::c_int as libc::c_long || write_rv as size_t != (*b).len {
        global.last_errno = *__errno_location();
        return -(1 as libc::c_int);
    }
    (*b).len = 0 as libc::c_int as size_t;
    return 0 as libc::c_int;
}
unsafe extern "C" fn bytebuf_puts(
    mut b: *mut bytebuf_t,
    mut str: *const libc::c_char,
) -> libc::c_int {
    if str.is_null() || strlen(str) <= 0 as libc::c_int as libc::c_ulong {
        return 0 as libc::c_int;
    }
    return bytebuf_nputs(b, str, strlen(str));
}
unsafe extern "C" fn bytebuf_nputs(
    mut b: *mut bytebuf_t,
    mut str: *const libc::c_char,
    mut nstr: size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    rv = bytebuf_reserve(
        b,
        ((*b).len).wrapping_add(nstr).wrapping_add(1 as libc::c_int as libc::c_ulong),
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    memcpy(
        ((*b).buf).offset((*b).len as isize) as *mut libc::c_void,
        str as *const libc::c_void,
        nstr,
    );
    (*b).len = ((*b).len as libc::c_ulong).wrapping_add(nstr) as size_t as size_t;
    *((*b).buf).offset((*b).len as isize) = '\0' as i32 as libc::c_char;
    return 0 as libc::c_int;
}
unsafe extern "C" fn bytebuf_reserve(
    mut b: *mut bytebuf_t,
    mut sz: size_t,
) -> libc::c_int {
    if (*b).cap >= sz {
        return 0 as libc::c_int;
    }
    let mut newcap: size_t = if (*b).cap > 0 as libc::c_int as libc::c_ulong {
        (*b).cap
    } else {
        1 as libc::c_int as libc::c_ulong
    };
    while newcap < sz {
        newcap = (newcap as libc::c_ulong)
            .wrapping_mul(2 as libc::c_int as libc::c_ulong) as size_t as size_t;
    }
    let mut newbuf: *mut libc::c_char = 0 as *mut libc::c_char;
    if !((*b).buf).is_null() {
        newbuf = realloc((*b).buf as *mut libc::c_void, newcap) as *mut libc::c_char;
    } else {
        newbuf = malloc(newcap) as *mut libc::c_char;
    }
    if newbuf.is_null() {
        return -(5 as libc::c_int);
    }
    (*b).buf = newbuf;
    (*b).cap = newcap;
    return 0 as libc::c_int;
}
unsafe extern "C" fn init_cellbuf() -> libc::c_int {
    let mut rv: libc::c_int = 0;
    rv = cellbuf_init(&mut global.back, global.width, global.height);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = cellbuf_init(&mut global.front, global.width, global.height);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = cellbuf_clear(&mut global.back);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = cellbuf_clear(&mut global.front);
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn cellbuf_clear(mut c: *mut cellbuf_t) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut i: libc::c_int = 0;
    let mut space: uint32_t = ' ' as i32 as uint32_t;
    i = 0 as libc::c_int;
    while i < (*c).width * (*c).height {
        rv = cell_set(
            &mut *((*c).cells).offset(i as isize),
            &mut space,
            1 as libc::c_int as size_t,
            global.fg,
            global.bg,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        i += 1;
        i;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn cell_set(
    mut cell: *mut tb_cell,
    mut ch: *mut uint32_t,
    mut nch: size_t,
    mut fg: uintattr_t,
    mut bg: uintattr_t,
) -> libc::c_int {
    (*cell).ch = if !ch.is_null() { *ch } else { 0 as libc::c_int as libc::c_uint };
    (*cell).fg = fg;
    (*cell).bg = bg;
    return 0 as libc::c_int;
}
unsafe extern "C" fn cell_reserve_ech(
    mut cell: *mut tb_cell,
    mut n: size_t,
) -> libc::c_int {
    return -(1 as libc::c_int);
}
unsafe extern "C" fn cellbuf_init(
    mut c: *mut cellbuf_t,
    mut w: libc::c_int,
    mut h: libc::c_int,
) -> libc::c_int {
    (*c)
        .cells = malloc(
        (::std::mem::size_of::<tb_cell>() as libc::c_ulong)
            .wrapping_mul(w as libc::c_ulong)
            .wrapping_mul(h as libc::c_ulong),
    ) as *mut tb_cell;
    if ((*c).cells).is_null() {
        return -(5 as libc::c_int);
    }
    memset(
        (*c).cells as *mut libc::c_void,
        0 as libc::c_int,
        (::std::mem::size_of::<tb_cell>() as libc::c_ulong)
            .wrapping_mul(w as libc::c_ulong)
            .wrapping_mul(h as libc::c_ulong),
    );
    (*c).width = w;
    (*c).height = h;
    return 0 as libc::c_int;
}
unsafe extern "C" fn update_term_size() -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut ioctl_errno: libc::c_int = 0;
    if global.ttyfd < 0 as libc::c_int {
        return 0 as libc::c_int;
    }
    let mut sz: winsize = winsize {
        ws_row: 0,
        ws_col: 0,
        ws_xpixel: 0,
        ws_ypixel: 0,
    };
    memset(
        &mut sz as *mut winsize as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<winsize>() as libc::c_ulong,
    );
    if ioctl(
        global.ttyfd,
        0x5413 as libc::c_int as libc::c_ulong,
        &mut sz as *mut winsize,
    ) == 0 as libc::c_int
    {
        global.width = sz.ws_col as libc::c_int;
        global.height = sz.ws_row as libc::c_int;
        return 0 as libc::c_int;
    }
    ioctl_errno = *__errno_location();
    rv = update_term_size_via_esc();
    if rv == 0 as libc::c_int {
        return rv;
    }
    global.last_errno = ioctl_errno;
    return -(11 as libc::c_int);
}
unsafe extern "C" fn update_term_size_via_esc() -> libc::c_int {
    let mut move_and_report: [libc::c_char; 17] = *::std::mem::transmute::<
        &[u8; 17],
        &mut [libc::c_char; 17],
    >(b"\x1B[9999;9999H\x1B[6n\0");
    let mut write_rv: ssize_t = write(
        global.wfd,
        move_and_report.as_mut_ptr() as *const libc::c_void,
        strlen(move_and_report.as_mut_ptr()),
    );
    if write_rv != strlen(move_and_report.as_mut_ptr()) as ssize_t {
        return -(18 as libc::c_int);
    }
    let mut fds: fd_set = fd_set { fds_bits: [0; 16] };
    let mut __d0: libc::c_int = 0;
    let mut __d1: libc::c_int = 0;
    let fresh0 = &mut __d0;
    let fresh1;
    let fresh2 = (::std::mem::size_of::<fd_set>() as libc::c_ulong)
        .wrapping_div(::std::mem::size_of::<__fd_mask>() as libc::c_ulong);
    let fresh3 = &mut __d1;
    let fresh4;
    let fresh5 = &mut *(fds.fds_bits).as_mut_ptr().offset(0 as libc::c_int as isize)
        as *mut __fd_mask;
    asm!(
        "cld; rep; stosq", inlateout("cx") c2rust_asm_casts::AsmCast::cast_in(fresh0,
        fresh2) => fresh1, inlateout("di") c2rust_asm_casts::AsmCast::cast_in(fresh3,
        fresh5) => fresh4, inlateout("ax") 0 as libc::c_int => _,
        options(preserves_flags, att_syntax)
    );
    c2rust_asm_casts::AsmCast::cast_out(fresh0, fresh2, fresh1);
    c2rust_asm_casts::AsmCast::cast_out(fresh3, fresh5, fresh4);
    fds
        .fds_bits[(global.rfd
        / (8 as libc::c_int
            * ::std::mem::size_of::<__fd_mask>() as libc::c_ulong as libc::c_int))
        as usize]
        |= ((1 as libc::c_ulong)
            << global.rfd
                % (8 as libc::c_int
                    * ::std::mem::size_of::<__fd_mask>() as libc::c_ulong
                        as libc::c_int)) as __fd_mask;
    let mut timeout: timeval = timeval { tv_sec: 0, tv_usec: 0 };
    timeout.tv_sec = 0 as libc::c_int as __time_t;
    timeout.tv_usec = (1000 as libc::c_int * 1000 as libc::c_int) as __suseconds_t;
    let mut select_rv: libc::c_int = select(
        global.rfd + 1 as libc::c_int,
        &mut fds,
        0 as *mut fd_set,
        0 as *mut fd_set,
        &mut timeout,
    );
    if select_rv != 1 as libc::c_int {
        global.last_errno = *__errno_location();
        return -(19 as libc::c_int);
    }
    let mut buf: [libc::c_char; 64] = [0; 64];
    let mut read_rv: ssize_t = read(
        global.rfd,
        buf.as_mut_ptr() as *mut libc::c_void,
        (::std::mem::size_of::<[libc::c_char; 64]>() as libc::c_ulong)
            .wrapping_sub(1 as libc::c_int as libc::c_ulong),
    );
    if read_rv < 1 as libc::c_int as libc::c_long {
        global.last_errno = *__errno_location();
        return -(20 as libc::c_int);
    }
    buf[read_rv as usize] = '\0' as i32 as libc::c_char;
    let mut rw: libc::c_int = 0;
    let mut rh: libc::c_int = 0;
    if sscanf(
        buf.as_mut_ptr(),
        b"\x1B[%d;%dR\0" as *const u8 as *const libc::c_char,
        &mut rh as *mut libc::c_int,
        &mut rw as *mut libc::c_int,
    ) != 2 as libc::c_int
    {
        return -(21 as libc::c_int);
    }
    global.width = rw;
    global.height = rh;
    return 0 as libc::c_int;
}
unsafe extern "C" fn send_clear() -> libc::c_int {
    let mut rv: libc::c_int = 0;
    rv = send_attr(global.fg, global.bg);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = bytebuf_puts(&mut global.out, global.caps[27 as libc::c_int as usize]);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = send_cursor_if(global.cursor_x, global.cursor_y);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = bytebuf_flush(&mut global.out, global.wfd);
    if rv != 0 as libc::c_int {
        return rv;
    }
    global.last_x = -(1 as libc::c_int);
    global.last_y = -(1 as libc::c_int);
    return 0 as libc::c_int;
}
unsafe extern "C" fn send_cursor_if(
    mut x: libc::c_int,
    mut y: libc::c_int,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut nbuf: [libc::c_char; 32] = [0; 32];
    if x < 0 as libc::c_int || y < 0 as libc::c_int {
        return 0 as libc::c_int;
    }
    rv = bytebuf_nputs(
        &mut global.out,
        b"\x1B[\0" as *const u8 as *const libc::c_char,
        (::std::mem::size_of::<[libc::c_char; 3]>() as libc::c_ulong)
            .wrapping_sub(1 as libc::c_int as libc::c_ulong),
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = bytebuf_nputs(
        &mut global.out,
        nbuf.as_mut_ptr(),
        convert_num((y + 1 as libc::c_int) as uint32_t, nbuf.as_mut_ptr()) as size_t,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = bytebuf_nputs(
        &mut global.out,
        b";\0" as *const u8 as *const libc::c_char,
        (::std::mem::size_of::<[libc::c_char; 2]>() as libc::c_ulong)
            .wrapping_sub(1 as libc::c_int as libc::c_ulong),
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = bytebuf_nputs(
        &mut global.out,
        nbuf.as_mut_ptr(),
        convert_num((x + 1 as libc::c_int) as uint32_t, nbuf.as_mut_ptr()) as size_t,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = bytebuf_nputs(
        &mut global.out,
        b"H\0" as *const u8 as *const libc::c_char,
        (::std::mem::size_of::<[libc::c_char; 2]>() as libc::c_ulong)
            .wrapping_sub(1 as libc::c_int as libc::c_ulong),
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn convert_num(
    mut num: uint32_t,
    mut buf: *mut libc::c_char,
) -> libc::c_int {
    let mut i: libc::c_int = 0;
    let mut l: libc::c_int = 0 as libc::c_int;
    let mut ch: libc::c_char = 0;
    loop {
        let fresh6 = l;
        l = l + 1;
        *buf
            .offset(
                fresh6 as isize,
            ) = ('0' as i32 as libc::c_uint)
            .wrapping_add(num.wrapping_rem(10 as libc::c_int as libc::c_uint))
            as libc::c_char;
        num = (num as libc::c_uint).wrapping_div(10 as libc::c_int as libc::c_uint)
            as uint32_t as uint32_t;
        if !(num != 0) {
            break;
        }
    }
    i = 0 as libc::c_int;
    while i < l / 2 as libc::c_int {
        ch = *buf.offset(i as isize);
        *buf.offset(i as isize) = *buf.offset((l - 1 as libc::c_int - i) as isize);
        *buf.offset((l - 1 as libc::c_int - i) as isize) = ch;
        i += 1;
        i;
    }
    return l;
}
unsafe extern "C" fn send_attr(mut fg: uintattr_t, mut bg: uintattr_t) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    if fg as libc::c_int == global.last_fg as libc::c_int
        && bg as libc::c_int == global.last_bg as libc::c_int
    {
        return 0 as libc::c_int;
    }
    rv = bytebuf_puts(&mut global.out, global.caps[28 as libc::c_int as usize]);
    if rv != 0 as libc::c_int {
        return rv;
    }
    let mut cfg: uint32_t = 0;
    let mut cbg: uint32_t = 0;
    match global.output_mode {
        2 => {
            cfg = (fg as libc::c_int & 0xff as libc::c_int) as uint32_t;
            cbg = (bg as libc::c_int & 0xff as libc::c_int) as uint32_t;
            if fg as libc::c_int & 0x2000 as libc::c_int != 0 {
                cfg = 0 as libc::c_int as uint32_t;
            }
            if bg as libc::c_int & 0x2000 as libc::c_int != 0 {
                cbg = 0 as libc::c_int as uint32_t;
            }
        }
        3 => {
            cfg = (fg as libc::c_int & 0xff as libc::c_int) as uint32_t;
            cbg = (bg as libc::c_int & 0xff as libc::c_int) as uint32_t;
            if cfg > 216 as libc::c_int as libc::c_uint {
                cfg = 216 as libc::c_int as uint32_t;
            }
            if cbg > 216 as libc::c_int as libc::c_uint {
                cbg = 216 as libc::c_int as uint32_t;
            }
            cfg = (cfg as libc::c_uint).wrapping_add(0xf as libc::c_int as libc::c_uint)
                as uint32_t as uint32_t;
            cbg = (cbg as libc::c_uint).wrapping_add(0xf as libc::c_int as libc::c_uint)
                as uint32_t as uint32_t;
        }
        4 => {
            cfg = (fg as libc::c_int & 0xff as libc::c_int) as uint32_t;
            cbg = (bg as libc::c_int & 0xff as libc::c_int) as uint32_t;
            if cfg > 24 as libc::c_int as libc::c_uint {
                cfg = 24 as libc::c_int as uint32_t;
            }
            if cbg > 24 as libc::c_int as libc::c_uint {
                cbg = 24 as libc::c_int as uint32_t;
            }
            cfg = (cfg as libc::c_uint).wrapping_add(0xe7 as libc::c_int as libc::c_uint)
                as uint32_t as uint32_t;
            cbg = (cbg as libc::c_uint).wrapping_add(0xe7 as libc::c_int as libc::c_uint)
                as uint32_t as uint32_t;
        }
        1 | _ => {
            cfg = ((if fg as libc::c_int & 0x4000 as libc::c_int != 0 {
                90 as libc::c_int
            } else {
                30 as libc::c_int
            }) + (fg as libc::c_int & 0xf as libc::c_int) - 1 as libc::c_int)
                as uint32_t;
            cbg = ((if bg as libc::c_int & 0x4000 as libc::c_int != 0 {
                100 as libc::c_int
            } else {
                40 as libc::c_int
            }) + (bg as libc::c_int & 0xf as libc::c_int) - 1 as libc::c_int)
                as uint32_t;
        }
    }
    if fg as libc::c_int & 0x100 as libc::c_int != 0 {
        rv = bytebuf_puts(&mut global.out, global.caps[30 as libc::c_int as usize]);
        if rv != 0 as libc::c_int {
            return rv;
        }
    }
    if fg as libc::c_int & 0x1000 as libc::c_int != 0 {
        rv = bytebuf_puts(&mut global.out, global.caps[31 as libc::c_int as usize]);
        if rv != 0 as libc::c_int {
            return rv;
        }
    }
    if fg as libc::c_int & 0x200 as libc::c_int != 0 {
        rv = bytebuf_puts(&mut global.out, global.caps[29 as libc::c_int as usize]);
        if rv != 0 as libc::c_int {
            return rv;
        }
    }
    if fg as libc::c_int & 0x800 as libc::c_int != 0 {
        rv = bytebuf_puts(&mut global.out, global.caps[32 as libc::c_int as usize]);
        if rv != 0 as libc::c_int {
            return rv;
        }
    }
    if fg as libc::c_int & 0x8000 as libc::c_int != 0 {
        rv = bytebuf_puts(&mut global.out, global.caps[36 as libc::c_int as usize]);
        if rv != 0 as libc::c_int {
            return rv;
        }
    }
    if fg as libc::c_int & 0x400 as libc::c_int != 0
        || bg as libc::c_int & 0x400 as libc::c_int != 0
    {
        rv = bytebuf_puts(&mut global.out, global.caps[33 as libc::c_int as usize]);
        if rv != 0 as libc::c_int {
            return rv;
        }
    }
    let mut fg_is_default: libc::c_int = (fg as libc::c_int & 0xff as libc::c_int
        == 0 as libc::c_int) as libc::c_int;
    let mut bg_is_default: libc::c_int = (bg as libc::c_int & 0xff as libc::c_int
        == 0 as libc::c_int) as libc::c_int;
    if global.output_mode == 2 as libc::c_int {
        if fg as libc::c_int & 0x2000 as libc::c_int != 0 {
            fg_is_default = 0 as libc::c_int;
        }
        if bg as libc::c_int & 0x2000 as libc::c_int != 0 {
            bg_is_default = 0 as libc::c_int;
        }
    }
    rv = send_sgr(cfg, cbg, fg_is_default, bg_is_default);
    if rv != 0 as libc::c_int {
        return rv;
    }
    global.last_fg = fg;
    global.last_bg = bg;
    return 0 as libc::c_int;
}
unsafe extern "C" fn send_sgr(
    mut cfg: uint32_t,
    mut cbg: uint32_t,
    mut fg_is_default: libc::c_int,
    mut bg_is_default: libc::c_int,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut nbuf: [libc::c_char; 32] = [0; 32];
    if fg_is_default != 0 && bg_is_default != 0 {
        return 0 as libc::c_int;
    }
    match global.output_mode {
        2 | 3 | 4 => {
            rv = bytebuf_nputs(
                &mut global.out,
                b"\x1B[\0" as *const u8 as *const libc::c_char,
                (::std::mem::size_of::<[libc::c_char; 3]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong),
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            if fg_is_default == 0 {
                rv = bytebuf_nputs(
                    &mut global.out,
                    b"38;5;\0" as *const u8 as *const libc::c_char,
                    (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                        .wrapping_sub(1 as libc::c_int as libc::c_ulong),
                );
                if rv != 0 as libc::c_int {
                    return rv;
                }
                rv = bytebuf_nputs(
                    &mut global.out,
                    nbuf.as_mut_ptr(),
                    convert_num(cfg, nbuf.as_mut_ptr()) as size_t,
                );
                if rv != 0 as libc::c_int {
                    return rv;
                }
                if bg_is_default == 0 {
                    rv = bytebuf_nputs(
                        &mut global.out,
                        b";\0" as *const u8 as *const libc::c_char,
                        (::std::mem::size_of::<[libc::c_char; 2]>() as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_int as libc::c_ulong),
                    );
                    if rv != 0 as libc::c_int {
                        return rv;
                    }
                }
            }
            if bg_is_default == 0 {
                rv = bytebuf_nputs(
                    &mut global.out,
                    b"48;5;\0" as *const u8 as *const libc::c_char,
                    (::std::mem::size_of::<[libc::c_char; 6]>() as libc::c_ulong)
                        .wrapping_sub(1 as libc::c_int as libc::c_ulong),
                );
                if rv != 0 as libc::c_int {
                    return rv;
                }
                rv = bytebuf_nputs(
                    &mut global.out,
                    nbuf.as_mut_ptr(),
                    convert_num(cbg, nbuf.as_mut_ptr()) as size_t,
                );
                if rv != 0 as libc::c_int {
                    return rv;
                }
            }
            rv = bytebuf_nputs(
                &mut global.out,
                b"m\0" as *const u8 as *const libc::c_char,
                (::std::mem::size_of::<[libc::c_char; 2]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong),
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
        }
        1 | _ => {
            rv = bytebuf_nputs(
                &mut global.out,
                b"\x1B[\0" as *const u8 as *const libc::c_char,
                (::std::mem::size_of::<[libc::c_char; 3]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong),
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            if fg_is_default == 0 {
                rv = bytebuf_nputs(
                    &mut global.out,
                    nbuf.as_mut_ptr(),
                    convert_num(cfg, nbuf.as_mut_ptr()) as size_t,
                );
                if rv != 0 as libc::c_int {
                    return rv;
                }
                if bg_is_default == 0 {
                    rv = bytebuf_nputs(
                        &mut global.out,
                        b";\0" as *const u8 as *const libc::c_char,
                        (::std::mem::size_of::<[libc::c_char; 2]>() as libc::c_ulong)
                            .wrapping_sub(1 as libc::c_int as libc::c_ulong),
                    );
                    if rv != 0 as libc::c_int {
                        return rv;
                    }
                }
            }
            if bg_is_default == 0 {
                rv = bytebuf_nputs(
                    &mut global.out,
                    nbuf.as_mut_ptr(),
                    convert_num(cbg, nbuf.as_mut_ptr()) as size_t,
                );
                if rv != 0 as libc::c_int {
                    return rv;
                }
            }
            rv = bytebuf_nputs(
                &mut global.out,
                b"m\0" as *const u8 as *const libc::c_char,
                (::std::mem::size_of::<[libc::c_char; 2]>() as libc::c_ulong)
                    .wrapping_sub(1 as libc::c_int as libc::c_ulong),
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
        }
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn send_init_escape_codes() -> libc::c_int {
    let mut rv: libc::c_int = 0;
    rv = bytebuf_puts(&mut global.out, global.caps[23 as libc::c_int as usize]);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = bytebuf_puts(&mut global.out, global.caps[34 as libc::c_int as usize]);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = bytebuf_puts(&mut global.out, global.caps[26 as libc::c_int as usize]);
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn init_resize_handler() -> libc::c_int {
    if pipe((global.resize_pipefd).as_mut_ptr()) != 0 as libc::c_int {
        global.last_errno = *__errno_location();
        return -(12 as libc::c_int);
    }
    let mut sa: sigaction = sigaction {
        __sigaction_handler: C2RustUnnamed_9 {
            sa_handler: None,
        },
        sa_mask: __sigset_t { __val: [0; 16] },
        sa_flags: 0,
        sa_restorer: None,
    };
    memset(
        &mut sa as *mut sigaction as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<sigaction>() as libc::c_ulong,
    );
    sa
        .__sigaction_handler
        .sa_handler = Some(handle_resize as unsafe extern "C" fn(libc::c_int) -> ());
    if sigaction(28 as libc::c_int, &mut sa, 0 as *mut sigaction) != 0 as libc::c_int {
        global.last_errno = *__errno_location();
        return -(13 as libc::c_int);
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn handle_resize(mut sig: libc::c_int) {
    let mut errno_copy: libc::c_int = *__errno_location();
    write(
        global.resize_pipefd[1 as libc::c_int as usize],
        &mut sig as *mut libc::c_int as *const libc::c_void,
        ::std::mem::size_of::<libc::c_int>() as libc::c_ulong,
    );
    *__errno_location() = errno_copy;
}
unsafe extern "C" fn init_cap_trie() -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut i: libc::c_int = 0;
    i = 0 as libc::c_int;
    while i < 23 as libc::c_int {
        rv = cap_trie_add(
            global.caps[i as usize],
            (0xffff as libc::c_int - i) as uint16_t,
            0 as libc::c_int as uint8_t,
        );
        if rv != 0 as libc::c_int && rv != -(22 as libc::c_int) {
            return rv;
        }
        i += 1;
        i;
    }
    i = 0 as libc::c_int;
    while !(builtin_mod_caps[i as usize].cap).is_null() {
        rv = cap_trie_add(
            builtin_mod_caps[i as usize].cap,
            builtin_mod_caps[i as usize].key,
            builtin_mod_caps[i as usize].mod_0,
        );
        if rv != 0 as libc::c_int && rv != -(22 as libc::c_int) {
            return rv;
        }
        i += 1;
        i;
    }
    return 0 as libc::c_int;
}
static mut builtin_mod_caps: [C2RustUnnamed_10; 313] = [
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;2A\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 18 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;3A\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 18 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;4A\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 18 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;5A\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 18 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;6A\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 18 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;7A\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 18 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;8A\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 18 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;2B\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 19 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;3B\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 19 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;4B\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 19 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;5B\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 19 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;6B\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 19 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;7B\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 19 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;8B\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 19 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;2C\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 21 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;3C\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 21 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;4C\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 21 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;5C\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 21 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;6C\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 21 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;7C\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 21 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;8C\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 21 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;2D\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 20 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;3D\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 20 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;4D\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 20 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;5D\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 20 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;6D\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 20 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;7D\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 20 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;8D\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 20 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;2H\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 14 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;3H\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 14 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;4H\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 14 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;5H\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 14 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;6H\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 14 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;7H\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 14 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;8H\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 14 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;2F\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 15 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;3F\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 15 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;4F\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 15 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;5F\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 15 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;6F\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 15 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;7F\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 15 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;8F\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 15 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[2;2~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 12 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[2;3~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 12 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[2;4~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 12 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[2;5~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 12 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[2;6~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 12 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[2;7~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 12 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[2;8~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 12 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[3;2~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 13 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[3;3~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 13 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[3;4~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 13 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[3;5~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 13 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[3;6~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 13 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[3;7~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 13 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[3;8~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 13 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[5;2~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 16 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[5;3~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 16 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[5;4~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 16 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[5;5~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 16 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[5;6~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 16 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[5;7~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 16 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[5;8~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 16 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[6;2~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 17 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[6;3~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 17 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[6;4~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 17 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[6;5~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 17 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[6;6~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 17 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[6;7~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 17 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[6;8~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 17 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;2P\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 0 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;3P\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 0 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;4P\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 0 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;5P\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 0 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;6P\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 0 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;7P\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 0 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;8P\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 0 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;2Q\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 1 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;3Q\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 1 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;4Q\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 1 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;5Q\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 1 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;6Q\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 1 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;7Q\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 1 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;8Q\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 1 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;2R\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 2 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;3R\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 2 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;4R\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 2 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;5R\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 2 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;6R\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 2 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;7R\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 2 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;8R\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 2 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;2S\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 3 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;3S\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 3 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;4S\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 3 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;5S\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 3 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;6S\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 3 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;7S\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 3 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[1;8S\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 3 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[15;2~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 4 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[15;3~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 4 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[15;4~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 4 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[15;5~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 4 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[15;6~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 4 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[15;7~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 4 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[15;8~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 4 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[17;2~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 5 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[17;3~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 5 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[17;4~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 5 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[17;5~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 5 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[17;6~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 5 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[17;7~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 5 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[17;8~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 5 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[18;2~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 6 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[18;3~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 6 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[18;4~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 6 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[18;5~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 6 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[18;6~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 6 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[18;7~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 6 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[18;8~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 6 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[19;2~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 7 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[19;3~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 7 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[19;4~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 7 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[19;5~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 7 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[19;6~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 7 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[19;7~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 7 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[19;8~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 7 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[20;2~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 8 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[20;3~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 8 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[20;4~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 8 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[20;5~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 8 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[20;6~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 8 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[20;7~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 8 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[20;8~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 8 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[21;2~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 9 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[21;3~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 9 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[21;4~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 9 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[21;5~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 9 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[21;6~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 9 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[21;7~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 9 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[21;8~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 9 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[23;2~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 10 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[23;3~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 10 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[23;4~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 10 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[23;5~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 10 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[23;6~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 10 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[23;7~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 10 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[23;8~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 10 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[24;2~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 11 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[24;3~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 11 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[24;4~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 11 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[24;5~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 11 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[24;6~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 11 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[24;7~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 11 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[24;8~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 11 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[a\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 18 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[A\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 18 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[a\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 18 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1BOa\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 18 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1BOa\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 18 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[b\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 19 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[B\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 19 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[b\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 19 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1BOb\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 19 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1BOb\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 19 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[c\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 21 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[C\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 21 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[c\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 21 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1BOc\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 21 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1BOc\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 21 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[d\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 20 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[D\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 20 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[d\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 20 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1BOd\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 20 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1BOd\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 20 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[7$\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 14 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[7~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 14 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[7$\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 14 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[7^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 14 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[7@\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 14 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[7^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 14 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[7@\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 14 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[8~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 15 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[8$\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 15 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[8^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 15 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[8^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 15 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[8@\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 15 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[8@\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 15 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[8$\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 15 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[2~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 12 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[2$\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 12 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[2^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 12 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[2^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 12 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[2@\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 12 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[2@\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 12 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[2$\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 12 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[3~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 13 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[3$\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 13 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[3^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 13 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[3^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 13 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[3@\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 13 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[3@\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 13 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[3$\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 13 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[5~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 16 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[5$\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 16 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[5^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 16 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[5^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 16 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[5@\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 16 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[5@\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 16 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[5$\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 16 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[6~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 17 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[6$\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 17 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[6^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 17 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[6^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 17 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[6@\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 17 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[6@\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 17 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[6$\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 17 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[11~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 0 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[23~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 0 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[11^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 0 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[11^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 0 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[23^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 0 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[23^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 0 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[23~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 0 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[12~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 1 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[24~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 1 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[12^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 1 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[12^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 1 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[24^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 1 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[24^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 1 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[24~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 1 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[13~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 2 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[25~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 2 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[13^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 2 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[13^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 2 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[25^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 2 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[25^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 2 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[25~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 2 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[14~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 3 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[26~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 3 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[14^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 3 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[14^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 3 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[26^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 3 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[26^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 3 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[26~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 3 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[15~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 4 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[28~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 4 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[15^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 4 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[15^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 4 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[28^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 4 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[28^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 4 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[28~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 4 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[17~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 5 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[29~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 5 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[17^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 5 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[17^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 5 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[29^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 5 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[29^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 5 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[29~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 5 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[18~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 6 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[31~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 6 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[18^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 6 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[18^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 6 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[31^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 6 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[31^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 6 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[31~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 6 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[19~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 7 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[32~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 7 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[19^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 7 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[19^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 7 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[32^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 7 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[32^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 7 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[32~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 7 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[20~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 8 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[33~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 8 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[20^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 8 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[20^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 8 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[33^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 8 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[33^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 8 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[33~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 8 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[21~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 9 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[34~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 9 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[21^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 9 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[21^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 9 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[34^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 9 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[34^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 9 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[34~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 9 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[23~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 10 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[23$\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 10 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[23^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 10 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[23^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 10 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[23@\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 10 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[23@\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 10 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[23$\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 10 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[24~\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 11 as libc::c_int) as uint16_t,
            mod_0: 1 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[24$\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 11 as libc::c_int) as uint16_t,
            mod_0: (1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[24^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 11 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[24^\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 11 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1B[24@\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 11 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[24@\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 11 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 4 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[24$\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 11 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[A\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 18 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[B\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 19 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[C\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 21 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B[D\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 20 as libc::c_int) as uint16_t,
            mod_0: 4 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1BOA\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 18 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1BOA\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 18 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1BOB\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 19 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1BOB\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 19 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1BOC\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 21 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1BOC\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 21 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1BOD\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 20 as libc::c_int) as uint16_t,
            mod_0: 2 as libc::c_int as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: b"\x1B\x1BOD\0" as *const u8 as *const libc::c_char,
            key: (0xffff as libc::c_int - 20 as libc::c_int) as uint16_t,
            mod_0: (2 as libc::c_int | 1 as libc::c_int) as uint8_t,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_10 {
            cap: 0 as *const libc::c_char,
            key: 0 as libc::c_int as uint16_t,
            mod_0: 0 as libc::c_int as uint8_t,
        };
        init
    },
];
unsafe extern "C" fn cap_trie_add(
    mut cap: *const libc::c_char,
    mut key: uint16_t,
    mut mod_0: uint8_t,
) -> libc::c_int {
    let mut next: *mut cap_trie_t = 0 as *mut cap_trie_t;
    let mut node: *mut cap_trie_t = &mut global.cap_trie;
    let mut i: size_t = 0;
    let mut j: size_t = 0;
    if cap.is_null() || strlen(cap) <= 0 as libc::c_int as libc::c_ulong {
        return 0 as libc::c_int;
    }
    i = 0 as libc::c_int as size_t;
    while *cap.offset(i as isize) as libc::c_int != '\0' as i32 {
        let mut c: libc::c_char = *cap.offset(i as isize);
        next = 0 as *mut cap_trie_t;
        j = 0 as libc::c_int as size_t;
        while j < (*node).nchildren {
            if (*((*node).children).offset(j as isize)).c as libc::c_int
                == c as libc::c_int
            {
                next = &mut *((*node).children).offset(j as isize) as *mut cap_trie_t;
                break;
            } else {
                j = j.wrapping_add(1);
                j;
            }
        }
        if next.is_null() {
            (*node)
                .nchildren = ((*node).nchildren as libc::c_ulong)
                .wrapping_add(1 as libc::c_int as libc::c_ulong) as size_t as size_t;
            (*node)
                .children = realloc(
                (*node).children as *mut libc::c_void,
                (::std::mem::size_of::<cap_trie_t>() as libc::c_ulong)
                    .wrapping_mul((*node).nchildren),
            ) as *mut cap_trie_t;
            if ((*node).children).is_null() {
                return -(5 as libc::c_int);
            }
            next = &mut *((*node).children)
                .offset(
                    ((*node).nchildren).wrapping_sub(1 as libc::c_int as libc::c_ulong)
                        as isize,
                ) as *mut cap_trie_t;
            memset(
                next as *mut libc::c_void,
                0 as libc::c_int,
                ::std::mem::size_of::<cap_trie_t>() as libc::c_ulong,
            );
            (*next).c = c;
        }
        node = next;
        i = i.wrapping_add(1);
        i;
    }
    if (*node).is_leaf != 0 {
        return -(22 as libc::c_int);
    }
    (*node).is_leaf = 1 as libc::c_int;
    (*node).key = key;
    (*node).mod_0 = mod_0;
    return 0 as libc::c_int;
}
unsafe extern "C" fn init_term_caps() -> libc::c_int {
    if load_terminfo() == 0 as libc::c_int {
        return parse_terminfo_caps();
    }
    return load_builtin_caps();
}
unsafe extern "C" fn load_builtin_caps() -> libc::c_int {
    let mut i: libc::c_int = 0;
    let mut j: libc::c_int = 0;
    let mut term: *const libc::c_char = getenv(
        b"TERM\0" as *const u8 as *const libc::c_char,
    );
    if term.is_null() {
        return -(7 as libc::c_int);
    }
    i = 0 as libc::c_int;
    while !(builtin_terms[i as usize].name).is_null() {
        if strcmp(term, builtin_terms[i as usize].name) == 0 as libc::c_int {
            j = 0 as libc::c_int;
            while j < 38 as libc::c_int {
                global
                    .caps[j
                    as usize] = *(builtin_terms[i as usize].caps).offset(j as isize);
                j += 1;
                j;
            }
            return 0 as libc::c_int;
        }
        i += 1;
        i;
    }
    i = 0 as libc::c_int;
    while !(builtin_terms[i as usize].name).is_null() {
        if !(strstr(term, builtin_terms[i as usize].name)).is_null()
            || *builtin_terms[i as usize].alias as libc::c_int != '\0' as i32
                && !(strstr(term, builtin_terms[i as usize].alias)).is_null()
        {
            j = 0 as libc::c_int;
            while j < 38 as libc::c_int {
                global
                    .caps[j
                    as usize] = *(builtin_terms[i as usize].caps).offset(j as isize);
                j += 1;
                j;
            }
            return 0 as libc::c_int;
        }
        i += 1;
        i;
    }
    return -(17 as libc::c_int);
}
static mut builtin_terms: [C2RustUnnamed_11; 7] = unsafe {
    [
        {
            let mut init = C2RustUnnamed_11 {
                name: b"xterm\0" as *const u8 as *const libc::c_char,
                caps: xterm_caps.as_ptr() as *mut _,
                alias: b"\0" as *const u8 as *const libc::c_char,
            };
            init
        },
        {
            let mut init = C2RustUnnamed_11 {
                name: b"linux\0" as *const u8 as *const libc::c_char,
                caps: linux_caps.as_ptr() as *mut _,
                alias: b"\0" as *const u8 as *const libc::c_char,
            };
            init
        },
        {
            let mut init = C2RustUnnamed_11 {
                name: b"screen\0" as *const u8 as *const libc::c_char,
                caps: screen_caps.as_ptr() as *mut _,
                alias: b"tmux\0" as *const u8 as *const libc::c_char,
            };
            init
        },
        {
            let mut init = C2RustUnnamed_11 {
                name: b"rxvt-256color\0" as *const u8 as *const libc::c_char,
                caps: rxvt_256color_caps.as_ptr() as *mut _,
                alias: b"\0" as *const u8 as *const libc::c_char,
            };
            init
        },
        {
            let mut init = C2RustUnnamed_11 {
                name: b"rxvt-unicode\0" as *const u8 as *const libc::c_char,
                caps: rxvt_unicode_caps.as_ptr() as *mut _,
                alias: b"rxvt\0" as *const u8 as *const libc::c_char,
            };
            init
        },
        {
            let mut init = C2RustUnnamed_11 {
                name: b"Eterm\0" as *const u8 as *const libc::c_char,
                caps: eterm_caps.as_ptr() as *mut _,
                alias: b"\0" as *const u8 as *const libc::c_char,
            };
            init
        },
        {
            let mut init = C2RustUnnamed_11 {
                name: 0 as *const libc::c_char,
                caps: 0 as *const *const libc::c_char as *mut *const libc::c_char,
                alias: 0 as *const libc::c_char,
            };
            init
        },
    ]
};
static mut eterm_caps: [*const libc::c_char; 38] = [
    b"\x1B[11~\0" as *const u8 as *const libc::c_char,
    b"\x1B[12~\0" as *const u8 as *const libc::c_char,
    b"\x1B[13~\0" as *const u8 as *const libc::c_char,
    b"\x1B[14~\0" as *const u8 as *const libc::c_char,
    b"\x1B[15~\0" as *const u8 as *const libc::c_char,
    b"\x1B[17~\0" as *const u8 as *const libc::c_char,
    b"\x1B[18~\0" as *const u8 as *const libc::c_char,
    b"\x1B[19~\0" as *const u8 as *const libc::c_char,
    b"\x1B[20~\0" as *const u8 as *const libc::c_char,
    b"\x1B[21~\0" as *const u8 as *const libc::c_char,
    b"\x1B[23~\0" as *const u8 as *const libc::c_char,
    b"\x1B[24~\0" as *const u8 as *const libc::c_char,
    b"\x1B[2~\0" as *const u8 as *const libc::c_char,
    b"\x1B[3~\0" as *const u8 as *const libc::c_char,
    b"\x1B[7~\0" as *const u8 as *const libc::c_char,
    b"\x1B[8~\0" as *const u8 as *const libc::c_char,
    b"\x1B[5~\0" as *const u8 as *const libc::c_char,
    b"\x1B[6~\0" as *const u8 as *const libc::c_char,
    b"\x1B[A\0" as *const u8 as *const libc::c_char,
    b"\x1B[B\0" as *const u8 as *const libc::c_char,
    b"\x1B[D\0" as *const u8 as *const libc::c_char,
    b"\x1B[C\0" as *const u8 as *const libc::c_char,
    b"\0" as *const u8 as *const libc::c_char,
    b"\x1B7\x1B[?47h\0" as *const u8 as *const libc::c_char,
    b"\x1B[2J\x1B[?47l\x1B8\0" as *const u8 as *const libc::c_char,
    b"\x1B[?25h\0" as *const u8 as *const libc::c_char,
    b"\x1B[?25l\0" as *const u8 as *const libc::c_char,
    b"\x1B[H\x1B[2J\0" as *const u8 as *const libc::c_char,
    b"\x1B[m\x0F\0" as *const u8 as *const libc::c_char,
    b"\x1B[4m\0" as *const u8 as *const libc::c_char,
    b"\x1B[1m\0" as *const u8 as *const libc::c_char,
    b"\x1B[5m\0" as *const u8 as *const libc::c_char,
    b"\0" as *const u8 as *const libc::c_char,
    b"\x1B[7m\0" as *const u8 as *const libc::c_char,
    b"\0" as *const u8 as *const libc::c_char,
    b"\0" as *const u8 as *const libc::c_char,
    b"\0" as *const u8 as *const libc::c_char,
    b"\0" as *const u8 as *const libc::c_char,
];
static mut rxvt_unicode_caps: [*const libc::c_char; 38] = [
    b"\x1B[11~\0" as *const u8 as *const libc::c_char,
    b"\x1B[12~\0" as *const u8 as *const libc::c_char,
    b"\x1B[13~\0" as *const u8 as *const libc::c_char,
    b"\x1B[14~\0" as *const u8 as *const libc::c_char,
    b"\x1B[15~\0" as *const u8 as *const libc::c_char,
    b"\x1B[17~\0" as *const u8 as *const libc::c_char,
    b"\x1B[18~\0" as *const u8 as *const libc::c_char,
    b"\x1B[19~\0" as *const u8 as *const libc::c_char,
    b"\x1B[20~\0" as *const u8 as *const libc::c_char,
    b"\x1B[21~\0" as *const u8 as *const libc::c_char,
    b"\x1B[23~\0" as *const u8 as *const libc::c_char,
    b"\x1B[24~\0" as *const u8 as *const libc::c_char,
    b"\x1B[2~\0" as *const u8 as *const libc::c_char,
    b"\x1B[3~\0" as *const u8 as *const libc::c_char,
    b"\x1B[7~\0" as *const u8 as *const libc::c_char,
    b"\x1B[8~\0" as *const u8 as *const libc::c_char,
    b"\x1B[5~\0" as *const u8 as *const libc::c_char,
    b"\x1B[6~\0" as *const u8 as *const libc::c_char,
    b"\x1B[A\0" as *const u8 as *const libc::c_char,
    b"\x1B[B\0" as *const u8 as *const libc::c_char,
    b"\x1B[D\0" as *const u8 as *const libc::c_char,
    b"\x1B[C\0" as *const u8 as *const libc::c_char,
    b"\x1B[Z\0" as *const u8 as *const libc::c_char,
    b"\x1B[?1049h\0" as *const u8 as *const libc::c_char,
    b"\x1B[r\x1B[?1049l\0" as *const u8 as *const libc::c_char,
    b"\x1B[?12l\x1B[?25h\0" as *const u8 as *const libc::c_char,
    b"\x1B[?25l\0" as *const u8 as *const libc::c_char,
    b"\x1B[H\x1B[2J\0" as *const u8 as *const libc::c_char,
    b"\x1B[m\x1B(B\0" as *const u8 as *const libc::c_char,
    b"\x1B[4m\0" as *const u8 as *const libc::c_char,
    b"\x1B[1m\0" as *const u8 as *const libc::c_char,
    b"\x1B[5m\0" as *const u8 as *const libc::c_char,
    b"\x1B[3m\0" as *const u8 as *const libc::c_char,
    b"\x1B[7m\0" as *const u8 as *const libc::c_char,
    b"\x1B=\0" as *const u8 as *const libc::c_char,
    b"\x1B>\0" as *const u8 as *const libc::c_char,
    b"\0" as *const u8 as *const libc::c_char,
    b"\0" as *const u8 as *const libc::c_char,
];
static mut rxvt_256color_caps: [*const libc::c_char; 38] = [
    b"\x1B[11~\0" as *const u8 as *const libc::c_char,
    b"\x1B[12~\0" as *const u8 as *const libc::c_char,
    b"\x1B[13~\0" as *const u8 as *const libc::c_char,
    b"\x1B[14~\0" as *const u8 as *const libc::c_char,
    b"\x1B[15~\0" as *const u8 as *const libc::c_char,
    b"\x1B[17~\0" as *const u8 as *const libc::c_char,
    b"\x1B[18~\0" as *const u8 as *const libc::c_char,
    b"\x1B[19~\0" as *const u8 as *const libc::c_char,
    b"\x1B[20~\0" as *const u8 as *const libc::c_char,
    b"\x1B[21~\0" as *const u8 as *const libc::c_char,
    b"\x1B[23~\0" as *const u8 as *const libc::c_char,
    b"\x1B[24~\0" as *const u8 as *const libc::c_char,
    b"\x1B[2~\0" as *const u8 as *const libc::c_char,
    b"\x1B[3~\0" as *const u8 as *const libc::c_char,
    b"\x1B[7~\0" as *const u8 as *const libc::c_char,
    b"\x1B[8~\0" as *const u8 as *const libc::c_char,
    b"\x1B[5~\0" as *const u8 as *const libc::c_char,
    b"\x1B[6~\0" as *const u8 as *const libc::c_char,
    b"\x1B[A\0" as *const u8 as *const libc::c_char,
    b"\x1B[B\0" as *const u8 as *const libc::c_char,
    b"\x1B[D\0" as *const u8 as *const libc::c_char,
    b"\x1B[C\0" as *const u8 as *const libc::c_char,
    b"\x1B[Z\0" as *const u8 as *const libc::c_char,
    b"\x1B7\x1B[?47h\0" as *const u8 as *const libc::c_char,
    b"\x1B[2J\x1B[?47l\x1B8\0" as *const u8 as *const libc::c_char,
    b"\x1B[?25h\0" as *const u8 as *const libc::c_char,
    b"\x1B[?25l\0" as *const u8 as *const libc::c_char,
    b"\x1B[H\x1B[2J\0" as *const u8 as *const libc::c_char,
    b"\x1B[m\x0F\0" as *const u8 as *const libc::c_char,
    b"\x1B[4m\0" as *const u8 as *const libc::c_char,
    b"\x1B[1m\0" as *const u8 as *const libc::c_char,
    b"\x1B[5m\0" as *const u8 as *const libc::c_char,
    b"\0" as *const u8 as *const libc::c_char,
    b"\x1B[7m\0" as *const u8 as *const libc::c_char,
    b"\x1B=\0" as *const u8 as *const libc::c_char,
    b"\x1B>\0" as *const u8 as *const libc::c_char,
    b"\0" as *const u8 as *const libc::c_char,
    b"\0" as *const u8 as *const libc::c_char,
];
static mut screen_caps: [*const libc::c_char; 38] = [
    b"\x1BOP\0" as *const u8 as *const libc::c_char,
    b"\x1BOQ\0" as *const u8 as *const libc::c_char,
    b"\x1BOR\0" as *const u8 as *const libc::c_char,
    b"\x1BOS\0" as *const u8 as *const libc::c_char,
    b"\x1B[15~\0" as *const u8 as *const libc::c_char,
    b"\x1B[17~\0" as *const u8 as *const libc::c_char,
    b"\x1B[18~\0" as *const u8 as *const libc::c_char,
    b"\x1B[19~\0" as *const u8 as *const libc::c_char,
    b"\x1B[20~\0" as *const u8 as *const libc::c_char,
    b"\x1B[21~\0" as *const u8 as *const libc::c_char,
    b"\x1B[23~\0" as *const u8 as *const libc::c_char,
    b"\x1B[24~\0" as *const u8 as *const libc::c_char,
    b"\x1B[2~\0" as *const u8 as *const libc::c_char,
    b"\x1B[3~\0" as *const u8 as *const libc::c_char,
    b"\x1B[1~\0" as *const u8 as *const libc::c_char,
    b"\x1B[4~\0" as *const u8 as *const libc::c_char,
    b"\x1B[5~\0" as *const u8 as *const libc::c_char,
    b"\x1B[6~\0" as *const u8 as *const libc::c_char,
    b"\x1BOA\0" as *const u8 as *const libc::c_char,
    b"\x1BOB\0" as *const u8 as *const libc::c_char,
    b"\x1BOD\0" as *const u8 as *const libc::c_char,
    b"\x1BOC\0" as *const u8 as *const libc::c_char,
    b"\x1B[Z\0" as *const u8 as *const libc::c_char,
    b"\x1B[?1049h\0" as *const u8 as *const libc::c_char,
    b"\x1B[?1049l\0" as *const u8 as *const libc::c_char,
    b"\x1B[34h\x1B[?25h\0" as *const u8 as *const libc::c_char,
    b"\x1B[?25l\0" as *const u8 as *const libc::c_char,
    b"\x1B[H\x1B[J\0" as *const u8 as *const libc::c_char,
    b"\x1B[m\x0F\0" as *const u8 as *const libc::c_char,
    b"\x1B[4m\0" as *const u8 as *const libc::c_char,
    b"\x1B[1m\0" as *const u8 as *const libc::c_char,
    b"\x1B[5m\0" as *const u8 as *const libc::c_char,
    b"\0" as *const u8 as *const libc::c_char,
    b"\x1B[7m\0" as *const u8 as *const libc::c_char,
    b"\x1B[?1h\x1B=\0" as *const u8 as *const libc::c_char,
    b"\x1B[?1l\x1B>\0" as *const u8 as *const libc::c_char,
    b"\x1B[2m\0" as *const u8 as *const libc::c_char,
    b"\0" as *const u8 as *const libc::c_char,
];
static mut linux_caps: [*const libc::c_char; 38] = [
    b"\x1B[[A\0" as *const u8 as *const libc::c_char,
    b"\x1B[[B\0" as *const u8 as *const libc::c_char,
    b"\x1B[[C\0" as *const u8 as *const libc::c_char,
    b"\x1B[[D\0" as *const u8 as *const libc::c_char,
    b"\x1B[[E\0" as *const u8 as *const libc::c_char,
    b"\x1B[17~\0" as *const u8 as *const libc::c_char,
    b"\x1B[18~\0" as *const u8 as *const libc::c_char,
    b"\x1B[19~\0" as *const u8 as *const libc::c_char,
    b"\x1B[20~\0" as *const u8 as *const libc::c_char,
    b"\x1B[21~\0" as *const u8 as *const libc::c_char,
    b"\x1B[23~\0" as *const u8 as *const libc::c_char,
    b"\x1B[24~\0" as *const u8 as *const libc::c_char,
    b"\x1B[2~\0" as *const u8 as *const libc::c_char,
    b"\x1B[3~\0" as *const u8 as *const libc::c_char,
    b"\x1B[1~\0" as *const u8 as *const libc::c_char,
    b"\x1B[4~\0" as *const u8 as *const libc::c_char,
    b"\x1B[5~\0" as *const u8 as *const libc::c_char,
    b"\x1B[6~\0" as *const u8 as *const libc::c_char,
    b"\x1B[A\0" as *const u8 as *const libc::c_char,
    b"\x1B[B\0" as *const u8 as *const libc::c_char,
    b"\x1B[D\0" as *const u8 as *const libc::c_char,
    b"\x1B[C\0" as *const u8 as *const libc::c_char,
    b"\x1B\t\0" as *const u8 as *const libc::c_char,
    b"\0" as *const u8 as *const libc::c_char,
    b"\0" as *const u8 as *const libc::c_char,
    b"\x1B[?25h\x1B[?0c\0" as *const u8 as *const libc::c_char,
    b"\x1B[?25l\x1B[?1c\0" as *const u8 as *const libc::c_char,
    b"\x1B[H\x1B[J\0" as *const u8 as *const libc::c_char,
    b"\x1B[m\x0F\0" as *const u8 as *const libc::c_char,
    b"\x1B[4m\0" as *const u8 as *const libc::c_char,
    b"\x1B[1m\0" as *const u8 as *const libc::c_char,
    b"\x1B[5m\0" as *const u8 as *const libc::c_char,
    b"\0" as *const u8 as *const libc::c_char,
    b"\x1B[7m\0" as *const u8 as *const libc::c_char,
    b"\0" as *const u8 as *const libc::c_char,
    b"\0" as *const u8 as *const libc::c_char,
    b"\x1B[2m\0" as *const u8 as *const libc::c_char,
    b"\0" as *const u8 as *const libc::c_char,
];
static mut xterm_caps: [*const libc::c_char; 38] = [
    b"\x1BOP\0" as *const u8 as *const libc::c_char,
    b"\x1BOQ\0" as *const u8 as *const libc::c_char,
    b"\x1BOR\0" as *const u8 as *const libc::c_char,
    b"\x1BOS\0" as *const u8 as *const libc::c_char,
    b"\x1B[15~\0" as *const u8 as *const libc::c_char,
    b"\x1B[17~\0" as *const u8 as *const libc::c_char,
    b"\x1B[18~\0" as *const u8 as *const libc::c_char,
    b"\x1B[19~\0" as *const u8 as *const libc::c_char,
    b"\x1B[20~\0" as *const u8 as *const libc::c_char,
    b"\x1B[21~\0" as *const u8 as *const libc::c_char,
    b"\x1B[23~\0" as *const u8 as *const libc::c_char,
    b"\x1B[24~\0" as *const u8 as *const libc::c_char,
    b"\x1B[2~\0" as *const u8 as *const libc::c_char,
    b"\x1B[3~\0" as *const u8 as *const libc::c_char,
    b"\x1BOH\0" as *const u8 as *const libc::c_char,
    b"\x1BOF\0" as *const u8 as *const libc::c_char,
    b"\x1B[5~\0" as *const u8 as *const libc::c_char,
    b"\x1B[6~\0" as *const u8 as *const libc::c_char,
    b"\x1BOA\0" as *const u8 as *const libc::c_char,
    b"\x1BOB\0" as *const u8 as *const libc::c_char,
    b"\x1BOD\0" as *const u8 as *const libc::c_char,
    b"\x1BOC\0" as *const u8 as *const libc::c_char,
    b"\x1B[Z\0" as *const u8 as *const libc::c_char,
    b"\x1B[?1049h\x1B[22;0;0t\0" as *const u8 as *const libc::c_char,
    b"\x1B[?1049l\x1B[23;0;0t\0" as *const u8 as *const libc::c_char,
    b"\x1B[?12l\x1B[?25h\0" as *const u8 as *const libc::c_char,
    b"\x1B[?25l\0" as *const u8 as *const libc::c_char,
    b"\x1B[H\x1B[2J\0" as *const u8 as *const libc::c_char,
    b"\x1B(B\x1B[m\0" as *const u8 as *const libc::c_char,
    b"\x1B[4m\0" as *const u8 as *const libc::c_char,
    b"\x1B[1m\0" as *const u8 as *const libc::c_char,
    b"\x1B[5m\0" as *const u8 as *const libc::c_char,
    b"\x1B[3m\0" as *const u8 as *const libc::c_char,
    b"\x1B[7m\0" as *const u8 as *const libc::c_char,
    b"\x1B[?1h\x1B=\0" as *const u8 as *const libc::c_char,
    b"\x1B[?1l\x1B>\0" as *const u8 as *const libc::c_char,
    b"\x1B[2m\0" as *const u8 as *const libc::c_char,
    b"\x1B[8m\0" as *const u8 as *const libc::c_char,
];
unsafe extern "C" fn parse_terminfo_caps() -> libc::c_int {
    if global.nterminfo
        < (6 as libc::c_int
            * ::std::mem::size_of::<int16_t>() as libc::c_ulong as libc::c_int)
            as libc::c_ulong
    {
        return -(1 as libc::c_int);
    }
    let mut magic_number: int16_t = 0;
    let mut nbytes_names: int16_t = 0;
    let mut nbytes_bools: int16_t = 0;
    let mut num_ints: int16_t = 0;
    let mut num_offsets: int16_t = 0;
    let mut nbytes_strings: int16_t = 0;
    let mut nbytes_header: size_t = (6 as libc::c_int as libc::c_ulong)
        .wrapping_mul(::std::mem::size_of::<int16_t>() as libc::c_ulong);
    get_terminfo_int16(
        (0 as libc::c_int as libc::c_ulong)
            .wrapping_mul(::std::mem::size_of::<int16_t>() as libc::c_ulong)
            as libc::c_int,
        &mut magic_number,
    );
    get_terminfo_int16(
        (1 as libc::c_int as libc::c_ulong)
            .wrapping_mul(::std::mem::size_of::<int16_t>() as libc::c_ulong)
            as libc::c_int,
        &mut nbytes_names,
    );
    get_terminfo_int16(
        (2 as libc::c_int as libc::c_ulong)
            .wrapping_mul(::std::mem::size_of::<int16_t>() as libc::c_ulong)
            as libc::c_int,
        &mut nbytes_bools,
    );
    get_terminfo_int16(
        (3 as libc::c_int as libc::c_ulong)
            .wrapping_mul(::std::mem::size_of::<int16_t>() as libc::c_ulong)
            as libc::c_int,
        &mut num_ints,
    );
    get_terminfo_int16(
        (4 as libc::c_int as libc::c_ulong)
            .wrapping_mul(::std::mem::size_of::<int16_t>() as libc::c_ulong)
            as libc::c_int,
        &mut num_offsets,
    );
    get_terminfo_int16(
        (5 as libc::c_int as libc::c_ulong)
            .wrapping_mul(::std::mem::size_of::<int16_t>() as libc::c_ulong)
            as libc::c_int,
        &mut nbytes_strings,
    );
    let bytes_per_int: libc::c_int = if magic_number as libc::c_int
        == 0o1036 as libc::c_int
    {
        4 as libc::c_int
    } else {
        2 as libc::c_int
    };
    let align_offset: libc::c_int = if (nbytes_names as libc::c_int
        + nbytes_bools as libc::c_int) % 2 as libc::c_int != 0 as libc::c_int
    {
        1 as libc::c_int
    } else {
        0 as libc::c_int
    };
    let pos_str_offsets: libc::c_int = nbytes_header
        .wrapping_add(nbytes_names as libc::c_ulong)
        .wrapping_add(nbytes_bools as libc::c_ulong)
        .wrapping_add(align_offset as libc::c_ulong)
        .wrapping_add((num_ints as libc::c_int * bytes_per_int) as libc::c_ulong)
        as libc::c_int;
    let pos_str_table: libc::c_int = (pos_str_offsets as libc::c_ulong)
        .wrapping_add(
            (num_offsets as libc::c_ulong)
                .wrapping_mul(::std::mem::size_of::<int16_t>() as libc::c_ulong),
        ) as libc::c_int;
    let mut i: libc::c_int = 0;
    i = 0 as libc::c_int;
    while i < 38 as libc::c_int {
        let mut cap: *const libc::c_char = get_terminfo_string(
            pos_str_offsets as int16_t,
            num_offsets,
            pos_str_table as int16_t,
            nbytes_strings,
            terminfo_cap_indexes[i as usize],
        );
        if cap.is_null() {
            return -(1 as libc::c_int);
        }
        global.caps[i as usize] = cap;
        i += 1;
        i;
    }
    return 0 as libc::c_int;
}
static mut terminfo_cap_indexes: [int16_t; 38] = [
    66 as libc::c_int as int16_t,
    68 as libc::c_int as int16_t,
    69 as libc::c_int as int16_t,
    70 as libc::c_int as int16_t,
    71 as libc::c_int as int16_t,
    72 as libc::c_int as int16_t,
    73 as libc::c_int as int16_t,
    74 as libc::c_int as int16_t,
    75 as libc::c_int as int16_t,
    67 as libc::c_int as int16_t,
    216 as libc::c_int as int16_t,
    217 as libc::c_int as int16_t,
    77 as libc::c_int as int16_t,
    59 as libc::c_int as int16_t,
    76 as libc::c_int as int16_t,
    164 as libc::c_int as int16_t,
    82 as libc::c_int as int16_t,
    81 as libc::c_int as int16_t,
    87 as libc::c_int as int16_t,
    61 as libc::c_int as int16_t,
    79 as libc::c_int as int16_t,
    83 as libc::c_int as int16_t,
    148 as libc::c_int as int16_t,
    28 as libc::c_int as int16_t,
    40 as libc::c_int as int16_t,
    16 as libc::c_int as int16_t,
    13 as libc::c_int as int16_t,
    5 as libc::c_int as int16_t,
    39 as libc::c_int as int16_t,
    36 as libc::c_int as int16_t,
    27 as libc::c_int as int16_t,
    26 as libc::c_int as int16_t,
    311 as libc::c_int as int16_t,
    34 as libc::c_int as int16_t,
    89 as libc::c_int as int16_t,
    88 as libc::c_int as int16_t,
    30 as libc::c_int as int16_t,
    32 as libc::c_int as int16_t,
];
unsafe extern "C" fn get_terminfo_string(
    mut offsets_pos: int16_t,
    mut offsets_len: int16_t,
    mut table_pos: int16_t,
    mut table_size: int16_t,
    mut index: int16_t,
) -> *const libc::c_char {
    if index as libc::c_int >= offsets_len as libc::c_int {
        return b"\0" as *const u8 as *const libc::c_char;
    }
    let mut table_offset: int16_t = 0;
    let mut table_offset_offset: libc::c_int = offsets_pos as libc::c_int
        + index as libc::c_int
            * ::std::mem::size_of::<int16_t>() as libc::c_ulong as libc::c_int;
    if get_terminfo_int16(table_offset_offset, &mut table_offset) != 0 as libc::c_int {
        return 0 as *const libc::c_char;
    }
    if (table_offset as libc::c_int) < 0 as libc::c_int
        || table_offset as libc::c_int >= table_size as libc::c_int
    {
        return b"\0" as *const u8 as *const libc::c_char;
    }
    let mut str_offset: libc::c_int = table_pos as libc::c_int
        + table_offset as libc::c_int;
    if str_offset >= global.nterminfo as libc::c_int {
        return 0 as *const libc::c_char;
    }
    return (global.terminfo).offset(str_offset as isize) as *const libc::c_char;
}
unsafe extern "C" fn get_terminfo_int16(
    mut offset: libc::c_int,
    mut val: *mut int16_t,
) -> libc::c_int {
    if offset < 0 as libc::c_int || offset >= global.nterminfo as libc::c_int {
        *val = -(1 as libc::c_int) as int16_t;
        return -(1 as libc::c_int);
    }
    memcpy(
        val as *mut libc::c_void,
        (global.terminfo).offset(offset as isize) as *const libc::c_void,
        ::std::mem::size_of::<int16_t>() as libc::c_ulong,
    );
    return 0 as libc::c_int;
}
unsafe extern "C" fn load_terminfo() -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut tmp: [libc::c_char; 4096] = [0; 4096];
    let mut term: *const libc::c_char = getenv(
        b"TERM\0" as *const u8 as *const libc::c_char,
    );
    if term.is_null() {
        return -(1 as libc::c_int);
    }
    let mut terminfo: *const libc::c_char = getenv(
        b"TERMINFO\0" as *const u8 as *const libc::c_char,
    );
    if !terminfo.is_null() {
        return load_terminfo_from_path(terminfo, term);
    }
    let mut home: *const libc::c_char = getenv(
        b"HOME\0" as *const u8 as *const libc::c_char,
    );
    if !home.is_null() {
        rv = snprintf(
            tmp.as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 4096]>() as libc::c_ulong,
            b"%s/.terminfo\0" as *const u8 as *const libc::c_char,
            home,
        );
        if rv < 0 as libc::c_int
            || rv
                >= ::std::mem::size_of::<[libc::c_char; 4096]>() as libc::c_ulong
                    as libc::c_int
        {
            return -(1 as libc::c_int);
        }
        rv = load_terminfo_from_path(tmp.as_mut_ptr(), term);
        if rv == 0 as libc::c_int {
            return rv;
        }
    }
    let mut dirs: *const libc::c_char = getenv(
        b"TERMINFO_DIRS\0" as *const u8 as *const libc::c_char,
    );
    if !dirs.is_null() {
        rv = snprintf(
            tmp.as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 4096]>() as libc::c_ulong,
            b"%s\0" as *const u8 as *const libc::c_char,
            dirs,
        );
        if rv < 0 as libc::c_int
            || rv
                >= ::std::mem::size_of::<[libc::c_char; 4096]>() as libc::c_ulong
                    as libc::c_int
        {
            return -(1 as libc::c_int);
        }
        let mut dir: *mut libc::c_char = strtok(
            tmp.as_mut_ptr(),
            b":\0" as *const u8 as *const libc::c_char,
        );
        while !dir.is_null() {
            let mut cdir: *const libc::c_char = dir;
            if *cdir as libc::c_int != '\0' as i32 {
                rv = load_terminfo_from_path(cdir, term);
                if rv == 0 as libc::c_int {
                    return rv;
                }
            }
            dir = strtok(
                0 as *mut libc::c_char,
                b":\0" as *const u8 as *const libc::c_char,
            );
        }
    }
    rv = load_terminfo_from_path(
        b"/usr/local/etc/terminfo\0" as *const u8 as *const libc::c_char,
        term,
    );
    if rv == 0 as libc::c_int {
        return rv;
    }
    rv = load_terminfo_from_path(
        b"/usr/local/share/terminfo\0" as *const u8 as *const libc::c_char,
        term,
    );
    if rv == 0 as libc::c_int {
        return rv;
    }
    rv = load_terminfo_from_path(
        b"/usr/local/lib/terminfo\0" as *const u8 as *const libc::c_char,
        term,
    );
    if rv == 0 as libc::c_int {
        return rv;
    }
    rv = load_terminfo_from_path(
        b"/etc/terminfo\0" as *const u8 as *const libc::c_char,
        term,
    );
    if rv == 0 as libc::c_int {
        return rv;
    }
    rv = load_terminfo_from_path(
        b"/usr/share/terminfo\0" as *const u8 as *const libc::c_char,
        term,
    );
    if rv == 0 as libc::c_int {
        return rv;
    }
    rv = load_terminfo_from_path(
        b"/usr/lib/terminfo\0" as *const u8 as *const libc::c_char,
        term,
    );
    if rv == 0 as libc::c_int {
        return rv;
    }
    rv = load_terminfo_from_path(
        b"/usr/share/lib/terminfo\0" as *const u8 as *const libc::c_char,
        term,
    );
    if rv == 0 as libc::c_int {
        return rv;
    }
    rv = load_terminfo_from_path(
        b"/lib/terminfo\0" as *const u8 as *const libc::c_char,
        term,
    );
    if rv == 0 as libc::c_int {
        return rv;
    }
    return -(1 as libc::c_int);
}
unsafe extern "C" fn load_terminfo_from_path(
    mut path: *const libc::c_char,
    mut term: *const libc::c_char,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut tmp: [libc::c_char; 4096] = [0; 4096];
    rv = snprintf(
        tmp.as_mut_ptr(),
        ::std::mem::size_of::<[libc::c_char; 4096]>() as libc::c_ulong,
        b"%s/%c/%s\0" as *const u8 as *const libc::c_char,
        path,
        *term.offset(0 as libc::c_int as isize) as libc::c_int,
        term,
    );
    if rv < 0 as libc::c_int
        || rv
            >= ::std::mem::size_of::<[libc::c_char; 4096]>() as libc::c_ulong
                as libc::c_int
    {
        return -(1 as libc::c_int);
    }
    rv = read_terminfo_path(tmp.as_mut_ptr());
    if rv == 0 as libc::c_int {
        return rv;
    }
    return -(1 as libc::c_int);
}
unsafe extern "C" fn read_terminfo_path(mut path: *const libc::c_char) -> libc::c_int {
    let mut fp: *mut FILE = fopen(path, b"rb\0" as *const u8 as *const libc::c_char);
    if fp.is_null() {
        return -(1 as libc::c_int);
    }
    let mut st: stat = stat {
        st_dev: 0,
        st_ino: 0,
        st_nlink: 0,
        st_mode: 0,
        st_uid: 0,
        st_gid: 0,
        __pad0: 0,
        st_rdev: 0,
        st_size: 0,
        st_blksize: 0,
        st_blocks: 0,
        st_atim: timespec { tv_sec: 0, tv_nsec: 0 },
        st_mtim: timespec { tv_sec: 0, tv_nsec: 0 },
        st_ctim: timespec { tv_sec: 0, tv_nsec: 0 },
        __glibc_reserved: [0; 3],
    };
    if fstat(fileno(fp), &mut st) != 0 as libc::c_int {
        fclose(fp);
        return -(1 as libc::c_int);
    }
    let mut fsize: size_t = st.st_size as size_t;
    let mut data: *mut libc::c_char = malloc(fsize) as *mut libc::c_char;
    if data.is_null() {
        fclose(fp);
        return -(1 as libc::c_int);
    }
    if fread(data as *mut libc::c_void, 1 as libc::c_int as libc::c_ulong, fsize, fp)
        != fsize
    {
        fclose(fp);
        free(data as *mut libc::c_void);
        return -(1 as libc::c_int);
    }
    global.terminfo = data;
    global.nterminfo = fsize;
    fclose(fp);
    return 0 as libc::c_int;
}
unsafe extern "C" fn init_term_attrs() -> libc::c_int {
    if global.ttyfd < 0 as libc::c_int {
        return 0 as libc::c_int;
    }
    if tcgetattr(global.ttyfd, &mut global.orig_tios) != 0 as libc::c_int {
        global.last_errno = *__errno_location();
        return -(15 as libc::c_int);
    }
    let mut tios: termios = termios {
        c_iflag: 0,
        c_oflag: 0,
        c_cflag: 0,
        c_lflag: 0,
        c_line: 0,
        c_cc: [0; 32],
        c_ispeed: 0,
        c_ospeed: 0,
    };
    memcpy(
        &mut tios as *mut termios as *mut libc::c_void,
        &mut global.orig_tios as *mut termios as *const libc::c_void,
        ::std::mem::size_of::<termios>() as libc::c_ulong,
    );
    global.has_orig_tios = 1 as libc::c_int;
    cfmakeraw(&mut tios);
    tios.c_cc[6 as libc::c_int as usize] = 1 as libc::c_int as cc_t;
    tios.c_cc[5 as libc::c_int as usize] = 0 as libc::c_int as cc_t;
    if tcsetattr(global.ttyfd, 2 as libc::c_int, &mut tios) != 0 as libc::c_int {
        global.last_errno = *__errno_location();
        return -(16 as libc::c_int);
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn tb_shutdown() -> libc::c_int {
    if global.initialized == 0 {
        return -(8 as libc::c_int);
    }
    tb_deinit();
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn tb_width() -> libc::c_int {
    if global.initialized == 0 {
        return -(8 as libc::c_int);
    }
    return global.width;
}
pub unsafe extern "C" fn tb_height() -> libc::c_int {
    if global.initialized == 0 {
        return -(8 as libc::c_int);
    }
    return global.height;
}
pub unsafe extern "C" fn tb_clear() -> libc::c_int {
    if global.initialized == 0 {
        return -(8 as libc::c_int);
    }
    return cellbuf_clear(&mut global.back);
}
pub unsafe extern "C" fn tb_set_clear_attrs(
    mut fg: uintattr_t,
    mut bg: uintattr_t,
) -> libc::c_int {
    if global.initialized == 0 {
        return -(8 as libc::c_int);
    }
    global.fg = fg;
    global.bg = bg;
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn tb_present() -> libc::c_int {
    if global.initialized == 0 {
        return -(8 as libc::c_int);
    }
    let mut rv: libc::c_int = 0;
    global.last_x = -(1 as libc::c_int);
    global.last_y = -(1 as libc::c_int);
    let mut x: libc::c_int = 0;
    let mut y: libc::c_int = 0;
    let mut i: libc::c_int = 0;
    y = 0 as libc::c_int;
    while y < global.front.height {
        x = 0 as libc::c_int;
        while x < global.front.width {
            let mut back: *mut tb_cell = 0 as *mut tb_cell;
            let mut front: *mut tb_cell = 0 as *mut tb_cell;
            rv = cellbuf_get(&mut global.back, x, y, &mut back);
            if rv != 0 as libc::c_int {
                return rv;
            }
            rv = cellbuf_get(&mut global.front, x, y, &mut front);
            if rv != 0 as libc::c_int {
                return rv;
            }
            let mut w: libc::c_int = 0;
            w = tb_wcwidth((*back).ch as wchar_t as uint32_t);
            if w < 1 as libc::c_int {
                w = 1 as libc::c_int;
            }
            if cell_cmp(back, front) != 0 as libc::c_int {
                cell_copy(front, back);
                send_attr((*back).fg, (*back).bg);
                if w > 1 as libc::c_int
                    && x >= global.front.width - (w - 1 as libc::c_int)
                {
                    i = x;
                    while i < global.front.width {
                        send_char(i, y, ' ' as i32 as uint32_t);
                        i += 1;
                        i;
                    }
                } else {
                    send_char(x, y, (*back).ch);
                    i = 1 as libc::c_int;
                    while i < w {
                        let mut front_wide: *mut tb_cell = 0 as *mut tb_cell;
                        let mut invalid: uint32_t = -(1 as libc::c_int) as uint32_t;
                        rv = cellbuf_get(&mut global.front, x + i, y, &mut front_wide);
                        if rv != 0 as libc::c_int {
                            return rv;
                        }
                        rv = cell_set(
                            front_wide,
                            &mut invalid,
                            1 as libc::c_int as size_t,
                            -(1 as libc::c_int) as uintattr_t,
                            -(1 as libc::c_int) as uintattr_t,
                        );
                        if rv != 0 as libc::c_int {
                            return rv;
                        }
                        i += 1;
                        i;
                    }
                }
            }
            x += w;
        }
        y += 1;
        y;
    }
    rv = send_cursor_if(global.cursor_x, global.cursor_y);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = bytebuf_flush(&mut global.out, global.wfd);
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn cellbuf_get(
    mut c: *mut cellbuf_t,
    mut x: libc::c_int,
    mut y: libc::c_int,
    mut out: *mut *mut tb_cell,
) -> libc::c_int {
    if cellbuf_in_bounds(c, x, y) == 0 {
        *out = 0 as *mut tb_cell;
        return -(9 as libc::c_int);
    }
    *out = &mut *((*c).cells).offset((y * (*c).width + x) as isize) as *mut tb_cell;
    return 0 as libc::c_int;
}
unsafe extern "C" fn cellbuf_in_bounds(
    mut c: *mut cellbuf_t,
    mut x: libc::c_int,
    mut y: libc::c_int,
) -> libc::c_int {
    if x < 0 as libc::c_int || x >= (*c).width || y < 0 as libc::c_int
        || y >= (*c).height
    {
        return 0 as libc::c_int;
    }
    return 1 as libc::c_int;
}
unsafe extern "C" fn send_char(
    mut x: libc::c_int,
    mut y: libc::c_int,
    mut ch: uint32_t,
) -> libc::c_int {
    return send_cluster(x, y, &mut ch, 1 as libc::c_int as size_t);
}
unsafe extern "C" fn send_cluster(
    mut x: libc::c_int,
    mut y: libc::c_int,
    mut ch: *mut uint32_t,
    mut nch: size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut chu8: [libc::c_char; 8] = [0; 8];
    if global.last_x != x - 1 as libc::c_int || global.last_y != y {
        rv = send_cursor_if(x, y);
        if rv != 0 as libc::c_int {
            return rv;
        }
    }
    global.last_x = x;
    global.last_y = y;
    let mut i: libc::c_int = 0;
    i = 0 as libc::c_int;
    while i < nch as libc::c_int {
        let mut ch32: uint32_t = *ch.offset(i as isize);
        if tb_iswprint(ch32) == 0 {
            ch32 = 0xfffd as libc::c_int as uint32_t;
        }
        let mut chu8_len: libc::c_int = tb_utf8_unicode_to_char(chu8.as_mut_ptr(), ch32);
        rv = bytebuf_nputs(&mut global.out, chu8.as_mut_ptr(), chu8_len as size_t);
        if rv != 0 as libc::c_int {
            return rv;
        }
        i += 1;
        i;
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn tb_utf8_unicode_to_char(
    mut out: *mut libc::c_char,
    mut c: uint32_t,
) -> libc::c_int {
    let mut len: libc::c_int = 0 as libc::c_int;
    let mut first: libc::c_int = 0;
    let mut i: libc::c_int = 0;
    if c < 0x80 as libc::c_int as libc::c_uint {
        first = 0 as libc::c_int;
        len = 1 as libc::c_int;
    } else if c < 0x800 as libc::c_int as libc::c_uint {
        first = 0xc0 as libc::c_int;
        len = 2 as libc::c_int;
    } else if c < 0x10000 as libc::c_int as libc::c_uint {
        first = 0xe0 as libc::c_int;
        len = 3 as libc::c_int;
    } else if c < 0x200000 as libc::c_int as libc::c_uint {
        first = 0xf0 as libc::c_int;
        len = 4 as libc::c_int;
    } else if c < 0x4000000 as libc::c_int as libc::c_uint {
        first = 0xf8 as libc::c_int;
        len = 5 as libc::c_int;
    } else {
        first = 0xfc as libc::c_int;
        len = 6 as libc::c_int;
    }
    i = len - 1 as libc::c_int;
    while i > 0 as libc::c_int {
        *out
            .offset(
                i as isize,
            ) = (c & 0x3f as libc::c_int as libc::c_uint
            | 0x80 as libc::c_int as libc::c_uint) as libc::c_char;
        c >>= 6 as libc::c_int;
        i -= 1;
        i;
    }
    *out.offset(0 as libc::c_int as isize) = (c | first as libc::c_uint) as libc::c_char;
    *out.offset(len as isize) = '\0' as i32 as libc::c_char;
    return len;
}
pub unsafe extern "C" fn tb_iswprint(mut ch: uint32_t) -> libc::c_int {
    return tb_iswprint_ex(ch, 0 as *mut libc::c_int);
}
unsafe extern "C" fn tb_iswprint_ex(
    mut ch: uint32_t,
    mut w: *mut libc::c_int,
) -> libc::c_int {
    let mut lo: libc::c_int = 0 as libc::c_int;
    let mut hi: libc::c_int = 2143 as libc::c_int - 1 as libc::c_int;
    if ch >= 0x20 as libc::c_int as libc::c_uint
        && ch <= 0x7e as libc::c_int as libc::c_uint
    {
        if !w.is_null() {
            *w = 1 as libc::c_int;
        }
        return 1 as libc::c_int;
    } else if ch == 0 as libc::c_int as libc::c_uint {
        if !w.is_null() {
            *w = 0 as libc::c_int;
        }
        return 0 as libc::c_int;
    }
    while lo <= hi {
        let mut i: libc::c_int = (lo + hi) / 2 as libc::c_int;
        if ch < wcwidth_table[i as usize].range_start {
            hi = i - 1 as libc::c_int;
        } else if ch > wcwidth_table[i as usize].range_end {
            lo = i + 1 as libc::c_int;
        } else {
            if !w.is_null() {
                *w = wcwidth_table[i as usize].width;
            }
            return if wcwidth_table[i as usize].width >= 0 as libc::c_int {
                1 as libc::c_int
            } else {
                0 as libc::c_int
            };
        }
    }
    if !w.is_null() {
        *w = -(1 as libc::c_int);
    }
    return 0 as libc::c_int;
}
static mut wcwidth_table: [C2RustUnnamed_12; 2143] = [
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1 as libc::c_int as uint32_t,
            range_end: 0x1f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x20 as libc::c_int as uint32_t,
            range_end: 0x7e as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x7f as libc::c_int as uint32_t,
            range_end: 0x9f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa0 as libc::c_int as uint32_t,
            range_end: 0x2ff as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x300 as libc::c_int as uint32_t,
            range_end: 0x36f as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x370 as libc::c_int as uint32_t,
            range_end: 0x377 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x378 as libc::c_int as uint32_t,
            range_end: 0x379 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x37a as libc::c_int as uint32_t,
            range_end: 0x37f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x380 as libc::c_int as uint32_t,
            range_end: 0x383 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x384 as libc::c_int as uint32_t,
            range_end: 0x38a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x38b as libc::c_int as uint32_t,
            range_end: 0x38b as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x38c as libc::c_int as uint32_t,
            range_end: 0x38c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x38d as libc::c_int as uint32_t,
            range_end: 0x38d as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x38e as libc::c_int as uint32_t,
            range_end: 0x3a1 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x3a2 as libc::c_int as uint32_t,
            range_end: 0x3a2 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x3a3 as libc::c_int as uint32_t,
            range_end: 0x482 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x483 as libc::c_int as uint32_t,
            range_end: 0x489 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x48a as libc::c_int as uint32_t,
            range_end: 0x52f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x530 as libc::c_int as uint32_t,
            range_end: 0x530 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x531 as libc::c_int as uint32_t,
            range_end: 0x556 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x557 as libc::c_int as uint32_t,
            range_end: 0x558 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x559 as libc::c_int as uint32_t,
            range_end: 0x58a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x58b as libc::c_int as uint32_t,
            range_end: 0x58c as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x58d as libc::c_int as uint32_t,
            range_end: 0x58f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x590 as libc::c_int as uint32_t,
            range_end: 0x590 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x591 as libc::c_int as uint32_t,
            range_end: 0x5bd as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x5be as libc::c_int as uint32_t,
            range_end: 0x5be as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x5bf as libc::c_int as uint32_t,
            range_end: 0x5bf as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x5c0 as libc::c_int as uint32_t,
            range_end: 0x5c0 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x5c1 as libc::c_int as uint32_t,
            range_end: 0x5c2 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x5c3 as libc::c_int as uint32_t,
            range_end: 0x5c3 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x5c4 as libc::c_int as uint32_t,
            range_end: 0x5c5 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x5c6 as libc::c_int as uint32_t,
            range_end: 0x5c6 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x5c7 as libc::c_int as uint32_t,
            range_end: 0x5c7 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x5c8 as libc::c_int as uint32_t,
            range_end: 0x5cf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x5d0 as libc::c_int as uint32_t,
            range_end: 0x5ea as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x5eb as libc::c_int as uint32_t,
            range_end: 0x5ee as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x5ef as libc::c_int as uint32_t,
            range_end: 0x5f4 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x5f5 as libc::c_int as uint32_t,
            range_end: 0x5ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x600 as libc::c_int as uint32_t,
            range_end: 0x60f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x610 as libc::c_int as uint32_t,
            range_end: 0x61a as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x61b as libc::c_int as uint32_t,
            range_end: 0x61b as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x61c as libc::c_int as uint32_t,
            range_end: 0x61c as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x61d as libc::c_int as uint32_t,
            range_end: 0x64a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x64b as libc::c_int as uint32_t,
            range_end: 0x65f as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x660 as libc::c_int as uint32_t,
            range_end: 0x66f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x670 as libc::c_int as uint32_t,
            range_end: 0x670 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x671 as libc::c_int as uint32_t,
            range_end: 0x6d5 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x6d6 as libc::c_int as uint32_t,
            range_end: 0x6dc as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x6dd as libc::c_int as uint32_t,
            range_end: 0x6de as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x6df as libc::c_int as uint32_t,
            range_end: 0x6e4 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x6e5 as libc::c_int as uint32_t,
            range_end: 0x6e6 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x6e7 as libc::c_int as uint32_t,
            range_end: 0x6e8 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x6e9 as libc::c_int as uint32_t,
            range_end: 0x6e9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x6ea as libc::c_int as uint32_t,
            range_end: 0x6ed as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x6ee as libc::c_int as uint32_t,
            range_end: 0x70d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x70e as libc::c_int as uint32_t,
            range_end: 0x70e as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x70f as libc::c_int as uint32_t,
            range_end: 0x710 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x711 as libc::c_int as uint32_t,
            range_end: 0x711 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x712 as libc::c_int as uint32_t,
            range_end: 0x72f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x730 as libc::c_int as uint32_t,
            range_end: 0x74a as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x74b as libc::c_int as uint32_t,
            range_end: 0x74c as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x74d as libc::c_int as uint32_t,
            range_end: 0x7a5 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x7a6 as libc::c_int as uint32_t,
            range_end: 0x7b0 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x7b1 as libc::c_int as uint32_t,
            range_end: 0x7b1 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x7b2 as libc::c_int as uint32_t,
            range_end: 0x7bf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x7c0 as libc::c_int as uint32_t,
            range_end: 0x7ea as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x7eb as libc::c_int as uint32_t,
            range_end: 0x7f3 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x7f4 as libc::c_int as uint32_t,
            range_end: 0x7fa as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x7fb as libc::c_int as uint32_t,
            range_end: 0x7fc as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x7fd as libc::c_int as uint32_t,
            range_end: 0x7fd as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x7fe as libc::c_int as uint32_t,
            range_end: 0x815 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x816 as libc::c_int as uint32_t,
            range_end: 0x819 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x81a as libc::c_int as uint32_t,
            range_end: 0x81a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x81b as libc::c_int as uint32_t,
            range_end: 0x823 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x824 as libc::c_int as uint32_t,
            range_end: 0x824 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x825 as libc::c_int as uint32_t,
            range_end: 0x827 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x828 as libc::c_int as uint32_t,
            range_end: 0x828 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x829 as libc::c_int as uint32_t,
            range_end: 0x82d as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x82e as libc::c_int as uint32_t,
            range_end: 0x82f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x830 as libc::c_int as uint32_t,
            range_end: 0x83e as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x83f as libc::c_int as uint32_t,
            range_end: 0x83f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x840 as libc::c_int as uint32_t,
            range_end: 0x858 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x859 as libc::c_int as uint32_t,
            range_end: 0x85b as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x85c as libc::c_int as uint32_t,
            range_end: 0x85d as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x85e as libc::c_int as uint32_t,
            range_end: 0x85e as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x85f as libc::c_int as uint32_t,
            range_end: 0x85f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x860 as libc::c_int as uint32_t,
            range_end: 0x86a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x86b as libc::c_int as uint32_t,
            range_end: 0x86f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x870 as libc::c_int as uint32_t,
            range_end: 0x88e as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x88f as libc::c_int as uint32_t,
            range_end: 0x88f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x890 as libc::c_int as uint32_t,
            range_end: 0x891 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x892 as libc::c_int as uint32_t,
            range_end: 0x896 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x897 as libc::c_int as uint32_t,
            range_end: 0x89f as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x8a0 as libc::c_int as uint32_t,
            range_end: 0x8c9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x8ca as libc::c_int as uint32_t,
            range_end: 0x8e1 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x8e2 as libc::c_int as uint32_t,
            range_end: 0x8e2 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x8e3 as libc::c_int as uint32_t,
            range_end: 0x902 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x903 as libc::c_int as uint32_t,
            range_end: 0x939 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x93a as libc::c_int as uint32_t,
            range_end: 0x93a as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x93b as libc::c_int as uint32_t,
            range_end: 0x93b as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x93c as libc::c_int as uint32_t,
            range_end: 0x93c as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x93d as libc::c_int as uint32_t,
            range_end: 0x940 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x941 as libc::c_int as uint32_t,
            range_end: 0x948 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x949 as libc::c_int as uint32_t,
            range_end: 0x94c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x94d as libc::c_int as uint32_t,
            range_end: 0x94d as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x94e as libc::c_int as uint32_t,
            range_end: 0x950 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x951 as libc::c_int as uint32_t,
            range_end: 0x957 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x958 as libc::c_int as uint32_t,
            range_end: 0x961 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x962 as libc::c_int as uint32_t,
            range_end: 0x963 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x964 as libc::c_int as uint32_t,
            range_end: 0x980 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x981 as libc::c_int as uint32_t,
            range_end: 0x981 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x982 as libc::c_int as uint32_t,
            range_end: 0x983 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x984 as libc::c_int as uint32_t,
            range_end: 0x984 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x985 as libc::c_int as uint32_t,
            range_end: 0x98c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x98d as libc::c_int as uint32_t,
            range_end: 0x98e as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x98f as libc::c_int as uint32_t,
            range_end: 0x990 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x991 as libc::c_int as uint32_t,
            range_end: 0x992 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x993 as libc::c_int as uint32_t,
            range_end: 0x9a8 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x9a9 as libc::c_int as uint32_t,
            range_end: 0x9a9 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x9aa as libc::c_int as uint32_t,
            range_end: 0x9b0 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x9b1 as libc::c_int as uint32_t,
            range_end: 0x9b1 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x9b2 as libc::c_int as uint32_t,
            range_end: 0x9b2 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x9b3 as libc::c_int as uint32_t,
            range_end: 0x9b5 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x9b6 as libc::c_int as uint32_t,
            range_end: 0x9b9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x9ba as libc::c_int as uint32_t,
            range_end: 0x9bb as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x9bc as libc::c_int as uint32_t,
            range_end: 0x9bc as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x9bd as libc::c_int as uint32_t,
            range_end: 0x9c0 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x9c1 as libc::c_int as uint32_t,
            range_end: 0x9c4 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x9c5 as libc::c_int as uint32_t,
            range_end: 0x9c6 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x9c7 as libc::c_int as uint32_t,
            range_end: 0x9c8 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x9c9 as libc::c_int as uint32_t,
            range_end: 0x9ca as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x9cb as libc::c_int as uint32_t,
            range_end: 0x9cc as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x9cd as libc::c_int as uint32_t,
            range_end: 0x9cd as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x9ce as libc::c_int as uint32_t,
            range_end: 0x9ce as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x9cf as libc::c_int as uint32_t,
            range_end: 0x9d6 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x9d7 as libc::c_int as uint32_t,
            range_end: 0x9d7 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x9d8 as libc::c_int as uint32_t,
            range_end: 0x9db as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x9dc as libc::c_int as uint32_t,
            range_end: 0x9dd as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x9de as libc::c_int as uint32_t,
            range_end: 0x9de as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x9df as libc::c_int as uint32_t,
            range_end: 0x9e1 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x9e2 as libc::c_int as uint32_t,
            range_end: 0x9e3 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x9e4 as libc::c_int as uint32_t,
            range_end: 0x9e5 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x9e6 as libc::c_int as uint32_t,
            range_end: 0x9fd as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x9fe as libc::c_int as uint32_t,
            range_end: 0x9fe as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x9ff as libc::c_int as uint32_t,
            range_end: 0xa00 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa01 as libc::c_int as uint32_t,
            range_end: 0xa02 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa03 as libc::c_int as uint32_t,
            range_end: 0xa03 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa04 as libc::c_int as uint32_t,
            range_end: 0xa04 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa05 as libc::c_int as uint32_t,
            range_end: 0xa0a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa0b as libc::c_int as uint32_t,
            range_end: 0xa0e as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa0f as libc::c_int as uint32_t,
            range_end: 0xa10 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa11 as libc::c_int as uint32_t,
            range_end: 0xa12 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa13 as libc::c_int as uint32_t,
            range_end: 0xa28 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa29 as libc::c_int as uint32_t,
            range_end: 0xa29 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa2a as libc::c_int as uint32_t,
            range_end: 0xa30 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa31 as libc::c_int as uint32_t,
            range_end: 0xa31 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa32 as libc::c_int as uint32_t,
            range_end: 0xa33 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa34 as libc::c_int as uint32_t,
            range_end: 0xa34 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa35 as libc::c_int as uint32_t,
            range_end: 0xa36 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa37 as libc::c_int as uint32_t,
            range_end: 0xa37 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa38 as libc::c_int as uint32_t,
            range_end: 0xa39 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa3a as libc::c_int as uint32_t,
            range_end: 0xa3b as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa3c as libc::c_int as uint32_t,
            range_end: 0xa3c as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa3d as libc::c_int as uint32_t,
            range_end: 0xa3d as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa3e as libc::c_int as uint32_t,
            range_end: 0xa40 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa41 as libc::c_int as uint32_t,
            range_end: 0xa42 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa43 as libc::c_int as uint32_t,
            range_end: 0xa46 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa47 as libc::c_int as uint32_t,
            range_end: 0xa48 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa49 as libc::c_int as uint32_t,
            range_end: 0xa4a as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa4b as libc::c_int as uint32_t,
            range_end: 0xa4d as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa4e as libc::c_int as uint32_t,
            range_end: 0xa50 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa51 as libc::c_int as uint32_t,
            range_end: 0xa51 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa52 as libc::c_int as uint32_t,
            range_end: 0xa58 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa59 as libc::c_int as uint32_t,
            range_end: 0xa5c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa5d as libc::c_int as uint32_t,
            range_end: 0xa5d as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa5e as libc::c_int as uint32_t,
            range_end: 0xa5e as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa5f as libc::c_int as uint32_t,
            range_end: 0xa65 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa66 as libc::c_int as uint32_t,
            range_end: 0xa6f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa70 as libc::c_int as uint32_t,
            range_end: 0xa71 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa72 as libc::c_int as uint32_t,
            range_end: 0xa74 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa75 as libc::c_int as uint32_t,
            range_end: 0xa75 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa76 as libc::c_int as uint32_t,
            range_end: 0xa76 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa77 as libc::c_int as uint32_t,
            range_end: 0xa80 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa81 as libc::c_int as uint32_t,
            range_end: 0xa82 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa83 as libc::c_int as uint32_t,
            range_end: 0xa83 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa84 as libc::c_int as uint32_t,
            range_end: 0xa84 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa85 as libc::c_int as uint32_t,
            range_end: 0xa8d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa8e as libc::c_int as uint32_t,
            range_end: 0xa8e as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa8f as libc::c_int as uint32_t,
            range_end: 0xa91 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa92 as libc::c_int as uint32_t,
            range_end: 0xa92 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa93 as libc::c_int as uint32_t,
            range_end: 0xaa8 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaa9 as libc::c_int as uint32_t,
            range_end: 0xaa9 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaaa as libc::c_int as uint32_t,
            range_end: 0xab0 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xab1 as libc::c_int as uint32_t,
            range_end: 0xab1 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xab2 as libc::c_int as uint32_t,
            range_end: 0xab3 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xab4 as libc::c_int as uint32_t,
            range_end: 0xab4 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xab5 as libc::c_int as uint32_t,
            range_end: 0xab9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaba as libc::c_int as uint32_t,
            range_end: 0xabb as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xabc as libc::c_int as uint32_t,
            range_end: 0xabc as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xabd as libc::c_int as uint32_t,
            range_end: 0xac0 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xac1 as libc::c_int as uint32_t,
            range_end: 0xac5 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xac6 as libc::c_int as uint32_t,
            range_end: 0xac6 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xac7 as libc::c_int as uint32_t,
            range_end: 0xac8 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xac9 as libc::c_int as uint32_t,
            range_end: 0xac9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaca as libc::c_int as uint32_t,
            range_end: 0xaca as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xacb as libc::c_int as uint32_t,
            range_end: 0xacc as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xacd as libc::c_int as uint32_t,
            range_end: 0xacd as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xace as libc::c_int as uint32_t,
            range_end: 0xacf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xad0 as libc::c_int as uint32_t,
            range_end: 0xad0 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xad1 as libc::c_int as uint32_t,
            range_end: 0xadf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xae0 as libc::c_int as uint32_t,
            range_end: 0xae1 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xae2 as libc::c_int as uint32_t,
            range_end: 0xae3 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xae4 as libc::c_int as uint32_t,
            range_end: 0xae5 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xae6 as libc::c_int as uint32_t,
            range_end: 0xaf1 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaf2 as libc::c_int as uint32_t,
            range_end: 0xaf8 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaf9 as libc::c_int as uint32_t,
            range_end: 0xaf9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xafa as libc::c_int as uint32_t,
            range_end: 0xaff as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb00 as libc::c_int as uint32_t,
            range_end: 0xb00 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb01 as libc::c_int as uint32_t,
            range_end: 0xb01 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb02 as libc::c_int as uint32_t,
            range_end: 0xb03 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb04 as libc::c_int as uint32_t,
            range_end: 0xb04 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb05 as libc::c_int as uint32_t,
            range_end: 0xb0c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb0d as libc::c_int as uint32_t,
            range_end: 0xb0e as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb0f as libc::c_int as uint32_t,
            range_end: 0xb10 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb11 as libc::c_int as uint32_t,
            range_end: 0xb12 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb13 as libc::c_int as uint32_t,
            range_end: 0xb28 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb29 as libc::c_int as uint32_t,
            range_end: 0xb29 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb2a as libc::c_int as uint32_t,
            range_end: 0xb30 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb31 as libc::c_int as uint32_t,
            range_end: 0xb31 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb32 as libc::c_int as uint32_t,
            range_end: 0xb33 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb34 as libc::c_int as uint32_t,
            range_end: 0xb34 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb35 as libc::c_int as uint32_t,
            range_end: 0xb39 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb3a as libc::c_int as uint32_t,
            range_end: 0xb3b as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb3c as libc::c_int as uint32_t,
            range_end: 0xb3c as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb3d as libc::c_int as uint32_t,
            range_end: 0xb3e as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb3f as libc::c_int as uint32_t,
            range_end: 0xb3f as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb40 as libc::c_int as uint32_t,
            range_end: 0xb40 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb41 as libc::c_int as uint32_t,
            range_end: 0xb44 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb45 as libc::c_int as uint32_t,
            range_end: 0xb46 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb47 as libc::c_int as uint32_t,
            range_end: 0xb48 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb49 as libc::c_int as uint32_t,
            range_end: 0xb4a as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb4b as libc::c_int as uint32_t,
            range_end: 0xb4c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb4d as libc::c_int as uint32_t,
            range_end: 0xb4d as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb4e as libc::c_int as uint32_t,
            range_end: 0xb54 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb55 as libc::c_int as uint32_t,
            range_end: 0xb56 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb57 as libc::c_int as uint32_t,
            range_end: 0xb57 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb58 as libc::c_int as uint32_t,
            range_end: 0xb5b as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb5c as libc::c_int as uint32_t,
            range_end: 0xb5d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb5e as libc::c_int as uint32_t,
            range_end: 0xb5e as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb5f as libc::c_int as uint32_t,
            range_end: 0xb61 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb62 as libc::c_int as uint32_t,
            range_end: 0xb63 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb64 as libc::c_int as uint32_t,
            range_end: 0xb65 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb66 as libc::c_int as uint32_t,
            range_end: 0xb77 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb78 as libc::c_int as uint32_t,
            range_end: 0xb81 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb82 as libc::c_int as uint32_t,
            range_end: 0xb82 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb83 as libc::c_int as uint32_t,
            range_end: 0xb83 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb84 as libc::c_int as uint32_t,
            range_end: 0xb84 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb85 as libc::c_int as uint32_t,
            range_end: 0xb8a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb8b as libc::c_int as uint32_t,
            range_end: 0xb8d as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb8e as libc::c_int as uint32_t,
            range_end: 0xb90 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb91 as libc::c_int as uint32_t,
            range_end: 0xb91 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb92 as libc::c_int as uint32_t,
            range_end: 0xb95 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb96 as libc::c_int as uint32_t,
            range_end: 0xb98 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb99 as libc::c_int as uint32_t,
            range_end: 0xb9a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb9b as libc::c_int as uint32_t,
            range_end: 0xb9b as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb9c as libc::c_int as uint32_t,
            range_end: 0xb9c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb9d as libc::c_int as uint32_t,
            range_end: 0xb9d as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xb9e as libc::c_int as uint32_t,
            range_end: 0xb9f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xba0 as libc::c_int as uint32_t,
            range_end: 0xba2 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xba3 as libc::c_int as uint32_t,
            range_end: 0xba4 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xba5 as libc::c_int as uint32_t,
            range_end: 0xba7 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xba8 as libc::c_int as uint32_t,
            range_end: 0xbaa as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xbab as libc::c_int as uint32_t,
            range_end: 0xbad as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xbae as libc::c_int as uint32_t,
            range_end: 0xbb9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xbba as libc::c_int as uint32_t,
            range_end: 0xbbd as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xbbe as libc::c_int as uint32_t,
            range_end: 0xbbf as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xbc0 as libc::c_int as uint32_t,
            range_end: 0xbc0 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xbc1 as libc::c_int as uint32_t,
            range_end: 0xbc2 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xbc3 as libc::c_int as uint32_t,
            range_end: 0xbc5 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xbc6 as libc::c_int as uint32_t,
            range_end: 0xbc8 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xbc9 as libc::c_int as uint32_t,
            range_end: 0xbc9 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xbca as libc::c_int as uint32_t,
            range_end: 0xbcc as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xbcd as libc::c_int as uint32_t,
            range_end: 0xbcd as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xbce as libc::c_int as uint32_t,
            range_end: 0xbcf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xbd0 as libc::c_int as uint32_t,
            range_end: 0xbd0 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xbd1 as libc::c_int as uint32_t,
            range_end: 0xbd6 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xbd7 as libc::c_int as uint32_t,
            range_end: 0xbd7 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xbd8 as libc::c_int as uint32_t,
            range_end: 0xbe5 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xbe6 as libc::c_int as uint32_t,
            range_end: 0xbfa as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xbfb as libc::c_int as uint32_t,
            range_end: 0xbff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc00 as libc::c_int as uint32_t,
            range_end: 0xc00 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc01 as libc::c_int as uint32_t,
            range_end: 0xc03 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc04 as libc::c_int as uint32_t,
            range_end: 0xc04 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc05 as libc::c_int as uint32_t,
            range_end: 0xc0c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc0d as libc::c_int as uint32_t,
            range_end: 0xc0d as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc0e as libc::c_int as uint32_t,
            range_end: 0xc10 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc11 as libc::c_int as uint32_t,
            range_end: 0xc11 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc12 as libc::c_int as uint32_t,
            range_end: 0xc28 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc29 as libc::c_int as uint32_t,
            range_end: 0xc29 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc2a as libc::c_int as uint32_t,
            range_end: 0xc39 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc3a as libc::c_int as uint32_t,
            range_end: 0xc3b as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc3c as libc::c_int as uint32_t,
            range_end: 0xc3c as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc3d as libc::c_int as uint32_t,
            range_end: 0xc3d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc3e as libc::c_int as uint32_t,
            range_end: 0xc40 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc41 as libc::c_int as uint32_t,
            range_end: 0xc44 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc45 as libc::c_int as uint32_t,
            range_end: 0xc45 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc46 as libc::c_int as uint32_t,
            range_end: 0xc48 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc49 as libc::c_int as uint32_t,
            range_end: 0xc49 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc4a as libc::c_int as uint32_t,
            range_end: 0xc4d as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc4e as libc::c_int as uint32_t,
            range_end: 0xc54 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc55 as libc::c_int as uint32_t,
            range_end: 0xc56 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc57 as libc::c_int as uint32_t,
            range_end: 0xc57 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc58 as libc::c_int as uint32_t,
            range_end: 0xc5a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc5b as libc::c_int as uint32_t,
            range_end: 0xc5c as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc5d as libc::c_int as uint32_t,
            range_end: 0xc5d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc5e as libc::c_int as uint32_t,
            range_end: 0xc5f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc60 as libc::c_int as uint32_t,
            range_end: 0xc61 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc62 as libc::c_int as uint32_t,
            range_end: 0xc63 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc64 as libc::c_int as uint32_t,
            range_end: 0xc65 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc66 as libc::c_int as uint32_t,
            range_end: 0xc6f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc70 as libc::c_int as uint32_t,
            range_end: 0xc76 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc77 as libc::c_int as uint32_t,
            range_end: 0xc80 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc81 as libc::c_int as uint32_t,
            range_end: 0xc81 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc82 as libc::c_int as uint32_t,
            range_end: 0xc8c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc8d as libc::c_int as uint32_t,
            range_end: 0xc8d as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc8e as libc::c_int as uint32_t,
            range_end: 0xc90 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc91 as libc::c_int as uint32_t,
            range_end: 0xc91 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xc92 as libc::c_int as uint32_t,
            range_end: 0xca8 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xca9 as libc::c_int as uint32_t,
            range_end: 0xca9 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xcaa as libc::c_int as uint32_t,
            range_end: 0xcb3 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xcb4 as libc::c_int as uint32_t,
            range_end: 0xcb4 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xcb5 as libc::c_int as uint32_t,
            range_end: 0xcb9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xcba as libc::c_int as uint32_t,
            range_end: 0xcbb as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xcbc as libc::c_int as uint32_t,
            range_end: 0xcbc as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xcbd as libc::c_int as uint32_t,
            range_end: 0xcbe as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xcbf as libc::c_int as uint32_t,
            range_end: 0xcbf as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xcc0 as libc::c_int as uint32_t,
            range_end: 0xcc4 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xcc5 as libc::c_int as uint32_t,
            range_end: 0xcc5 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xcc6 as libc::c_int as uint32_t,
            range_end: 0xcc6 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xcc7 as libc::c_int as uint32_t,
            range_end: 0xcc8 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xcc9 as libc::c_int as uint32_t,
            range_end: 0xcc9 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xcca as libc::c_int as uint32_t,
            range_end: 0xccb as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xccc as libc::c_int as uint32_t,
            range_end: 0xccd as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xcce as libc::c_int as uint32_t,
            range_end: 0xcd4 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xcd5 as libc::c_int as uint32_t,
            range_end: 0xcd6 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xcd7 as libc::c_int as uint32_t,
            range_end: 0xcdc as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xcdd as libc::c_int as uint32_t,
            range_end: 0xcde as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xcdf as libc::c_int as uint32_t,
            range_end: 0xcdf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xce0 as libc::c_int as uint32_t,
            range_end: 0xce1 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xce2 as libc::c_int as uint32_t,
            range_end: 0xce3 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xce4 as libc::c_int as uint32_t,
            range_end: 0xce5 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xce6 as libc::c_int as uint32_t,
            range_end: 0xcef as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xcf0 as libc::c_int as uint32_t,
            range_end: 0xcf0 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xcf1 as libc::c_int as uint32_t,
            range_end: 0xcf3 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xcf4 as libc::c_int as uint32_t,
            range_end: 0xcff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xd00 as libc::c_int as uint32_t,
            range_end: 0xd01 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xd02 as libc::c_int as uint32_t,
            range_end: 0xd0c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xd0d as libc::c_int as uint32_t,
            range_end: 0xd0d as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xd0e as libc::c_int as uint32_t,
            range_end: 0xd10 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xd11 as libc::c_int as uint32_t,
            range_end: 0xd11 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xd12 as libc::c_int as uint32_t,
            range_end: 0xd3a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xd3b as libc::c_int as uint32_t,
            range_end: 0xd3c as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xd3d as libc::c_int as uint32_t,
            range_end: 0xd40 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xd41 as libc::c_int as uint32_t,
            range_end: 0xd44 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xd45 as libc::c_int as uint32_t,
            range_end: 0xd45 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xd46 as libc::c_int as uint32_t,
            range_end: 0xd48 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xd49 as libc::c_int as uint32_t,
            range_end: 0xd49 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xd4a as libc::c_int as uint32_t,
            range_end: 0xd4c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xd4d as libc::c_int as uint32_t,
            range_end: 0xd4d as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xd4e as libc::c_int as uint32_t,
            range_end: 0xd4f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xd50 as libc::c_int as uint32_t,
            range_end: 0xd53 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xd54 as libc::c_int as uint32_t,
            range_end: 0xd61 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xd62 as libc::c_int as uint32_t,
            range_end: 0xd63 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xd64 as libc::c_int as uint32_t,
            range_end: 0xd65 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xd66 as libc::c_int as uint32_t,
            range_end: 0xd7f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xd80 as libc::c_int as uint32_t,
            range_end: 0xd80 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xd81 as libc::c_int as uint32_t,
            range_end: 0xd81 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xd82 as libc::c_int as uint32_t,
            range_end: 0xd83 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xd84 as libc::c_int as uint32_t,
            range_end: 0xd84 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xd85 as libc::c_int as uint32_t,
            range_end: 0xd96 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xd97 as libc::c_int as uint32_t,
            range_end: 0xd99 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xd9a as libc::c_int as uint32_t,
            range_end: 0xdb1 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xdb2 as libc::c_int as uint32_t,
            range_end: 0xdb2 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xdb3 as libc::c_int as uint32_t,
            range_end: 0xdbb as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xdbc as libc::c_int as uint32_t,
            range_end: 0xdbc as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xdbd as libc::c_int as uint32_t,
            range_end: 0xdbd as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xdbe as libc::c_int as uint32_t,
            range_end: 0xdbf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xdc0 as libc::c_int as uint32_t,
            range_end: 0xdc6 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xdc7 as libc::c_int as uint32_t,
            range_end: 0xdc9 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xdca as libc::c_int as uint32_t,
            range_end: 0xdca as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xdcb as libc::c_int as uint32_t,
            range_end: 0xdce as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xdcf as libc::c_int as uint32_t,
            range_end: 0xdd1 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xdd2 as libc::c_int as uint32_t,
            range_end: 0xdd4 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xdd5 as libc::c_int as uint32_t,
            range_end: 0xdd5 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xdd6 as libc::c_int as uint32_t,
            range_end: 0xdd6 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xdd7 as libc::c_int as uint32_t,
            range_end: 0xdd7 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xdd8 as libc::c_int as uint32_t,
            range_end: 0xddf as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xde0 as libc::c_int as uint32_t,
            range_end: 0xde5 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xde6 as libc::c_int as uint32_t,
            range_end: 0xdef as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xdf0 as libc::c_int as uint32_t,
            range_end: 0xdf1 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xdf2 as libc::c_int as uint32_t,
            range_end: 0xdf4 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xdf5 as libc::c_int as uint32_t,
            range_end: 0xe00 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xe01 as libc::c_int as uint32_t,
            range_end: 0xe30 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xe31 as libc::c_int as uint32_t,
            range_end: 0xe31 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xe32 as libc::c_int as uint32_t,
            range_end: 0xe33 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xe34 as libc::c_int as uint32_t,
            range_end: 0xe3a as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xe3b as libc::c_int as uint32_t,
            range_end: 0xe3e as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xe3f as libc::c_int as uint32_t,
            range_end: 0xe46 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xe47 as libc::c_int as uint32_t,
            range_end: 0xe4e as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xe4f as libc::c_int as uint32_t,
            range_end: 0xe5b as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xe5c as libc::c_int as uint32_t,
            range_end: 0xe80 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xe81 as libc::c_int as uint32_t,
            range_end: 0xe82 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xe83 as libc::c_int as uint32_t,
            range_end: 0xe83 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xe84 as libc::c_int as uint32_t,
            range_end: 0xe84 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xe85 as libc::c_int as uint32_t,
            range_end: 0xe85 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xe86 as libc::c_int as uint32_t,
            range_end: 0xe8a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xe8b as libc::c_int as uint32_t,
            range_end: 0xe8b as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xe8c as libc::c_int as uint32_t,
            range_end: 0xea3 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xea4 as libc::c_int as uint32_t,
            range_end: 0xea4 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xea5 as libc::c_int as uint32_t,
            range_end: 0xea5 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xea6 as libc::c_int as uint32_t,
            range_end: 0xea6 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xea7 as libc::c_int as uint32_t,
            range_end: 0xeb0 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xeb1 as libc::c_int as uint32_t,
            range_end: 0xeb1 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xeb2 as libc::c_int as uint32_t,
            range_end: 0xeb3 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xeb4 as libc::c_int as uint32_t,
            range_end: 0xebc as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xebd as libc::c_int as uint32_t,
            range_end: 0xebd as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xebe as libc::c_int as uint32_t,
            range_end: 0xebf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xec0 as libc::c_int as uint32_t,
            range_end: 0xec4 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xec5 as libc::c_int as uint32_t,
            range_end: 0xec5 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xec6 as libc::c_int as uint32_t,
            range_end: 0xec6 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xec7 as libc::c_int as uint32_t,
            range_end: 0xec7 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xec8 as libc::c_int as uint32_t,
            range_end: 0xece as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xecf as libc::c_int as uint32_t,
            range_end: 0xecf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xed0 as libc::c_int as uint32_t,
            range_end: 0xed9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xeda as libc::c_int as uint32_t,
            range_end: 0xedb as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xedc as libc::c_int as uint32_t,
            range_end: 0xedf as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xee0 as libc::c_int as uint32_t,
            range_end: 0xeff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xf00 as libc::c_int as uint32_t,
            range_end: 0xf17 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xf18 as libc::c_int as uint32_t,
            range_end: 0xf19 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xf1a as libc::c_int as uint32_t,
            range_end: 0xf34 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xf35 as libc::c_int as uint32_t,
            range_end: 0xf35 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xf36 as libc::c_int as uint32_t,
            range_end: 0xf36 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xf37 as libc::c_int as uint32_t,
            range_end: 0xf37 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xf38 as libc::c_int as uint32_t,
            range_end: 0xf38 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xf39 as libc::c_int as uint32_t,
            range_end: 0xf39 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xf3a as libc::c_int as uint32_t,
            range_end: 0xf47 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xf48 as libc::c_int as uint32_t,
            range_end: 0xf48 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xf49 as libc::c_int as uint32_t,
            range_end: 0xf6c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xf6d as libc::c_int as uint32_t,
            range_end: 0xf70 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xf71 as libc::c_int as uint32_t,
            range_end: 0xf7e as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xf7f as libc::c_int as uint32_t,
            range_end: 0xf7f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xf80 as libc::c_int as uint32_t,
            range_end: 0xf84 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xf85 as libc::c_int as uint32_t,
            range_end: 0xf85 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xf86 as libc::c_int as uint32_t,
            range_end: 0xf87 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xf88 as libc::c_int as uint32_t,
            range_end: 0xf8c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xf8d as libc::c_int as uint32_t,
            range_end: 0xf97 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xf98 as libc::c_int as uint32_t,
            range_end: 0xf98 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xf99 as libc::c_int as uint32_t,
            range_end: 0xfbc as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfbd as libc::c_int as uint32_t,
            range_end: 0xfbd as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfbe as libc::c_int as uint32_t,
            range_end: 0xfc5 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfc6 as libc::c_int as uint32_t,
            range_end: 0xfc6 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfc7 as libc::c_int as uint32_t,
            range_end: 0xfcc as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfcd as libc::c_int as uint32_t,
            range_end: 0xfcd as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfce as libc::c_int as uint32_t,
            range_end: 0xfda as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfdb as libc::c_int as uint32_t,
            range_end: 0xfff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1000 as libc::c_int as uint32_t,
            range_end: 0x102c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x102d as libc::c_int as uint32_t,
            range_end: 0x1030 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1031 as libc::c_int as uint32_t,
            range_end: 0x1031 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1032 as libc::c_int as uint32_t,
            range_end: 0x1037 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1038 as libc::c_int as uint32_t,
            range_end: 0x1038 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1039 as libc::c_int as uint32_t,
            range_end: 0x103a as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x103b as libc::c_int as uint32_t,
            range_end: 0x103c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x103d as libc::c_int as uint32_t,
            range_end: 0x103e as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x103f as libc::c_int as uint32_t,
            range_end: 0x1057 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1058 as libc::c_int as uint32_t,
            range_end: 0x1059 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x105a as libc::c_int as uint32_t,
            range_end: 0x105d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x105e as libc::c_int as uint32_t,
            range_end: 0x1060 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1061 as libc::c_int as uint32_t,
            range_end: 0x1070 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1071 as libc::c_int as uint32_t,
            range_end: 0x1074 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1075 as libc::c_int as uint32_t,
            range_end: 0x1081 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1082 as libc::c_int as uint32_t,
            range_end: 0x1082 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1083 as libc::c_int as uint32_t,
            range_end: 0x1084 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1085 as libc::c_int as uint32_t,
            range_end: 0x1086 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1087 as libc::c_int as uint32_t,
            range_end: 0x108c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x108d as libc::c_int as uint32_t,
            range_end: 0x108d as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x108e as libc::c_int as uint32_t,
            range_end: 0x109c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x109d as libc::c_int as uint32_t,
            range_end: 0x109d as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x109e as libc::c_int as uint32_t,
            range_end: 0x10c5 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10c6 as libc::c_int as uint32_t,
            range_end: 0x10c6 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10c7 as libc::c_int as uint32_t,
            range_end: 0x10c7 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10c8 as libc::c_int as uint32_t,
            range_end: 0x10cc as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10cd as libc::c_int as uint32_t,
            range_end: 0x10cd as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10ce as libc::c_int as uint32_t,
            range_end: 0x10cf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10d0 as libc::c_int as uint32_t,
            range_end: 0x10ff as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1100 as libc::c_int as uint32_t,
            range_end: 0x115f as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1160 as libc::c_int as uint32_t,
            range_end: 0x11ff as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1200 as libc::c_int as uint32_t,
            range_end: 0x1248 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1249 as libc::c_int as uint32_t,
            range_end: 0x1249 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x124a as libc::c_int as uint32_t,
            range_end: 0x124d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x124e as libc::c_int as uint32_t,
            range_end: 0x124f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1250 as libc::c_int as uint32_t,
            range_end: 0x1256 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1257 as libc::c_int as uint32_t,
            range_end: 0x1257 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1258 as libc::c_int as uint32_t,
            range_end: 0x1258 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1259 as libc::c_int as uint32_t,
            range_end: 0x1259 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x125a as libc::c_int as uint32_t,
            range_end: 0x125d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x125e as libc::c_int as uint32_t,
            range_end: 0x125f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1260 as libc::c_int as uint32_t,
            range_end: 0x1288 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1289 as libc::c_int as uint32_t,
            range_end: 0x1289 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x128a as libc::c_int as uint32_t,
            range_end: 0x128d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x128e as libc::c_int as uint32_t,
            range_end: 0x128f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1290 as libc::c_int as uint32_t,
            range_end: 0x12b0 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x12b1 as libc::c_int as uint32_t,
            range_end: 0x12b1 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x12b2 as libc::c_int as uint32_t,
            range_end: 0x12b5 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x12b6 as libc::c_int as uint32_t,
            range_end: 0x12b7 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x12b8 as libc::c_int as uint32_t,
            range_end: 0x12be as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x12bf as libc::c_int as uint32_t,
            range_end: 0x12bf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x12c0 as libc::c_int as uint32_t,
            range_end: 0x12c0 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x12c1 as libc::c_int as uint32_t,
            range_end: 0x12c1 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x12c2 as libc::c_int as uint32_t,
            range_end: 0x12c5 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x12c6 as libc::c_int as uint32_t,
            range_end: 0x12c7 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x12c8 as libc::c_int as uint32_t,
            range_end: 0x12d6 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x12d7 as libc::c_int as uint32_t,
            range_end: 0x12d7 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x12d8 as libc::c_int as uint32_t,
            range_end: 0x1310 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1311 as libc::c_int as uint32_t,
            range_end: 0x1311 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1312 as libc::c_int as uint32_t,
            range_end: 0x1315 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1316 as libc::c_int as uint32_t,
            range_end: 0x1317 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1318 as libc::c_int as uint32_t,
            range_end: 0x135a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x135b as libc::c_int as uint32_t,
            range_end: 0x135c as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x135d as libc::c_int as uint32_t,
            range_end: 0x135f as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1360 as libc::c_int as uint32_t,
            range_end: 0x137c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x137d as libc::c_int as uint32_t,
            range_end: 0x137f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1380 as libc::c_int as uint32_t,
            range_end: 0x1399 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x139a as libc::c_int as uint32_t,
            range_end: 0x139f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x13a0 as libc::c_int as uint32_t,
            range_end: 0x13f5 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x13f6 as libc::c_int as uint32_t,
            range_end: 0x13f7 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x13f8 as libc::c_int as uint32_t,
            range_end: 0x13fd as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x13fe as libc::c_int as uint32_t,
            range_end: 0x13ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1400 as libc::c_int as uint32_t,
            range_end: 0x169c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x169d as libc::c_int as uint32_t,
            range_end: 0x169f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16a0 as libc::c_int as uint32_t,
            range_end: 0x16f8 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16f9 as libc::c_int as uint32_t,
            range_end: 0x16ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1700 as libc::c_int as uint32_t,
            range_end: 0x1711 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1712 as libc::c_int as uint32_t,
            range_end: 0x1714 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1715 as libc::c_int as uint32_t,
            range_end: 0x1715 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1716 as libc::c_int as uint32_t,
            range_end: 0x171e as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x171f as libc::c_int as uint32_t,
            range_end: 0x1731 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1732 as libc::c_int as uint32_t,
            range_end: 0x1733 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1734 as libc::c_int as uint32_t,
            range_end: 0x1736 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1737 as libc::c_int as uint32_t,
            range_end: 0x173f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1740 as libc::c_int as uint32_t,
            range_end: 0x1751 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1752 as libc::c_int as uint32_t,
            range_end: 0x1753 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1754 as libc::c_int as uint32_t,
            range_end: 0x175f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1760 as libc::c_int as uint32_t,
            range_end: 0x176c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x176d as libc::c_int as uint32_t,
            range_end: 0x176d as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x176e as libc::c_int as uint32_t,
            range_end: 0x1770 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1771 as libc::c_int as uint32_t,
            range_end: 0x1771 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1772 as libc::c_int as uint32_t,
            range_end: 0x1773 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1774 as libc::c_int as uint32_t,
            range_end: 0x177f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1780 as libc::c_int as uint32_t,
            range_end: 0x17b3 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x17b4 as libc::c_int as uint32_t,
            range_end: 0x17b5 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x17b6 as libc::c_int as uint32_t,
            range_end: 0x17b6 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x17b7 as libc::c_int as uint32_t,
            range_end: 0x17bd as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x17be as libc::c_int as uint32_t,
            range_end: 0x17c5 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x17c6 as libc::c_int as uint32_t,
            range_end: 0x17c6 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x17c7 as libc::c_int as uint32_t,
            range_end: 0x17c8 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x17c9 as libc::c_int as uint32_t,
            range_end: 0x17d3 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x17d4 as libc::c_int as uint32_t,
            range_end: 0x17dc as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x17dd as libc::c_int as uint32_t,
            range_end: 0x17dd as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x17de as libc::c_int as uint32_t,
            range_end: 0x17df as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x17e0 as libc::c_int as uint32_t,
            range_end: 0x17e9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x17ea as libc::c_int as uint32_t,
            range_end: 0x17ef as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x17f0 as libc::c_int as uint32_t,
            range_end: 0x17f9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x17fa as libc::c_int as uint32_t,
            range_end: 0x17ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1800 as libc::c_int as uint32_t,
            range_end: 0x180a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x180b as libc::c_int as uint32_t,
            range_end: 0x180f as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1810 as libc::c_int as uint32_t,
            range_end: 0x1819 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x181a as libc::c_int as uint32_t,
            range_end: 0x181f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1820 as libc::c_int as uint32_t,
            range_end: 0x1878 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1879 as libc::c_int as uint32_t,
            range_end: 0x187f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1880 as libc::c_int as uint32_t,
            range_end: 0x1884 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1885 as libc::c_int as uint32_t,
            range_end: 0x1886 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1887 as libc::c_int as uint32_t,
            range_end: 0x18a8 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x18a9 as libc::c_int as uint32_t,
            range_end: 0x18a9 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x18aa as libc::c_int as uint32_t,
            range_end: 0x18aa as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x18ab as libc::c_int as uint32_t,
            range_end: 0x18af as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x18b0 as libc::c_int as uint32_t,
            range_end: 0x18f5 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x18f6 as libc::c_int as uint32_t,
            range_end: 0x18ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1900 as libc::c_int as uint32_t,
            range_end: 0x191e as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x191f as libc::c_int as uint32_t,
            range_end: 0x191f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1920 as libc::c_int as uint32_t,
            range_end: 0x1922 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1923 as libc::c_int as uint32_t,
            range_end: 0x1926 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1927 as libc::c_int as uint32_t,
            range_end: 0x1928 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1929 as libc::c_int as uint32_t,
            range_end: 0x192b as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x192c as libc::c_int as uint32_t,
            range_end: 0x192f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1930 as libc::c_int as uint32_t,
            range_end: 0x1931 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1932 as libc::c_int as uint32_t,
            range_end: 0x1932 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1933 as libc::c_int as uint32_t,
            range_end: 0x1938 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1939 as libc::c_int as uint32_t,
            range_end: 0x193b as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x193c as libc::c_int as uint32_t,
            range_end: 0x193f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1940 as libc::c_int as uint32_t,
            range_end: 0x1940 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1941 as libc::c_int as uint32_t,
            range_end: 0x1943 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1944 as libc::c_int as uint32_t,
            range_end: 0x196d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x196e as libc::c_int as uint32_t,
            range_end: 0x196f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1970 as libc::c_int as uint32_t,
            range_end: 0x1974 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1975 as libc::c_int as uint32_t,
            range_end: 0x197f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1980 as libc::c_int as uint32_t,
            range_end: 0x19ab as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x19ac as libc::c_int as uint32_t,
            range_end: 0x19af as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x19b0 as libc::c_int as uint32_t,
            range_end: 0x19c9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x19ca as libc::c_int as uint32_t,
            range_end: 0x19cf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x19d0 as libc::c_int as uint32_t,
            range_end: 0x19da as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x19db as libc::c_int as uint32_t,
            range_end: 0x19dd as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x19de as libc::c_int as uint32_t,
            range_end: 0x1a16 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1a17 as libc::c_int as uint32_t,
            range_end: 0x1a18 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1a19 as libc::c_int as uint32_t,
            range_end: 0x1a1a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1a1b as libc::c_int as uint32_t,
            range_end: 0x1a1b as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1a1c as libc::c_int as uint32_t,
            range_end: 0x1a1d as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1a1e as libc::c_int as uint32_t,
            range_end: 0x1a55 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1a56 as libc::c_int as uint32_t,
            range_end: 0x1a56 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1a57 as libc::c_int as uint32_t,
            range_end: 0x1a57 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1a58 as libc::c_int as uint32_t,
            range_end: 0x1a5e as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1a5f as libc::c_int as uint32_t,
            range_end: 0x1a5f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1a60 as libc::c_int as uint32_t,
            range_end: 0x1a60 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1a61 as libc::c_int as uint32_t,
            range_end: 0x1a61 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1a62 as libc::c_int as uint32_t,
            range_end: 0x1a62 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1a63 as libc::c_int as uint32_t,
            range_end: 0x1a64 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1a65 as libc::c_int as uint32_t,
            range_end: 0x1a6c as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1a6d as libc::c_int as uint32_t,
            range_end: 0x1a72 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1a73 as libc::c_int as uint32_t,
            range_end: 0x1a7c as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1a7d as libc::c_int as uint32_t,
            range_end: 0x1a7e as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1a7f as libc::c_int as uint32_t,
            range_end: 0x1a7f as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1a80 as libc::c_int as uint32_t,
            range_end: 0x1a89 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1a8a as libc::c_int as uint32_t,
            range_end: 0x1a8f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1a90 as libc::c_int as uint32_t,
            range_end: 0x1a99 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1a9a as libc::c_int as uint32_t,
            range_end: 0x1a9f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1aa0 as libc::c_int as uint32_t,
            range_end: 0x1aad as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1aae as libc::c_int as uint32_t,
            range_end: 0x1aaf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ab0 as libc::c_int as uint32_t,
            range_end: 0x1ace as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1acf as libc::c_int as uint32_t,
            range_end: 0x1aff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1b00 as libc::c_int as uint32_t,
            range_end: 0x1b03 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1b04 as libc::c_int as uint32_t,
            range_end: 0x1b33 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1b34 as libc::c_int as uint32_t,
            range_end: 0x1b34 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1b35 as libc::c_int as uint32_t,
            range_end: 0x1b35 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1b36 as libc::c_int as uint32_t,
            range_end: 0x1b3a as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1b3b as libc::c_int as uint32_t,
            range_end: 0x1b3b as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1b3c as libc::c_int as uint32_t,
            range_end: 0x1b3c as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1b3d as libc::c_int as uint32_t,
            range_end: 0x1b41 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1b42 as libc::c_int as uint32_t,
            range_end: 0x1b42 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1b43 as libc::c_int as uint32_t,
            range_end: 0x1b4c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1b4d as libc::c_int as uint32_t,
            range_end: 0x1b4d as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1b4e as libc::c_int as uint32_t,
            range_end: 0x1b6a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1b6b as libc::c_int as uint32_t,
            range_end: 0x1b73 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1b74 as libc::c_int as uint32_t,
            range_end: 0x1b7f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1b80 as libc::c_int as uint32_t,
            range_end: 0x1b81 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1b82 as libc::c_int as uint32_t,
            range_end: 0x1ba1 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ba2 as libc::c_int as uint32_t,
            range_end: 0x1ba5 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ba6 as libc::c_int as uint32_t,
            range_end: 0x1ba7 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ba8 as libc::c_int as uint32_t,
            range_end: 0x1ba9 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1baa as libc::c_int as uint32_t,
            range_end: 0x1baa as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1bab as libc::c_int as uint32_t,
            range_end: 0x1bad as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1bae as libc::c_int as uint32_t,
            range_end: 0x1be5 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1be6 as libc::c_int as uint32_t,
            range_end: 0x1be6 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1be7 as libc::c_int as uint32_t,
            range_end: 0x1be7 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1be8 as libc::c_int as uint32_t,
            range_end: 0x1be9 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1bea as libc::c_int as uint32_t,
            range_end: 0x1bec as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1bed as libc::c_int as uint32_t,
            range_end: 0x1bed as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1bee as libc::c_int as uint32_t,
            range_end: 0x1bee as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1bef as libc::c_int as uint32_t,
            range_end: 0x1bf1 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1bf2 as libc::c_int as uint32_t,
            range_end: 0x1bf3 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1bf4 as libc::c_int as uint32_t,
            range_end: 0x1bfb as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1bfc as libc::c_int as uint32_t,
            range_end: 0x1c2b as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1c2c as libc::c_int as uint32_t,
            range_end: 0x1c33 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1c34 as libc::c_int as uint32_t,
            range_end: 0x1c35 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1c36 as libc::c_int as uint32_t,
            range_end: 0x1c37 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1c38 as libc::c_int as uint32_t,
            range_end: 0x1c3a as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1c3b as libc::c_int as uint32_t,
            range_end: 0x1c49 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1c4a as libc::c_int as uint32_t,
            range_end: 0x1c4c as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1c4d as libc::c_int as uint32_t,
            range_end: 0x1c8a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1c8b as libc::c_int as uint32_t,
            range_end: 0x1c8f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1c90 as libc::c_int as uint32_t,
            range_end: 0x1cba as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1cbb as libc::c_int as uint32_t,
            range_end: 0x1cbc as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1cbd as libc::c_int as uint32_t,
            range_end: 0x1cc7 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1cc8 as libc::c_int as uint32_t,
            range_end: 0x1ccf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1cd0 as libc::c_int as uint32_t,
            range_end: 0x1cd2 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1cd3 as libc::c_int as uint32_t,
            range_end: 0x1cd3 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1cd4 as libc::c_int as uint32_t,
            range_end: 0x1ce0 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ce1 as libc::c_int as uint32_t,
            range_end: 0x1ce1 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ce2 as libc::c_int as uint32_t,
            range_end: 0x1ce8 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ce9 as libc::c_int as uint32_t,
            range_end: 0x1cec as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ced as libc::c_int as uint32_t,
            range_end: 0x1ced as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1cee as libc::c_int as uint32_t,
            range_end: 0x1cf3 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1cf4 as libc::c_int as uint32_t,
            range_end: 0x1cf4 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1cf5 as libc::c_int as uint32_t,
            range_end: 0x1cf7 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1cf8 as libc::c_int as uint32_t,
            range_end: 0x1cf9 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1cfa as libc::c_int as uint32_t,
            range_end: 0x1cfa as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1cfb as libc::c_int as uint32_t,
            range_end: 0x1cff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d00 as libc::c_int as uint32_t,
            range_end: 0x1dbf as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1dc0 as libc::c_int as uint32_t,
            range_end: 0x1dff as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e00 as libc::c_int as uint32_t,
            range_end: 0x1f15 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f16 as libc::c_int as uint32_t,
            range_end: 0x1f17 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f18 as libc::c_int as uint32_t,
            range_end: 0x1f1d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f1e as libc::c_int as uint32_t,
            range_end: 0x1f1f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f20 as libc::c_int as uint32_t,
            range_end: 0x1f45 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f46 as libc::c_int as uint32_t,
            range_end: 0x1f47 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f48 as libc::c_int as uint32_t,
            range_end: 0x1f4d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f4e as libc::c_int as uint32_t,
            range_end: 0x1f4f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f50 as libc::c_int as uint32_t,
            range_end: 0x1f57 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f58 as libc::c_int as uint32_t,
            range_end: 0x1f58 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f59 as libc::c_int as uint32_t,
            range_end: 0x1f59 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f5a as libc::c_int as uint32_t,
            range_end: 0x1f5a as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f5b as libc::c_int as uint32_t,
            range_end: 0x1f5b as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f5c as libc::c_int as uint32_t,
            range_end: 0x1f5c as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f5d as libc::c_int as uint32_t,
            range_end: 0x1f5d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f5e as libc::c_int as uint32_t,
            range_end: 0x1f5e as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f5f as libc::c_int as uint32_t,
            range_end: 0x1f7d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f7e as libc::c_int as uint32_t,
            range_end: 0x1f7f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f80 as libc::c_int as uint32_t,
            range_end: 0x1fb4 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1fb5 as libc::c_int as uint32_t,
            range_end: 0x1fb5 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1fb6 as libc::c_int as uint32_t,
            range_end: 0x1fc4 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1fc5 as libc::c_int as uint32_t,
            range_end: 0x1fc5 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1fc6 as libc::c_int as uint32_t,
            range_end: 0x1fd3 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1fd4 as libc::c_int as uint32_t,
            range_end: 0x1fd5 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1fd6 as libc::c_int as uint32_t,
            range_end: 0x1fdb as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1fdc as libc::c_int as uint32_t,
            range_end: 0x1fdc as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1fdd as libc::c_int as uint32_t,
            range_end: 0x1fef as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ff0 as libc::c_int as uint32_t,
            range_end: 0x1ff1 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ff2 as libc::c_int as uint32_t,
            range_end: 0x1ff4 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ff5 as libc::c_int as uint32_t,
            range_end: 0x1ff5 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ff6 as libc::c_int as uint32_t,
            range_end: 0x1ffe as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1fff as libc::c_int as uint32_t,
            range_end: 0x1fff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2000 as libc::c_int as uint32_t,
            range_end: 0x200a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x200b as libc::c_int as uint32_t,
            range_end: 0x200f as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2010 as libc::c_int as uint32_t,
            range_end: 0x2027 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2028 as libc::c_int as uint32_t,
            range_end: 0x2029 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x202a as libc::c_int as uint32_t,
            range_end: 0x202e as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x202f as libc::c_int as uint32_t,
            range_end: 0x205f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2060 as libc::c_int as uint32_t,
            range_end: 0x2064 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2065 as libc::c_int as uint32_t,
            range_end: 0x2065 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2066 as libc::c_int as uint32_t,
            range_end: 0x206f as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2070 as libc::c_int as uint32_t,
            range_end: 0x2071 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2072 as libc::c_int as uint32_t,
            range_end: 0x2073 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2074 as libc::c_int as uint32_t,
            range_end: 0x208e as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x208f as libc::c_int as uint32_t,
            range_end: 0x208f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2090 as libc::c_int as uint32_t,
            range_end: 0x209c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x209d as libc::c_int as uint32_t,
            range_end: 0x209f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x20a0 as libc::c_int as uint32_t,
            range_end: 0x20c0 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x20c1 as libc::c_int as uint32_t,
            range_end: 0x20cf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x20d0 as libc::c_int as uint32_t,
            range_end: 0x20f0 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x20f1 as libc::c_int as uint32_t,
            range_end: 0x20ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2100 as libc::c_int as uint32_t,
            range_end: 0x218b as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x218c as libc::c_int as uint32_t,
            range_end: 0x218f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2190 as libc::c_int as uint32_t,
            range_end: 0x2319 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x231a as libc::c_int as uint32_t,
            range_end: 0x231b as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x231c as libc::c_int as uint32_t,
            range_end: 0x2328 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2329 as libc::c_int as uint32_t,
            range_end: 0x232a as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x232b as libc::c_int as uint32_t,
            range_end: 0x23e8 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x23e9 as libc::c_int as uint32_t,
            range_end: 0x23ec as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x23ed as libc::c_int as uint32_t,
            range_end: 0x23ef as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x23f0 as libc::c_int as uint32_t,
            range_end: 0x23f0 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x23f1 as libc::c_int as uint32_t,
            range_end: 0x23f2 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x23f3 as libc::c_int as uint32_t,
            range_end: 0x23f3 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x23f4 as libc::c_int as uint32_t,
            range_end: 0x2429 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x242a as libc::c_int as uint32_t,
            range_end: 0x243f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2440 as libc::c_int as uint32_t,
            range_end: 0x244a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x244b as libc::c_int as uint32_t,
            range_end: 0x245f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2460 as libc::c_int as uint32_t,
            range_end: 0x25fc as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x25fd as libc::c_int as uint32_t,
            range_end: 0x25fe as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x25ff as libc::c_int as uint32_t,
            range_end: 0x2613 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2614 as libc::c_int as uint32_t,
            range_end: 0x2615 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2616 as libc::c_int as uint32_t,
            range_end: 0x262f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2630 as libc::c_int as uint32_t,
            range_end: 0x2637 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2638 as libc::c_int as uint32_t,
            range_end: 0x2647 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2648 as libc::c_int as uint32_t,
            range_end: 0x2653 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2654 as libc::c_int as uint32_t,
            range_end: 0x267e as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x267f as libc::c_int as uint32_t,
            range_end: 0x267f as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2680 as libc::c_int as uint32_t,
            range_end: 0x2689 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x268a as libc::c_int as uint32_t,
            range_end: 0x268f as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2690 as libc::c_int as uint32_t,
            range_end: 0x2692 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2693 as libc::c_int as uint32_t,
            range_end: 0x2693 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2694 as libc::c_int as uint32_t,
            range_end: 0x26a0 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x26a1 as libc::c_int as uint32_t,
            range_end: 0x26a1 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x26a2 as libc::c_int as uint32_t,
            range_end: 0x26a9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x26aa as libc::c_int as uint32_t,
            range_end: 0x26ab as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x26ac as libc::c_int as uint32_t,
            range_end: 0x26bc as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x26bd as libc::c_int as uint32_t,
            range_end: 0x26be as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x26bf as libc::c_int as uint32_t,
            range_end: 0x26c3 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x26c4 as libc::c_int as uint32_t,
            range_end: 0x26c5 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x26c6 as libc::c_int as uint32_t,
            range_end: 0x26cd as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x26ce as libc::c_int as uint32_t,
            range_end: 0x26ce as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x26cf as libc::c_int as uint32_t,
            range_end: 0x26d3 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x26d4 as libc::c_int as uint32_t,
            range_end: 0x26d4 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x26d5 as libc::c_int as uint32_t,
            range_end: 0x26e9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x26ea as libc::c_int as uint32_t,
            range_end: 0x26ea as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x26eb as libc::c_int as uint32_t,
            range_end: 0x26f1 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x26f2 as libc::c_int as uint32_t,
            range_end: 0x26f3 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x26f4 as libc::c_int as uint32_t,
            range_end: 0x26f4 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x26f5 as libc::c_int as uint32_t,
            range_end: 0x26f5 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x26f6 as libc::c_int as uint32_t,
            range_end: 0x26f9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x26fa as libc::c_int as uint32_t,
            range_end: 0x26fa as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x26fb as libc::c_int as uint32_t,
            range_end: 0x26fc as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x26fd as libc::c_int as uint32_t,
            range_end: 0x26fd as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x26fe as libc::c_int as uint32_t,
            range_end: 0x2704 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2705 as libc::c_int as uint32_t,
            range_end: 0x2705 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2706 as libc::c_int as uint32_t,
            range_end: 0x2709 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x270a as libc::c_int as uint32_t,
            range_end: 0x270b as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x270c as libc::c_int as uint32_t,
            range_end: 0x2727 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2728 as libc::c_int as uint32_t,
            range_end: 0x2728 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2729 as libc::c_int as uint32_t,
            range_end: 0x274b as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x274c as libc::c_int as uint32_t,
            range_end: 0x274c as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x274d as libc::c_int as uint32_t,
            range_end: 0x274d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x274e as libc::c_int as uint32_t,
            range_end: 0x274e as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x274f as libc::c_int as uint32_t,
            range_end: 0x2752 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2753 as libc::c_int as uint32_t,
            range_end: 0x2755 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2756 as libc::c_int as uint32_t,
            range_end: 0x2756 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2757 as libc::c_int as uint32_t,
            range_end: 0x2757 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2758 as libc::c_int as uint32_t,
            range_end: 0x2794 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2795 as libc::c_int as uint32_t,
            range_end: 0x2797 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2798 as libc::c_int as uint32_t,
            range_end: 0x27af as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x27b0 as libc::c_int as uint32_t,
            range_end: 0x27b0 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x27b1 as libc::c_int as uint32_t,
            range_end: 0x27be as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x27bf as libc::c_int as uint32_t,
            range_end: 0x27bf as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x27c0 as libc::c_int as uint32_t,
            range_end: 0x2b1a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2b1b as libc::c_int as uint32_t,
            range_end: 0x2b1c as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2b1d as libc::c_int as uint32_t,
            range_end: 0x2b4f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2b50 as libc::c_int as uint32_t,
            range_end: 0x2b50 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2b51 as libc::c_int as uint32_t,
            range_end: 0x2b54 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2b55 as libc::c_int as uint32_t,
            range_end: 0x2b55 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2b56 as libc::c_int as uint32_t,
            range_end: 0x2b73 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2b74 as libc::c_int as uint32_t,
            range_end: 0x2b75 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2b76 as libc::c_int as uint32_t,
            range_end: 0x2b95 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2b96 as libc::c_int as uint32_t,
            range_end: 0x2b96 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2b97 as libc::c_int as uint32_t,
            range_end: 0x2cee as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2cef as libc::c_int as uint32_t,
            range_end: 0x2cf1 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2cf2 as libc::c_int as uint32_t,
            range_end: 0x2cf3 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2cf4 as libc::c_int as uint32_t,
            range_end: 0x2cf8 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2cf9 as libc::c_int as uint32_t,
            range_end: 0x2d25 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2d26 as libc::c_int as uint32_t,
            range_end: 0x2d26 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2d27 as libc::c_int as uint32_t,
            range_end: 0x2d27 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2d28 as libc::c_int as uint32_t,
            range_end: 0x2d2c as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2d2d as libc::c_int as uint32_t,
            range_end: 0x2d2d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2d2e as libc::c_int as uint32_t,
            range_end: 0x2d2f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2d30 as libc::c_int as uint32_t,
            range_end: 0x2d67 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2d68 as libc::c_int as uint32_t,
            range_end: 0x2d6e as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2d6f as libc::c_int as uint32_t,
            range_end: 0x2d70 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2d71 as libc::c_int as uint32_t,
            range_end: 0x2d7e as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2d7f as libc::c_int as uint32_t,
            range_end: 0x2d7f as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2d80 as libc::c_int as uint32_t,
            range_end: 0x2d96 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2d97 as libc::c_int as uint32_t,
            range_end: 0x2d9f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2da0 as libc::c_int as uint32_t,
            range_end: 0x2da6 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2da7 as libc::c_int as uint32_t,
            range_end: 0x2da7 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2da8 as libc::c_int as uint32_t,
            range_end: 0x2dae as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2daf as libc::c_int as uint32_t,
            range_end: 0x2daf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2db0 as libc::c_int as uint32_t,
            range_end: 0x2db6 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2db7 as libc::c_int as uint32_t,
            range_end: 0x2db7 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2db8 as libc::c_int as uint32_t,
            range_end: 0x2dbe as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2dbf as libc::c_int as uint32_t,
            range_end: 0x2dbf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2dc0 as libc::c_int as uint32_t,
            range_end: 0x2dc6 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2dc7 as libc::c_int as uint32_t,
            range_end: 0x2dc7 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2dc8 as libc::c_int as uint32_t,
            range_end: 0x2dce as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2dcf as libc::c_int as uint32_t,
            range_end: 0x2dcf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2dd0 as libc::c_int as uint32_t,
            range_end: 0x2dd6 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2dd7 as libc::c_int as uint32_t,
            range_end: 0x2dd7 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2dd8 as libc::c_int as uint32_t,
            range_end: 0x2dde as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2ddf as libc::c_int as uint32_t,
            range_end: 0x2ddf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2de0 as libc::c_int as uint32_t,
            range_end: 0x2dff as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2e00 as libc::c_int as uint32_t,
            range_end: 0x2e5d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2e5e as libc::c_int as uint32_t,
            range_end: 0x2e7f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2e80 as libc::c_int as uint32_t,
            range_end: 0x2e99 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2e9a as libc::c_int as uint32_t,
            range_end: 0x2e9a as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2e9b as libc::c_int as uint32_t,
            range_end: 0x2ef3 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2ef4 as libc::c_int as uint32_t,
            range_end: 0x2eff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2f00 as libc::c_int as uint32_t,
            range_end: 0x2fd5 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2fd6 as libc::c_int as uint32_t,
            range_end: 0x2fef as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2ff0 as libc::c_int as uint32_t,
            range_end: 0x3029 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x302a as libc::c_int as uint32_t,
            range_end: 0x302d as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x302e as libc::c_int as uint32_t,
            range_end: 0x303e as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x303f as libc::c_int as uint32_t,
            range_end: 0x303f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x3040 as libc::c_int as uint32_t,
            range_end: 0x3040 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x3041 as libc::c_int as uint32_t,
            range_end: 0x3096 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x3097 as libc::c_int as uint32_t,
            range_end: 0x3098 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x3099 as libc::c_int as uint32_t,
            range_end: 0x309a as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x309b as libc::c_int as uint32_t,
            range_end: 0x30ff as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x3100 as libc::c_int as uint32_t,
            range_end: 0x3104 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x3105 as libc::c_int as uint32_t,
            range_end: 0x312f as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x3130 as libc::c_int as uint32_t,
            range_end: 0x3130 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x3131 as libc::c_int as uint32_t,
            range_end: 0x3163 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x3164 as libc::c_int as uint32_t,
            range_end: 0x3164 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x3165 as libc::c_int as uint32_t,
            range_end: 0x318e as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x318f as libc::c_int as uint32_t,
            range_end: 0x318f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x3190 as libc::c_int as uint32_t,
            range_end: 0x31e5 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x31e6 as libc::c_int as uint32_t,
            range_end: 0x31ee as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x31ef as libc::c_int as uint32_t,
            range_end: 0x321e as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x321f as libc::c_int as uint32_t,
            range_end: 0x321f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x3220 as libc::c_int as uint32_t,
            range_end: 0xa48c as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa48d as libc::c_int as uint32_t,
            range_end: 0xa48f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa490 as libc::c_int as uint32_t,
            range_end: 0xa4c6 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa4c7 as libc::c_int as uint32_t,
            range_end: 0xa4cf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa4d0 as libc::c_int as uint32_t,
            range_end: 0xa62b as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa62c as libc::c_int as uint32_t,
            range_end: 0xa63f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa640 as libc::c_int as uint32_t,
            range_end: 0xa66e as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa66f as libc::c_int as uint32_t,
            range_end: 0xa672 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa673 as libc::c_int as uint32_t,
            range_end: 0xa673 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa674 as libc::c_int as uint32_t,
            range_end: 0xa67d as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa67e as libc::c_int as uint32_t,
            range_end: 0xa69d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa69e as libc::c_int as uint32_t,
            range_end: 0xa69f as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa6a0 as libc::c_int as uint32_t,
            range_end: 0xa6ef as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa6f0 as libc::c_int as uint32_t,
            range_end: 0xa6f1 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa6f2 as libc::c_int as uint32_t,
            range_end: 0xa6f7 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa6f8 as libc::c_int as uint32_t,
            range_end: 0xa6ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa700 as libc::c_int as uint32_t,
            range_end: 0xa7cd as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa7ce as libc::c_int as uint32_t,
            range_end: 0xa7cf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa7d0 as libc::c_int as uint32_t,
            range_end: 0xa7d1 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa7d2 as libc::c_int as uint32_t,
            range_end: 0xa7d2 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa7d3 as libc::c_int as uint32_t,
            range_end: 0xa7d3 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa7d4 as libc::c_int as uint32_t,
            range_end: 0xa7d4 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa7d5 as libc::c_int as uint32_t,
            range_end: 0xa7dc as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa7dd as libc::c_int as uint32_t,
            range_end: 0xa7f1 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa7f2 as libc::c_int as uint32_t,
            range_end: 0xa801 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa802 as libc::c_int as uint32_t,
            range_end: 0xa802 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa803 as libc::c_int as uint32_t,
            range_end: 0xa805 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa806 as libc::c_int as uint32_t,
            range_end: 0xa806 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa807 as libc::c_int as uint32_t,
            range_end: 0xa80a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa80b as libc::c_int as uint32_t,
            range_end: 0xa80b as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa80c as libc::c_int as uint32_t,
            range_end: 0xa824 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa825 as libc::c_int as uint32_t,
            range_end: 0xa826 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa827 as libc::c_int as uint32_t,
            range_end: 0xa82b as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa82c as libc::c_int as uint32_t,
            range_end: 0xa82c as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa82d as libc::c_int as uint32_t,
            range_end: 0xa82f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa830 as libc::c_int as uint32_t,
            range_end: 0xa839 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa83a as libc::c_int as uint32_t,
            range_end: 0xa83f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa840 as libc::c_int as uint32_t,
            range_end: 0xa877 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa878 as libc::c_int as uint32_t,
            range_end: 0xa87f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa880 as libc::c_int as uint32_t,
            range_end: 0xa8c3 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa8c4 as libc::c_int as uint32_t,
            range_end: 0xa8c5 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa8c6 as libc::c_int as uint32_t,
            range_end: 0xa8cd as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa8ce as libc::c_int as uint32_t,
            range_end: 0xa8d9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa8da as libc::c_int as uint32_t,
            range_end: 0xa8df as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa8e0 as libc::c_int as uint32_t,
            range_end: 0xa8f1 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa8f2 as libc::c_int as uint32_t,
            range_end: 0xa8fe as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa8ff as libc::c_int as uint32_t,
            range_end: 0xa8ff as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa900 as libc::c_int as uint32_t,
            range_end: 0xa925 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa926 as libc::c_int as uint32_t,
            range_end: 0xa92d as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa92e as libc::c_int as uint32_t,
            range_end: 0xa946 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa947 as libc::c_int as uint32_t,
            range_end: 0xa951 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa952 as libc::c_int as uint32_t,
            range_end: 0xa953 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa954 as libc::c_int as uint32_t,
            range_end: 0xa95e as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa95f as libc::c_int as uint32_t,
            range_end: 0xa95f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa960 as libc::c_int as uint32_t,
            range_end: 0xa97c as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa97d as libc::c_int as uint32_t,
            range_end: 0xa97f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa980 as libc::c_int as uint32_t,
            range_end: 0xa982 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa983 as libc::c_int as uint32_t,
            range_end: 0xa9b2 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa9b3 as libc::c_int as uint32_t,
            range_end: 0xa9b3 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa9b4 as libc::c_int as uint32_t,
            range_end: 0xa9b5 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa9b6 as libc::c_int as uint32_t,
            range_end: 0xa9b9 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa9ba as libc::c_int as uint32_t,
            range_end: 0xa9bb as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa9bc as libc::c_int as uint32_t,
            range_end: 0xa9bd as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa9be as libc::c_int as uint32_t,
            range_end: 0xa9cd as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa9ce as libc::c_int as uint32_t,
            range_end: 0xa9ce as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa9cf as libc::c_int as uint32_t,
            range_end: 0xa9d9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa9da as libc::c_int as uint32_t,
            range_end: 0xa9dd as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa9de as libc::c_int as uint32_t,
            range_end: 0xa9e4 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa9e5 as libc::c_int as uint32_t,
            range_end: 0xa9e5 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa9e6 as libc::c_int as uint32_t,
            range_end: 0xa9fe as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xa9ff as libc::c_int as uint32_t,
            range_end: 0xa9ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaa00 as libc::c_int as uint32_t,
            range_end: 0xaa28 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaa29 as libc::c_int as uint32_t,
            range_end: 0xaa2e as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaa2f as libc::c_int as uint32_t,
            range_end: 0xaa30 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaa31 as libc::c_int as uint32_t,
            range_end: 0xaa32 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaa33 as libc::c_int as uint32_t,
            range_end: 0xaa34 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaa35 as libc::c_int as uint32_t,
            range_end: 0xaa36 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaa37 as libc::c_int as uint32_t,
            range_end: 0xaa3f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaa40 as libc::c_int as uint32_t,
            range_end: 0xaa42 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaa43 as libc::c_int as uint32_t,
            range_end: 0xaa43 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaa44 as libc::c_int as uint32_t,
            range_end: 0xaa4b as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaa4c as libc::c_int as uint32_t,
            range_end: 0xaa4c as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaa4d as libc::c_int as uint32_t,
            range_end: 0xaa4d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaa4e as libc::c_int as uint32_t,
            range_end: 0xaa4f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaa50 as libc::c_int as uint32_t,
            range_end: 0xaa59 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaa5a as libc::c_int as uint32_t,
            range_end: 0xaa5b as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaa5c as libc::c_int as uint32_t,
            range_end: 0xaa7b as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaa7c as libc::c_int as uint32_t,
            range_end: 0xaa7c as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaa7d as libc::c_int as uint32_t,
            range_end: 0xaaaf as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaab0 as libc::c_int as uint32_t,
            range_end: 0xaab0 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaab1 as libc::c_int as uint32_t,
            range_end: 0xaab1 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaab2 as libc::c_int as uint32_t,
            range_end: 0xaab4 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaab5 as libc::c_int as uint32_t,
            range_end: 0xaab6 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaab7 as libc::c_int as uint32_t,
            range_end: 0xaab8 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaab9 as libc::c_int as uint32_t,
            range_end: 0xaabd as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaabe as libc::c_int as uint32_t,
            range_end: 0xaabf as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaac0 as libc::c_int as uint32_t,
            range_end: 0xaac0 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaac1 as libc::c_int as uint32_t,
            range_end: 0xaac1 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaac2 as libc::c_int as uint32_t,
            range_end: 0xaac2 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaac3 as libc::c_int as uint32_t,
            range_end: 0xaada as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaadb as libc::c_int as uint32_t,
            range_end: 0xaaeb as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaaec as libc::c_int as uint32_t,
            range_end: 0xaaed as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaaee as libc::c_int as uint32_t,
            range_end: 0xaaf5 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaaf6 as libc::c_int as uint32_t,
            range_end: 0xaaf6 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xaaf7 as libc::c_int as uint32_t,
            range_end: 0xab00 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xab01 as libc::c_int as uint32_t,
            range_end: 0xab06 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xab07 as libc::c_int as uint32_t,
            range_end: 0xab08 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xab09 as libc::c_int as uint32_t,
            range_end: 0xab0e as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xab0f as libc::c_int as uint32_t,
            range_end: 0xab10 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xab11 as libc::c_int as uint32_t,
            range_end: 0xab16 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xab17 as libc::c_int as uint32_t,
            range_end: 0xab1f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xab20 as libc::c_int as uint32_t,
            range_end: 0xab26 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xab27 as libc::c_int as uint32_t,
            range_end: 0xab27 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xab28 as libc::c_int as uint32_t,
            range_end: 0xab2e as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xab2f as libc::c_int as uint32_t,
            range_end: 0xab2f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xab30 as libc::c_int as uint32_t,
            range_end: 0xab6b as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xab6c as libc::c_int as uint32_t,
            range_end: 0xab6f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xab70 as libc::c_int as uint32_t,
            range_end: 0xabe4 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xabe5 as libc::c_int as uint32_t,
            range_end: 0xabe5 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xabe6 as libc::c_int as uint32_t,
            range_end: 0xabe7 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xabe8 as libc::c_int as uint32_t,
            range_end: 0xabe8 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xabe9 as libc::c_int as uint32_t,
            range_end: 0xabec as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xabed as libc::c_int as uint32_t,
            range_end: 0xabed as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xabee as libc::c_int as uint32_t,
            range_end: 0xabef as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xabf0 as libc::c_int as uint32_t,
            range_end: 0xabf9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xabfa as libc::c_int as uint32_t,
            range_end: 0xabff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xac00 as libc::c_int as uint32_t,
            range_end: 0xd7a3 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xd7a4 as libc::c_int as uint32_t,
            range_end: 0xd7af as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xd7b0 as libc::c_int as uint32_t,
            range_end: 0xd7c6 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xd7c7 as libc::c_int as uint32_t,
            range_end: 0xd7ca as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xd7cb as libc::c_int as uint32_t,
            range_end: 0xd7fb as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xd7fc as libc::c_int as uint32_t,
            range_end: 0xdfff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xe000 as libc::c_int as uint32_t,
            range_end: 0xf8ff as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xf900 as libc::c_int as uint32_t,
            range_end: 0xfa6d as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfa6e as libc::c_int as uint32_t,
            range_end: 0xfa6f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfa70 as libc::c_int as uint32_t,
            range_end: 0xfad9 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfada as libc::c_int as uint32_t,
            range_end: 0xfaff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfb00 as libc::c_int as uint32_t,
            range_end: 0xfb06 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfb07 as libc::c_int as uint32_t,
            range_end: 0xfb12 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfb13 as libc::c_int as uint32_t,
            range_end: 0xfb17 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfb18 as libc::c_int as uint32_t,
            range_end: 0xfb1c as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfb1d as libc::c_int as uint32_t,
            range_end: 0xfb1d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfb1e as libc::c_int as uint32_t,
            range_end: 0xfb1e as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfb1f as libc::c_int as uint32_t,
            range_end: 0xfb36 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfb37 as libc::c_int as uint32_t,
            range_end: 0xfb37 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfb38 as libc::c_int as uint32_t,
            range_end: 0xfb3c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfb3d as libc::c_int as uint32_t,
            range_end: 0xfb3d as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfb3e as libc::c_int as uint32_t,
            range_end: 0xfb3e as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfb3f as libc::c_int as uint32_t,
            range_end: 0xfb3f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfb40 as libc::c_int as uint32_t,
            range_end: 0xfb41 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfb42 as libc::c_int as uint32_t,
            range_end: 0xfb42 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfb43 as libc::c_int as uint32_t,
            range_end: 0xfb44 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfb45 as libc::c_int as uint32_t,
            range_end: 0xfb45 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfb46 as libc::c_int as uint32_t,
            range_end: 0xfbc2 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfbc3 as libc::c_int as uint32_t,
            range_end: 0xfbd2 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfbd3 as libc::c_int as uint32_t,
            range_end: 0xfd8f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfd90 as libc::c_int as uint32_t,
            range_end: 0xfd91 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfd92 as libc::c_int as uint32_t,
            range_end: 0xfdc7 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfdc8 as libc::c_int as uint32_t,
            range_end: 0xfdce as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfdcf as libc::c_int as uint32_t,
            range_end: 0xfdcf as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfdd0 as libc::c_int as uint32_t,
            range_end: 0xfdef as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfdf0 as libc::c_int as uint32_t,
            range_end: 0xfdff as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfe00 as libc::c_int as uint32_t,
            range_end: 0xfe0f as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfe10 as libc::c_int as uint32_t,
            range_end: 0xfe19 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfe1a as libc::c_int as uint32_t,
            range_end: 0xfe1f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfe20 as libc::c_int as uint32_t,
            range_end: 0xfe2f as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfe30 as libc::c_int as uint32_t,
            range_end: 0xfe52 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfe53 as libc::c_int as uint32_t,
            range_end: 0xfe53 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfe54 as libc::c_int as uint32_t,
            range_end: 0xfe66 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfe67 as libc::c_int as uint32_t,
            range_end: 0xfe67 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfe68 as libc::c_int as uint32_t,
            range_end: 0xfe6b as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfe6c as libc::c_int as uint32_t,
            range_end: 0xfe6f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfe70 as libc::c_int as uint32_t,
            range_end: 0xfe74 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfe75 as libc::c_int as uint32_t,
            range_end: 0xfe75 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfe76 as libc::c_int as uint32_t,
            range_end: 0xfefc as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfefd as libc::c_int as uint32_t,
            range_end: 0xfefe as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfeff as libc::c_int as uint32_t,
            range_end: 0xfeff as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xff00 as libc::c_int as uint32_t,
            range_end: 0xff00 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xff01 as libc::c_int as uint32_t,
            range_end: 0xff60 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xff61 as libc::c_int as uint32_t,
            range_end: 0xff9f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xffa0 as libc::c_int as uint32_t,
            range_end: 0xffa0 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xffa1 as libc::c_int as uint32_t,
            range_end: 0xffbe as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xffbf as libc::c_int as uint32_t,
            range_end: 0xffc1 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xffc2 as libc::c_int as uint32_t,
            range_end: 0xffc7 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xffc8 as libc::c_int as uint32_t,
            range_end: 0xffc9 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xffca as libc::c_int as uint32_t,
            range_end: 0xffcf as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xffd0 as libc::c_int as uint32_t,
            range_end: 0xffd1 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xffd2 as libc::c_int as uint32_t,
            range_end: 0xffd7 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xffd8 as libc::c_int as uint32_t,
            range_end: 0xffd9 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xffda as libc::c_int as uint32_t,
            range_end: 0xffdc as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xffdd as libc::c_int as uint32_t,
            range_end: 0xffdf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xffe0 as libc::c_int as uint32_t,
            range_end: 0xffe6 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xffe7 as libc::c_int as uint32_t,
            range_end: 0xffe7 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xffe8 as libc::c_int as uint32_t,
            range_end: 0xffee as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xffef as libc::c_int as uint32_t,
            range_end: 0xfff8 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfff9 as libc::c_int as uint32_t,
            range_end: 0xfffd as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xfffe as libc::c_int as uint32_t,
            range_end: 0xffff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10000 as libc::c_int as uint32_t,
            range_end: 0x1000b as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1000c as libc::c_int as uint32_t,
            range_end: 0x1000c as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1000d as libc::c_int as uint32_t,
            range_end: 0x10026 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10027 as libc::c_int as uint32_t,
            range_end: 0x10027 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10028 as libc::c_int as uint32_t,
            range_end: 0x1003a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1003b as libc::c_int as uint32_t,
            range_end: 0x1003b as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1003c as libc::c_int as uint32_t,
            range_end: 0x1003d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1003e as libc::c_int as uint32_t,
            range_end: 0x1003e as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1003f as libc::c_int as uint32_t,
            range_end: 0x1004d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1004e as libc::c_int as uint32_t,
            range_end: 0x1004f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10050 as libc::c_int as uint32_t,
            range_end: 0x1005d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1005e as libc::c_int as uint32_t,
            range_end: 0x1007f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10080 as libc::c_int as uint32_t,
            range_end: 0x100fa as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x100fb as libc::c_int as uint32_t,
            range_end: 0x100ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10100 as libc::c_int as uint32_t,
            range_end: 0x10102 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10103 as libc::c_int as uint32_t,
            range_end: 0x10106 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10107 as libc::c_int as uint32_t,
            range_end: 0x10133 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10134 as libc::c_int as uint32_t,
            range_end: 0x10136 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10137 as libc::c_int as uint32_t,
            range_end: 0x1018e as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1018f as libc::c_int as uint32_t,
            range_end: 0x1018f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10190 as libc::c_int as uint32_t,
            range_end: 0x1019c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1019d as libc::c_int as uint32_t,
            range_end: 0x1019f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x101a0 as libc::c_int as uint32_t,
            range_end: 0x101a0 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x101a1 as libc::c_int as uint32_t,
            range_end: 0x101cf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x101d0 as libc::c_int as uint32_t,
            range_end: 0x101fc as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x101fd as libc::c_int as uint32_t,
            range_end: 0x101fd as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x101fe as libc::c_int as uint32_t,
            range_end: 0x1027f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10280 as libc::c_int as uint32_t,
            range_end: 0x1029c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1029d as libc::c_int as uint32_t,
            range_end: 0x1029f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x102a0 as libc::c_int as uint32_t,
            range_end: 0x102d0 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x102d1 as libc::c_int as uint32_t,
            range_end: 0x102df as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x102e0 as libc::c_int as uint32_t,
            range_end: 0x102e0 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x102e1 as libc::c_int as uint32_t,
            range_end: 0x102fb as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x102fc as libc::c_int as uint32_t,
            range_end: 0x102ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10300 as libc::c_int as uint32_t,
            range_end: 0x10323 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10324 as libc::c_int as uint32_t,
            range_end: 0x1032c as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1032d as libc::c_int as uint32_t,
            range_end: 0x1034a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1034b as libc::c_int as uint32_t,
            range_end: 0x1034f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10350 as libc::c_int as uint32_t,
            range_end: 0x10375 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10376 as libc::c_int as uint32_t,
            range_end: 0x1037a as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1037b as libc::c_int as uint32_t,
            range_end: 0x1037f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10380 as libc::c_int as uint32_t,
            range_end: 0x1039d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1039e as libc::c_int as uint32_t,
            range_end: 0x1039e as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1039f as libc::c_int as uint32_t,
            range_end: 0x103c3 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x103c4 as libc::c_int as uint32_t,
            range_end: 0x103c7 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x103c8 as libc::c_int as uint32_t,
            range_end: 0x103d5 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x103d6 as libc::c_int as uint32_t,
            range_end: 0x103ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10400 as libc::c_int as uint32_t,
            range_end: 0x1049d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1049e as libc::c_int as uint32_t,
            range_end: 0x1049f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x104a0 as libc::c_int as uint32_t,
            range_end: 0x104a9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x104aa as libc::c_int as uint32_t,
            range_end: 0x104af as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x104b0 as libc::c_int as uint32_t,
            range_end: 0x104d3 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x104d4 as libc::c_int as uint32_t,
            range_end: 0x104d7 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x104d8 as libc::c_int as uint32_t,
            range_end: 0x104fb as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x104fc as libc::c_int as uint32_t,
            range_end: 0x104ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10500 as libc::c_int as uint32_t,
            range_end: 0x10527 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10528 as libc::c_int as uint32_t,
            range_end: 0x1052f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10530 as libc::c_int as uint32_t,
            range_end: 0x10563 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10564 as libc::c_int as uint32_t,
            range_end: 0x1056e as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1056f as libc::c_int as uint32_t,
            range_end: 0x1057a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1057b as libc::c_int as uint32_t,
            range_end: 0x1057b as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1057c as libc::c_int as uint32_t,
            range_end: 0x1058a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1058b as libc::c_int as uint32_t,
            range_end: 0x1058b as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1058c as libc::c_int as uint32_t,
            range_end: 0x10592 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10593 as libc::c_int as uint32_t,
            range_end: 0x10593 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10594 as libc::c_int as uint32_t,
            range_end: 0x10595 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10596 as libc::c_int as uint32_t,
            range_end: 0x10596 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10597 as libc::c_int as uint32_t,
            range_end: 0x105a1 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x105a2 as libc::c_int as uint32_t,
            range_end: 0x105a2 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x105a3 as libc::c_int as uint32_t,
            range_end: 0x105b1 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x105b2 as libc::c_int as uint32_t,
            range_end: 0x105b2 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x105b3 as libc::c_int as uint32_t,
            range_end: 0x105b9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x105ba as libc::c_int as uint32_t,
            range_end: 0x105ba as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x105bb as libc::c_int as uint32_t,
            range_end: 0x105bc as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x105bd as libc::c_int as uint32_t,
            range_end: 0x105bf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x105c0 as libc::c_int as uint32_t,
            range_end: 0x105f3 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x105f4 as libc::c_int as uint32_t,
            range_end: 0x105ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10600 as libc::c_int as uint32_t,
            range_end: 0x10736 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10737 as libc::c_int as uint32_t,
            range_end: 0x1073f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10740 as libc::c_int as uint32_t,
            range_end: 0x10755 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10756 as libc::c_int as uint32_t,
            range_end: 0x1075f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10760 as libc::c_int as uint32_t,
            range_end: 0x10767 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10768 as libc::c_int as uint32_t,
            range_end: 0x1077f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10780 as libc::c_int as uint32_t,
            range_end: 0x10785 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10786 as libc::c_int as uint32_t,
            range_end: 0x10786 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10787 as libc::c_int as uint32_t,
            range_end: 0x107b0 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x107b1 as libc::c_int as uint32_t,
            range_end: 0x107b1 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x107b2 as libc::c_int as uint32_t,
            range_end: 0x107ba as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x107bb as libc::c_int as uint32_t,
            range_end: 0x107ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10800 as libc::c_int as uint32_t,
            range_end: 0x10805 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10806 as libc::c_int as uint32_t,
            range_end: 0x10807 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10808 as libc::c_int as uint32_t,
            range_end: 0x10808 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10809 as libc::c_int as uint32_t,
            range_end: 0x10809 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1080a as libc::c_int as uint32_t,
            range_end: 0x10835 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10836 as libc::c_int as uint32_t,
            range_end: 0x10836 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10837 as libc::c_int as uint32_t,
            range_end: 0x10838 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10839 as libc::c_int as uint32_t,
            range_end: 0x1083b as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1083c as libc::c_int as uint32_t,
            range_end: 0x1083c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1083d as libc::c_int as uint32_t,
            range_end: 0x1083e as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1083f as libc::c_int as uint32_t,
            range_end: 0x10855 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10856 as libc::c_int as uint32_t,
            range_end: 0x10856 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10857 as libc::c_int as uint32_t,
            range_end: 0x1089e as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1089f as libc::c_int as uint32_t,
            range_end: 0x108a6 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x108a7 as libc::c_int as uint32_t,
            range_end: 0x108af as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x108b0 as libc::c_int as uint32_t,
            range_end: 0x108df as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x108e0 as libc::c_int as uint32_t,
            range_end: 0x108f2 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x108f3 as libc::c_int as uint32_t,
            range_end: 0x108f3 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x108f4 as libc::c_int as uint32_t,
            range_end: 0x108f5 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x108f6 as libc::c_int as uint32_t,
            range_end: 0x108fa as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x108fb as libc::c_int as uint32_t,
            range_end: 0x1091b as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1091c as libc::c_int as uint32_t,
            range_end: 0x1091e as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1091f as libc::c_int as uint32_t,
            range_end: 0x10939 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1093a as libc::c_int as uint32_t,
            range_end: 0x1093e as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1093f as libc::c_int as uint32_t,
            range_end: 0x1093f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10940 as libc::c_int as uint32_t,
            range_end: 0x1097f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10980 as libc::c_int as uint32_t,
            range_end: 0x109b7 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x109b8 as libc::c_int as uint32_t,
            range_end: 0x109bb as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x109bc as libc::c_int as uint32_t,
            range_end: 0x109cf as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x109d0 as libc::c_int as uint32_t,
            range_end: 0x109d1 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x109d2 as libc::c_int as uint32_t,
            range_end: 0x10a00 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10a01 as libc::c_int as uint32_t,
            range_end: 0x10a03 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10a04 as libc::c_int as uint32_t,
            range_end: 0x10a04 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10a05 as libc::c_int as uint32_t,
            range_end: 0x10a06 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10a07 as libc::c_int as uint32_t,
            range_end: 0x10a0b as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10a0c as libc::c_int as uint32_t,
            range_end: 0x10a0f as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10a10 as libc::c_int as uint32_t,
            range_end: 0x10a13 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10a14 as libc::c_int as uint32_t,
            range_end: 0x10a14 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10a15 as libc::c_int as uint32_t,
            range_end: 0x10a17 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10a18 as libc::c_int as uint32_t,
            range_end: 0x10a18 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10a19 as libc::c_int as uint32_t,
            range_end: 0x10a35 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10a36 as libc::c_int as uint32_t,
            range_end: 0x10a37 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10a38 as libc::c_int as uint32_t,
            range_end: 0x10a3a as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10a3b as libc::c_int as uint32_t,
            range_end: 0x10a3e as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10a3f as libc::c_int as uint32_t,
            range_end: 0x10a3f as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10a40 as libc::c_int as uint32_t,
            range_end: 0x10a48 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10a49 as libc::c_int as uint32_t,
            range_end: 0x10a4f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10a50 as libc::c_int as uint32_t,
            range_end: 0x10a58 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10a59 as libc::c_int as uint32_t,
            range_end: 0x10a5f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10a60 as libc::c_int as uint32_t,
            range_end: 0x10a9f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10aa0 as libc::c_int as uint32_t,
            range_end: 0x10abf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10ac0 as libc::c_int as uint32_t,
            range_end: 0x10ae4 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10ae5 as libc::c_int as uint32_t,
            range_end: 0x10ae6 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10ae7 as libc::c_int as uint32_t,
            range_end: 0x10aea as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10aeb as libc::c_int as uint32_t,
            range_end: 0x10af6 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10af7 as libc::c_int as uint32_t,
            range_end: 0x10aff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10b00 as libc::c_int as uint32_t,
            range_end: 0x10b35 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10b36 as libc::c_int as uint32_t,
            range_end: 0x10b38 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10b39 as libc::c_int as uint32_t,
            range_end: 0x10b55 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10b56 as libc::c_int as uint32_t,
            range_end: 0x10b57 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10b58 as libc::c_int as uint32_t,
            range_end: 0x10b72 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10b73 as libc::c_int as uint32_t,
            range_end: 0x10b77 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10b78 as libc::c_int as uint32_t,
            range_end: 0x10b91 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10b92 as libc::c_int as uint32_t,
            range_end: 0x10b98 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10b99 as libc::c_int as uint32_t,
            range_end: 0x10b9c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10b9d as libc::c_int as uint32_t,
            range_end: 0x10ba8 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10ba9 as libc::c_int as uint32_t,
            range_end: 0x10baf as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10bb0 as libc::c_int as uint32_t,
            range_end: 0x10bff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10c00 as libc::c_int as uint32_t,
            range_end: 0x10c48 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10c49 as libc::c_int as uint32_t,
            range_end: 0x10c7f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10c80 as libc::c_int as uint32_t,
            range_end: 0x10cb2 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10cb3 as libc::c_int as uint32_t,
            range_end: 0x10cbf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10cc0 as libc::c_int as uint32_t,
            range_end: 0x10cf2 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10cf3 as libc::c_int as uint32_t,
            range_end: 0x10cf9 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10cfa as libc::c_int as uint32_t,
            range_end: 0x10d23 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10d24 as libc::c_int as uint32_t,
            range_end: 0x10d27 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10d28 as libc::c_int as uint32_t,
            range_end: 0x10d2f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10d30 as libc::c_int as uint32_t,
            range_end: 0x10d39 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10d3a as libc::c_int as uint32_t,
            range_end: 0x10d3f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10d40 as libc::c_int as uint32_t,
            range_end: 0x10d65 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10d66 as libc::c_int as uint32_t,
            range_end: 0x10d68 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10d69 as libc::c_int as uint32_t,
            range_end: 0x10d6d as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10d6e as libc::c_int as uint32_t,
            range_end: 0x10d85 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10d86 as libc::c_int as uint32_t,
            range_end: 0x10d8d as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10d8e as libc::c_int as uint32_t,
            range_end: 0x10d8f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10d90 as libc::c_int as uint32_t,
            range_end: 0x10e5f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10e60 as libc::c_int as uint32_t,
            range_end: 0x10e7e as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10e7f as libc::c_int as uint32_t,
            range_end: 0x10e7f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10e80 as libc::c_int as uint32_t,
            range_end: 0x10ea9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10eaa as libc::c_int as uint32_t,
            range_end: 0x10eaa as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10eab as libc::c_int as uint32_t,
            range_end: 0x10eac as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10ead as libc::c_int as uint32_t,
            range_end: 0x10ead as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10eae as libc::c_int as uint32_t,
            range_end: 0x10eaf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10eb0 as libc::c_int as uint32_t,
            range_end: 0x10eb1 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10eb2 as libc::c_int as uint32_t,
            range_end: 0x10ec1 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10ec2 as libc::c_int as uint32_t,
            range_end: 0x10ec4 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10ec5 as libc::c_int as uint32_t,
            range_end: 0x10efb as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10efc as libc::c_int as uint32_t,
            range_end: 0x10eff as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10f00 as libc::c_int as uint32_t,
            range_end: 0x10f27 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10f28 as libc::c_int as uint32_t,
            range_end: 0x10f2f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10f30 as libc::c_int as uint32_t,
            range_end: 0x10f45 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10f46 as libc::c_int as uint32_t,
            range_end: 0x10f50 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10f51 as libc::c_int as uint32_t,
            range_end: 0x10f59 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10f5a as libc::c_int as uint32_t,
            range_end: 0x10f6f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10f70 as libc::c_int as uint32_t,
            range_end: 0x10f81 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10f82 as libc::c_int as uint32_t,
            range_end: 0x10f85 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10f86 as libc::c_int as uint32_t,
            range_end: 0x10f89 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10f8a as libc::c_int as uint32_t,
            range_end: 0x10faf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10fb0 as libc::c_int as uint32_t,
            range_end: 0x10fcb as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10fcc as libc::c_int as uint32_t,
            range_end: 0x10fdf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10fe0 as libc::c_int as uint32_t,
            range_end: 0x10ff6 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10ff7 as libc::c_int as uint32_t,
            range_end: 0x10fff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11000 as libc::c_int as uint32_t,
            range_end: 0x11000 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11001 as libc::c_int as uint32_t,
            range_end: 0x11001 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11002 as libc::c_int as uint32_t,
            range_end: 0x11037 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11038 as libc::c_int as uint32_t,
            range_end: 0x11046 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11047 as libc::c_int as uint32_t,
            range_end: 0x1104d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1104e as libc::c_int as uint32_t,
            range_end: 0x11051 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11052 as libc::c_int as uint32_t,
            range_end: 0x1106f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11070 as libc::c_int as uint32_t,
            range_end: 0x11070 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11071 as libc::c_int as uint32_t,
            range_end: 0x11072 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11073 as libc::c_int as uint32_t,
            range_end: 0x11074 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11075 as libc::c_int as uint32_t,
            range_end: 0x11075 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11076 as libc::c_int as uint32_t,
            range_end: 0x1107e as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1107f as libc::c_int as uint32_t,
            range_end: 0x11081 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11082 as libc::c_int as uint32_t,
            range_end: 0x110b2 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x110b3 as libc::c_int as uint32_t,
            range_end: 0x110b6 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x110b7 as libc::c_int as uint32_t,
            range_end: 0x110b8 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x110b9 as libc::c_int as uint32_t,
            range_end: 0x110ba as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x110bb as libc::c_int as uint32_t,
            range_end: 0x110c1 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x110c2 as libc::c_int as uint32_t,
            range_end: 0x110c2 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x110c3 as libc::c_int as uint32_t,
            range_end: 0x110cc as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x110cd as libc::c_int as uint32_t,
            range_end: 0x110cd as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x110ce as libc::c_int as uint32_t,
            range_end: 0x110cf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x110d0 as libc::c_int as uint32_t,
            range_end: 0x110e8 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x110e9 as libc::c_int as uint32_t,
            range_end: 0x110ef as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x110f0 as libc::c_int as uint32_t,
            range_end: 0x110f9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x110fa as libc::c_int as uint32_t,
            range_end: 0x110ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11100 as libc::c_int as uint32_t,
            range_end: 0x11102 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11103 as libc::c_int as uint32_t,
            range_end: 0x11126 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11127 as libc::c_int as uint32_t,
            range_end: 0x1112b as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1112c as libc::c_int as uint32_t,
            range_end: 0x1112c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1112d as libc::c_int as uint32_t,
            range_end: 0x11134 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11135 as libc::c_int as uint32_t,
            range_end: 0x11135 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11136 as libc::c_int as uint32_t,
            range_end: 0x11147 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11148 as libc::c_int as uint32_t,
            range_end: 0x1114f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11150 as libc::c_int as uint32_t,
            range_end: 0x11172 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11173 as libc::c_int as uint32_t,
            range_end: 0x11173 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11174 as libc::c_int as uint32_t,
            range_end: 0x11176 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11177 as libc::c_int as uint32_t,
            range_end: 0x1117f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11180 as libc::c_int as uint32_t,
            range_end: 0x11181 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11182 as libc::c_int as uint32_t,
            range_end: 0x111b5 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x111b6 as libc::c_int as uint32_t,
            range_end: 0x111be as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x111bf as libc::c_int as uint32_t,
            range_end: 0x111c8 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x111c9 as libc::c_int as uint32_t,
            range_end: 0x111cc as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x111cd as libc::c_int as uint32_t,
            range_end: 0x111ce as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x111cf as libc::c_int as uint32_t,
            range_end: 0x111cf as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x111d0 as libc::c_int as uint32_t,
            range_end: 0x111df as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x111e0 as libc::c_int as uint32_t,
            range_end: 0x111e0 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x111e1 as libc::c_int as uint32_t,
            range_end: 0x111f4 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x111f5 as libc::c_int as uint32_t,
            range_end: 0x111ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11200 as libc::c_int as uint32_t,
            range_end: 0x11211 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11212 as libc::c_int as uint32_t,
            range_end: 0x11212 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11213 as libc::c_int as uint32_t,
            range_end: 0x1122e as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1122f as libc::c_int as uint32_t,
            range_end: 0x11231 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11232 as libc::c_int as uint32_t,
            range_end: 0x11233 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11234 as libc::c_int as uint32_t,
            range_end: 0x11234 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11235 as libc::c_int as uint32_t,
            range_end: 0x11235 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11236 as libc::c_int as uint32_t,
            range_end: 0x11237 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11238 as libc::c_int as uint32_t,
            range_end: 0x1123d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1123e as libc::c_int as uint32_t,
            range_end: 0x1123e as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1123f as libc::c_int as uint32_t,
            range_end: 0x11240 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11241 as libc::c_int as uint32_t,
            range_end: 0x11241 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11242 as libc::c_int as uint32_t,
            range_end: 0x1127f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11280 as libc::c_int as uint32_t,
            range_end: 0x11286 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11287 as libc::c_int as uint32_t,
            range_end: 0x11287 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11288 as libc::c_int as uint32_t,
            range_end: 0x11288 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11289 as libc::c_int as uint32_t,
            range_end: 0x11289 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1128a as libc::c_int as uint32_t,
            range_end: 0x1128d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1128e as libc::c_int as uint32_t,
            range_end: 0x1128e as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1128f as libc::c_int as uint32_t,
            range_end: 0x1129d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1129e as libc::c_int as uint32_t,
            range_end: 0x1129e as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1129f as libc::c_int as uint32_t,
            range_end: 0x112a9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x112aa as libc::c_int as uint32_t,
            range_end: 0x112af as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x112b0 as libc::c_int as uint32_t,
            range_end: 0x112de as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x112df as libc::c_int as uint32_t,
            range_end: 0x112df as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x112e0 as libc::c_int as uint32_t,
            range_end: 0x112e2 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x112e3 as libc::c_int as uint32_t,
            range_end: 0x112ea as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x112eb as libc::c_int as uint32_t,
            range_end: 0x112ef as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x112f0 as libc::c_int as uint32_t,
            range_end: 0x112f9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x112fa as libc::c_int as uint32_t,
            range_end: 0x112ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11300 as libc::c_int as uint32_t,
            range_end: 0x11301 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11302 as libc::c_int as uint32_t,
            range_end: 0x11303 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11304 as libc::c_int as uint32_t,
            range_end: 0x11304 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11305 as libc::c_int as uint32_t,
            range_end: 0x1130c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1130d as libc::c_int as uint32_t,
            range_end: 0x1130e as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1130f as libc::c_int as uint32_t,
            range_end: 0x11310 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11311 as libc::c_int as uint32_t,
            range_end: 0x11312 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11313 as libc::c_int as uint32_t,
            range_end: 0x11328 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11329 as libc::c_int as uint32_t,
            range_end: 0x11329 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1132a as libc::c_int as uint32_t,
            range_end: 0x11330 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11331 as libc::c_int as uint32_t,
            range_end: 0x11331 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11332 as libc::c_int as uint32_t,
            range_end: 0x11333 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11334 as libc::c_int as uint32_t,
            range_end: 0x11334 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11335 as libc::c_int as uint32_t,
            range_end: 0x11339 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1133a as libc::c_int as uint32_t,
            range_end: 0x1133a as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1133b as libc::c_int as uint32_t,
            range_end: 0x1133c as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1133d as libc::c_int as uint32_t,
            range_end: 0x1133f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11340 as libc::c_int as uint32_t,
            range_end: 0x11340 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11341 as libc::c_int as uint32_t,
            range_end: 0x11344 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11345 as libc::c_int as uint32_t,
            range_end: 0x11346 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11347 as libc::c_int as uint32_t,
            range_end: 0x11348 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11349 as libc::c_int as uint32_t,
            range_end: 0x1134a as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1134b as libc::c_int as uint32_t,
            range_end: 0x1134d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1134e as libc::c_int as uint32_t,
            range_end: 0x1134f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11350 as libc::c_int as uint32_t,
            range_end: 0x11350 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11351 as libc::c_int as uint32_t,
            range_end: 0x11356 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11357 as libc::c_int as uint32_t,
            range_end: 0x11357 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11358 as libc::c_int as uint32_t,
            range_end: 0x1135c as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1135d as libc::c_int as uint32_t,
            range_end: 0x11363 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11364 as libc::c_int as uint32_t,
            range_end: 0x11365 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11366 as libc::c_int as uint32_t,
            range_end: 0x1136c as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1136d as libc::c_int as uint32_t,
            range_end: 0x1136f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11370 as libc::c_int as uint32_t,
            range_end: 0x11374 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11375 as libc::c_int as uint32_t,
            range_end: 0x1137f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11380 as libc::c_int as uint32_t,
            range_end: 0x11389 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1138a as libc::c_int as uint32_t,
            range_end: 0x1138a as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1138b as libc::c_int as uint32_t,
            range_end: 0x1138b as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1138c as libc::c_int as uint32_t,
            range_end: 0x1138d as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1138e as libc::c_int as uint32_t,
            range_end: 0x1138e as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1138f as libc::c_int as uint32_t,
            range_end: 0x1138f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11390 as libc::c_int as uint32_t,
            range_end: 0x113b5 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x113b6 as libc::c_int as uint32_t,
            range_end: 0x113b6 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x113b7 as libc::c_int as uint32_t,
            range_end: 0x113ba as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x113bb as libc::c_int as uint32_t,
            range_end: 0x113c0 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x113c1 as libc::c_int as uint32_t,
            range_end: 0x113c1 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x113c2 as libc::c_int as uint32_t,
            range_end: 0x113c2 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x113c3 as libc::c_int as uint32_t,
            range_end: 0x113c4 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x113c5 as libc::c_int as uint32_t,
            range_end: 0x113c5 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x113c6 as libc::c_int as uint32_t,
            range_end: 0x113c6 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x113c7 as libc::c_int as uint32_t,
            range_end: 0x113ca as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x113cb as libc::c_int as uint32_t,
            range_end: 0x113cb as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x113cc as libc::c_int as uint32_t,
            range_end: 0x113cd as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x113ce as libc::c_int as uint32_t,
            range_end: 0x113ce as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x113cf as libc::c_int as uint32_t,
            range_end: 0x113cf as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x113d0 as libc::c_int as uint32_t,
            range_end: 0x113d0 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x113d1 as libc::c_int as uint32_t,
            range_end: 0x113d1 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x113d2 as libc::c_int as uint32_t,
            range_end: 0x113d2 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x113d3 as libc::c_int as uint32_t,
            range_end: 0x113d5 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x113d6 as libc::c_int as uint32_t,
            range_end: 0x113d6 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x113d7 as libc::c_int as uint32_t,
            range_end: 0x113d8 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x113d9 as libc::c_int as uint32_t,
            range_end: 0x113e0 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x113e1 as libc::c_int as uint32_t,
            range_end: 0x113e2 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x113e3 as libc::c_int as uint32_t,
            range_end: 0x113ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11400 as libc::c_int as uint32_t,
            range_end: 0x11437 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11438 as libc::c_int as uint32_t,
            range_end: 0x1143f as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11440 as libc::c_int as uint32_t,
            range_end: 0x11441 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11442 as libc::c_int as uint32_t,
            range_end: 0x11444 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11445 as libc::c_int as uint32_t,
            range_end: 0x11445 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11446 as libc::c_int as uint32_t,
            range_end: 0x11446 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11447 as libc::c_int as uint32_t,
            range_end: 0x1145b as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1145c as libc::c_int as uint32_t,
            range_end: 0x1145c as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1145d as libc::c_int as uint32_t,
            range_end: 0x1145d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1145e as libc::c_int as uint32_t,
            range_end: 0x1145e as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1145f as libc::c_int as uint32_t,
            range_end: 0x11461 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11462 as libc::c_int as uint32_t,
            range_end: 0x1147f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11480 as libc::c_int as uint32_t,
            range_end: 0x114b2 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x114b3 as libc::c_int as uint32_t,
            range_end: 0x114b8 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x114b9 as libc::c_int as uint32_t,
            range_end: 0x114b9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x114ba as libc::c_int as uint32_t,
            range_end: 0x114ba as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x114bb as libc::c_int as uint32_t,
            range_end: 0x114be as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x114bf as libc::c_int as uint32_t,
            range_end: 0x114c0 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x114c1 as libc::c_int as uint32_t,
            range_end: 0x114c1 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x114c2 as libc::c_int as uint32_t,
            range_end: 0x114c3 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x114c4 as libc::c_int as uint32_t,
            range_end: 0x114c7 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x114c8 as libc::c_int as uint32_t,
            range_end: 0x114cf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x114d0 as libc::c_int as uint32_t,
            range_end: 0x114d9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x114da as libc::c_int as uint32_t,
            range_end: 0x1157f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11580 as libc::c_int as uint32_t,
            range_end: 0x115b1 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x115b2 as libc::c_int as uint32_t,
            range_end: 0x115b5 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x115b6 as libc::c_int as uint32_t,
            range_end: 0x115b7 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x115b8 as libc::c_int as uint32_t,
            range_end: 0x115bb as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x115bc as libc::c_int as uint32_t,
            range_end: 0x115bd as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x115be as libc::c_int as uint32_t,
            range_end: 0x115be as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x115bf as libc::c_int as uint32_t,
            range_end: 0x115c0 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x115c1 as libc::c_int as uint32_t,
            range_end: 0x115db as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x115dc as libc::c_int as uint32_t,
            range_end: 0x115dd as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x115de as libc::c_int as uint32_t,
            range_end: 0x115ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11600 as libc::c_int as uint32_t,
            range_end: 0x11632 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11633 as libc::c_int as uint32_t,
            range_end: 0x1163a as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1163b as libc::c_int as uint32_t,
            range_end: 0x1163c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1163d as libc::c_int as uint32_t,
            range_end: 0x1163d as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1163e as libc::c_int as uint32_t,
            range_end: 0x1163e as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1163f as libc::c_int as uint32_t,
            range_end: 0x11640 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11641 as libc::c_int as uint32_t,
            range_end: 0x11644 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11645 as libc::c_int as uint32_t,
            range_end: 0x1164f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11650 as libc::c_int as uint32_t,
            range_end: 0x11659 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1165a as libc::c_int as uint32_t,
            range_end: 0x1165f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11660 as libc::c_int as uint32_t,
            range_end: 0x1166c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1166d as libc::c_int as uint32_t,
            range_end: 0x1167f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11680 as libc::c_int as uint32_t,
            range_end: 0x116aa as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x116ab as libc::c_int as uint32_t,
            range_end: 0x116ab as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x116ac as libc::c_int as uint32_t,
            range_end: 0x116ac as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x116ad as libc::c_int as uint32_t,
            range_end: 0x116ad as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x116ae as libc::c_int as uint32_t,
            range_end: 0x116af as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x116b0 as libc::c_int as uint32_t,
            range_end: 0x116b5 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x116b6 as libc::c_int as uint32_t,
            range_end: 0x116b6 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x116b7 as libc::c_int as uint32_t,
            range_end: 0x116b7 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x116b8 as libc::c_int as uint32_t,
            range_end: 0x116b9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x116ba as libc::c_int as uint32_t,
            range_end: 0x116bf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x116c0 as libc::c_int as uint32_t,
            range_end: 0x116c9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x116ca as libc::c_int as uint32_t,
            range_end: 0x116cf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x116d0 as libc::c_int as uint32_t,
            range_end: 0x116e3 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x116e4 as libc::c_int as uint32_t,
            range_end: 0x116ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11700 as libc::c_int as uint32_t,
            range_end: 0x1171a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1171b as libc::c_int as uint32_t,
            range_end: 0x1171c as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1171d as libc::c_int as uint32_t,
            range_end: 0x1171d as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1171e as libc::c_int as uint32_t,
            range_end: 0x1171e as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1171f as libc::c_int as uint32_t,
            range_end: 0x1171f as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11720 as libc::c_int as uint32_t,
            range_end: 0x11721 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11722 as libc::c_int as uint32_t,
            range_end: 0x11725 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11726 as libc::c_int as uint32_t,
            range_end: 0x11726 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11727 as libc::c_int as uint32_t,
            range_end: 0x1172b as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1172c as libc::c_int as uint32_t,
            range_end: 0x1172f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11730 as libc::c_int as uint32_t,
            range_end: 0x11746 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11747 as libc::c_int as uint32_t,
            range_end: 0x117ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11800 as libc::c_int as uint32_t,
            range_end: 0x1182e as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1182f as libc::c_int as uint32_t,
            range_end: 0x11837 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11838 as libc::c_int as uint32_t,
            range_end: 0x11838 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11839 as libc::c_int as uint32_t,
            range_end: 0x1183a as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1183b as libc::c_int as uint32_t,
            range_end: 0x1183b as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1183c as libc::c_int as uint32_t,
            range_end: 0x1189f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x118a0 as libc::c_int as uint32_t,
            range_end: 0x118f2 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x118f3 as libc::c_int as uint32_t,
            range_end: 0x118fe as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x118ff as libc::c_int as uint32_t,
            range_end: 0x11906 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11907 as libc::c_int as uint32_t,
            range_end: 0x11908 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11909 as libc::c_int as uint32_t,
            range_end: 0x11909 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1190a as libc::c_int as uint32_t,
            range_end: 0x1190b as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1190c as libc::c_int as uint32_t,
            range_end: 0x11913 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11914 as libc::c_int as uint32_t,
            range_end: 0x11914 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11915 as libc::c_int as uint32_t,
            range_end: 0x11916 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11917 as libc::c_int as uint32_t,
            range_end: 0x11917 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11918 as libc::c_int as uint32_t,
            range_end: 0x11935 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11936 as libc::c_int as uint32_t,
            range_end: 0x11936 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11937 as libc::c_int as uint32_t,
            range_end: 0x11938 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11939 as libc::c_int as uint32_t,
            range_end: 0x1193a as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1193b as libc::c_int as uint32_t,
            range_end: 0x1193c as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1193d as libc::c_int as uint32_t,
            range_end: 0x1193d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1193e as libc::c_int as uint32_t,
            range_end: 0x1193e as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1193f as libc::c_int as uint32_t,
            range_end: 0x11942 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11943 as libc::c_int as uint32_t,
            range_end: 0x11943 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11944 as libc::c_int as uint32_t,
            range_end: 0x11946 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11947 as libc::c_int as uint32_t,
            range_end: 0x1194f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11950 as libc::c_int as uint32_t,
            range_end: 0x11959 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1195a as libc::c_int as uint32_t,
            range_end: 0x1199f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x119a0 as libc::c_int as uint32_t,
            range_end: 0x119a7 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x119a8 as libc::c_int as uint32_t,
            range_end: 0x119a9 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x119aa as libc::c_int as uint32_t,
            range_end: 0x119d3 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x119d4 as libc::c_int as uint32_t,
            range_end: 0x119d7 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x119d8 as libc::c_int as uint32_t,
            range_end: 0x119d9 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x119da as libc::c_int as uint32_t,
            range_end: 0x119db as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x119dc as libc::c_int as uint32_t,
            range_end: 0x119df as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x119e0 as libc::c_int as uint32_t,
            range_end: 0x119e0 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x119e1 as libc::c_int as uint32_t,
            range_end: 0x119e4 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x119e5 as libc::c_int as uint32_t,
            range_end: 0x119ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11a00 as libc::c_int as uint32_t,
            range_end: 0x11a00 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11a01 as libc::c_int as uint32_t,
            range_end: 0x11a0a as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11a0b as libc::c_int as uint32_t,
            range_end: 0x11a32 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11a33 as libc::c_int as uint32_t,
            range_end: 0x11a38 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11a39 as libc::c_int as uint32_t,
            range_end: 0x11a3a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11a3b as libc::c_int as uint32_t,
            range_end: 0x11a3e as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11a3f as libc::c_int as uint32_t,
            range_end: 0x11a46 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11a47 as libc::c_int as uint32_t,
            range_end: 0x11a47 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11a48 as libc::c_int as uint32_t,
            range_end: 0x11a4f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11a50 as libc::c_int as uint32_t,
            range_end: 0x11a50 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11a51 as libc::c_int as uint32_t,
            range_end: 0x11a56 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11a57 as libc::c_int as uint32_t,
            range_end: 0x11a58 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11a59 as libc::c_int as uint32_t,
            range_end: 0x11a5b as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11a5c as libc::c_int as uint32_t,
            range_end: 0x11a89 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11a8a as libc::c_int as uint32_t,
            range_end: 0x11a96 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11a97 as libc::c_int as uint32_t,
            range_end: 0x11a97 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11a98 as libc::c_int as uint32_t,
            range_end: 0x11a99 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11a9a as libc::c_int as uint32_t,
            range_end: 0x11aa2 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11aa3 as libc::c_int as uint32_t,
            range_end: 0x11aaf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11ab0 as libc::c_int as uint32_t,
            range_end: 0x11af8 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11af9 as libc::c_int as uint32_t,
            range_end: 0x11aff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11b00 as libc::c_int as uint32_t,
            range_end: 0x11b09 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11b0a as libc::c_int as uint32_t,
            range_end: 0x11bbf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11bc0 as libc::c_int as uint32_t,
            range_end: 0x11be1 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11be2 as libc::c_int as uint32_t,
            range_end: 0x11bef as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11bf0 as libc::c_int as uint32_t,
            range_end: 0x11bf9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11bfa as libc::c_int as uint32_t,
            range_end: 0x11bff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11c00 as libc::c_int as uint32_t,
            range_end: 0x11c08 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11c09 as libc::c_int as uint32_t,
            range_end: 0x11c09 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11c0a as libc::c_int as uint32_t,
            range_end: 0x11c2f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11c30 as libc::c_int as uint32_t,
            range_end: 0x11c36 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11c37 as libc::c_int as uint32_t,
            range_end: 0x11c37 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11c38 as libc::c_int as uint32_t,
            range_end: 0x11c3d as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11c3e as libc::c_int as uint32_t,
            range_end: 0x11c3e as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11c3f as libc::c_int as uint32_t,
            range_end: 0x11c3f as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11c40 as libc::c_int as uint32_t,
            range_end: 0x11c45 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11c46 as libc::c_int as uint32_t,
            range_end: 0x11c4f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11c50 as libc::c_int as uint32_t,
            range_end: 0x11c6c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11c6d as libc::c_int as uint32_t,
            range_end: 0x11c6f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11c70 as libc::c_int as uint32_t,
            range_end: 0x11c8f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11c90 as libc::c_int as uint32_t,
            range_end: 0x11c91 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11c92 as libc::c_int as uint32_t,
            range_end: 0x11ca7 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11ca8 as libc::c_int as uint32_t,
            range_end: 0x11ca8 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11ca9 as libc::c_int as uint32_t,
            range_end: 0x11ca9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11caa as libc::c_int as uint32_t,
            range_end: 0x11cb0 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11cb1 as libc::c_int as uint32_t,
            range_end: 0x11cb1 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11cb2 as libc::c_int as uint32_t,
            range_end: 0x11cb3 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11cb4 as libc::c_int as uint32_t,
            range_end: 0x11cb4 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11cb5 as libc::c_int as uint32_t,
            range_end: 0x11cb6 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11cb7 as libc::c_int as uint32_t,
            range_end: 0x11cff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11d00 as libc::c_int as uint32_t,
            range_end: 0x11d06 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11d07 as libc::c_int as uint32_t,
            range_end: 0x11d07 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11d08 as libc::c_int as uint32_t,
            range_end: 0x11d09 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11d0a as libc::c_int as uint32_t,
            range_end: 0x11d0a as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11d0b as libc::c_int as uint32_t,
            range_end: 0x11d30 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11d31 as libc::c_int as uint32_t,
            range_end: 0x11d36 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11d37 as libc::c_int as uint32_t,
            range_end: 0x11d39 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11d3a as libc::c_int as uint32_t,
            range_end: 0x11d3a as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11d3b as libc::c_int as uint32_t,
            range_end: 0x11d3b as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11d3c as libc::c_int as uint32_t,
            range_end: 0x11d3d as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11d3e as libc::c_int as uint32_t,
            range_end: 0x11d3e as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11d3f as libc::c_int as uint32_t,
            range_end: 0x11d45 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11d46 as libc::c_int as uint32_t,
            range_end: 0x11d46 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11d47 as libc::c_int as uint32_t,
            range_end: 0x11d47 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11d48 as libc::c_int as uint32_t,
            range_end: 0x11d4f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11d50 as libc::c_int as uint32_t,
            range_end: 0x11d59 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11d5a as libc::c_int as uint32_t,
            range_end: 0x11d5f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11d60 as libc::c_int as uint32_t,
            range_end: 0x11d65 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11d66 as libc::c_int as uint32_t,
            range_end: 0x11d66 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11d67 as libc::c_int as uint32_t,
            range_end: 0x11d68 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11d69 as libc::c_int as uint32_t,
            range_end: 0x11d69 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11d6a as libc::c_int as uint32_t,
            range_end: 0x11d8e as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11d8f as libc::c_int as uint32_t,
            range_end: 0x11d8f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11d90 as libc::c_int as uint32_t,
            range_end: 0x11d91 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11d92 as libc::c_int as uint32_t,
            range_end: 0x11d92 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11d93 as libc::c_int as uint32_t,
            range_end: 0x11d94 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11d95 as libc::c_int as uint32_t,
            range_end: 0x11d95 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11d96 as libc::c_int as uint32_t,
            range_end: 0x11d96 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11d97 as libc::c_int as uint32_t,
            range_end: 0x11d97 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11d98 as libc::c_int as uint32_t,
            range_end: 0x11d98 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11d99 as libc::c_int as uint32_t,
            range_end: 0x11d9f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11da0 as libc::c_int as uint32_t,
            range_end: 0x11da9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11daa as libc::c_int as uint32_t,
            range_end: 0x11edf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11ee0 as libc::c_int as uint32_t,
            range_end: 0x11ef2 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11ef3 as libc::c_int as uint32_t,
            range_end: 0x11ef4 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11ef5 as libc::c_int as uint32_t,
            range_end: 0x11ef8 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11ef9 as libc::c_int as uint32_t,
            range_end: 0x11eff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11f00 as libc::c_int as uint32_t,
            range_end: 0x11f01 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11f02 as libc::c_int as uint32_t,
            range_end: 0x11f10 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11f11 as libc::c_int as uint32_t,
            range_end: 0x11f11 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11f12 as libc::c_int as uint32_t,
            range_end: 0x11f35 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11f36 as libc::c_int as uint32_t,
            range_end: 0x11f3a as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11f3b as libc::c_int as uint32_t,
            range_end: 0x11f3d as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11f3e as libc::c_int as uint32_t,
            range_end: 0x11f3f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11f40 as libc::c_int as uint32_t,
            range_end: 0x11f40 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11f41 as libc::c_int as uint32_t,
            range_end: 0x11f41 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11f42 as libc::c_int as uint32_t,
            range_end: 0x11f42 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11f43 as libc::c_int as uint32_t,
            range_end: 0x11f59 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11f5a as libc::c_int as uint32_t,
            range_end: 0x11f5a as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11f5b as libc::c_int as uint32_t,
            range_end: 0x11faf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11fb0 as libc::c_int as uint32_t,
            range_end: 0x11fb0 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11fb1 as libc::c_int as uint32_t,
            range_end: 0x11fbf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11fc0 as libc::c_int as uint32_t,
            range_end: 0x11ff1 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11ff2 as libc::c_int as uint32_t,
            range_end: 0x11ffe as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x11fff as libc::c_int as uint32_t,
            range_end: 0x12399 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1239a as libc::c_int as uint32_t,
            range_end: 0x123ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x12400 as libc::c_int as uint32_t,
            range_end: 0x1246e as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1246f as libc::c_int as uint32_t,
            range_end: 0x1246f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x12470 as libc::c_int as uint32_t,
            range_end: 0x12474 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x12475 as libc::c_int as uint32_t,
            range_end: 0x1247f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x12480 as libc::c_int as uint32_t,
            range_end: 0x12543 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x12544 as libc::c_int as uint32_t,
            range_end: 0x12f8f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x12f90 as libc::c_int as uint32_t,
            range_end: 0x12ff2 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x12ff3 as libc::c_int as uint32_t,
            range_end: 0x12fff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x13000 as libc::c_int as uint32_t,
            range_end: 0x1343f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x13440 as libc::c_int as uint32_t,
            range_end: 0x13440 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x13441 as libc::c_int as uint32_t,
            range_end: 0x13446 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x13447 as libc::c_int as uint32_t,
            range_end: 0x13455 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x13456 as libc::c_int as uint32_t,
            range_end: 0x1345f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x13460 as libc::c_int as uint32_t,
            range_end: 0x143fa as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x143fb as libc::c_int as uint32_t,
            range_end: 0x143ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x14400 as libc::c_int as uint32_t,
            range_end: 0x14646 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x14647 as libc::c_int as uint32_t,
            range_end: 0x160ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16100 as libc::c_int as uint32_t,
            range_end: 0x1611d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1611e as libc::c_int as uint32_t,
            range_end: 0x16129 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1612a as libc::c_int as uint32_t,
            range_end: 0x1612c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1612d as libc::c_int as uint32_t,
            range_end: 0x1612f as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16130 as libc::c_int as uint32_t,
            range_end: 0x16139 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1613a as libc::c_int as uint32_t,
            range_end: 0x167ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16800 as libc::c_int as uint32_t,
            range_end: 0x16a38 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16a39 as libc::c_int as uint32_t,
            range_end: 0x16a3f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16a40 as libc::c_int as uint32_t,
            range_end: 0x16a5e as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16a5f as libc::c_int as uint32_t,
            range_end: 0x16a5f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16a60 as libc::c_int as uint32_t,
            range_end: 0x16a69 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16a6a as libc::c_int as uint32_t,
            range_end: 0x16a6d as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16a6e as libc::c_int as uint32_t,
            range_end: 0x16abe as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16abf as libc::c_int as uint32_t,
            range_end: 0x16abf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16ac0 as libc::c_int as uint32_t,
            range_end: 0x16ac9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16aca as libc::c_int as uint32_t,
            range_end: 0x16acf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16ad0 as libc::c_int as uint32_t,
            range_end: 0x16aed as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16aee as libc::c_int as uint32_t,
            range_end: 0x16aef as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16af0 as libc::c_int as uint32_t,
            range_end: 0x16af4 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16af5 as libc::c_int as uint32_t,
            range_end: 0x16af5 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16af6 as libc::c_int as uint32_t,
            range_end: 0x16aff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16b00 as libc::c_int as uint32_t,
            range_end: 0x16b2f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16b30 as libc::c_int as uint32_t,
            range_end: 0x16b36 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16b37 as libc::c_int as uint32_t,
            range_end: 0x16b45 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16b46 as libc::c_int as uint32_t,
            range_end: 0x16b4f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16b50 as libc::c_int as uint32_t,
            range_end: 0x16b59 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16b5a as libc::c_int as uint32_t,
            range_end: 0x16b5a as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16b5b as libc::c_int as uint32_t,
            range_end: 0x16b61 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16b62 as libc::c_int as uint32_t,
            range_end: 0x16b62 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16b63 as libc::c_int as uint32_t,
            range_end: 0x16b77 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16b78 as libc::c_int as uint32_t,
            range_end: 0x16b7c as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16b7d as libc::c_int as uint32_t,
            range_end: 0x16b8f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16b90 as libc::c_int as uint32_t,
            range_end: 0x16d3f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16d40 as libc::c_int as uint32_t,
            range_end: 0x16d79 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16d7a as libc::c_int as uint32_t,
            range_end: 0x16e3f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16e40 as libc::c_int as uint32_t,
            range_end: 0x16e9a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16e9b as libc::c_int as uint32_t,
            range_end: 0x16eff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16f00 as libc::c_int as uint32_t,
            range_end: 0x16f4a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16f4b as libc::c_int as uint32_t,
            range_end: 0x16f4e as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16f4f as libc::c_int as uint32_t,
            range_end: 0x16f4f as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16f50 as libc::c_int as uint32_t,
            range_end: 0x16f87 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16f88 as libc::c_int as uint32_t,
            range_end: 0x16f8e as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16f8f as libc::c_int as uint32_t,
            range_end: 0x16f92 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16f93 as libc::c_int as uint32_t,
            range_end: 0x16f9f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16fa0 as libc::c_int as uint32_t,
            range_end: 0x16fdf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16fe0 as libc::c_int as uint32_t,
            range_end: 0x16fe3 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16fe4 as libc::c_int as uint32_t,
            range_end: 0x16fe4 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16fe5 as libc::c_int as uint32_t,
            range_end: 0x16fef as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16ff0 as libc::c_int as uint32_t,
            range_end: 0x16ff1 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x16ff2 as libc::c_int as uint32_t,
            range_end: 0x16fff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x17000 as libc::c_int as uint32_t,
            range_end: 0x187f7 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x187f8 as libc::c_int as uint32_t,
            range_end: 0x187ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x18800 as libc::c_int as uint32_t,
            range_end: 0x18cd5 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x18cd6 as libc::c_int as uint32_t,
            range_end: 0x18cfe as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x18cff as libc::c_int as uint32_t,
            range_end: 0x18d08 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x18d09 as libc::c_int as uint32_t,
            range_end: 0x1afef as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1aff0 as libc::c_int as uint32_t,
            range_end: 0x1aff3 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1aff4 as libc::c_int as uint32_t,
            range_end: 0x1aff4 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1aff5 as libc::c_int as uint32_t,
            range_end: 0x1affb as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1affc as libc::c_int as uint32_t,
            range_end: 0x1affc as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1affd as libc::c_int as uint32_t,
            range_end: 0x1affe as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1afff as libc::c_int as uint32_t,
            range_end: 0x1afff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1b000 as libc::c_int as uint32_t,
            range_end: 0x1b122 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1b123 as libc::c_int as uint32_t,
            range_end: 0x1b131 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1b132 as libc::c_int as uint32_t,
            range_end: 0x1b132 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1b133 as libc::c_int as uint32_t,
            range_end: 0x1b14f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1b150 as libc::c_int as uint32_t,
            range_end: 0x1b152 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1b153 as libc::c_int as uint32_t,
            range_end: 0x1b154 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1b155 as libc::c_int as uint32_t,
            range_end: 0x1b155 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1b156 as libc::c_int as uint32_t,
            range_end: 0x1b163 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1b164 as libc::c_int as uint32_t,
            range_end: 0x1b167 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1b168 as libc::c_int as uint32_t,
            range_end: 0x1b16f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1b170 as libc::c_int as uint32_t,
            range_end: 0x1b2fb as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1b2fc as libc::c_int as uint32_t,
            range_end: 0x1bbff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1bc00 as libc::c_int as uint32_t,
            range_end: 0x1bc6a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1bc6b as libc::c_int as uint32_t,
            range_end: 0x1bc6f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1bc70 as libc::c_int as uint32_t,
            range_end: 0x1bc7c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1bc7d as libc::c_int as uint32_t,
            range_end: 0x1bc7f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1bc80 as libc::c_int as uint32_t,
            range_end: 0x1bc88 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1bc89 as libc::c_int as uint32_t,
            range_end: 0x1bc8f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1bc90 as libc::c_int as uint32_t,
            range_end: 0x1bc99 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1bc9a as libc::c_int as uint32_t,
            range_end: 0x1bc9b as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1bc9c as libc::c_int as uint32_t,
            range_end: 0x1bc9c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1bc9d as libc::c_int as uint32_t,
            range_end: 0x1bc9e as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1bc9f as libc::c_int as uint32_t,
            range_end: 0x1bc9f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1bca0 as libc::c_int as uint32_t,
            range_end: 0x1bca3 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1bca4 as libc::c_int as uint32_t,
            range_end: 0x1cbff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1cc00 as libc::c_int as uint32_t,
            range_end: 0x1ccf9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ccfa as libc::c_int as uint32_t,
            range_end: 0x1ccff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1cd00 as libc::c_int as uint32_t,
            range_end: 0x1ceb3 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ceb4 as libc::c_int as uint32_t,
            range_end: 0x1ceff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1cf00 as libc::c_int as uint32_t,
            range_end: 0x1cf2d as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1cf2e as libc::c_int as uint32_t,
            range_end: 0x1cf2f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1cf30 as libc::c_int as uint32_t,
            range_end: 0x1cf46 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1cf47 as libc::c_int as uint32_t,
            range_end: 0x1cf4f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1cf50 as libc::c_int as uint32_t,
            range_end: 0x1cfc3 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1cfc4 as libc::c_int as uint32_t,
            range_end: 0x1cfff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d000 as libc::c_int as uint32_t,
            range_end: 0x1d0f5 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d0f6 as libc::c_int as uint32_t,
            range_end: 0x1d0ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d100 as libc::c_int as uint32_t,
            range_end: 0x1d126 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d127 as libc::c_int as uint32_t,
            range_end: 0x1d128 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d129 as libc::c_int as uint32_t,
            range_end: 0x1d166 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d167 as libc::c_int as uint32_t,
            range_end: 0x1d169 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d16a as libc::c_int as uint32_t,
            range_end: 0x1d172 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d173 as libc::c_int as uint32_t,
            range_end: 0x1d182 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d183 as libc::c_int as uint32_t,
            range_end: 0x1d184 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d185 as libc::c_int as uint32_t,
            range_end: 0x1d18b as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d18c as libc::c_int as uint32_t,
            range_end: 0x1d1a9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d1aa as libc::c_int as uint32_t,
            range_end: 0x1d1ad as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d1ae as libc::c_int as uint32_t,
            range_end: 0x1d1ea as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d1eb as libc::c_int as uint32_t,
            range_end: 0x1d1ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d200 as libc::c_int as uint32_t,
            range_end: 0x1d241 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d242 as libc::c_int as uint32_t,
            range_end: 0x1d244 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d245 as libc::c_int as uint32_t,
            range_end: 0x1d245 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d246 as libc::c_int as uint32_t,
            range_end: 0x1d2bf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d2c0 as libc::c_int as uint32_t,
            range_end: 0x1d2d3 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d2d4 as libc::c_int as uint32_t,
            range_end: 0x1d2df as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d2e0 as libc::c_int as uint32_t,
            range_end: 0x1d2f3 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d2f4 as libc::c_int as uint32_t,
            range_end: 0x1d2ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d300 as libc::c_int as uint32_t,
            range_end: 0x1d356 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d357 as libc::c_int as uint32_t,
            range_end: 0x1d35f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d360 as libc::c_int as uint32_t,
            range_end: 0x1d376 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d377 as libc::c_int as uint32_t,
            range_end: 0x1d378 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d379 as libc::c_int as uint32_t,
            range_end: 0x1d3ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d400 as libc::c_int as uint32_t,
            range_end: 0x1d454 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d455 as libc::c_int as uint32_t,
            range_end: 0x1d455 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d456 as libc::c_int as uint32_t,
            range_end: 0x1d49c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d49d as libc::c_int as uint32_t,
            range_end: 0x1d49d as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d49e as libc::c_int as uint32_t,
            range_end: 0x1d49f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d4a0 as libc::c_int as uint32_t,
            range_end: 0x1d4a1 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d4a2 as libc::c_int as uint32_t,
            range_end: 0x1d4a2 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d4a3 as libc::c_int as uint32_t,
            range_end: 0x1d4a4 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d4a5 as libc::c_int as uint32_t,
            range_end: 0x1d4a6 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d4a7 as libc::c_int as uint32_t,
            range_end: 0x1d4a8 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d4a9 as libc::c_int as uint32_t,
            range_end: 0x1d4ac as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d4ad as libc::c_int as uint32_t,
            range_end: 0x1d4ad as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d4ae as libc::c_int as uint32_t,
            range_end: 0x1d4b9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d4ba as libc::c_int as uint32_t,
            range_end: 0x1d4ba as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d4bb as libc::c_int as uint32_t,
            range_end: 0x1d4bb as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d4bc as libc::c_int as uint32_t,
            range_end: 0x1d4bc as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d4bd as libc::c_int as uint32_t,
            range_end: 0x1d4c3 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d4c4 as libc::c_int as uint32_t,
            range_end: 0x1d4c4 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d4c5 as libc::c_int as uint32_t,
            range_end: 0x1d505 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d506 as libc::c_int as uint32_t,
            range_end: 0x1d506 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d507 as libc::c_int as uint32_t,
            range_end: 0x1d50a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d50b as libc::c_int as uint32_t,
            range_end: 0x1d50c as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d50d as libc::c_int as uint32_t,
            range_end: 0x1d514 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d515 as libc::c_int as uint32_t,
            range_end: 0x1d515 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d516 as libc::c_int as uint32_t,
            range_end: 0x1d51c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d51d as libc::c_int as uint32_t,
            range_end: 0x1d51d as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d51e as libc::c_int as uint32_t,
            range_end: 0x1d539 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d53a as libc::c_int as uint32_t,
            range_end: 0x1d53a as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d53b as libc::c_int as uint32_t,
            range_end: 0x1d53e as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d53f as libc::c_int as uint32_t,
            range_end: 0x1d53f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d540 as libc::c_int as uint32_t,
            range_end: 0x1d544 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d545 as libc::c_int as uint32_t,
            range_end: 0x1d545 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d546 as libc::c_int as uint32_t,
            range_end: 0x1d546 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d547 as libc::c_int as uint32_t,
            range_end: 0x1d549 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d54a as libc::c_int as uint32_t,
            range_end: 0x1d550 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d551 as libc::c_int as uint32_t,
            range_end: 0x1d551 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d552 as libc::c_int as uint32_t,
            range_end: 0x1d6a5 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d6a6 as libc::c_int as uint32_t,
            range_end: 0x1d6a7 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d6a8 as libc::c_int as uint32_t,
            range_end: 0x1d7cb as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d7cc as libc::c_int as uint32_t,
            range_end: 0x1d7cd as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1d7ce as libc::c_int as uint32_t,
            range_end: 0x1d9ff as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1da00 as libc::c_int as uint32_t,
            range_end: 0x1da36 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1da37 as libc::c_int as uint32_t,
            range_end: 0x1da3a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1da3b as libc::c_int as uint32_t,
            range_end: 0x1da6c as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1da6d as libc::c_int as uint32_t,
            range_end: 0x1da74 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1da75 as libc::c_int as uint32_t,
            range_end: 0x1da75 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1da76 as libc::c_int as uint32_t,
            range_end: 0x1da83 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1da84 as libc::c_int as uint32_t,
            range_end: 0x1da84 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1da85 as libc::c_int as uint32_t,
            range_end: 0x1da8b as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1da8c as libc::c_int as uint32_t,
            range_end: 0x1da9a as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1da9b as libc::c_int as uint32_t,
            range_end: 0x1da9f as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1daa0 as libc::c_int as uint32_t,
            range_end: 0x1daa0 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1daa1 as libc::c_int as uint32_t,
            range_end: 0x1daaf as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1dab0 as libc::c_int as uint32_t,
            range_end: 0x1deff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1df00 as libc::c_int as uint32_t,
            range_end: 0x1df1e as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1df1f as libc::c_int as uint32_t,
            range_end: 0x1df24 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1df25 as libc::c_int as uint32_t,
            range_end: 0x1df2a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1df2b as libc::c_int as uint32_t,
            range_end: 0x1dfff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e000 as libc::c_int as uint32_t,
            range_end: 0x1e006 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e007 as libc::c_int as uint32_t,
            range_end: 0x1e007 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e008 as libc::c_int as uint32_t,
            range_end: 0x1e018 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e019 as libc::c_int as uint32_t,
            range_end: 0x1e01a as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e01b as libc::c_int as uint32_t,
            range_end: 0x1e021 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e022 as libc::c_int as uint32_t,
            range_end: 0x1e022 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e023 as libc::c_int as uint32_t,
            range_end: 0x1e024 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e025 as libc::c_int as uint32_t,
            range_end: 0x1e025 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e026 as libc::c_int as uint32_t,
            range_end: 0x1e02a as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e02b as libc::c_int as uint32_t,
            range_end: 0x1e02f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e030 as libc::c_int as uint32_t,
            range_end: 0x1e06d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e06e as libc::c_int as uint32_t,
            range_end: 0x1e08e as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e08f as libc::c_int as uint32_t,
            range_end: 0x1e08f as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e090 as libc::c_int as uint32_t,
            range_end: 0x1e0ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e100 as libc::c_int as uint32_t,
            range_end: 0x1e12c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e12d as libc::c_int as uint32_t,
            range_end: 0x1e12f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e130 as libc::c_int as uint32_t,
            range_end: 0x1e136 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e137 as libc::c_int as uint32_t,
            range_end: 0x1e13d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e13e as libc::c_int as uint32_t,
            range_end: 0x1e13f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e140 as libc::c_int as uint32_t,
            range_end: 0x1e149 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e14a as libc::c_int as uint32_t,
            range_end: 0x1e14d as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e14e as libc::c_int as uint32_t,
            range_end: 0x1e14f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e150 as libc::c_int as uint32_t,
            range_end: 0x1e28f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e290 as libc::c_int as uint32_t,
            range_end: 0x1e2ad as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e2ae as libc::c_int as uint32_t,
            range_end: 0x1e2ae as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e2af as libc::c_int as uint32_t,
            range_end: 0x1e2bf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e2c0 as libc::c_int as uint32_t,
            range_end: 0x1e2eb as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e2ec as libc::c_int as uint32_t,
            range_end: 0x1e2ef as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e2f0 as libc::c_int as uint32_t,
            range_end: 0x1e2f9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e2fa as libc::c_int as uint32_t,
            range_end: 0x1e2fe as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e2ff as libc::c_int as uint32_t,
            range_end: 0x1e2ff as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e300 as libc::c_int as uint32_t,
            range_end: 0x1e4cf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e4d0 as libc::c_int as uint32_t,
            range_end: 0x1e4eb as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e4ec as libc::c_int as uint32_t,
            range_end: 0x1e4ef as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e4f0 as libc::c_int as uint32_t,
            range_end: 0x1e4f9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e4fa as libc::c_int as uint32_t,
            range_end: 0x1e5cf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e5d0 as libc::c_int as uint32_t,
            range_end: 0x1e5ed as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e5ee as libc::c_int as uint32_t,
            range_end: 0x1e5ef as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e5f0 as libc::c_int as uint32_t,
            range_end: 0x1e5fa as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e5fb as libc::c_int as uint32_t,
            range_end: 0x1e5fe as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e5ff as libc::c_int as uint32_t,
            range_end: 0x1e5ff as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e600 as libc::c_int as uint32_t,
            range_end: 0x1e7df as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e7e0 as libc::c_int as uint32_t,
            range_end: 0x1e7e6 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e7e7 as libc::c_int as uint32_t,
            range_end: 0x1e7e7 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e7e8 as libc::c_int as uint32_t,
            range_end: 0x1e7eb as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e7ec as libc::c_int as uint32_t,
            range_end: 0x1e7ec as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e7ed as libc::c_int as uint32_t,
            range_end: 0x1e7ee as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e7ef as libc::c_int as uint32_t,
            range_end: 0x1e7ef as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e7f0 as libc::c_int as uint32_t,
            range_end: 0x1e7fe as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e7ff as libc::c_int as uint32_t,
            range_end: 0x1e7ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e800 as libc::c_int as uint32_t,
            range_end: 0x1e8c4 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e8c5 as libc::c_int as uint32_t,
            range_end: 0x1e8c6 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e8c7 as libc::c_int as uint32_t,
            range_end: 0x1e8cf as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e8d0 as libc::c_int as uint32_t,
            range_end: 0x1e8d6 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e8d7 as libc::c_int as uint32_t,
            range_end: 0x1e8ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e900 as libc::c_int as uint32_t,
            range_end: 0x1e943 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e944 as libc::c_int as uint32_t,
            range_end: 0x1e94a as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e94b as libc::c_int as uint32_t,
            range_end: 0x1e94b as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e94c as libc::c_int as uint32_t,
            range_end: 0x1e94f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e950 as libc::c_int as uint32_t,
            range_end: 0x1e959 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e95a as libc::c_int as uint32_t,
            range_end: 0x1e95d as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e95e as libc::c_int as uint32_t,
            range_end: 0x1e95f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1e960 as libc::c_int as uint32_t,
            range_end: 0x1ec70 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ec71 as libc::c_int as uint32_t,
            range_end: 0x1ecb4 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ecb5 as libc::c_int as uint32_t,
            range_end: 0x1ed00 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ed01 as libc::c_int as uint32_t,
            range_end: 0x1ed3d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ed3e as libc::c_int as uint32_t,
            range_end: 0x1edff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee00 as libc::c_int as uint32_t,
            range_end: 0x1ee03 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee04 as libc::c_int as uint32_t,
            range_end: 0x1ee04 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee05 as libc::c_int as uint32_t,
            range_end: 0x1ee1f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee20 as libc::c_int as uint32_t,
            range_end: 0x1ee20 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee21 as libc::c_int as uint32_t,
            range_end: 0x1ee22 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee23 as libc::c_int as uint32_t,
            range_end: 0x1ee23 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee24 as libc::c_int as uint32_t,
            range_end: 0x1ee24 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee25 as libc::c_int as uint32_t,
            range_end: 0x1ee26 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee27 as libc::c_int as uint32_t,
            range_end: 0x1ee27 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee28 as libc::c_int as uint32_t,
            range_end: 0x1ee28 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee29 as libc::c_int as uint32_t,
            range_end: 0x1ee32 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee33 as libc::c_int as uint32_t,
            range_end: 0x1ee33 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee34 as libc::c_int as uint32_t,
            range_end: 0x1ee37 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee38 as libc::c_int as uint32_t,
            range_end: 0x1ee38 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee39 as libc::c_int as uint32_t,
            range_end: 0x1ee39 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee3a as libc::c_int as uint32_t,
            range_end: 0x1ee3a as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee3b as libc::c_int as uint32_t,
            range_end: 0x1ee3b as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee3c as libc::c_int as uint32_t,
            range_end: 0x1ee41 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee42 as libc::c_int as uint32_t,
            range_end: 0x1ee42 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee43 as libc::c_int as uint32_t,
            range_end: 0x1ee46 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee47 as libc::c_int as uint32_t,
            range_end: 0x1ee47 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee48 as libc::c_int as uint32_t,
            range_end: 0x1ee48 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee49 as libc::c_int as uint32_t,
            range_end: 0x1ee49 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee4a as libc::c_int as uint32_t,
            range_end: 0x1ee4a as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee4b as libc::c_int as uint32_t,
            range_end: 0x1ee4b as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee4c as libc::c_int as uint32_t,
            range_end: 0x1ee4c as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee4d as libc::c_int as uint32_t,
            range_end: 0x1ee4f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee50 as libc::c_int as uint32_t,
            range_end: 0x1ee50 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee51 as libc::c_int as uint32_t,
            range_end: 0x1ee52 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee53 as libc::c_int as uint32_t,
            range_end: 0x1ee53 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee54 as libc::c_int as uint32_t,
            range_end: 0x1ee54 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee55 as libc::c_int as uint32_t,
            range_end: 0x1ee56 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee57 as libc::c_int as uint32_t,
            range_end: 0x1ee57 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee58 as libc::c_int as uint32_t,
            range_end: 0x1ee58 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee59 as libc::c_int as uint32_t,
            range_end: 0x1ee59 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee5a as libc::c_int as uint32_t,
            range_end: 0x1ee5a as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee5b as libc::c_int as uint32_t,
            range_end: 0x1ee5b as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee5c as libc::c_int as uint32_t,
            range_end: 0x1ee5c as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee5d as libc::c_int as uint32_t,
            range_end: 0x1ee5d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee5e as libc::c_int as uint32_t,
            range_end: 0x1ee5e as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee5f as libc::c_int as uint32_t,
            range_end: 0x1ee5f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee60 as libc::c_int as uint32_t,
            range_end: 0x1ee60 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee61 as libc::c_int as uint32_t,
            range_end: 0x1ee62 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee63 as libc::c_int as uint32_t,
            range_end: 0x1ee63 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee64 as libc::c_int as uint32_t,
            range_end: 0x1ee64 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee65 as libc::c_int as uint32_t,
            range_end: 0x1ee66 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee67 as libc::c_int as uint32_t,
            range_end: 0x1ee6a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee6b as libc::c_int as uint32_t,
            range_end: 0x1ee6b as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee6c as libc::c_int as uint32_t,
            range_end: 0x1ee72 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee73 as libc::c_int as uint32_t,
            range_end: 0x1ee73 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee74 as libc::c_int as uint32_t,
            range_end: 0x1ee77 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee78 as libc::c_int as uint32_t,
            range_end: 0x1ee78 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee79 as libc::c_int as uint32_t,
            range_end: 0x1ee7c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee7d as libc::c_int as uint32_t,
            range_end: 0x1ee7d as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee7e as libc::c_int as uint32_t,
            range_end: 0x1ee7e as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee7f as libc::c_int as uint32_t,
            range_end: 0x1ee7f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee80 as libc::c_int as uint32_t,
            range_end: 0x1ee89 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee8a as libc::c_int as uint32_t,
            range_end: 0x1ee8a as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee8b as libc::c_int as uint32_t,
            range_end: 0x1ee9b as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1ee9c as libc::c_int as uint32_t,
            range_end: 0x1eea0 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1eea1 as libc::c_int as uint32_t,
            range_end: 0x1eea3 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1eea4 as libc::c_int as uint32_t,
            range_end: 0x1eea4 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1eea5 as libc::c_int as uint32_t,
            range_end: 0x1eea9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1eeaa as libc::c_int as uint32_t,
            range_end: 0x1eeaa as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1eeab as libc::c_int as uint32_t,
            range_end: 0x1eebb as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1eebc as libc::c_int as uint32_t,
            range_end: 0x1eeef as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1eef0 as libc::c_int as uint32_t,
            range_end: 0x1eef1 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1eef2 as libc::c_int as uint32_t,
            range_end: 0x1efff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f000 as libc::c_int as uint32_t,
            range_end: 0x1f003 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f004 as libc::c_int as uint32_t,
            range_end: 0x1f004 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f005 as libc::c_int as uint32_t,
            range_end: 0x1f02b as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f02c as libc::c_int as uint32_t,
            range_end: 0x1f02f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f030 as libc::c_int as uint32_t,
            range_end: 0x1f093 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f094 as libc::c_int as uint32_t,
            range_end: 0x1f09f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f0a0 as libc::c_int as uint32_t,
            range_end: 0x1f0ae as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f0af as libc::c_int as uint32_t,
            range_end: 0x1f0b0 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f0b1 as libc::c_int as uint32_t,
            range_end: 0x1f0bf as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f0c0 as libc::c_int as uint32_t,
            range_end: 0x1f0c0 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f0c1 as libc::c_int as uint32_t,
            range_end: 0x1f0ce as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f0cf as libc::c_int as uint32_t,
            range_end: 0x1f0cf as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f0d0 as libc::c_int as uint32_t,
            range_end: 0x1f0d0 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f0d1 as libc::c_int as uint32_t,
            range_end: 0x1f0f5 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f0f6 as libc::c_int as uint32_t,
            range_end: 0x1f0ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f100 as libc::c_int as uint32_t,
            range_end: 0x1f18d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f18e as libc::c_int as uint32_t,
            range_end: 0x1f18e as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f18f as libc::c_int as uint32_t,
            range_end: 0x1f190 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f191 as libc::c_int as uint32_t,
            range_end: 0x1f19a as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f19b as libc::c_int as uint32_t,
            range_end: 0x1f1ad as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f1ae as libc::c_int as uint32_t,
            range_end: 0x1f1e5 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f1e6 as libc::c_int as uint32_t,
            range_end: 0x1f1ff as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f200 as libc::c_int as uint32_t,
            range_end: 0x1f202 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f203 as libc::c_int as uint32_t,
            range_end: 0x1f20f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f210 as libc::c_int as uint32_t,
            range_end: 0x1f23b as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f23c as libc::c_int as uint32_t,
            range_end: 0x1f23f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f240 as libc::c_int as uint32_t,
            range_end: 0x1f248 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f249 as libc::c_int as uint32_t,
            range_end: 0x1f24f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f250 as libc::c_int as uint32_t,
            range_end: 0x1f251 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f252 as libc::c_int as uint32_t,
            range_end: 0x1f25f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f260 as libc::c_int as uint32_t,
            range_end: 0x1f265 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f266 as libc::c_int as uint32_t,
            range_end: 0x1f2ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f300 as libc::c_int as uint32_t,
            range_end: 0x1f320 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f321 as libc::c_int as uint32_t,
            range_end: 0x1f32c as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f32d as libc::c_int as uint32_t,
            range_end: 0x1f335 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f336 as libc::c_int as uint32_t,
            range_end: 0x1f336 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f337 as libc::c_int as uint32_t,
            range_end: 0x1f37c as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f37d as libc::c_int as uint32_t,
            range_end: 0x1f37d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f37e as libc::c_int as uint32_t,
            range_end: 0x1f393 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f394 as libc::c_int as uint32_t,
            range_end: 0x1f39f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f3a0 as libc::c_int as uint32_t,
            range_end: 0x1f3ca as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f3cb as libc::c_int as uint32_t,
            range_end: 0x1f3ce as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f3cf as libc::c_int as uint32_t,
            range_end: 0x1f3d3 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f3d4 as libc::c_int as uint32_t,
            range_end: 0x1f3df as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f3e0 as libc::c_int as uint32_t,
            range_end: 0x1f3f0 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f3f1 as libc::c_int as uint32_t,
            range_end: 0x1f3f3 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f3f4 as libc::c_int as uint32_t,
            range_end: 0x1f3f4 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f3f5 as libc::c_int as uint32_t,
            range_end: 0x1f3f7 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f3f8 as libc::c_int as uint32_t,
            range_end: 0x1f43e as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f43f as libc::c_int as uint32_t,
            range_end: 0x1f43f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f440 as libc::c_int as uint32_t,
            range_end: 0x1f440 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f441 as libc::c_int as uint32_t,
            range_end: 0x1f441 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f442 as libc::c_int as uint32_t,
            range_end: 0x1f4fc as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f4fd as libc::c_int as uint32_t,
            range_end: 0x1f4fe as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f4ff as libc::c_int as uint32_t,
            range_end: 0x1f53d as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f53e as libc::c_int as uint32_t,
            range_end: 0x1f54a as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f54b as libc::c_int as uint32_t,
            range_end: 0x1f54e as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f54f as libc::c_int as uint32_t,
            range_end: 0x1f54f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f550 as libc::c_int as uint32_t,
            range_end: 0x1f567 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f568 as libc::c_int as uint32_t,
            range_end: 0x1f579 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f57a as libc::c_int as uint32_t,
            range_end: 0x1f57a as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f57b as libc::c_int as uint32_t,
            range_end: 0x1f594 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f595 as libc::c_int as uint32_t,
            range_end: 0x1f596 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f597 as libc::c_int as uint32_t,
            range_end: 0x1f5a3 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f5a4 as libc::c_int as uint32_t,
            range_end: 0x1f5a4 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f5a5 as libc::c_int as uint32_t,
            range_end: 0x1f5fa as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f5fb as libc::c_int as uint32_t,
            range_end: 0x1f64f as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f650 as libc::c_int as uint32_t,
            range_end: 0x1f67f as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f680 as libc::c_int as uint32_t,
            range_end: 0x1f6c5 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f6c6 as libc::c_int as uint32_t,
            range_end: 0x1f6cb as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f6cc as libc::c_int as uint32_t,
            range_end: 0x1f6cc as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f6cd as libc::c_int as uint32_t,
            range_end: 0x1f6cf as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f6d0 as libc::c_int as uint32_t,
            range_end: 0x1f6d2 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f6d3 as libc::c_int as uint32_t,
            range_end: 0x1f6d4 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f6d5 as libc::c_int as uint32_t,
            range_end: 0x1f6d7 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f6d8 as libc::c_int as uint32_t,
            range_end: 0x1f6db as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f6dc as libc::c_int as uint32_t,
            range_end: 0x1f6df as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f6e0 as libc::c_int as uint32_t,
            range_end: 0x1f6ea as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f6eb as libc::c_int as uint32_t,
            range_end: 0x1f6ec as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f6ed as libc::c_int as uint32_t,
            range_end: 0x1f6ef as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f6f0 as libc::c_int as uint32_t,
            range_end: 0x1f6f3 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f6f4 as libc::c_int as uint32_t,
            range_end: 0x1f6fc as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f6fd as libc::c_int as uint32_t,
            range_end: 0x1f6ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f700 as libc::c_int as uint32_t,
            range_end: 0x1f776 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f777 as libc::c_int as uint32_t,
            range_end: 0x1f77a as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f77b as libc::c_int as uint32_t,
            range_end: 0x1f7d9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f7da as libc::c_int as uint32_t,
            range_end: 0x1f7df as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f7e0 as libc::c_int as uint32_t,
            range_end: 0x1f7eb as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f7ec as libc::c_int as uint32_t,
            range_end: 0x1f7ef as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f7f0 as libc::c_int as uint32_t,
            range_end: 0x1f7f0 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f7f1 as libc::c_int as uint32_t,
            range_end: 0x1f7ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f800 as libc::c_int as uint32_t,
            range_end: 0x1f80b as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f80c as libc::c_int as uint32_t,
            range_end: 0x1f80f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f810 as libc::c_int as uint32_t,
            range_end: 0x1f847 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f848 as libc::c_int as uint32_t,
            range_end: 0x1f84f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f850 as libc::c_int as uint32_t,
            range_end: 0x1f859 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f85a as libc::c_int as uint32_t,
            range_end: 0x1f85f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f860 as libc::c_int as uint32_t,
            range_end: 0x1f887 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f888 as libc::c_int as uint32_t,
            range_end: 0x1f88f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f890 as libc::c_int as uint32_t,
            range_end: 0x1f8ad as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f8ae as libc::c_int as uint32_t,
            range_end: 0x1f8af as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f8b0 as libc::c_int as uint32_t,
            range_end: 0x1f8bb as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f8bc as libc::c_int as uint32_t,
            range_end: 0x1f8bf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f8c0 as libc::c_int as uint32_t,
            range_end: 0x1f8c1 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f8c2 as libc::c_int as uint32_t,
            range_end: 0x1f8ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f900 as libc::c_int as uint32_t,
            range_end: 0x1f90b as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f90c as libc::c_int as uint32_t,
            range_end: 0x1f93a as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f93b as libc::c_int as uint32_t,
            range_end: 0x1f93b as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f93c as libc::c_int as uint32_t,
            range_end: 0x1f945 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f946 as libc::c_int as uint32_t,
            range_end: 0x1f946 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1f947 as libc::c_int as uint32_t,
            range_end: 0x1f9ff as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1fa00 as libc::c_int as uint32_t,
            range_end: 0x1fa53 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1fa54 as libc::c_int as uint32_t,
            range_end: 0x1fa5f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1fa60 as libc::c_int as uint32_t,
            range_end: 0x1fa6d as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1fa6e as libc::c_int as uint32_t,
            range_end: 0x1fa6f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1fa70 as libc::c_int as uint32_t,
            range_end: 0x1fa7c as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1fa7d as libc::c_int as uint32_t,
            range_end: 0x1fa7f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1fa80 as libc::c_int as uint32_t,
            range_end: 0x1fa89 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1fa8a as libc::c_int as uint32_t,
            range_end: 0x1fa8e as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1fa8f as libc::c_int as uint32_t,
            range_end: 0x1fac6 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1fac7 as libc::c_int as uint32_t,
            range_end: 0x1facd as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1face as libc::c_int as uint32_t,
            range_end: 0x1fadc as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1fadd as libc::c_int as uint32_t,
            range_end: 0x1fade as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1fadf as libc::c_int as uint32_t,
            range_end: 0x1fae9 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1faea as libc::c_int as uint32_t,
            range_end: 0x1faef as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1faf0 as libc::c_int as uint32_t,
            range_end: 0x1faf8 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1faf9 as libc::c_int as uint32_t,
            range_end: 0x1faff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1fb00 as libc::c_int as uint32_t,
            range_end: 0x1fb92 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1fb93 as libc::c_int as uint32_t,
            range_end: 0x1fb93 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1fb94 as libc::c_int as uint32_t,
            range_end: 0x1fbf9 as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x1fbfa as libc::c_int as uint32_t,
            range_end: 0x1ffff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x20000 as libc::c_int as uint32_t,
            range_end: 0x2a6df as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2a6e0 as libc::c_int as uint32_t,
            range_end: 0x2a6ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2a700 as libc::c_int as uint32_t,
            range_end: 0x2b739 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2b73a as libc::c_int as uint32_t,
            range_end: 0x2b73f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2b740 as libc::c_int as uint32_t,
            range_end: 0x2b81d as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2b81e as libc::c_int as uint32_t,
            range_end: 0x2b81f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2b820 as libc::c_int as uint32_t,
            range_end: 0x2cea1 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2cea2 as libc::c_int as uint32_t,
            range_end: 0x2ceaf as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2ceb0 as libc::c_int as uint32_t,
            range_end: 0x2ebe0 as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2ebe1 as libc::c_int as uint32_t,
            range_end: 0x2ebef as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2ebf0 as libc::c_int as uint32_t,
            range_end: 0x2ee5d as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2ee5e as libc::c_int as uint32_t,
            range_end: 0x2f7ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2f800 as libc::c_int as uint32_t,
            range_end: 0x2fa1d as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x2fa1e as libc::c_int as uint32_t,
            range_end: 0x2ffff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x30000 as libc::c_int as uint32_t,
            range_end: 0x3134a as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x3134b as libc::c_int as uint32_t,
            range_end: 0x3134f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x31350 as libc::c_int as uint32_t,
            range_end: 0x323af as libc::c_int as uint32_t,
            width: 2 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x323b0 as libc::c_int as uint32_t,
            range_end: 0xe0000 as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xe0001 as libc::c_int as uint32_t,
            range_end: 0xe0001 as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xe0002 as libc::c_int as uint32_t,
            range_end: 0xe001f as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xe0020 as libc::c_int as uint32_t,
            range_end: 0xe007f as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xe0080 as libc::c_int as uint32_t,
            range_end: 0xe00ff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xe0100 as libc::c_int as uint32_t,
            range_end: 0xe01ef as libc::c_int as uint32_t,
            width: 0 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xe01f0 as libc::c_int as uint32_t,
            range_end: 0xeffff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xf0000 as libc::c_int as uint32_t,
            range_end: 0xffffd as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0xffffe as libc::c_int as uint32_t,
            range_end: 0xfffff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x100000 as libc::c_int as uint32_t,
            range_end: 0x10fffd as libc::c_int as uint32_t,
            width: 1 as libc::c_int,
        };
        init
    },
    {
        let mut init = C2RustUnnamed_12 {
            range_start: 0x10fffe as libc::c_int as uint32_t,
            range_end: 0x10ffff as libc::c_int as uint32_t,
            width: -(1 as libc::c_int),
        };
        init
    },
];
unsafe extern "C" fn cell_copy(
    mut dst: *mut tb_cell,
    mut src: *mut tb_cell,
) -> libc::c_int {
    return cell_set(
        dst,
        &mut (*src).ch,
        1 as libc::c_int as size_t,
        (*src).fg,
        (*src).bg,
    );
}
unsafe extern "C" fn cell_cmp(mut a: *mut tb_cell, mut b: *mut tb_cell) -> libc::c_int {
    if (*a).ch != (*b).ch || (*a).fg as libc::c_int != (*b).fg as libc::c_int
        || (*a).bg as libc::c_int != (*b).bg as libc::c_int
    {
        return 1 as libc::c_int;
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn tb_wcwidth(mut ch: uint32_t) -> libc::c_int {
    return tb_wcswidth(&mut ch, 1 as libc::c_int as size_t);
}
unsafe extern "C" fn tb_wcswidth(mut ch: *mut uint32_t, mut nch: size_t) -> libc::c_int {
    let mut sw: libc::c_int = 0 as libc::c_int;
    let mut i: size_t = 0 as libc::c_int as size_t;
    i = 0 as libc::c_int as size_t;
    while i < nch {
        let mut w: libc::c_int = 0;
        tb_iswprint_ex(*ch.offset(i as isize), &mut w);
        if w < 0 as libc::c_int {
            return -(1 as libc::c_int);
        }
        sw += w;
        i = i.wrapping_add(1);
        i;
    }
    return sw;
}
pub unsafe extern "C" fn tb_invalidate() -> libc::c_int {
    let mut rv: libc::c_int = 0;
    if global.initialized == 0 {
        return -(8 as libc::c_int);
    }
    rv = resize_cellbufs();
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn resize_cellbufs() -> libc::c_int {
    let mut rv: libc::c_int = 0;
    rv = cellbuf_resize(&mut global.back, global.width, global.height);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = cellbuf_resize(&mut global.front, global.width, global.height);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = cellbuf_clear(&mut global.front);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = send_clear();
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn cellbuf_resize(
    mut c: *mut cellbuf_t,
    mut w: libc::c_int,
    mut h: libc::c_int,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut ow: libc::c_int = (*c).width;
    let mut oh: libc::c_int = (*c).height;
    if ow == w && oh == h {
        return 0 as libc::c_int;
    }
    w = if w < 1 as libc::c_int { 1 as libc::c_int } else { w };
    h = if h < 1 as libc::c_int { 1 as libc::c_int } else { h };
    let mut minw: libc::c_int = if w < ow { w } else { ow };
    let mut minh: libc::c_int = if h < oh { h } else { oh };
    let mut prev: *mut tb_cell = (*c).cells;
    rv = cellbuf_init(c, w, h);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = cellbuf_clear(c);
    if rv != 0 as libc::c_int {
        return rv;
    }
    let mut x: libc::c_int = 0;
    let mut y: libc::c_int = 0;
    x = 0 as libc::c_int;
    while x < minw {
        y = 0 as libc::c_int;
        while y < minh {
            let mut src: *mut tb_cell = 0 as *mut tb_cell;
            let mut dst: *mut tb_cell = 0 as *mut tb_cell;
            src = &mut *prev.offset((y * ow + x) as isize) as *mut tb_cell;
            rv = cellbuf_get(c, x, y, &mut dst);
            if rv != 0 as libc::c_int {
                return rv;
            }
            rv = cell_copy(dst, src);
            if rv != 0 as libc::c_int {
                return rv;
            }
            y += 1;
            y;
        }
        x += 1;
        x;
    }
    free(prev as *mut libc::c_void);
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn tb_set_cursor(
    mut cx: libc::c_int,
    mut cy: libc::c_int,
) -> libc::c_int {
    if global.initialized == 0 {
        return -(8 as libc::c_int);
    }
    let mut rv: libc::c_int = 0;
    if cx < 0 as libc::c_int {
        cx = 0 as libc::c_int;
    }
    if cy < 0 as libc::c_int {
        cy = 0 as libc::c_int;
    }
    if global.cursor_x == -(1 as libc::c_int) {
        rv = bytebuf_puts(&mut global.out, global.caps[25 as libc::c_int as usize]);
        if rv != 0 as libc::c_int {
            return rv;
        }
    }
    rv = send_cursor_if(cx, cy);
    if rv != 0 as libc::c_int {
        return rv;
    }
    global.cursor_x = cx;
    global.cursor_y = cy;
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn tb_hide_cursor() -> libc::c_int {
    if global.initialized == 0 {
        return -(8 as libc::c_int);
    }
    let mut rv: libc::c_int = 0;
    if global.cursor_x >= 0 as libc::c_int {
        rv = bytebuf_puts(&mut global.out, global.caps[26 as libc::c_int as usize]);
        if rv != 0 as libc::c_int {
            return rv;
        }
    }
    global.cursor_x = -(1 as libc::c_int);
    global.cursor_y = -(1 as libc::c_int);
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn tb_set_cell(
    mut x: libc::c_int,
    mut y: libc::c_int,
    mut ch: uint32_t,
    mut fg: uintattr_t,
    mut bg: uintattr_t,
) -> libc::c_int {
    return tb_set_cell_ex(x, y, &mut ch, 1 as libc::c_int as size_t, fg, bg);
}
pub unsafe extern "C" fn tb_set_cell_ex(
    mut x: libc::c_int,
    mut y: libc::c_int,
    mut ch: *mut uint32_t,
    mut nch: size_t,
    mut fg: uintattr_t,
    mut bg: uintattr_t,
) -> libc::c_int {
    if global.initialized == 0 {
        return -(8 as libc::c_int);
    }
    let mut rv: libc::c_int = 0;
    let mut cell: *mut tb_cell = 0 as *mut tb_cell;
    rv = cellbuf_get(&mut global.back, x, y, &mut cell);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = cell_set(cell, ch, nch, fg, bg);
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn tb_extend_cell(
    mut x: libc::c_int,
    mut y: libc::c_int,
    mut ch: uint32_t,
) -> libc::c_int {
    if global.initialized == 0 {
        return -(8 as libc::c_int);
    }
    return -(1 as libc::c_int);
}
pub unsafe extern "C" fn tb_set_input_mode(mut mode: libc::c_int) -> libc::c_int {
    if global.initialized == 0 {
        return -(8 as libc::c_int);
    }
    if mode == 0 as libc::c_int {
        return global.input_mode;
    }
    let mut esc_or_alt: libc::c_int = 1 as libc::c_int | 2 as libc::c_int;
    if mode & esc_or_alt == 0 as libc::c_int {
        mode |= 1 as libc::c_int;
    } else if mode & esc_or_alt == esc_or_alt {
        mode &= !(2 as libc::c_int);
    }
    if mode & 4 as libc::c_int != 0 {
        bytebuf_puts(
            &mut global.out,
            b"\x1B[?1000h\x1B[?1002h\x1B[?1015h\x1B[?1006h\0" as *const u8
                as *const libc::c_char,
        );
        bytebuf_flush(&mut global.out, global.wfd);
    } else {
        bytebuf_puts(
            &mut global.out,
            b"\x1B[?1006l\x1B[?1015l\x1B[?1002l\x1B[?1000l\0" as *const u8
                as *const libc::c_char,
        );
        bytebuf_flush(&mut global.out, global.wfd);
    }
    global.input_mode = mode;
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn tb_set_output_mode(mut mode: libc::c_int) -> libc::c_int {
    if global.initialized == 0 {
        return -(8 as libc::c_int);
    }
    match mode {
        0 => return global.output_mode,
        1 | 2 | 3 | 4 => {
            global.last_fg = !(global.fg as libc::c_int) as uintattr_t;
            global.last_bg = !(global.bg as libc::c_int) as uintattr_t;
            global.output_mode = mode;
            return 0 as libc::c_int;
        }
        _ => {}
    }
    return -(1 as libc::c_int);
}
pub unsafe extern "C" fn tb_peek_event(
    mut event: *mut tb_event,
    mut timeout_ms: libc::c_int,
) -> libc::c_int {
    if global.initialized == 0 {
        return -(8 as libc::c_int);
    }
    return wait_event(event, timeout_ms);
}
unsafe extern "C" fn wait_event(
    mut event: *mut tb_event,
    mut timeout: libc::c_int,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut buf: [libc::c_char; 64] = [0; 64];
    memset(
        event as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<tb_event>() as libc::c_ulong,
    );
    rv = extract_event(event);
    if rv == 0 as libc::c_int {
        return rv;
    }
    let mut fds: fd_set = fd_set { fds_bits: [0; 16] };
    let mut tv: timeval = timeval { tv_sec: 0, tv_usec: 0 };
    tv.tv_sec = (timeout / 1000 as libc::c_int) as __time_t;
    tv
        .tv_usec = (timeout as libc::c_long
        - tv.tv_sec * 1000 as libc::c_int as libc::c_long)
        * 1000 as libc::c_int as libc::c_long;
    loop {
        let mut __d0: libc::c_int = 0;
        let mut __d1: libc::c_int = 0;
        let fresh7 = &mut __d0;
        let fresh8;
        let fresh9 = (::std::mem::size_of::<fd_set>() as libc::c_ulong)
            .wrapping_div(::std::mem::size_of::<__fd_mask>() as libc::c_ulong);
        let fresh10 = &mut __d1;
        let fresh11;
        let fresh12 = &mut *(fds.fds_bits).as_mut_ptr().offset(0 as libc::c_int as isize)
            as *mut __fd_mask;
        asm!(
            "cld; rep; stosq", inlateout("cx") c2rust_asm_casts::AsmCast::cast_in(fresh7,
            fresh9) => fresh8, inlateout("di")
            c2rust_asm_casts::AsmCast::cast_in(fresh10, fresh12) => fresh11,
            inlateout("ax") 0 as libc::c_int => _, options(preserves_flags, att_syntax)
        );
        c2rust_asm_casts::AsmCast::cast_out(fresh7, fresh9, fresh8);
        c2rust_asm_casts::AsmCast::cast_out(fresh10, fresh12, fresh11);
        fds
            .fds_bits[(global.rfd
            / (8 as libc::c_int
                * ::std::mem::size_of::<__fd_mask>() as libc::c_ulong as libc::c_int))
            as usize]
            |= ((1 as libc::c_ulong)
                << global.rfd
                    % (8 as libc::c_int
                        * ::std::mem::size_of::<__fd_mask>() as libc::c_ulong
                            as libc::c_int)) as __fd_mask;
        fds
            .fds_bits[(global.resize_pipefd[0 as libc::c_int as usize]
            / (8 as libc::c_int
                * ::std::mem::size_of::<__fd_mask>() as libc::c_ulong as libc::c_int))
            as usize]
            |= ((1 as libc::c_ulong)
                << global.resize_pipefd[0 as libc::c_int as usize]
                    % (8 as libc::c_int
                        * ::std::mem::size_of::<__fd_mask>() as libc::c_ulong
                            as libc::c_int)) as __fd_mask;
        let mut maxfd: libc::c_int = if global.resize_pipefd[0 as libc::c_int as usize]
            > global.rfd
        {
            global.resize_pipefd[0 as libc::c_int as usize]
        } else {
            global.rfd
        };
        let mut select_rv: libc::c_int = select(
            maxfd + 1 as libc::c_int,
            &mut fds,
            0 as *mut fd_set,
            0 as *mut fd_set,
            if timeout < 0 as libc::c_int { 0 as *mut timeval } else { &mut tv },
        );
        if select_rv < 0 as libc::c_int {
            global.last_errno = *__errno_location();
            return -(14 as libc::c_int);
        } else if select_rv == 0 as libc::c_int {
            return -(6 as libc::c_int)
        }
        let mut tty_has_events: libc::c_int = (fds
            .fds_bits[(global.rfd
            / (8 as libc::c_int
                * ::std::mem::size_of::<__fd_mask>() as libc::c_ulong as libc::c_int))
            as usize]
            & ((1 as libc::c_ulong)
                << global.rfd
                    % (8 as libc::c_int
                        * ::std::mem::size_of::<__fd_mask>() as libc::c_ulong
                            as libc::c_int)) as __fd_mask
            != 0 as libc::c_int as libc::c_long) as libc::c_int;
        let mut resize_has_events: libc::c_int = (fds
            .fds_bits[(global.resize_pipefd[0 as libc::c_int as usize]
            / (8 as libc::c_int
                * ::std::mem::size_of::<__fd_mask>() as libc::c_ulong as libc::c_int))
            as usize]
            & ((1 as libc::c_ulong)
                << global.resize_pipefd[0 as libc::c_int as usize]
                    % (8 as libc::c_int
                        * ::std::mem::size_of::<__fd_mask>() as libc::c_ulong
                            as libc::c_int)) as __fd_mask
            != 0 as libc::c_int as libc::c_long) as libc::c_int;
        if tty_has_events != 0 {
            let mut read_rv: ssize_t = read(
                global.rfd,
                buf.as_mut_ptr() as *mut libc::c_void,
                ::std::mem::size_of::<[libc::c_char; 64]>() as libc::c_ulong,
            );
            if read_rv < 0 as libc::c_int as libc::c_long {
                global.last_errno = *__errno_location();
                return -(10 as libc::c_int);
            } else if read_rv > 0 as libc::c_int as libc::c_long {
                bytebuf_nputs(&mut global.in_0, buf.as_mut_ptr(), read_rv as size_t);
            }
        }
        if resize_has_events != 0 {
            let mut ignore: libc::c_int = 0 as libc::c_int;
            read(
                global.resize_pipefd[0 as libc::c_int as usize],
                &mut ignore as *mut libc::c_int as *mut libc::c_void,
                ::std::mem::size_of::<libc::c_int>() as libc::c_ulong,
            );
            rv = update_term_size();
            if rv != 0 as libc::c_int {
                return rv;
            }
            rv = resize_cellbufs();
            if rv != 0 as libc::c_int {
                return rv;
            }
            (*event).type_0 = 2 as libc::c_int as uint8_t;
            (*event).w = global.width;
            (*event).h = global.height;
            return 0 as libc::c_int;
        }
        memset(
            event as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<tb_event>() as libc::c_ulong,
        );
        rv = extract_event(event);
        if rv == 0 as libc::c_int {
            return rv;
        }
        if !(timeout == -(1 as libc::c_int)) {
            break;
        }
    }
    return rv;
}
unsafe extern "C" fn extract_event(mut event: *mut tb_event) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut in_0: *mut bytebuf_t = &mut global.in_0;
    if (*in_0).len == 0 as libc::c_int as libc::c_ulong {
        return -(1 as libc::c_int);
    }
    if *((*in_0).buf).offset(0 as libc::c_int as isize) as libc::c_int == '\u{1b}' as i32
    {
        if !(global.input_mode & 1 as libc::c_int != 0
            && (*in_0).len == 1 as libc::c_int as libc::c_ulong)
        {
            rv = extract_esc(event);
            if rv == 0 as libc::c_int || rv == -(2 as libc::c_int) {
                return rv;
            }
        }
        if global.input_mode & 1 as libc::c_int != 0 {
            (*event).type_0 = 1 as libc::c_int as uint8_t;
            (*event).ch = 0 as libc::c_int as uint32_t;
            (*event).key = 0x1b as libc::c_int as uint16_t;
            (*event).mod_0 = 0 as libc::c_int as uint8_t;
            bytebuf_shift(in_0, 1 as libc::c_int as size_t);
            return 0 as libc::c_int;
        }
        (*event).mod_0 = ((*event).mod_0 as libc::c_int | 1 as libc::c_int) as uint8_t;
        bytebuf_shift(in_0, 1 as libc::c_int as size_t);
        return extract_event(event);
    }
    let mut is_ctrl: libc::c_int = ((*((*in_0).buf).offset(0 as libc::c_int as isize)
        as uint16_t as libc::c_int) < 0x20 as libc::c_int
        || *((*in_0).buf).offset(0 as libc::c_int as isize) as libc::c_int
            == 0x7f as libc::c_int) as libc::c_int;
    if is_ctrl != 0 {
        (*event).type_0 = 1 as libc::c_int as uint8_t;
        (*event).ch = 0 as libc::c_int as uint32_t;
        (*event).key = *((*in_0).buf).offset(0 as libc::c_int as isize) as uint16_t;
        (*event).mod_0 = ((*event).mod_0 as libc::c_int | 2 as libc::c_int) as uint8_t;
        bytebuf_shift(in_0, 1 as libc::c_int as size_t);
        return 0 as libc::c_int;
    }
    if (*in_0).len
        >= tb_utf8_char_length(*((*in_0).buf).offset(0 as libc::c_int as isize))
            as size_t
    {
        (*event).type_0 = 1 as libc::c_int as uint8_t;
        tb_utf8_char_to_unicode(&mut (*event).ch, (*in_0).buf);
        (*event).key = 0 as libc::c_int as uint16_t;
        bytebuf_shift(
            in_0,
            tb_utf8_char_length(*((*in_0).buf).offset(0 as libc::c_int as isize))
                as size_t,
        );
        return 0 as libc::c_int;
    }
    return -(1 as libc::c_int);
}
pub unsafe extern "C" fn tb_utf8_char_length(mut c: libc::c_char) -> libc::c_int {
    return utf8_length[c as libc::c_uchar as usize] as libc::c_int;
}
static mut utf8_length: [libc::c_uchar; 256] = [
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    2 as libc::c_int as libc::c_uchar,
    2 as libc::c_int as libc::c_uchar,
    2 as libc::c_int as libc::c_uchar,
    2 as libc::c_int as libc::c_uchar,
    2 as libc::c_int as libc::c_uchar,
    2 as libc::c_int as libc::c_uchar,
    2 as libc::c_int as libc::c_uchar,
    2 as libc::c_int as libc::c_uchar,
    2 as libc::c_int as libc::c_uchar,
    2 as libc::c_int as libc::c_uchar,
    2 as libc::c_int as libc::c_uchar,
    2 as libc::c_int as libc::c_uchar,
    2 as libc::c_int as libc::c_uchar,
    2 as libc::c_int as libc::c_uchar,
    2 as libc::c_int as libc::c_uchar,
    2 as libc::c_int as libc::c_uchar,
    2 as libc::c_int as libc::c_uchar,
    2 as libc::c_int as libc::c_uchar,
    2 as libc::c_int as libc::c_uchar,
    2 as libc::c_int as libc::c_uchar,
    2 as libc::c_int as libc::c_uchar,
    2 as libc::c_int as libc::c_uchar,
    2 as libc::c_int as libc::c_uchar,
    2 as libc::c_int as libc::c_uchar,
    2 as libc::c_int as libc::c_uchar,
    2 as libc::c_int as libc::c_uchar,
    2 as libc::c_int as libc::c_uchar,
    2 as libc::c_int as libc::c_uchar,
    2 as libc::c_int as libc::c_uchar,
    2 as libc::c_int as libc::c_uchar,
    2 as libc::c_int as libc::c_uchar,
    2 as libc::c_int as libc::c_uchar,
    3 as libc::c_int as libc::c_uchar,
    3 as libc::c_int as libc::c_uchar,
    3 as libc::c_int as libc::c_uchar,
    3 as libc::c_int as libc::c_uchar,
    3 as libc::c_int as libc::c_uchar,
    3 as libc::c_int as libc::c_uchar,
    3 as libc::c_int as libc::c_uchar,
    3 as libc::c_int as libc::c_uchar,
    3 as libc::c_int as libc::c_uchar,
    3 as libc::c_int as libc::c_uchar,
    3 as libc::c_int as libc::c_uchar,
    3 as libc::c_int as libc::c_uchar,
    3 as libc::c_int as libc::c_uchar,
    3 as libc::c_int as libc::c_uchar,
    3 as libc::c_int as libc::c_uchar,
    3 as libc::c_int as libc::c_uchar,
    4 as libc::c_int as libc::c_uchar,
    4 as libc::c_int as libc::c_uchar,
    4 as libc::c_int as libc::c_uchar,
    4 as libc::c_int as libc::c_uchar,
    4 as libc::c_int as libc::c_uchar,
    4 as libc::c_int as libc::c_uchar,
    4 as libc::c_int as libc::c_uchar,
    4 as libc::c_int as libc::c_uchar,
    5 as libc::c_int as libc::c_uchar,
    5 as libc::c_int as libc::c_uchar,
    5 as libc::c_int as libc::c_uchar,
    5 as libc::c_int as libc::c_uchar,
    6 as libc::c_int as libc::c_uchar,
    6 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
    1 as libc::c_int as libc::c_uchar,
];
unsafe extern "C" fn bytebuf_shift(mut b: *mut bytebuf_t, mut n: size_t) -> libc::c_int {
    if n > (*b).len {
        n = (*b).len;
    }
    let mut nmove: size_t = ((*b).len).wrapping_sub(n);
    memmove(
        (*b).buf as *mut libc::c_void,
        ((*b).buf).offset(n as isize) as *const libc::c_void,
        nmove,
    );
    (*b).len = ((*b).len as libc::c_ulong).wrapping_sub(n) as size_t as size_t;
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn tb_utf8_char_to_unicode(
    mut out: *mut uint32_t,
    mut c: *const libc::c_char,
) -> libc::c_int {
    if *c as libc::c_int == '\0' as i32 {
        return 0 as libc::c_int;
    }
    let mut i: libc::c_int = 0;
    let mut len: libc::c_uchar = tb_utf8_char_length(*c) as libc::c_uchar;
    let mut mask: libc::c_uchar = utf8_mask[(len as libc::c_int - 1 as libc::c_int)
        as usize];
    let mut result: uint32_t = (*c.offset(0 as libc::c_int as isize) as libc::c_int
        & mask as libc::c_int) as uint32_t;
    i = 1 as libc::c_int;
    while i < len as libc::c_int && *c.offset(i as isize) as libc::c_int != '\0' as i32 {
        result <<= 6 as libc::c_int;
        result
            |= (*c.offset(i as isize) as libc::c_int & 0x3f as libc::c_int)
                as libc::c_uint;
        i += 1;
        i;
    }
    if i != len as libc::c_int {
        return i * -(1 as libc::c_int);
    }
    *out = result;
    return len as libc::c_int;
}
static mut utf8_mask: [libc::c_uchar; 6] = [
    0x7f as libc::c_int as libc::c_uchar,
    0x1f as libc::c_int as libc::c_uchar,
    0xf as libc::c_int as libc::c_uchar,
    0x7 as libc::c_int as libc::c_uchar,
    0x3 as libc::c_int as libc::c_uchar,
    0x1 as libc::c_int as libc::c_uchar,
];
unsafe extern "C" fn extract_esc(mut event: *mut tb_event) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    rv = extract_esc_user(event, 0 as libc::c_int);
    if rv == 0 as libc::c_int || rv == -(2 as libc::c_int) {
        return rv;
    }
    rv = extract_esc_cap(event);
    if rv == 0 as libc::c_int || rv == -(2 as libc::c_int) {
        return rv;
    }
    rv = extract_esc_mouse(event);
    if rv == 0 as libc::c_int || rv == -(2 as libc::c_int) {
        return rv;
    }
    rv = extract_esc_user(event, 1 as libc::c_int);
    if rv == 0 as libc::c_int || rv == -(2 as libc::c_int) {
        return rv;
    }
    return -(1 as libc::c_int);
}
unsafe extern "C" fn extract_esc_user(
    mut event: *mut tb_event,
    mut is_post: libc::c_int,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut consumed: size_t = 0 as libc::c_int as size_t;
    let mut in_0: *mut bytebuf_t = &mut global.in_0;
    let mut fn_0: Option::<
        unsafe extern "C" fn(*mut tb_event, *mut size_t) -> libc::c_int,
    > = None;
    fn_0 = if is_post != 0 {
        global.fn_extract_esc_post
    } else {
        global.fn_extract_esc_pre
    };
    if fn_0.is_none() {
        return -(1 as libc::c_int);
    }
    rv = fn_0.unwrap()(event, &mut consumed);
    if rv == 0 as libc::c_int {
        bytebuf_shift(in_0, consumed);
    }
    rv = rv;
    if rv == 0 as libc::c_int || rv == -(2 as libc::c_int) {
        return rv;
    }
    return -(1 as libc::c_int);
}
unsafe extern "C" fn extract_esc_mouse(mut event: *mut tb_event) -> libc::c_int {
    let mut in_0: *mut bytebuf_t = &mut global.in_0;
    let mut cmp: [*const libc::c_char; 3] = [
        b"\x1B[M\0" as *const u8 as *const libc::c_char,
        b"\x1B[<\0" as *const u8 as *const libc::c_char,
        b"\x1B[\0" as *const u8 as *const libc::c_char,
    ];
    let mut type_0: libc::c_int = 0 as libc::c_int;
    let mut ret: libc::c_int = -(1 as libc::c_int);
    while type_0 < TYPE_MAX as libc::c_int {
        let mut size: size_t = strlen(cmp[type_0 as usize]);
        if (*in_0).len >= size
            && strncmp(cmp[type_0 as usize], (*in_0).buf, size) == 0 as libc::c_int
        {
            break;
        }
        type_0 += 1;
        type_0;
    }
    if type_0 == TYPE_MAX as libc::c_int {
        ret = -(1 as libc::c_int);
        return ret;
    }
    let mut buf_shift: size_t = 0 as libc::c_int as size_t;
    match type_0 {
        0 => {
            if (*in_0).len >= 6 as libc::c_int as libc::c_ulong {
                let mut b: libc::c_int = *((*in_0).buf).offset(3 as libc::c_int as isize)
                    as libc::c_int - 0x20 as libc::c_int;
                let mut fail: libc::c_int = 0 as libc::c_int;
                match b & 3 as libc::c_int {
                    0 => {
                        (*event)
                            .key = (if b & 64 as libc::c_int != 0 as libc::c_int {
                            0xffff as libc::c_int - 27 as libc::c_int
                        } else {
                            0xffff as libc::c_int - 23 as libc::c_int
                        }) as uint16_t;
                    }
                    1 => {
                        (*event)
                            .key = (if b & 64 as libc::c_int != 0 as libc::c_int {
                            0xffff as libc::c_int - 28 as libc::c_int
                        } else {
                            0xffff as libc::c_int - 25 as libc::c_int
                        }) as uint16_t;
                    }
                    2 => {
                        (*event)
                            .key = (0xffff as libc::c_int - 24 as libc::c_int)
                            as uint16_t;
                    }
                    3 => {
                        (*event)
                            .key = (0xffff as libc::c_int - 26 as libc::c_int)
                            as uint16_t;
                    }
                    _ => {
                        ret = -(1 as libc::c_int);
                        fail = 1 as libc::c_int;
                    }
                }
                if fail == 0 {
                    if b & 32 as libc::c_int != 0 as libc::c_int {
                        (*event)
                            .mod_0 = ((*event).mod_0 as libc::c_int | 8 as libc::c_int)
                            as uint8_t;
                    }
                    (*event)
                        .x = *((*in_0).buf).offset(4 as libc::c_int as isize) as uint8_t
                        as libc::c_int - 0x21 as libc::c_int;
                    (*event)
                        .y = *((*in_0).buf).offset(5 as libc::c_int as isize) as uint8_t
                        as libc::c_int - 0x21 as libc::c_int;
                    ret = 0 as libc::c_int;
                }
                buf_shift = 6 as libc::c_int as size_t;
            }
        }
        1 | 2 => {
            let mut index_fail: size_t = -(1 as libc::c_int) as size_t;
            let mut indices: [size_t; 3] = [index_fail, index_fail, index_fail];
            let mut m_is_capital: libc::c_int = 0 as libc::c_int;
            let mut i: size_t = 0 as libc::c_int as size_t;
            while i < (*in_0).len {
                if *((*in_0).buf).offset(i as isize) as libc::c_int == ';' as i32 {
                    if indices[FIRST_SEMICOLON as libc::c_int as usize] == index_fail {
                        indices[FIRST_SEMICOLON as libc::c_int as usize] = i;
                    } else {
                        indices[LAST_SEMICOLON as libc::c_int as usize] = i;
                    }
                } else if indices[FIRST_M as libc::c_int as usize] == index_fail {
                    if *((*in_0).buf).offset(i as isize) as libc::c_int == 'm' as i32
                        || *((*in_0).buf).offset(i as isize) as libc::c_int == 'M' as i32
                    {
                        m_is_capital = (*((*in_0).buf).offset(i as isize) as libc::c_int
                            == 'M' as i32) as libc::c_int;
                        indices[FIRST_M as libc::c_int as usize] = i;
                    }
                }
                i = i.wrapping_add(1);
                i;
            }
            if indices[FIRST_M as libc::c_int as usize] == index_fail
                || indices[FIRST_SEMICOLON as libc::c_int as usize] == index_fail
                || indices[LAST_SEMICOLON as libc::c_int as usize] == index_fail
            {
                ret = -(1 as libc::c_int);
            } else {
                let mut start: libc::c_int = if type_0 == TYPE_1015 as libc::c_int {
                    2 as libc::c_int
                } else {
                    3 as libc::c_int
                };
                let mut n1: libc::c_uint = strtoul(
                    &mut *((*in_0).buf).offset(start as isize),
                    0 as *mut *mut libc::c_char,
                    10 as libc::c_int,
                ) as libc::c_uint;
                let mut n2: libc::c_int = atoi(
                    &mut *((*in_0).buf)
                        .offset(
                            (*indices
                                .as_mut_ptr()
                                .offset(FIRST_SEMICOLON as libc::c_int as isize))
                                .wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                        ),
                );
                let mut n3: libc::c_int = atoi(
                    &mut *((*in_0).buf)
                        .offset(
                            (*indices
                                .as_mut_ptr()
                                .offset(LAST_SEMICOLON as libc::c_int as isize))
                                .wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                        ),
                );
                if type_0 == TYPE_1015 as libc::c_int {
                    n1 = n1.wrapping_sub(0x20 as libc::c_int as libc::c_uint);
                }
                let mut fail_0: libc::c_int = 0 as libc::c_int;
                match n1 & 3 as libc::c_int as libc::c_uint {
                    0 => {
                        (*event)
                            .key = (if n1 & 64 as libc::c_int as libc::c_uint
                            != 0 as libc::c_int as libc::c_uint
                        {
                            0xffff as libc::c_int - 27 as libc::c_int
                        } else {
                            0xffff as libc::c_int - 23 as libc::c_int
                        }) as uint16_t;
                    }
                    1 => {
                        (*event)
                            .key = (if n1 & 64 as libc::c_int as libc::c_uint
                            != 0 as libc::c_int as libc::c_uint
                        {
                            0xffff as libc::c_int - 28 as libc::c_int
                        } else {
                            0xffff as libc::c_int - 25 as libc::c_int
                        }) as uint16_t;
                    }
                    2 => {
                        (*event)
                            .key = (0xffff as libc::c_int - 24 as libc::c_int)
                            as uint16_t;
                    }
                    3 => {
                        (*event)
                            .key = (0xffff as libc::c_int - 26 as libc::c_int)
                            as uint16_t;
                    }
                    _ => {
                        ret = -(1 as libc::c_int);
                        fail_0 = 1 as libc::c_int;
                    }
                }
                buf_shift = (*in_0).len;
                if fail_0 == 0 {
                    if m_is_capital == 0 {
                        (*event)
                            .key = (0xffff as libc::c_int - 26 as libc::c_int)
                            as uint16_t;
                    }
                    if n1 & 32 as libc::c_int as libc::c_uint
                        != 0 as libc::c_int as libc::c_uint
                    {
                        (*event)
                            .mod_0 = ((*event).mod_0 as libc::c_int | 8 as libc::c_int)
                            as uint8_t;
                    }
                    (*event)
                        .x = if (n2 - 1 as libc::c_int) < 0 as libc::c_int {
                        0 as libc::c_int
                    } else {
                        n2 - 1 as libc::c_int
                    };
                    (*event)
                        .y = if (n3 - 1 as libc::c_int) < 0 as libc::c_int {
                        0 as libc::c_int
                    } else {
                        n3 - 1 as libc::c_int
                    };
                    ret = 0 as libc::c_int;
                }
            }
        }
        3 => {
            ret = -(1 as libc::c_int);
        }
        _ => {}
    }
    if buf_shift > 0 as libc::c_int as libc::c_ulong {
        bytebuf_shift(in_0, buf_shift);
    }
    if ret == 0 as libc::c_int {
        (*event).type_0 = 3 as libc::c_int as uint8_t;
    }
    return ret;
}
unsafe extern "C" fn extract_esc_cap(mut event: *mut tb_event) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut in_0: *mut bytebuf_t = &mut global.in_0;
    let mut node: *mut cap_trie_t = 0 as *mut cap_trie_t;
    let mut depth: size_t = 0;
    rv = cap_trie_find((*in_0).buf, (*in_0).len, &mut node, &mut depth);
    if rv != 0 as libc::c_int {
        return rv;
    }
    if (*node).is_leaf != 0 {
        (*event).type_0 = 1 as libc::c_int as uint8_t;
        (*event).ch = 0 as libc::c_int as uint32_t;
        (*event).key = (*node).key;
        (*event).mod_0 = (*node).mod_0;
        bytebuf_shift(in_0, depth);
        return 0 as libc::c_int;
    } else if (*node).nchildren > 0 as libc::c_int as libc::c_ulong
        && (*in_0).len <= depth
    {
        return -(2 as libc::c_int)
    }
    return -(1 as libc::c_int);
}
unsafe extern "C" fn cap_trie_find(
    mut buf: *const libc::c_char,
    mut nbuf: size_t,
    mut last: *mut *mut cap_trie_t,
    mut depth: *mut size_t,
) -> libc::c_int {
    let mut next: *mut cap_trie_t = 0 as *mut cap_trie_t;
    let mut node: *mut cap_trie_t = &mut global.cap_trie;
    let mut i: size_t = 0;
    let mut j: size_t = 0;
    *last = node;
    *depth = 0 as libc::c_int as size_t;
    i = 0 as libc::c_int as size_t;
    while i < nbuf {
        let mut c: libc::c_char = *buf.offset(i as isize);
        next = 0 as *mut cap_trie_t;
        j = 0 as libc::c_int as size_t;
        while j < (*node).nchildren {
            if (*((*node).children).offset(j as isize)).c as libc::c_int
                == c as libc::c_int
            {
                next = &mut *((*node).children).offset(j as isize) as *mut cap_trie_t;
                break;
            } else {
                j = j.wrapping_add(1);
                j;
            }
        }
        if next.is_null() {
            return 0 as libc::c_int;
        }
        node = next;
        *last = node;
        *depth = (*depth as libc::c_ulong)
            .wrapping_add(1 as libc::c_int as libc::c_ulong) as size_t as size_t;
        if (*node).is_leaf != 0 && (*node).nchildren < 1 as libc::c_int as libc::c_ulong
        {
            break;
        }
        i = i.wrapping_add(1);
        i;
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn tb_poll_event(mut event: *mut tb_event) -> libc::c_int {
    if global.initialized == 0 {
        return -(8 as libc::c_int);
    }
    return wait_event(event, -(1 as libc::c_int));
}
pub unsafe extern "C" fn tb_get_fds(
    mut ttyfd: *mut libc::c_int,
    mut resizefd: *mut libc::c_int,
) -> libc::c_int {
    if global.initialized == 0 {
        return -(8 as libc::c_int);
    }
    *ttyfd = global.rfd;
    *resizefd = global.resize_pipefd[0 as libc::c_int as usize];
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn tb_print(
    mut x: libc::c_int,
    mut y: libc::c_int,
    mut fg: uintattr_t,
    mut bg: uintattr_t,
    mut str: *const libc::c_char,
) -> libc::c_int {
    return tb_print_ex(x, y, fg, bg, 0 as *mut size_t, str);
}
pub unsafe extern "C" fn tb_print_ex(
    mut x: libc::c_int,
    mut y: libc::c_int,
    mut fg: uintattr_t,
    mut bg: uintattr_t,
    mut out_w: *mut size_t,
    mut str: *const libc::c_char,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut w: libc::c_int = 0;
    let mut ix: libc::c_int = 0;
    let mut x_prev: libc::c_int = 0;
    let mut uni: uint32_t = 0;
    if global.initialized == 0 {
        return -(8 as libc::c_int);
    }
    if cellbuf_in_bounds(&mut global.back, x, y) == 0 {
        return -(9 as libc::c_int);
    }
    ix = x;
    x_prev = x;
    if !out_w.is_null() {
        *out_w = 0 as libc::c_int as size_t;
    }
    while *str != 0 {
        rv = tb_utf8_char_to_unicode(&mut uni, str);
        if rv < 0 as libc::c_int {
            uni = 0xfffd as libc::c_int as uint32_t;
            str = str.offset((rv * -(1 as libc::c_int)) as isize);
        } else {
            if !(rv > 0 as libc::c_int) {
                break;
            }
            str = str.offset(rv as isize);
        }
        if uni == '\n' as i32 as libc::c_uint {
            x = ix;
            x_prev = x;
            y += 1 as libc::c_int;
        } else {
            if tb_iswprint_ex(uni, &mut w) == 0 {
                uni = 0xfffd as libc::c_int as uint32_t;
                w = 1 as libc::c_int;
            }
            if w < 0 as libc::c_int {
                return -(1 as libc::c_int)
            } else if w == 0 as libc::c_int {
                if cellbuf_in_bounds(&mut global.back, x_prev, y) != 0 {
                    rv = tb_extend_cell(x_prev, y, uni);
                    if rv != 0 as libc::c_int {
                        return rv;
                    }
                }
            } else {
                if cellbuf_in_bounds(&mut global.back, x, y) != 0 {
                    rv = tb_set_cell(x, y, uni, fg, bg);
                    if rv != 0 as libc::c_int {
                        return rv;
                    }
                }
                x_prev = x;
                x += w;
                if !out_w.is_null() {
                    *out_w = (*out_w as libc::c_ulong).wrapping_add(w as libc::c_ulong)
                        as size_t as size_t;
                }
            }
        }
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn tb_printf(
    mut x: libc::c_int,
    mut y: libc::c_int,
    mut fg: uintattr_t,
    mut bg: uintattr_t,
    mut fmt: *const libc::c_char,
    mut args: ...
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut vl: ::std::ffi::VaListImpl;
    vl = args.clone();
    rv = tb_printf_inner(x, y, fg, bg, 0 as *mut size_t, fmt, vl.as_va_list());
    return rv;
}
unsafe extern "C" fn tb_printf_inner(
    mut x: libc::c_int,
    mut y: libc::c_int,
    mut fg: uintattr_t,
    mut bg: uintattr_t,
    mut out_w: *mut size_t,
    mut fmt: *const libc::c_char,
    mut vl: ::std::ffi::VaList,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut buf: [libc::c_char; 4096] = [0; 4096];
    rv = vsnprintf(
        buf.as_mut_ptr(),
        ::std::mem::size_of::<[libc::c_char; 4096]>() as libc::c_ulong,
        fmt,
        vl.as_va_list(),
    );
    if rv < 0 as libc::c_int
        || rv
            >= ::std::mem::size_of::<[libc::c_char; 4096]>() as libc::c_ulong
                as libc::c_int
    {
        return -(1 as libc::c_int);
    }
    return tb_print_ex(x, y, fg, bg, out_w, buf.as_mut_ptr());
}
pub unsafe extern "C" fn tb_printf_ex(
    mut x: libc::c_int,
    mut y: libc::c_int,
    mut fg: uintattr_t,
    mut bg: uintattr_t,
    mut out_w: *mut size_t,
    mut fmt: *const libc::c_char,
    mut args: ...
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut vl: ::std::ffi::VaListImpl;
    vl = args.clone();
    rv = tb_printf_inner(x, y, fg, bg, out_w, fmt, vl.as_va_list());
    return rv;
}
pub unsafe extern "C" fn tb_send(
    mut buf: *const libc::c_char,
    mut nbuf: size_t,
) -> libc::c_int {
    return bytebuf_nputs(&mut global.out, buf, nbuf);
}
pub unsafe extern "C" fn tb_sendf(
    mut fmt: *const libc::c_char,
    mut args: ...
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut buf: [libc::c_char; 4096] = [0; 4096];
    let mut vl: ::std::ffi::VaListImpl;
    vl = args.clone();
    rv = vsnprintf(
        buf.as_mut_ptr(),
        ::std::mem::size_of::<[libc::c_char; 4096]>() as libc::c_ulong,
        fmt,
        vl.as_va_list(),
    );
    if rv < 0 as libc::c_int
        || rv
            >= ::std::mem::size_of::<[libc::c_char; 4096]>() as libc::c_ulong
                as libc::c_int
    {
        return -(1 as libc::c_int);
    }
    return tb_send(buf.as_mut_ptr(), rv as size_t);
}
pub unsafe extern "C" fn tb_set_func(
    mut fn_type: libc::c_int,
    mut fn_0: Option::<unsafe extern "C" fn(*mut tb_event, *mut size_t) -> libc::c_int>,
) -> libc::c_int {
    match fn_type {
        0 => {
            global.fn_extract_esc_pre = fn_0;
            return 0 as libc::c_int;
        }
        1 => {
            global.fn_extract_esc_post = fn_0;
            return 0 as libc::c_int;
        }
        _ => {}
    }
    return -(1 as libc::c_int);
}
pub unsafe extern "C" fn tb_last_errno() -> libc::c_int {
    return global.last_errno;
}
pub unsafe extern "C" fn tb_strerror(mut err: libc::c_int) -> *const libc::c_char {
    match err {
        0 => return b"Success\0" as *const u8 as *const libc::c_char,
        -2 => return b"Not enough input\0" as *const u8 as *const libc::c_char,
        -3 => return b"Termbox initialized already\0" as *const u8 as *const libc::c_char,
        -5 => return b"Out of memory\0" as *const u8 as *const libc::c_char,
        -6 => return b"No event\0" as *const u8 as *const libc::c_char,
        -7 => return b"No TERM in environment\0" as *const u8 as *const libc::c_char,
        -8 => return b"Termbox not initialized\0" as *const u8 as *const libc::c_char,
        -9 => return b"Out of bounds\0" as *const u8 as *const libc::c_char,
        -17 => return b"Unsupported terminal\0" as *const u8 as *const libc::c_char,
        -22 => return b"Termcaps collision\0" as *const u8 as *const libc::c_char,
        -21 => {
            return b"Terminal width/height not received by sscanf() after resize\0"
                as *const u8 as *const libc::c_char;
        }
        -1 | -4 | -10 | -11 | -12 | -13 | -14 | -15 | -16 | -18 | -19 | -20 | _ => {
            strerror_r(
                global.last_errno,
                (global.errbuf).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 1024]>() as libc::c_ulong,
            );
            return (global.errbuf).as_mut_ptr() as *const libc::c_char;
        }
    };
}
pub unsafe extern "C" fn tb_cell_buffer() -> *mut tb_cell {
    if global.initialized == 0 {
        return 0 as *mut tb_cell;
    }
    return global.back.cells;
}
pub unsafe extern "C" fn tb_has_truecolor() -> libc::c_int {
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn tb_has_egc() -> libc::c_int {
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn tb_attr_width() -> libc::c_int {
    return 16 as libc::c_int;
}
pub unsafe extern "C" fn tb_version() -> *const libc::c_char {
    return b"2.6.0-dev\0" as *const u8 as *const libc::c_char;
}
pub static mut opt_pid: pid_t = -(1 as libc::c_int);
pub static mut opt_pgrep_args: *mut libc::c_char = 0 as *const libc::c_char
    as *mut libc::c_char;
pub static mut opt_num_workers: libc::c_int = 16 as libc::c_int;
pub static mut opt_top_mode: libc::c_int = 0 as libc::c_int;
pub static mut opt_sleep_ns: libc::c_long = 10101010 as libc::c_int as libc::c_long;
pub static mut opt_executor_globals_addr: uint64_t = 0 as libc::c_int as uint64_t;
pub static mut opt_sapi_globals_addr: uint64_t = 0 as libc::c_int as uint64_t;
pub static mut opt_capture_req: libc::c_int = 0 as libc::c_int;
pub static mut opt_capture_req_qstring: libc::c_int = 0 as libc::c_int;
pub static mut opt_capture_req_cookie: libc::c_int = 0 as libc::c_int;
pub static mut opt_capture_req_uri: libc::c_int = 0 as libc::c_int;
pub static mut opt_capture_req_path: libc::c_int = 0 as libc::c_int;
pub static mut opt_capture_mem: libc::c_int = 0 as libc::c_int;
pub static mut opt_max_stack_depth: libc::c_int = -(1 as libc::c_int);
pub static mut opt_frame_delim: libc::c_char = '\n' as i32 as libc::c_char;
pub static mut opt_trace_delim: libc::c_char = '\n' as i32 as libc::c_char;
pub static mut opt_trace_limit: uint64_t = 0 as libc::c_int as uint64_t;
pub static mut opt_time_limit_ms: libc::c_long = 0 as libc::c_int as libc::c_long;
pub static mut opt_path_output: *mut libc::c_char = b"-\0" as *const u8
    as *const libc::c_char as *mut libc::c_char;
pub static mut opt_path_child_out: *mut libc::c_char = b"phpspy.%d.out\0" as *const u8
    as *const libc::c_char as *mut libc::c_char;
pub static mut opt_path_child_err: *mut libc::c_char = b"phpspy.%d.err\0" as *const u8
    as *const libc::c_char as *mut libc::c_char;
pub static mut opt_phpv: *mut libc::c_char = b"auto\0" as *const u8
    as *const libc::c_char as *mut libc::c_char;
pub static mut opt_pause: libc::c_int = 0 as libc::c_int;
pub static mut opt_filter_re: *mut regex_t = 0 as *const regex_t as *mut regex_t;
pub static mut opt_filter_negate: libc::c_int = 0 as libc::c_int;
pub static mut opt_verbose_fields_pid: libc::c_int = 0 as libc::c_int;
pub static mut opt_verbose_fields_ts: libc::c_int = 0 as libc::c_int;
pub static mut opt_event_handler: Option::<
    unsafe extern "C" fn(*mut trace_context_s, libc::c_int) -> libc::c_int,
> = unsafe {
    Some(
        event_handler_fout
            as unsafe extern "C" fn(*mut trace_context_s, libc::c_int) -> libc::c_int,
    )
};
pub static mut opt_continue_on_error: libc::c_int = 0 as libc::c_int;
pub static mut opt_fout_buffer_size: libc::c_int = 4096 as libc::c_int;
pub static mut done: libc::c_int = 0 as libc::c_int;
pub static mut do_trace_ptr: Option::<
    unsafe extern "C" fn(*mut trace_context_t) -> libc::c_int,
> = None;
pub static mut varpeek_map: *mut varpeek_entry_t = 0 as *const varpeek_entry_t
    as *mut varpeek_entry_t;
pub static mut glopeek_map: *mut glopeek_entry_t = 0 as *const glopeek_entry_t
    as *mut glopeek_entry_t;
pub static mut filter_re: regex_t = regex_t {
    buffer: 0 as *const re_dfa_t as *mut re_dfa_t,
    allocated: 0,
    used: 0,
    syntax: 0,
    fastmap: 0 as *const libc::c_char as *mut libc::c_char,
    translate: 0 as *const libc::c_uchar as *mut libc::c_uchar,
    re_nsub: 0,
    can_be_null_regs_allocated_fastmap_accurate_no_sub_not_bol_not_eol_newline_anchor: [0; 1],
    c2rust_padding: [0; 7],
};
pub static mut log_error_enabled: libc::c_int = 1 as libc::c_int;
pub static mut in_pgrep_mode: libc::c_int = 0 as libc::c_int;
pub static mut trace_count: uint64_t = 0 as libc::c_int as uint64_t;
unsafe fn main_0(
    mut argc: libc::c_int,
    mut argv: *mut *mut libc::c_char,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    parse_opts(argc, argv);
    if opt_top_mode != 0 as libc::c_int {
        rv = main_top(argc, argv);
    } else if opt_pid != -(1 as libc::c_int) {
        rv = main_pid(opt_pid);
    } else if !opt_pgrep_args.is_null() {
        in_pgrep_mode = 1 as libc::c_int;
        rv = main_pgrep();
    } else if optind < argc {
        rv = main_fork(argc, argv);
    } else {
        log_error(
            b"Expected pid (-p), pgrep (-P), or command\n\n\0" as *const u8
                as *const libc::c_char,
        );
        usage(stderr, 1 as libc::c_int);
        rv = 1 as libc::c_int;
    }
    cleanup();
    return rv;
}
pub unsafe extern "C" fn usage(mut fp: *mut FILE, mut exit_code: libc::c_int) {
    fprintf(fp, b"Usage:\n\0" as *const u8 as *const libc::c_char);
    fprintf(fp, b"  phpspy [options] -p <pid>\n\0" as *const u8 as *const libc::c_char);
    fprintf(
        fp,
        b"  phpspy [options] -P <pgrep-args>\n\0" as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"  phpspy [options] [--] <cmd>\n\0" as *const u8 as *const libc::c_char,
    );
    fprintf(fp, b"\n\0" as *const u8 as *const libc::c_char);
    fprintf(fp, b"Options:\n\0" as *const u8 as *const libc::c_char);
    fprintf(
        fp,
        b"  -h, --help                         Show this help\n\0" as *const u8
            as *const libc::c_char,
    );
    fprintf(
        fp,
        b"  -p, --pid=<pid>                    Trace PHP process at `pid`\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"  -P, --pgrep=<args>                 Concurrently trace processes that\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       match pgrep `args` (see also `-T`)\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"  -T, --threads=<num>                Set number of threads to use with `-P`\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       (default: %d)\n\0" as *const u8
            as *const libc::c_char,
        opt_num_workers,
    );
    fprintf(
        fp,
        b"  -s, --sleep-ns=<ns>                Sleep `ns` nanoseconds between traces\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       (see also `-H`) (default: %ld)\n\0"
            as *const u8 as *const libc::c_char,
        opt_sleep_ns,
    );
    fprintf(
        fp,
        b"  -H, --rate-hz=<hz>                 Trace `hz` times per second\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       (see also `-s`) (default: %lu)\n\0"
            as *const u8 as *const libc::c_char,
        (1000000000 as libc::c_ulong).wrapping_div(opt_sleep_ns as libc::c_ulong),
    );
    fprintf(
        fp,
        b"  -V, --php-version=<ver>            Set PHP version\n\0" as *const u8
            as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       (default: %s;\n\0" as *const u8
            as *const libc::c_char,
        opt_phpv,
    );
    fprintf(
        fp,
        b"                                       supported: 70 71 72 73 74 80 81 82)\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"  -l, --limit=<num>                  Limit total number of traces to capture\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       (approximate limit in pgrep mode)\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       (default: %lu; 0=unlimited)\n\0"
            as *const u8 as *const libc::c_char,
        opt_trace_limit,
    );
    fprintf(
        fp,
        b"  -i, --time-limit-ms=<ms>           Stop tracing after `ms` milliseconds\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       (second granularity in pgrep mode)\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       (default: %lu; 0=unlimited)\n\0"
            as *const u8 as *const libc::c_char,
        opt_time_limit_ms,
    );
    fprintf(
        fp,
        b"  -n, --max-depth=<max>              Set max stack trace depth\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       (default: %d; -1=unlimited)\n\0"
            as *const u8 as *const libc::c_char,
        opt_max_stack_depth,
    );
    fprintf(
        fp,
        b"  -r, --request-info=<opts>          Set request info parts to capture\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       (q=query c=cookie u=uri p=path\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       capital=negation)\n\0" as *const u8
            as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       (default: QCUP; none)\n\0" as *const u8
            as *const libc::c_char,
    );
    fprintf(
        fp,
        b"  -m, --memory-usage                 Capture peak and current memory usage\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       with each trace (requires target PHP\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       process to have debug symbols)\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"  -o, --output=<path>                Write phpspy output to `path`\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       (default: %s; -=stdout)\n\0"
            as *const u8 as *const libc::c_char,
        opt_path_output,
    );
    fprintf(
        fp,
        b"  -O, --child-stdout=<path>          Write child stdout to `path`\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       (default: %s)\n\0" as *const u8
            as *const libc::c_char,
        opt_path_child_out,
    );
    fprintf(
        fp,
        b"  -E, --child-stderr=<path>          Write child stderr to `path`\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       (default: %s)\n\0" as *const u8
            as *const libc::c_char,
        opt_path_child_err,
    );
    fprintf(
        fp,
        b"  -x, --addr-executor-globals=<hex>  Set address of executor_globals in hex\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       (default: %lu; 0=find dynamically)\n\0"
            as *const u8 as *const libc::c_char,
        opt_sapi_globals_addr,
    );
    fprintf(
        fp,
        b"  -a, --addr-sapi-globals=<hex>      Set address of sapi_globals in hex\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       (default: %lu; 0=find dynamically)\n\0"
            as *const u8 as *const libc::c_char,
        opt_executor_globals_addr,
    );
    fprintf(
        fp,
        b"  -1, --single-line                  Output in single-line mode\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"  -b, --buffer-size=<size>           Set output buffer size to `size`.\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       Note: In `-P` mode, setting this\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       above PIPE_BUF (4096) may lead to\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       interlaced writes across threads.\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       (default: %d)\n\0" as *const u8
            as *const libc::c_char,
        opt_fout_buffer_size,
    );
    fprintf(
        fp,
        b"  -f, --filter=<regex>               Filter output by POSIX regex\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       (default: none)\n\0" as *const u8
            as *const libc::c_char,
    );
    fprintf(
        fp,
        b"  -F, --filter-negate=<regex>        Same as `-f` except negated\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"  -d, --verbose-fields=<opts>        Set verbose output fields\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       (p=pid t=timestamp\n\0" as *const u8
            as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       capital=negation)\n\0" as *const u8
            as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       (default: PT; none)\n\0" as *const u8
            as *const libc::c_char,
    );
    fprintf(
        fp,
        b"  -c, --continue-on-error            Attempt to continue tracing after\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       encountering an error\n\0" as *const u8
            as *const libc::c_char,
    );
    fprintf(
        fp,
        b"  -#, --comment=<any>                Ignored; intended for self-documenting\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       commands\n\0" as *const u8
            as *const libc::c_char,
    );
    fprintf(
        fp,
        b"  -@, --nothing                      Ignored\n\0" as *const u8
            as *const libc::c_char,
    );
    fprintf(
        fp,
        b"  -v, --version                      Print phpspy version and exit\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(fp, b"\n\0" as *const u8 as *const libc::c_char);
    fprintf(fp, b"Experimental options:\n\0" as *const u8 as *const libc::c_char);
    fprintf(
        fp,
        b"  -j, --event-handler=<handler>      Set event handler (fout, callgrind)\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       (default: fout)\n\0" as *const u8
            as *const libc::c_char,
    );
    fprintf(
        fp,
        b"  -S, --pause-process                Pause process while reading stacktrace\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       (unsafe for production!)\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"  -e, --peek-var=<varspec>           Peek at the contents of the var located\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       at `varspec`, which has the format:\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       <varname>@<path>:<lineno>\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       <varname>@<path>:<start>-<end>\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       e.g., xyz@/path/to.php:10-20\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"  -g, --peek-global=<glospec>        Peek at the contents of a global var\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       located at `glospec`, which has\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       the format: <global>.<key>\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       where <global> is one of:\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       post|get|cookie|server|files|globals\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"                                       e.g., server.REQUEST_TIME\n\0"
            as *const u8 as *const libc::c_char,
    );
    fprintf(
        fp,
        b"  -t, --top                          Show dynamic top-like output\n\0"
            as *const u8 as *const libc::c_char,
    );
    cleanup();
    exit(exit_code);
}
unsafe extern "C" fn strtol_with_min_or_exit(
    mut name: *const libc::c_char,
    mut str: *const libc::c_char,
    mut min: libc::c_int,
) -> libc::c_long {
    let mut result: libc::c_long = 0;
    let mut end: *mut libc::c_char = 0 as *mut libc::c_char;
    *__errno_location() = 0 as libc::c_int;
    result = strtol(str, &mut end, 10 as libc::c_int);
    if end <= str as *mut libc::c_char || *end as libc::c_int != '\0' as i32 {
        log_error(
            b"Expected integer for %s, got '%s'\n\0" as *const u8 as *const libc::c_char,
            name,
            str,
        );
        usage(stderr, 1 as libc::c_int);
    }
    if result < min as libc::c_long {
        log_error(
            b"Expected integer >= %d for %s, got '%s'\n\0" as *const u8
                as *const libc::c_char,
            min,
            name,
            str,
        );
        usage(stderr, 1 as libc::c_int);
    }
    return result;
}
unsafe extern "C" fn atoi_with_min_or_exit(
    mut name: *const libc::c_char,
    mut str: *const libc::c_char,
    mut min: libc::c_int,
) -> libc::c_int {
    let mut result: libc::c_long = strtol_with_min_or_exit(name, str, min);
    if result > 2147483647 as libc::c_int as libc::c_long {
        log_error(
            b"Expected value that could fit in a C int for %s, got '%s'\n\0" as *const u8
                as *const libc::c_char,
            name,
            str,
        );
        usage(stderr, 1 as libc::c_int);
    }
    return result as libc::c_int;
}
unsafe extern "C" fn parse_opts(
    mut argc: libc::c_int,
    mut argv: *mut *mut libc::c_char,
) {
    let mut c: libc::c_int = 0;
    let mut i: size_t = 0;
    let mut long_opts: [option; 32] = [
        {
            let mut init = option {
                name: b"help\0" as *const u8 as *const libc::c_char,
                has_arg: 0 as libc::c_int,
                flag: 0 as *mut libc::c_int,
                val: 'h' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"pid\0" as *const u8 as *const libc::c_char,
                has_arg: 1 as libc::c_int,
                flag: 0 as *mut libc::c_int,
                val: 'p' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"pgrep\0" as *const u8 as *const libc::c_char,
                has_arg: 1 as libc::c_int,
                flag: 0 as *mut libc::c_int,
                val: 'P' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"threads\0" as *const u8 as *const libc::c_char,
                has_arg: 1 as libc::c_int,
                flag: 0 as *mut libc::c_int,
                val: 'T' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"sleep-ns\0" as *const u8 as *const libc::c_char,
                has_arg: 1 as libc::c_int,
                flag: 0 as *mut libc::c_int,
                val: 's' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"rate-hz\0" as *const u8 as *const libc::c_char,
                has_arg: 1 as libc::c_int,
                flag: 0 as *mut libc::c_int,
                val: 'H' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"php-version\0" as *const u8 as *const libc::c_char,
                has_arg: 1 as libc::c_int,
                flag: 0 as *mut libc::c_int,
                val: 'V' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"limit\0" as *const u8 as *const libc::c_char,
                has_arg: 1 as libc::c_int,
                flag: 0 as *mut libc::c_int,
                val: 'l' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"time-limit-ms\0" as *const u8 as *const libc::c_char,
                has_arg: 1 as libc::c_int,
                flag: 0 as *mut libc::c_int,
                val: 'i' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"max-depth\0" as *const u8 as *const libc::c_char,
                has_arg: 1 as libc::c_int,
                flag: 0 as *mut libc::c_int,
                val: 'n' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"request-info\0" as *const u8 as *const libc::c_char,
                has_arg: 1 as libc::c_int,
                flag: 0 as *mut libc::c_int,
                val: 'r' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"memory-usage\0" as *const u8 as *const libc::c_char,
                has_arg: 0 as libc::c_int,
                flag: 0 as *mut libc::c_int,
                val: 'm' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"output\0" as *const u8 as *const libc::c_char,
                has_arg: 1 as libc::c_int,
                flag: 0 as *mut libc::c_int,
                val: 'o' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"child-stdout\0" as *const u8 as *const libc::c_char,
                has_arg: 1 as libc::c_int,
                flag: 0 as *mut libc::c_int,
                val: 'O' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"child-stderr\0" as *const u8 as *const libc::c_char,
                has_arg: 1 as libc::c_int,
                flag: 0 as *mut libc::c_int,
                val: 'E' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"addr-executor-globals\0" as *const u8 as *const libc::c_char,
                has_arg: 1 as libc::c_int,
                flag: 0 as *mut libc::c_int,
                val: 'x' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"addr-sapi-globals\0" as *const u8 as *const libc::c_char,
                has_arg: 1 as libc::c_int,
                flag: 0 as *mut libc::c_int,
                val: 'a' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"single-line\0" as *const u8 as *const libc::c_char,
                has_arg: 0 as libc::c_int,
                flag: 0 as *mut libc::c_int,
                val: '1' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"buffer-size\0" as *const u8 as *const libc::c_char,
                has_arg: 1 as libc::c_int,
                flag: 0 as *mut libc::c_int,
                val: 'b' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"filter\0" as *const u8 as *const libc::c_char,
                has_arg: 1 as libc::c_int,
                flag: 0 as *mut libc::c_int,
                val: 'f' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"filter-negate\0" as *const u8 as *const libc::c_char,
                has_arg: 1 as libc::c_int,
                flag: 0 as *mut libc::c_int,
                val: 'F' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"verbose-fields\0" as *const u8 as *const libc::c_char,
                has_arg: 1 as libc::c_int,
                flag: 0 as *mut libc::c_int,
                val: 'd' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"continue-on-error\0" as *const u8 as *const libc::c_char,
                has_arg: 0 as libc::c_int,
                flag: 0 as *mut libc::c_int,
                val: 'c' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"event-handler\0" as *const u8 as *const libc::c_char,
                has_arg: 1 as libc::c_int,
                flag: 0 as *mut libc::c_int,
                val: 'j' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"comment\0" as *const u8 as *const libc::c_char,
                has_arg: 1 as libc::c_int,
                flag: 0 as *mut libc::c_int,
                val: '#' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"nothing\0" as *const u8 as *const libc::c_char,
                has_arg: 0 as libc::c_int,
                flag: 0 as *mut libc::c_int,
                val: '@' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"version\0" as *const u8 as *const libc::c_char,
                has_arg: 0 as libc::c_int,
                flag: 0 as *mut libc::c_int,
                val: 'v' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"pause-process\0" as *const u8 as *const libc::c_char,
                has_arg: 0 as libc::c_int,
                flag: 0 as *mut libc::c_int,
                val: 'S' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"peek-var\0" as *const u8 as *const libc::c_char,
                has_arg: 1 as libc::c_int,
                flag: 0 as *mut libc::c_int,
                val: 'e' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"peek-global\0" as *const u8 as *const libc::c_char,
                has_arg: 1 as libc::c_int,
                flag: 0 as *mut libc::c_int,
                val: 'g' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: b"top\0" as *const u8 as *const libc::c_char,
                has_arg: 0 as libc::c_int,
                flag: 0 as *mut libc::c_int,
                val: 't' as i32,
            };
            init
        },
        {
            let mut init = option {
                name: 0 as *const libc::c_char,
                has_arg: 0 as libc::c_int,
                flag: 0 as *mut libc::c_int,
                val: 0 as libc::c_int,
            };
            init
        },
    ];
    optind = 1 as libc::c_int;
    while optind < argc
        && *(*argv.offset(optind as isize)).offset(0 as libc::c_int as isize)
            as libc::c_int == '-' as i32
        && {
            c = getopt_long(
                argc,
                argv,
                b"hp:P:T:te:s:H:V:l:i:n:r:mo:O:E:x:a:1b:f:F:d:cj:#:@vSe:g:t\0"
                    as *const u8 as *const libc::c_char,
                long_opts.as_mut_ptr(),
                0 as *mut libc::c_int,
            );
            c != -(1 as libc::c_int)
        }
    {
        match c {
            104 => {
                usage(stdout, 0 as libc::c_int);
            }
            112 => {
                opt_pid = atoi_with_min_or_exit(
                    b"-p\0" as *const u8 as *const libc::c_char,
                    optarg,
                    1 as libc::c_int,
                );
            }
            80 => {
                opt_pgrep_args = optarg;
            }
            84 => {
                opt_num_workers = atoi_with_min_or_exit(
                    b"-T\0" as *const u8 as *const libc::c_char,
                    optarg,
                    1 as libc::c_int,
                );
            }
            115 => {
                opt_sleep_ns = strtol_with_min_or_exit(
                    b"-s\0" as *const u8 as *const libc::c_char,
                    optarg,
                    1 as libc::c_int,
                );
            }
            72 => {
                opt_sleep_ns = (1000000000 as libc::c_ulong)
                    .wrapping_div(
                        strtol_with_min_or_exit(
                            b"-H\0" as *const u8 as *const libc::c_char,
                            optarg,
                            1 as libc::c_int,
                        ) as libc::c_ulong,
                    ) as libc::c_long;
            }
            86 => {
                opt_phpv = optarg;
            }
            108 => {
                opt_trace_limit = strtoull(
                    optarg,
                    0 as *mut *mut libc::c_char,
                    10 as libc::c_int,
                ) as uint64_t;
            }
            105 => {
                opt_time_limit_ms = strtol_with_min_or_exit(
                    b"-i\0" as *const u8 as *const libc::c_char,
                    optarg,
                    0 as libc::c_int,
                );
            }
            110 => {
                opt_max_stack_depth = atoi_with_min_or_exit(
                    b"-n\0" as *const u8 as *const libc::c_char,
                    optarg,
                    -(1 as libc::c_int),
                );
            }
            114 => {
                i = 0 as libc::c_int as size_t;
                while i < strlen(optarg) {
                    match *optarg.offset(i as isize) as libc::c_int {
                        113 => {
                            opt_capture_req_qstring = 1 as libc::c_int;
                        }
                        99 => {
                            opt_capture_req_cookie = 1 as libc::c_int;
                        }
                        117 => {
                            opt_capture_req_uri = 1 as libc::c_int;
                        }
                        112 => {
                            opt_capture_req_path = 1 as libc::c_int;
                        }
                        81 => {
                            opt_capture_req_qstring = 0 as libc::c_int;
                        }
                        67 => {
                            opt_capture_req_cookie = 0 as libc::c_int;
                        }
                        85 => {
                            opt_capture_req_uri = 0 as libc::c_int;
                        }
                        80 => {
                            opt_capture_req_path = 0 as libc::c_int;
                        }
                        _ => {}
                    }
                    i = i.wrapping_add(1);
                    i;
                }
                opt_capture_req = opt_capture_req_qstring | opt_capture_req_cookie
                    | opt_capture_req_uri | opt_capture_req_path;
            }
            109 => {
                opt_capture_mem = 1 as libc::c_int;
            }
            111 => {
                opt_path_output = optarg;
            }
            79 => {
                opt_path_child_out = optarg;
            }
            69 => {
                opt_path_child_err = optarg;
            }
            120 => {
                opt_executor_globals_addr = strtoull(
                    optarg,
                    0 as *mut *mut libc::c_char,
                    16 as libc::c_int,
                ) as uint64_t;
            }
            97 => {
                opt_sapi_globals_addr = strtoull(
                    optarg,
                    0 as *mut *mut libc::c_char,
                    16 as libc::c_int,
                ) as uint64_t;
            }
            49 => {
                opt_frame_delim = '\t' as i32 as libc::c_char;
                opt_trace_delim = '\n' as i32 as libc::c_char;
            }
            98 => {
                opt_fout_buffer_size = atoi_with_min_or_exit(
                    b"-b\0" as *const u8 as *const libc::c_char,
                    optarg,
                    1 as libc::c_int,
                );
            }
            102 | 70 => {
                if !opt_filter_re.is_null() {
                    regfree(opt_filter_re);
                }
                if regcomp(
                    &mut filter_re,
                    optarg,
                    1 as libc::c_int | (1 as libc::c_int) << 3 as libc::c_int
                        | (1 as libc::c_int) << 2 as libc::c_int,
                ) == 0 as libc::c_int
                {
                    opt_filter_re = &mut filter_re;
                } else {
                    log_error(
                        b"parse_opts: Failed to compile filter regex\n\n\0" as *const u8
                            as *const libc::c_char,
                    );
                    usage(stderr, 1 as libc::c_int);
                }
                opt_filter_negate = if c == 'F' as i32 {
                    1 as libc::c_int
                } else {
                    0 as libc::c_int
                };
            }
            100 => {
                i = 0 as libc::c_int as size_t;
                while i < strlen(optarg) {
                    match *optarg.offset(i as isize) as libc::c_int {
                        112 => {
                            opt_verbose_fields_pid = 1 as libc::c_int;
                        }
                        116 => {
                            opt_verbose_fields_ts = 1 as libc::c_int;
                        }
                        80 => {
                            opt_verbose_fields_pid = 0 as libc::c_int;
                        }
                        84 => {
                            opt_verbose_fields_ts = 0 as libc::c_int;
                        }
                        _ => {}
                    }
                    i = i.wrapping_add(1);
                    i;
                }
            }
            99 => {
                opt_continue_on_error = 1 as libc::c_int;
            }
            106 => {
                if strcmp(optarg, b"fout\0" as *const u8 as *const libc::c_char)
                    == 0 as libc::c_int
                {
                    opt_event_handler = Some(
                        event_handler_fout
                            as unsafe extern "C" fn(
                                *mut trace_context_s,
                                libc::c_int,
                            ) -> libc::c_int,
                    );
                } else if strcmp(
                    optarg,
                    b"callgrind\0" as *const u8 as *const libc::c_char,
                ) == 0 as libc::c_int
                {
                    opt_event_handler = Some(
                        event_handler_callgrind
                            as unsafe extern "C" fn(
                                *mut trace_context_s,
                                libc::c_int,
                            ) -> libc::c_int,
                    );
                } else {
                    log_error(
                        b"parse_opts: Expected 'fout' or 'callgrind' for `--event-handler`\n\n\0"
                            as *const u8 as *const libc::c_char,
                    );
                    usage(stderr, 1 as libc::c_int);
                }
            }
            118 => {
                printf(
                    b"phpspy v%s USE_ZEND=%s COMMIT=%s\n\0" as *const u8
                        as *const libc::c_char,
                    b"0.6.0\0" as *const u8 as *const libc::c_char,
                    b"n\0" as *const u8 as *const libc::c_char,
                    b"-\0" as *const u8 as *const libc::c_char,
                );
                exit(0 as libc::c_int);
            }
            83 => {
                opt_pause = 1 as libc::c_int;
            }
            101 => {
                varpeek_add(optarg);
            }
            103 => {
                glopeek_add(optarg);
            }
            116 => {
                opt_top_mode = 1 as libc::c_int;
            }
            35 | 64 | _ => {}
        }
    }
}
pub unsafe extern "C" fn main_pid(mut pid: pid_t) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut context: trace_context_t = trace_context_t {
        target: trace_target_t {
            pid: 0,
            executor_globals_addr: 0,
            sapi_globals_addr: 0,
            alloc_globals_addr: 0,
            basic_functions_module_addr: 0,
        },
        event: C2RustUnnamed_43 {
            frame: trace_frame_t {
                loc: trace_loc_t {
                    func: [0; 256],
                    class: [0; 256],
                    file: [0; 256],
                    func_len: 0,
                    class_len: 0,
                    file_len: 0,
                    lineno: 0,
                },
                depth: 0,
            },
            request: trace_request_t {
                uri: [0; 256],
                path: [0; 256],
                qstring: [0; 256],
                cookie: [0; 256],
                ts: 0.,
            },
            mem: trace_mem_t { size: 0, peak: 0 },
            varpeek: trace_varpeek_t {
                entry: 0 as *mut varpeek_entry_t,
                var: 0 as *mut varpeek_var_t,
                zval_str: 0 as *mut libc::c_char,
            },
            glopeek: trace_glopeek_t {
                gentry: 0 as *mut glopeek_entry_t,
                zval_str: 0 as *mut libc::c_char,
            },
        },
        event_udata: 0 as *mut libc::c_void,
        event_handler: None,
        buf: [0; 256],
        buf_len: 0,
    };
    let mut start_time: timespec = timespec { tv_sec: 0, tv_nsec: 0 };
    let mut end_time: timespec = timespec { tv_sec: 0, tv_nsec: 0 };
    let mut sleep_time: timespec = timespec { tv_sec: 0, tv_nsec: 0 };
    let mut _stop_time: timespec = timespec { tv_sec: 0, tv_nsec: 0 };
    let mut limit_time: timespec = timespec { tv_sec: 0, tv_nsec: 0 };
    let mut stop_time: *mut timespec = 0 as *mut timespec;
    memset(
        &mut context as *mut trace_context_t as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<trace_context_t>() as libc::c_ulong,
    );
    context.target.pid = pid;
    context.event_handler = opt_event_handler;
    rv = find_addresses(&mut context.target);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = (context.event_handler).unwrap()(&mut context, 0 as libc::c_int);
    if rv != 0 as libc::c_int {
        return rv;
    }
    if strcmp(opt_phpv, b"auto\0" as *const u8 as *const libc::c_char)
        == 0 as libc::c_int
    {
        rv = get_php_version(&mut context.target);
        if rv != 0 as libc::c_int {
            return rv;
        }
    }
    if strcmp(b"70\0" as *const u8 as *const libc::c_char, opt_phpv) == 0 as libc::c_int
    {
        do_trace_ptr = Some(
            do_trace_70 as unsafe extern "C" fn(*mut trace_context_t) -> libc::c_int,
        );
    } else if strcmp(b"71\0" as *const u8 as *const libc::c_char, opt_phpv)
        == 0 as libc::c_int
    {
        do_trace_ptr = Some(
            do_trace_71 as unsafe extern "C" fn(*mut trace_context_t) -> libc::c_int,
        );
    } else if strcmp(b"72\0" as *const u8 as *const libc::c_char, opt_phpv)
        == 0 as libc::c_int
    {
        do_trace_ptr = Some(
            do_trace_72 as unsafe extern "C" fn(*mut trace_context_t) -> libc::c_int,
        );
    } else if strcmp(b"73\0" as *const u8 as *const libc::c_char, opt_phpv)
        == 0 as libc::c_int
    {
        do_trace_ptr = Some(
            do_trace_73 as unsafe extern "C" fn(*mut trace_context_t) -> libc::c_int,
        );
    } else if strcmp(b"74\0" as *const u8 as *const libc::c_char, opt_phpv)
        == 0 as libc::c_int
    {
        do_trace_ptr = Some(
            do_trace_74 as unsafe extern "C" fn(*mut trace_context_t) -> libc::c_int,
        );
    } else if strcmp(b"80\0" as *const u8 as *const libc::c_char, opt_phpv)
        == 0 as libc::c_int
    {
        do_trace_ptr = Some(
            do_trace_80 as unsafe extern "C" fn(*mut trace_context_t) -> libc::c_int,
        );
    } else if strcmp(b"81\0" as *const u8 as *const libc::c_char, opt_phpv)
        == 0 as libc::c_int
    {
        do_trace_ptr = Some(
            do_trace_81 as unsafe extern "C" fn(*mut trace_context_t) -> libc::c_int,
        );
    } else if strcmp(b"82\0" as *const u8 as *const libc::c_char, opt_phpv)
        == 0 as libc::c_int
    {
        do_trace_ptr = Some(
            do_trace_81 as unsafe extern "C" fn(*mut trace_context_t) -> libc::c_int,
        );
    } else {
        log_error(
            b"main_pid: Unrecognized PHP version (%s)\n\0" as *const u8
                as *const libc::c_char,
            opt_phpv,
        );
        return 1 as libc::c_int;
    }
    stop_time = 0 as *mut timespec;
    if !(in_pgrep_mode != 0) {
        if opt_time_limit_ms > 0 as libc::c_int as libc::c_long {
            stop_time = &mut _stop_time;
            limit_time.tv_sec = opt_time_limit_ms / 1000 as libc::c_long;
            limit_time
                .tv_nsec = opt_time_limit_ms % 1000 as libc::c_long
                * 1000000 as libc::c_long;
            clock_get(stop_time);
            clock_add(stop_time, &mut limit_time, stop_time);
        }
    }
    while done == 0 {
        clock_get(&mut start_time);
        rv = 0 as libc::c_int;
        if opt_pause != 0 {
            rv |= pause_pid(pid);
        }
        rv |= do_trace_ptr.unwrap()(&mut context);
        if opt_pause != 0 {
            rv |= unpause_pid(pid);
        }
        if rv & 2 as libc::c_int != 0 as libc::c_int {
            break;
        }
        if opt_trace_limit > 0 as libc::c_int as libc::c_ulong && rv == 0 as libc::c_int
        {
            if in_pgrep_mode != 0 {
                let fresh13 = &mut trace_count;
                let fresh14 = 1 as libc::c_int as uint64_t;
                ::std::intrinsics::atomic_xadd::<_, { std::intrinsics::AtomicOrdering::SeqCst }>(fresh13, fresh14) + fresh14;
            } else {
                trace_count = (trace_count as libc::c_ulong)
                    .wrapping_add(1 as libc::c_int as libc::c_ulong) as uint64_t
                    as uint64_t;
            }
            if trace_count >= opt_trace_limit {
                break;
            }
        }
        if !stop_time.is_null()
            && clock_diff(&mut end_time, stop_time) >= 1 as libc::c_int
        {
            break;
        }
        clock_get(&mut end_time);
        calc_sleep_time(&mut end_time, &mut start_time, &mut sleep_time);
        nanosleep(&mut sleep_time, 0 as *mut timespec);
    }
    (context.event_handler).unwrap()(&mut context, 9 as libc::c_int);
    if in_pgrep_mode != 0 && opt_trace_limit > 0 as libc::c_int as libc::c_ulong
        && trace_count >= opt_trace_limit
    {
        write_done_pipe();
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn main_fork(
    mut argc: libc::c_int,
    mut argv: *mut *mut libc::c_char,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut status: libc::c_int = 0;
    let mut fork_pid: pid_t = 0;
    fork_pid = fork();
    if fork_pid == 0 as libc::c_int {
        redirect_child_stdio(1 as libc::c_int, opt_path_child_out);
        redirect_child_stdio(2 as libc::c_int, opt_path_child_err);
        ptrace(
            PTRACE_TRACEME,
            0 as libc::c_int,
            0 as *mut libc::c_void,
            0 as *mut libc::c_void,
        );
        execvp(
            *argv.offset(optind as isize),
            argv.offset(optind as isize) as *const *mut libc::c_char,
        );
        perror(b"execvp\0" as *const u8 as *const libc::c_char);
        exit(1 as libc::c_int);
    } else if fork_pid < 0 as libc::c_int {
        perror(b"fork\0" as *const u8 as *const libc::c_char);
        exit(1 as libc::c_int);
    }
    waitpid(fork_pid, &mut status, 0 as libc::c_int);
    if !(status & 0xff as libc::c_int == 0x7f as libc::c_int)
        || (status & 0xff00 as libc::c_int) >> 8 as libc::c_int != 5 as libc::c_int
    {
        log_error(
            b"main_fork: Expected SIGTRAP from child\n\0" as *const u8
                as *const libc::c_char,
        );
    }
    ptrace(PTRACE_DETACH, fork_pid, 0 as *mut libc::c_void, 0 as *mut libc::c_void);
    rv = main_pid(fork_pid);
    waitpid(fork_pid, 0 as *mut libc::c_int, 0 as libc::c_int);
    return rv;
}
unsafe extern "C" fn cleanup() {
    let mut entry: *mut varpeek_entry_t = 0 as *mut varpeek_entry_t;
    let mut entry_tmp: *mut varpeek_entry_t = 0 as *mut varpeek_entry_t;
    let mut var: *mut varpeek_var_t = 0 as *mut varpeek_var_t;
    let mut var_tmp: *mut varpeek_var_t = 0 as *mut varpeek_var_t;
    let mut gentry: *mut glopeek_entry_t = 0 as *mut glopeek_entry_t;
    let mut gentry_tmp: *mut glopeek_entry_t = 0 as *mut glopeek_entry_t;
    if !opt_filter_re.is_null() {
        regfree(opt_filter_re);
    }
    entry = varpeek_map;
    entry_tmp = (if !varpeek_map.is_null() {
        (*varpeek_map).hh.next
    } else {
        0 as *mut libc::c_void
    }) as *mut varpeek_entry_t;
    while !entry.is_null() {
        var = (*entry).varmap;
        var_tmp = (if !((*entry).varmap).is_null() {
            (*(*entry).varmap).hh.next
        } else {
            0 as *mut libc::c_void
        }) as *mut varpeek_var_t;
        while !var.is_null() {
            let mut _hd_hh_del: *mut UT_hash_handle = &mut (*var).hh;
            if ((*_hd_hh_del).prev).is_null() && ((*_hd_hh_del).next).is_null() {
                free((*(*(*entry).varmap).hh.tbl).buckets as *mut libc::c_void);
                free((*(*entry).varmap).hh.tbl as *mut libc::c_void);
                (*entry).varmap = 0 as *mut varpeek_var_t;
            } else {
                let mut _hd_bkt: libc::c_uint = 0;
                if _hd_hh_del == (*(*(*entry).varmap).hh.tbl).tail {
                    (*(*(*entry).varmap).hh.tbl)
                        .tail = ((*_hd_hh_del).prev as *mut libc::c_char)
                        .offset((*(*(*entry).varmap).hh.tbl).hho as isize)
                        as *mut UT_hash_handle;
                }
                if !((*_hd_hh_del).prev).is_null() {
                    let ref mut fresh15 = (*(((*_hd_hh_del).prev as *mut libc::c_char)
                        .offset((*(*(*entry).varmap).hh.tbl).hho as isize)
                        as *mut UT_hash_handle))
                        .next;
                    *fresh15 = (*_hd_hh_del).next;
                } else {
                    (*entry).varmap = (*_hd_hh_del).next as *mut varpeek_var_t;
                }
                if !((*_hd_hh_del).next).is_null() {
                    let ref mut fresh16 = (*(((*_hd_hh_del).next as *mut libc::c_char)
                        .offset((*(*(*entry).varmap).hh.tbl).hho as isize)
                        as *mut UT_hash_handle))
                        .prev;
                    *fresh16 = (*_hd_hh_del).prev;
                }
                _hd_bkt = (*_hd_hh_del).hashv
                    & ((*(*(*entry).varmap).hh.tbl).num_buckets)
                        .wrapping_sub(1 as libc::c_uint);
                let mut _hd_head: *mut UT_hash_bucket = &mut *((*(*(*entry).varmap)
                    .hh
                    .tbl)
                    .buckets)
                    .offset(_hd_bkt as isize) as *mut UT_hash_bucket;
                (*_hd_head).count = ((*_hd_head).count).wrapping_sub(1);
                (*_hd_head).count;
                if (*_hd_head).hh_head == _hd_hh_del {
                    (*_hd_head).hh_head = (*_hd_hh_del).hh_next;
                }
                if !((*_hd_hh_del).hh_prev).is_null() {
                    (*(*_hd_hh_del).hh_prev).hh_next = (*_hd_hh_del).hh_next;
                }
                if !((*_hd_hh_del).hh_next).is_null() {
                    (*(*_hd_hh_del).hh_next).hh_prev = (*_hd_hh_del).hh_prev;
                }
                (*(*(*entry).varmap).hh.tbl)
                    .num_items = ((*(*(*entry).varmap).hh.tbl).num_items)
                    .wrapping_sub(1);
                (*(*(*entry).varmap).hh.tbl).num_items;
            }
            free(var as *mut libc::c_void);
            var = var_tmp;
            var_tmp = (if !var_tmp.is_null() {
                (*var_tmp).hh.next
            } else {
                0 as *mut libc::c_void
            }) as *mut varpeek_var_t;
        }
        let mut _hd_hh_del_0: *mut UT_hash_handle = &mut (*entry).hh;
        if ((*_hd_hh_del_0).prev).is_null() && ((*_hd_hh_del_0).next).is_null() {
            free((*(*varpeek_map).hh.tbl).buckets as *mut libc::c_void);
            free((*varpeek_map).hh.tbl as *mut libc::c_void);
            varpeek_map = 0 as *mut varpeek_entry_t;
        } else {
            let mut _hd_bkt_0: libc::c_uint = 0;
            if _hd_hh_del_0 == (*(*varpeek_map).hh.tbl).tail {
                (*(*varpeek_map).hh.tbl)
                    .tail = ((*_hd_hh_del_0).prev as *mut libc::c_char)
                    .offset((*(*varpeek_map).hh.tbl).hho as isize)
                    as *mut UT_hash_handle;
            }
            if !((*_hd_hh_del_0).prev).is_null() {
                let ref mut fresh17 = (*(((*_hd_hh_del_0).prev as *mut libc::c_char)
                    .offset((*(*varpeek_map).hh.tbl).hho as isize)
                    as *mut UT_hash_handle))
                    .next;
                *fresh17 = (*_hd_hh_del_0).next;
            } else {
                varpeek_map = (*_hd_hh_del_0).next as *mut varpeek_entry_t;
            }
            if !((*_hd_hh_del_0).next).is_null() {
                let ref mut fresh18 = (*(((*_hd_hh_del_0).next as *mut libc::c_char)
                    .offset((*(*varpeek_map).hh.tbl).hho as isize)
                    as *mut UT_hash_handle))
                    .prev;
                *fresh18 = (*_hd_hh_del_0).prev;
            }
            _hd_bkt_0 = (*_hd_hh_del_0).hashv
                & ((*(*varpeek_map).hh.tbl).num_buckets).wrapping_sub(1 as libc::c_uint);
            let mut _hd_head_0: *mut UT_hash_bucket = &mut *((*(*varpeek_map).hh.tbl)
                .buckets)
                .offset(_hd_bkt_0 as isize) as *mut UT_hash_bucket;
            (*_hd_head_0).count = ((*_hd_head_0).count).wrapping_sub(1);
            (*_hd_head_0).count;
            if (*_hd_head_0).hh_head == _hd_hh_del_0 {
                (*_hd_head_0).hh_head = (*_hd_hh_del_0).hh_next;
            }
            if !((*_hd_hh_del_0).hh_prev).is_null() {
                (*(*_hd_hh_del_0).hh_prev).hh_next = (*_hd_hh_del_0).hh_next;
            }
            if !((*_hd_hh_del_0).hh_next).is_null() {
                (*(*_hd_hh_del_0).hh_next).hh_prev = (*_hd_hh_del_0).hh_prev;
            }
            (*(*varpeek_map).hh.tbl)
                .num_items = ((*(*varpeek_map).hh.tbl).num_items).wrapping_sub(1);
            (*(*varpeek_map).hh.tbl).num_items;
        }
        free(entry as *mut libc::c_void);
        entry = entry_tmp;
        entry_tmp = (if !entry_tmp.is_null() {
            (*entry_tmp).hh.next
        } else {
            0 as *mut libc::c_void
        }) as *mut varpeek_entry_t;
    }
    gentry = glopeek_map;
    gentry_tmp = (if !glopeek_map.is_null() {
        (*glopeek_map).hh.next
    } else {
        0 as *mut libc::c_void
    }) as *mut glopeek_entry_t;
    while !gentry.is_null() {
        let mut _hd_hh_del_1: *mut UT_hash_handle = &mut (*gentry).hh;
        if ((*_hd_hh_del_1).prev).is_null() && ((*_hd_hh_del_1).next).is_null() {
            free((*(*glopeek_map).hh.tbl).buckets as *mut libc::c_void);
            free((*glopeek_map).hh.tbl as *mut libc::c_void);
            glopeek_map = 0 as *mut glopeek_entry_t;
        } else {
            let mut _hd_bkt_1: libc::c_uint = 0;
            if _hd_hh_del_1 == (*(*glopeek_map).hh.tbl).tail {
                (*(*glopeek_map).hh.tbl)
                    .tail = ((*_hd_hh_del_1).prev as *mut libc::c_char)
                    .offset((*(*glopeek_map).hh.tbl).hho as isize)
                    as *mut UT_hash_handle;
            }
            if !((*_hd_hh_del_1).prev).is_null() {
                let ref mut fresh19 = (*(((*_hd_hh_del_1).prev as *mut libc::c_char)
                    .offset((*(*glopeek_map).hh.tbl).hho as isize)
                    as *mut UT_hash_handle))
                    .next;
                *fresh19 = (*_hd_hh_del_1).next;
            } else {
                glopeek_map = (*_hd_hh_del_1).next as *mut glopeek_entry_t;
            }
            if !((*_hd_hh_del_1).next).is_null() {
                let ref mut fresh20 = (*(((*_hd_hh_del_1).next as *mut libc::c_char)
                    .offset((*(*glopeek_map).hh.tbl).hho as isize)
                    as *mut UT_hash_handle))
                    .prev;
                *fresh20 = (*_hd_hh_del_1).prev;
            }
            _hd_bkt_1 = (*_hd_hh_del_1).hashv
                & ((*(*glopeek_map).hh.tbl).num_buckets).wrapping_sub(1 as libc::c_uint);
            let mut _hd_head_1: *mut UT_hash_bucket = &mut *((*(*glopeek_map).hh.tbl)
                .buckets)
                .offset(_hd_bkt_1 as isize) as *mut UT_hash_bucket;
            (*_hd_head_1).count = ((*_hd_head_1).count).wrapping_sub(1);
            (*_hd_head_1).count;
            if (*_hd_head_1).hh_head == _hd_hh_del_1 {
                (*_hd_head_1).hh_head = (*_hd_hh_del_1).hh_next;
            }
            if !((*_hd_hh_del_1).hh_prev).is_null() {
                (*(*_hd_hh_del_1).hh_prev).hh_next = (*_hd_hh_del_1).hh_next;
            }
            if !((*_hd_hh_del_1).hh_next).is_null() {
                (*(*_hd_hh_del_1).hh_next).hh_prev = (*_hd_hh_del_1).hh_prev;
            }
            (*(*glopeek_map).hh.tbl)
                .num_items = ((*(*glopeek_map).hh.tbl).num_items).wrapping_sub(1);
            (*(*glopeek_map).hh.tbl).num_items;
        }
        free(gentry as *mut libc::c_void);
        gentry = gentry_tmp;
        gentry_tmp = (if !gentry_tmp.is_null() {
            (*gentry_tmp).hh.next
        } else {
            0 as *mut libc::c_void
        }) as *mut glopeek_entry_t;
    }
}
unsafe extern "C" fn pause_pid(mut pid: pid_t) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    if ptrace(PTRACE_ATTACH, pid, 0 as libc::c_int, 0 as libc::c_int)
        == -(1 as libc::c_int) as libc::c_long
    {
        rv = *__errno_location();
        perror(b"ptrace\0" as *const u8 as *const libc::c_char);
        return 1 as libc::c_int
            + (if rv == 3 as libc::c_int { 2 as libc::c_int } else { 0 as libc::c_int });
    }
    if waitpid(pid, 0 as *mut libc::c_int, 0 as libc::c_int) < 0 as libc::c_int {
        perror(b"waitpid\0" as *const u8 as *const libc::c_char);
        return 1 as libc::c_int;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn unpause_pid(mut pid: pid_t) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    if ptrace(PTRACE_DETACH, pid, 0 as libc::c_int, 0 as libc::c_int)
        == -(1 as libc::c_int) as libc::c_long
    {
        rv = *__errno_location();
        perror(b"ptrace\0" as *const u8 as *const libc::c_char);
        return 1 as libc::c_int
            + (if rv == 3 as libc::c_int { 2 as libc::c_int } else { 0 as libc::c_int });
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn redirect_child_stdio(
    mut proc_fd: libc::c_int,
    mut opt_path: *mut libc::c_char,
) {
    let mut redir_path: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut redir_file: *mut FILE = 0 as *mut FILE;
    if strcmp(opt_path, b"-\0" as *const u8 as *const libc::c_char) == 0 as libc::c_int {
        return
    } else if !(strstr(opt_path, b"%d\0" as *const u8 as *const libc::c_char)).is_null()
    {
        if asprintf(&mut redir_path as *mut *mut libc::c_char, opt_path, getpid())
            < 0 as libc::c_int
        {
            *__errno_location() = 12 as libc::c_int;
            perror(b"asprintf\0" as *const u8 as *const libc::c_char);
            exit(1 as libc::c_int);
        }
    } else {
        redir_path = strdup(opt_path);
        if redir_path.is_null() {
            perror(b"strdup\0" as *const u8 as *const libc::c_char);
            exit(1 as libc::c_int);
        }
    }
    redir_file = fopen(redir_path, b"w\0" as *const u8 as *const libc::c_char);
    if redir_file.is_null() {
        perror(b"fopen\0" as *const u8 as *const libc::c_char);
        free(redir_path as *mut libc::c_void);
        exit(1 as libc::c_int);
    }
    dup2(fileno(redir_file), proc_fd);
    fclose(redir_file);
    free(redir_path as *mut libc::c_void);
}
unsafe extern "C" fn find_addresses(mut target: *mut trace_target_t) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut memo: addr_memo_t = addr_memo_t {
        php_bin_path: [0; 256],
        php_bin_path_root: [0; 256],
        php_base_addr: 0,
    };
    memset(
        &mut memo as *mut addr_memo_t as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<addr_memo_t>() as libc::c_ulong,
    );
    if opt_executor_globals_addr != 0 as libc::c_int as libc::c_ulong {
        (*target).executor_globals_addr = opt_executor_globals_addr;
    } else {
        rv = get_symbol_addr(
            &mut memo,
            (*target).pid,
            b"executor_globals\0" as *const u8 as *const libc::c_char,
            &mut (*target).executor_globals_addr,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
    }
    if opt_sapi_globals_addr != 0 as libc::c_int as libc::c_ulong {
        (*target).sapi_globals_addr = opt_sapi_globals_addr;
    } else if opt_capture_req != 0 {
        rv = get_symbol_addr(
            &mut memo,
            (*target).pid,
            b"sapi_globals\0" as *const u8 as *const libc::c_char,
            &mut (*target).sapi_globals_addr,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
    }
    if opt_capture_mem != 0 {
        rv = get_symbol_addr(
            &mut memo,
            (*target).pid,
            b"alloc_globals\0" as *const u8 as *const libc::c_char,
            &mut (*target).alloc_globals_addr,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
    }
    log_error_enabled = 0 as libc::c_int;
    if get_symbol_addr(
        &mut memo,
        (*target).pid,
        b"basic_functions_module\0" as *const u8 as *const libc::c_char,
        &mut (*target).basic_functions_module_addr,
    ) != 0 as libc::c_int
    {
        (*target).basic_functions_module_addr = 0 as libc::c_int as uint64_t;
    }
    log_error_enabled = 1 as libc::c_int;
    return 0 as libc::c_int;
}
unsafe extern "C" fn clock_get(mut ts: *mut timespec) {
    if clock_gettime(4 as libc::c_int, ts) == -(1 as libc::c_int) {
        perror(b"clock_gettime\0" as *const u8 as *const libc::c_char);
        (*ts).tv_sec = 0 as libc::c_int as __time_t;
        (*ts).tv_nsec = 0 as libc::c_int as __syscall_slong_t;
    }
}
unsafe extern "C" fn clock_add(
    mut a: *mut timespec,
    mut b: *mut timespec,
    mut res: *mut timespec,
) {
    (*res).tv_sec = (*a).tv_sec + (*b).tv_sec;
    (*res).tv_nsec = (*a).tv_nsec + (*b).tv_nsec;
    if (*res).tv_nsec >= 1000000000 as libc::c_long {
        (*res).tv_sec += (*res).tv_nsec / 1000000000 as libc::c_long;
        (*res).tv_nsec = (*res).tv_nsec % 1000000000 as libc::c_long;
    }
}
unsafe extern "C" fn clock_diff(
    mut a: *mut timespec,
    mut b: *mut timespec,
) -> libc::c_int {
    if (*a).tv_sec == (*b).tv_sec {
        if (*a).tv_nsec == (*b).tv_nsec {
            return 0 as libc::c_int;
        }
        return if (*a).tv_nsec > (*b).tv_nsec {
            1 as libc::c_int
        } else {
            -(1 as libc::c_int)
        };
    }
    return if (*a).tv_sec > (*b).tv_sec {
        1 as libc::c_int
    } else {
        -(1 as libc::c_int)
    };
}
unsafe extern "C" fn calc_sleep_time(
    mut end: *mut timespec,
    mut start: *mut timespec,
    mut sleep: *mut timespec,
) {
    let mut end_ns: libc::c_long = 0;
    let mut start_ns: libc::c_long = 0;
    let mut sleep_ns: libc::c_long = 0;
    if (*end).tv_sec == (*start).tv_sec {
        sleep_ns = opt_sleep_ns - ((*end).tv_nsec - (*start).tv_nsec);
    } else {
        end_ns = ((*end).tv_sec as libc::c_ulong)
            .wrapping_mul(1000000000 as libc::c_ulong)
            .wrapping_add(
                ((*end).tv_nsec as libc::c_ulong).wrapping_mul(1 as libc::c_ulong),
            ) as libc::c_long;
        start_ns = ((*start).tv_sec as libc::c_ulong)
            .wrapping_mul(1000000000 as libc::c_ulong)
            .wrapping_add(
                ((*start).tv_nsec as libc::c_ulong).wrapping_mul(1 as libc::c_ulong),
            ) as libc::c_long;
        sleep_ns = opt_sleep_ns - (end_ns - start_ns);
    }
    if sleep_ns < 0 as libc::c_int as libc::c_long {
        log_error(
            b"calc_sleep_time: Expected sleep_ns>0; decrease sample rate\n\0"
                as *const u8 as *const libc::c_char,
        );
        sleep_ns = 0 as libc::c_int as libc::c_long;
    }
    if sleep_ns < 1000000000 as libc::c_long {
        (*sleep).tv_sec = 0 as libc::c_int as __time_t;
        (*sleep).tv_nsec = sleep_ns;
    } else {
        (*sleep).tv_sec = sleep_ns / 1000000000 as libc::c_long;
        (*sleep).tv_nsec = sleep_ns - (*sleep).tv_sec * 1000000000 as libc::c_long;
    };
}
unsafe extern "C" fn varpeek_add(mut varspec: *mut libc::c_char) {
    let mut at_sign: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut colon: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut dash: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut line_start: uint32_t = 0;
    let mut line_end: uint32_t = 0;
    let mut lineno: uint32_t = 0;
    let mut varpeek: *mut varpeek_entry_t = 0 as *mut varpeek_entry_t;
    let mut var: *mut varpeek_var_t = 0 as *mut varpeek_var_t;
    let mut varpeek_key: [libc::c_char; 256] = [0; 256];
    at_sign = strchr(varspec, '@' as i32);
    colon = strrchr(varspec, ':' as i32);
    dash = strrchr(varspec, '-' as i32);
    if at_sign.is_null() || colon.is_null() {
        log_error(
            b"varpeek_add: Malformed varspec: %s\n\n\0" as *const u8
                as *const libc::c_char,
            varspec,
        );
        usage(stderr, 1 as libc::c_int);
    }
    line_start = strtoul(
        colon.offset(1 as libc::c_int as isize),
        0 as *mut *mut libc::c_char,
        10 as libc::c_int,
    ) as uint32_t;
    line_end = (if !dash.is_null() {
        strtoul(
            dash.offset(1 as libc::c_int as isize),
            0 as *mut *mut libc::c_char,
            10 as libc::c_int,
        )
    } else {
        line_start as libc::c_ulong
    }) as uint32_t;
    lineno = line_start;
    while lineno <= line_end {
        snprintf(
            varpeek_key.as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
            b"%.*s:%d\0" as *const u8 as *const libc::c_char,
            (colon.offset_from(at_sign) as libc::c_long
                - 1 as libc::c_int as libc::c_long) as libc::c_int,
            at_sign.offset(1 as libc::c_int as isize),
            lineno,
        );
        let mut _uthash_hfstr_keylen: libc::c_uint = strlen(varpeek_key.as_mut_ptr())
            as libc::c_uint;
        let mut _hf_hashv: libc::c_uint = 0;
        let mut _hj_i: libc::c_uint = 0;
        let mut _hj_j: libc::c_uint = 0;
        let mut _hj_k: libc::c_uint = 0;
        let mut _hj_key: *const libc::c_uchar = varpeek_key.as_mut_ptr()
            as *const libc::c_uchar;
        _hf_hashv = 0xfeedbeef as libc::c_uint;
        _hj_j = 0x9e3779b9 as libc::c_uint;
        _hj_i = _hj_j;
        _hj_k = _uthash_hfstr_keylen;
        while _hj_k >= 12 as libc::c_uint {
            _hj_i = _hj_i
                .wrapping_add(
                    (*_hj_key.offset(0 as libc::c_int as isize) as libc::c_uint)
                        .wrapping_add(
                            (*_hj_key.offset(1 as libc::c_int as isize) as libc::c_uint)
                                << 8 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key.offset(2 as libc::c_int as isize) as libc::c_uint)
                                << 16 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key.offset(3 as libc::c_int as isize) as libc::c_uint)
                                << 24 as libc::c_int,
                        ),
                );
            _hj_j = _hj_j
                .wrapping_add(
                    (*_hj_key.offset(4 as libc::c_int as isize) as libc::c_uint)
                        .wrapping_add(
                            (*_hj_key.offset(5 as libc::c_int as isize) as libc::c_uint)
                                << 8 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key.offset(6 as libc::c_int as isize) as libc::c_uint)
                                << 16 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key.offset(7 as libc::c_int as isize) as libc::c_uint)
                                << 24 as libc::c_int,
                        ),
                );
            _hf_hashv = _hf_hashv
                .wrapping_add(
                    (*_hj_key.offset(8 as libc::c_int as isize) as libc::c_uint)
                        .wrapping_add(
                            (*_hj_key.offset(9 as libc::c_int as isize) as libc::c_uint)
                                << 8 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key.offset(10 as libc::c_int as isize) as libc::c_uint)
                                << 16 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key.offset(11 as libc::c_int as isize) as libc::c_uint)
                                << 24 as libc::c_int,
                        ),
                );
            _hj_i = _hj_i.wrapping_sub(_hj_j);
            _hj_i = _hj_i.wrapping_sub(_hf_hashv);
            _hj_i ^= _hf_hashv >> 13 as libc::c_int;
            _hj_j = _hj_j.wrapping_sub(_hf_hashv);
            _hj_j = _hj_j.wrapping_sub(_hj_i);
            _hj_j ^= _hj_i << 8 as libc::c_int;
            _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
            _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
            _hf_hashv ^= _hj_j >> 13 as libc::c_int;
            _hj_i = _hj_i.wrapping_sub(_hj_j);
            _hj_i = _hj_i.wrapping_sub(_hf_hashv);
            _hj_i ^= _hf_hashv >> 12 as libc::c_int;
            _hj_j = _hj_j.wrapping_sub(_hf_hashv);
            _hj_j = _hj_j.wrapping_sub(_hj_i);
            _hj_j ^= _hj_i << 16 as libc::c_int;
            _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
            _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
            _hf_hashv ^= _hj_j >> 5 as libc::c_int;
            _hj_i = _hj_i.wrapping_sub(_hj_j);
            _hj_i = _hj_i.wrapping_sub(_hf_hashv);
            _hj_i ^= _hf_hashv >> 3 as libc::c_int;
            _hj_j = _hj_j.wrapping_sub(_hf_hashv);
            _hj_j = _hj_j.wrapping_sub(_hj_i);
            _hj_j ^= _hj_i << 10 as libc::c_int;
            _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
            _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
            _hf_hashv ^= _hj_j >> 15 as libc::c_int;
            _hj_key = _hj_key.offset(12 as libc::c_int as isize);
            _hj_k = _hj_k.wrapping_sub(12 as libc::c_uint);
        }
        _hf_hashv = _hf_hashv.wrapping_add(_uthash_hfstr_keylen);
        let mut current_block_61: u64;
        match _hj_k {
            11 => {
                _hf_hashv = _hf_hashv
                    .wrapping_add(
                        (*_hj_key.offset(10 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    );
                current_block_61 = 15523621120590885459;
            }
            10 => {
                current_block_61 = 15523621120590885459;
            }
            9 => {
                current_block_61 = 6465130204710010959;
            }
            8 => {
                current_block_61 = 5440162776634101083;
            }
            7 => {
                current_block_61 = 15478711950744319517;
            }
            6 => {
                current_block_61 = 3175581474479531795;
            }
            5 => {
                current_block_61 = 13818699824848148498;
            }
            4 => {
                current_block_61 = 129655588332299997;
            }
            3 => {
                current_block_61 = 16350540965400141711;
            }
            2 => {
                current_block_61 = 7556172768468478781;
            }
            1 => {
                current_block_61 = 17889982752630538766;
            }
            _ => {
                current_block_61 = 13321564401369230990;
            }
        }
        match current_block_61 {
            15523621120590885459 => {
                _hf_hashv = _hf_hashv
                    .wrapping_add(
                        (*_hj_key.offset(9 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    );
                current_block_61 = 6465130204710010959;
            }
            _ => {}
        }
        match current_block_61 {
            6465130204710010959 => {
                _hf_hashv = _hf_hashv
                    .wrapping_add(
                        (*_hj_key.offset(8 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    );
                current_block_61 = 5440162776634101083;
            }
            _ => {}
        }
        match current_block_61 {
            5440162776634101083 => {
                _hj_j = _hj_j
                    .wrapping_add(
                        (*_hj_key.offset(7 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    );
                current_block_61 = 15478711950744319517;
            }
            _ => {}
        }
        match current_block_61 {
            15478711950744319517 => {
                _hj_j = _hj_j
                    .wrapping_add(
                        (*_hj_key.offset(6 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    );
                current_block_61 = 3175581474479531795;
            }
            _ => {}
        }
        match current_block_61 {
            3175581474479531795 => {
                _hj_j = _hj_j
                    .wrapping_add(
                        (*_hj_key.offset(5 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    );
                current_block_61 = 13818699824848148498;
            }
            _ => {}
        }
        match current_block_61 {
            13818699824848148498 => {
                _hj_j = _hj_j
                    .wrapping_add(
                        *_hj_key.offset(4 as libc::c_int as isize) as libc::c_uint,
                    );
                current_block_61 = 129655588332299997;
            }
            _ => {}
        }
        match current_block_61 {
            129655588332299997 => {
                _hj_i = _hj_i
                    .wrapping_add(
                        (*_hj_key.offset(3 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    );
                current_block_61 = 16350540965400141711;
            }
            _ => {}
        }
        match current_block_61 {
            16350540965400141711 => {
                _hj_i = _hj_i
                    .wrapping_add(
                        (*_hj_key.offset(2 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    );
                current_block_61 = 7556172768468478781;
            }
            _ => {}
        }
        match current_block_61 {
            7556172768468478781 => {
                _hj_i = _hj_i
                    .wrapping_add(
                        (*_hj_key.offset(1 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    );
                current_block_61 = 17889982752630538766;
            }
            _ => {}
        }
        match current_block_61 {
            17889982752630538766 => {
                _hj_i = _hj_i
                    .wrapping_add(
                        *_hj_key.offset(0 as libc::c_int as isize) as libc::c_uint,
                    );
            }
            _ => {}
        }
        _hj_i = _hj_i.wrapping_sub(_hj_j);
        _hj_i = _hj_i.wrapping_sub(_hf_hashv);
        _hj_i ^= _hf_hashv >> 13 as libc::c_int;
        _hj_j = _hj_j.wrapping_sub(_hf_hashv);
        _hj_j = _hj_j.wrapping_sub(_hj_i);
        _hj_j ^= _hj_i << 8 as libc::c_int;
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
        _hf_hashv ^= _hj_j >> 13 as libc::c_int;
        _hj_i = _hj_i.wrapping_sub(_hj_j);
        _hj_i = _hj_i.wrapping_sub(_hf_hashv);
        _hj_i ^= _hf_hashv >> 12 as libc::c_int;
        _hj_j = _hj_j.wrapping_sub(_hf_hashv);
        _hj_j = _hj_j.wrapping_sub(_hj_i);
        _hj_j ^= _hj_i << 16 as libc::c_int;
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
        _hf_hashv ^= _hj_j >> 5 as libc::c_int;
        _hj_i = _hj_i.wrapping_sub(_hj_j);
        _hj_i = _hj_i.wrapping_sub(_hf_hashv);
        _hj_i ^= _hf_hashv >> 3 as libc::c_int;
        _hj_j = _hj_j.wrapping_sub(_hf_hashv);
        _hj_j = _hj_j.wrapping_sub(_hj_i);
        _hj_j ^= _hj_i << 10 as libc::c_int;
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
        _hf_hashv ^= _hj_j >> 15 as libc::c_int;
        varpeek = 0 as *mut varpeek_entry_t;
        if !varpeek_map.is_null() {
            let mut _hf_bkt: libc::c_uint = 0;
            _hf_bkt = _hf_hashv
                & ((*(*varpeek_map).hh.tbl).num_buckets).wrapping_sub(1 as libc::c_uint);
            if 1 as libc::c_int != 0 as libc::c_int {
                if !((*((*(*varpeek_map).hh.tbl).buckets).offset(_hf_bkt as isize))
                    .hh_head)
                    .is_null()
                {
                    varpeek = ((*((*(*varpeek_map).hh.tbl).buckets)
                        .offset(_hf_bkt as isize))
                        .hh_head as *mut libc::c_char)
                        .offset(-((*(*varpeek_map).hh.tbl).hho as isize))
                        as *mut libc::c_void as *mut varpeek_entry_t;
                } else {
                    varpeek = 0 as *mut varpeek_entry_t;
                }
                while !varpeek.is_null() {
                    if (*varpeek).hh.hashv == _hf_hashv
                        && (*varpeek).hh.keylen == _uthash_hfstr_keylen
                    {
                        if memcmp(
                            (*varpeek).hh.key,
                            varpeek_key.as_mut_ptr() as *const libc::c_void,
                            _uthash_hfstr_keylen as libc::c_ulong,
                        ) == 0 as libc::c_int
                        {
                            break;
                        }
                    }
                    if !((*varpeek).hh.hh_next).is_null() {
                        varpeek = ((*varpeek).hh.hh_next as *mut libc::c_char)
                            .offset(-((*(*varpeek_map).hh.tbl).hho as isize))
                            as *mut libc::c_void as *mut varpeek_entry_t;
                    } else {
                        varpeek = 0 as *mut varpeek_entry_t;
                    }
                }
            }
        }
        if varpeek.is_null() {
            varpeek = calloc(
                1 as libc::c_int as libc::c_ulong,
                ::std::mem::size_of::<varpeek_entry_t>() as libc::c_ulong,
            ) as *mut varpeek_entry_t;
            strncpy(
                ((*varpeek).filename_lineno).as_mut_ptr(),
                varpeek_key.as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
            );
            let mut _uthash_hastr_keylen: libc::c_uint = strlen(
                ((*varpeek).filename_lineno).as_mut_ptr(),
            ) as libc::c_uint;
            let mut _ha_hashv: libc::c_uint = 0;
            let mut _hj_i_0: libc::c_uint = 0;
            let mut _hj_j_0: libc::c_uint = 0;
            let mut _hj_k_0: libc::c_uint = 0;
            let mut _hj_key_0: *const libc::c_uchar = &mut *((*varpeek).filename_lineno)
                .as_mut_ptr()
                .offset(0 as libc::c_int as isize) as *mut libc::c_char
                as *const libc::c_uchar;
            _ha_hashv = 0xfeedbeef as libc::c_uint;
            _hj_j_0 = 0x9e3779b9 as libc::c_uint;
            _hj_i_0 = _hj_j_0;
            _hj_k_0 = _uthash_hastr_keylen;
            while _hj_k_0 >= 12 as libc::c_uint {
                _hj_i_0 = _hj_i_0
                    .wrapping_add(
                        (*_hj_key_0.offset(0 as libc::c_int as isize) as libc::c_uint)
                            .wrapping_add(
                                (*_hj_key_0.offset(1 as libc::c_int as isize)
                                    as libc::c_uint) << 8 as libc::c_int,
                            )
                            .wrapping_add(
                                (*_hj_key_0.offset(2 as libc::c_int as isize)
                                    as libc::c_uint) << 16 as libc::c_int,
                            )
                            .wrapping_add(
                                (*_hj_key_0.offset(3 as libc::c_int as isize)
                                    as libc::c_uint) << 24 as libc::c_int,
                            ),
                    );
                _hj_j_0 = _hj_j_0
                    .wrapping_add(
                        (*_hj_key_0.offset(4 as libc::c_int as isize) as libc::c_uint)
                            .wrapping_add(
                                (*_hj_key_0.offset(5 as libc::c_int as isize)
                                    as libc::c_uint) << 8 as libc::c_int,
                            )
                            .wrapping_add(
                                (*_hj_key_0.offset(6 as libc::c_int as isize)
                                    as libc::c_uint) << 16 as libc::c_int,
                            )
                            .wrapping_add(
                                (*_hj_key_0.offset(7 as libc::c_int as isize)
                                    as libc::c_uint) << 24 as libc::c_int,
                            ),
                    );
                _ha_hashv = _ha_hashv
                    .wrapping_add(
                        (*_hj_key_0.offset(8 as libc::c_int as isize) as libc::c_uint)
                            .wrapping_add(
                                (*_hj_key_0.offset(9 as libc::c_int as isize)
                                    as libc::c_uint) << 8 as libc::c_int,
                            )
                            .wrapping_add(
                                (*_hj_key_0.offset(10 as libc::c_int as isize)
                                    as libc::c_uint) << 16 as libc::c_int,
                            )
                            .wrapping_add(
                                (*_hj_key_0.offset(11 as libc::c_int as isize)
                                    as libc::c_uint) << 24 as libc::c_int,
                            ),
                    );
                _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
                _hj_i_0 = _hj_i_0.wrapping_sub(_ha_hashv);
                _hj_i_0 ^= _ha_hashv >> 13 as libc::c_int;
                _hj_j_0 = _hj_j_0.wrapping_sub(_ha_hashv);
                _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
                _hj_j_0 ^= _hj_i_0 << 8 as libc::c_int;
                _ha_hashv = _ha_hashv.wrapping_sub(_hj_i_0);
                _ha_hashv = _ha_hashv.wrapping_sub(_hj_j_0);
                _ha_hashv ^= _hj_j_0 >> 13 as libc::c_int;
                _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
                _hj_i_0 = _hj_i_0.wrapping_sub(_ha_hashv);
                _hj_i_0 ^= _ha_hashv >> 12 as libc::c_int;
                _hj_j_0 = _hj_j_0.wrapping_sub(_ha_hashv);
                _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
                _hj_j_0 ^= _hj_i_0 << 16 as libc::c_int;
                _ha_hashv = _ha_hashv.wrapping_sub(_hj_i_0);
                _ha_hashv = _ha_hashv.wrapping_sub(_hj_j_0);
                _ha_hashv ^= _hj_j_0 >> 5 as libc::c_int;
                _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
                _hj_i_0 = _hj_i_0.wrapping_sub(_ha_hashv);
                _hj_i_0 ^= _ha_hashv >> 3 as libc::c_int;
                _hj_j_0 = _hj_j_0.wrapping_sub(_ha_hashv);
                _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
                _hj_j_0 ^= _hj_i_0 << 10 as libc::c_int;
                _ha_hashv = _ha_hashv.wrapping_sub(_hj_i_0);
                _ha_hashv = _ha_hashv.wrapping_sub(_hj_j_0);
                _ha_hashv ^= _hj_j_0 >> 15 as libc::c_int;
                _hj_key_0 = _hj_key_0.offset(12 as libc::c_int as isize);
                _hj_k_0 = _hj_k_0.wrapping_sub(12 as libc::c_uint);
            }
            _ha_hashv = _ha_hashv.wrapping_add(_uthash_hastr_keylen);
            let mut current_block_179: u64;
            match _hj_k_0 {
                11 => {
                    _ha_hashv = _ha_hashv
                        .wrapping_add(
                            (*_hj_key_0.offset(10 as libc::c_int as isize)
                                as libc::c_uint) << 24 as libc::c_int,
                        );
                    current_block_179 = 2906372516832548486;
                }
                10 => {
                    current_block_179 = 2906372516832548486;
                }
                9 => {
                    current_block_179 = 8343915921216101225;
                }
                8 => {
                    current_block_179 = 8874222881297538853;
                }
                7 => {
                    current_block_179 = 1957095516238301682;
                }
                6 => {
                    current_block_179 = 15826209325357355998;
                }
                5 => {
                    current_block_179 = 6258648360296266377;
                }
                4 => {
                    current_block_179 = 2448469264586513817;
                }
                3 => {
                    current_block_179 = 5677664159869512249;
                }
                2 => {
                    current_block_179 = 16654173191102407024;
                }
                1 => {
                    current_block_179 = 2169480215327505448;
                }
                _ => {
                    current_block_179 = 5908482871227205451;
                }
            }
            match current_block_179 {
                2906372516832548486 => {
                    _ha_hashv = _ha_hashv
                        .wrapping_add(
                            (*_hj_key_0.offset(9 as libc::c_int as isize)
                                as libc::c_uint) << 16 as libc::c_int,
                        );
                    current_block_179 = 8343915921216101225;
                }
                _ => {}
            }
            match current_block_179 {
                8343915921216101225 => {
                    _ha_hashv = _ha_hashv
                        .wrapping_add(
                            (*_hj_key_0.offset(8 as libc::c_int as isize)
                                as libc::c_uint) << 8 as libc::c_int,
                        );
                    current_block_179 = 8874222881297538853;
                }
                _ => {}
            }
            match current_block_179 {
                8874222881297538853 => {
                    _hj_j_0 = _hj_j_0
                        .wrapping_add(
                            (*_hj_key_0.offset(7 as libc::c_int as isize)
                                as libc::c_uint) << 24 as libc::c_int,
                        );
                    current_block_179 = 1957095516238301682;
                }
                _ => {}
            }
            match current_block_179 {
                1957095516238301682 => {
                    _hj_j_0 = _hj_j_0
                        .wrapping_add(
                            (*_hj_key_0.offset(6 as libc::c_int as isize)
                                as libc::c_uint) << 16 as libc::c_int,
                        );
                    current_block_179 = 15826209325357355998;
                }
                _ => {}
            }
            match current_block_179 {
                15826209325357355998 => {
                    _hj_j_0 = _hj_j_0
                        .wrapping_add(
                            (*_hj_key_0.offset(5 as libc::c_int as isize)
                                as libc::c_uint) << 8 as libc::c_int,
                        );
                    current_block_179 = 6258648360296266377;
                }
                _ => {}
            }
            match current_block_179 {
                6258648360296266377 => {
                    _hj_j_0 = _hj_j_0
                        .wrapping_add(
                            *_hj_key_0.offset(4 as libc::c_int as isize) as libc::c_uint,
                        );
                    current_block_179 = 2448469264586513817;
                }
                _ => {}
            }
            match current_block_179 {
                2448469264586513817 => {
                    _hj_i_0 = _hj_i_0
                        .wrapping_add(
                            (*_hj_key_0.offset(3 as libc::c_int as isize)
                                as libc::c_uint) << 24 as libc::c_int,
                        );
                    current_block_179 = 5677664159869512249;
                }
                _ => {}
            }
            match current_block_179 {
                5677664159869512249 => {
                    _hj_i_0 = _hj_i_0
                        .wrapping_add(
                            (*_hj_key_0.offset(2 as libc::c_int as isize)
                                as libc::c_uint) << 16 as libc::c_int,
                        );
                    current_block_179 = 16654173191102407024;
                }
                _ => {}
            }
            match current_block_179 {
                16654173191102407024 => {
                    _hj_i_0 = _hj_i_0
                        .wrapping_add(
                            (*_hj_key_0.offset(1 as libc::c_int as isize)
                                as libc::c_uint) << 8 as libc::c_int,
                        );
                    current_block_179 = 2169480215327505448;
                }
                _ => {}
            }
            match current_block_179 {
                2169480215327505448 => {
                    _hj_i_0 = _hj_i_0
                        .wrapping_add(
                            *_hj_key_0.offset(0 as libc::c_int as isize) as libc::c_uint,
                        );
                }
                _ => {}
            }
            _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
            _hj_i_0 = _hj_i_0.wrapping_sub(_ha_hashv);
            _hj_i_0 ^= _ha_hashv >> 13 as libc::c_int;
            _hj_j_0 = _hj_j_0.wrapping_sub(_ha_hashv);
            _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
            _hj_j_0 ^= _hj_i_0 << 8 as libc::c_int;
            _ha_hashv = _ha_hashv.wrapping_sub(_hj_i_0);
            _ha_hashv = _ha_hashv.wrapping_sub(_hj_j_0);
            _ha_hashv ^= _hj_j_0 >> 13 as libc::c_int;
            _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
            _hj_i_0 = _hj_i_0.wrapping_sub(_ha_hashv);
            _hj_i_0 ^= _ha_hashv >> 12 as libc::c_int;
            _hj_j_0 = _hj_j_0.wrapping_sub(_ha_hashv);
            _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
            _hj_j_0 ^= _hj_i_0 << 16 as libc::c_int;
            _ha_hashv = _ha_hashv.wrapping_sub(_hj_i_0);
            _ha_hashv = _ha_hashv.wrapping_sub(_hj_j_0);
            _ha_hashv ^= _hj_j_0 >> 5 as libc::c_int;
            _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
            _hj_i_0 = _hj_i_0.wrapping_sub(_ha_hashv);
            _hj_i_0 ^= _ha_hashv >> 3 as libc::c_int;
            _hj_j_0 = _hj_j_0.wrapping_sub(_ha_hashv);
            _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
            _hj_j_0 ^= _hj_i_0 << 10 as libc::c_int;
            _ha_hashv = _ha_hashv.wrapping_sub(_hj_i_0);
            _ha_hashv = _ha_hashv.wrapping_sub(_hj_j_0);
            _ha_hashv ^= _hj_j_0 >> 15 as libc::c_int;
            (*varpeek).hh.hashv = _ha_hashv;
            (*varpeek)
                .hh
                .key = &mut *((*varpeek).filename_lineno)
                .as_mut_ptr()
                .offset(0 as libc::c_int as isize) as *mut libc::c_char
                as *mut libc::c_void;
            (*varpeek).hh.keylen = _uthash_hastr_keylen;
            if varpeek_map.is_null() {
                (*varpeek).hh.next = 0 as *mut libc::c_void;
                (*varpeek).hh.prev = 0 as *mut libc::c_void;
                (*varpeek)
                    .hh
                    .tbl = malloc(
                    ::std::mem::size_of::<UT_hash_table>() as libc::c_ulong,
                ) as *mut UT_hash_table;
                if ((*varpeek).hh.tbl).is_null() {
                    exit(-(1 as libc::c_int));
                } else {
                    memset(
                        (*varpeek).hh.tbl as *mut libc::c_void,
                        '\0' as i32,
                        ::std::mem::size_of::<UT_hash_table>() as libc::c_ulong,
                    );
                    (*(*varpeek).hh.tbl).tail = &mut (*varpeek).hh;
                    (*(*varpeek).hh.tbl).num_buckets = 32 as libc::c_uint;
                    (*(*varpeek).hh.tbl).log2_num_buckets = 5 as libc::c_uint;
                    (*(*varpeek).hh.tbl)
                        .hho = (&mut (*varpeek).hh as *mut UT_hash_handle
                        as *mut libc::c_char)
                        .offset_from(varpeek as *mut libc::c_char) as libc::c_long;
                    (*(*varpeek).hh.tbl)
                        .buckets = malloc(
                        (32 as libc::c_uint as libc::c_ulong)
                            .wrapping_mul(
                                ::std::mem::size_of::<UT_hash_bucket>() as libc::c_ulong,
                            ),
                    ) as *mut UT_hash_bucket;
                    (*(*varpeek).hh.tbl).signature = 0xa0111fe1 as libc::c_uint;
                    if ((*(*varpeek).hh.tbl).buckets).is_null() {
                        exit(-(1 as libc::c_int));
                    } else {
                        memset(
                            (*(*varpeek).hh.tbl).buckets as *mut libc::c_void,
                            '\0' as i32,
                            (32 as libc::c_uint as libc::c_ulong)
                                .wrapping_mul(
                                    ::std::mem::size_of::<UT_hash_bucket>() as libc::c_ulong,
                                ),
                        );
                    }
                }
                varpeek_map = varpeek;
            } else {
                (*varpeek).hh.tbl = (*varpeek_map).hh.tbl;
                (*varpeek).hh.next = 0 as *mut libc::c_void;
                (*varpeek)
                    .hh
                    .prev = ((*(*varpeek_map).hh.tbl).tail as *mut libc::c_char)
                    .offset(-((*(*varpeek_map).hh.tbl).hho as isize))
                    as *mut libc::c_void;
                (*(*(*varpeek_map).hh.tbl).tail).next = varpeek as *mut libc::c_void;
                (*(*varpeek_map).hh.tbl).tail = &mut (*varpeek).hh;
            }
            let mut _ha_bkt: libc::c_uint = 0;
            (*(*varpeek_map).hh.tbl)
                .num_items = ((*(*varpeek_map).hh.tbl).num_items).wrapping_add(1);
            (*(*varpeek_map).hh.tbl).num_items;
            _ha_bkt = _ha_hashv
                & ((*(*varpeek_map).hh.tbl).num_buckets).wrapping_sub(1 as libc::c_uint);
            let mut _ha_head: *mut UT_hash_bucket = &mut *((*(*varpeek_map).hh.tbl)
                .buckets)
                .offset(_ha_bkt as isize) as *mut UT_hash_bucket;
            (*_ha_head).count = ((*_ha_head).count).wrapping_add(1);
            (*_ha_head).count;
            (*varpeek).hh.hh_next = (*_ha_head).hh_head;
            (*varpeek).hh.hh_prev = 0 as *mut UT_hash_handle;
            if !((*_ha_head).hh_head).is_null() {
                (*(*_ha_head).hh_head).hh_prev = &mut (*varpeek).hh;
            }
            (*_ha_head).hh_head = &mut (*varpeek).hh;
            if (*_ha_head).count
                >= ((*_ha_head).expand_mult)
                    .wrapping_add(1 as libc::c_uint)
                    .wrapping_mul(10 as libc::c_uint)
                && (*(*varpeek).hh.tbl).noexpand == 0
            {
                let mut _he_bkt: libc::c_uint = 0;
                let mut _he_bkt_i: libc::c_uint = 0;
                let mut _he_thh: *mut UT_hash_handle = 0 as *mut UT_hash_handle;
                let mut _he_hh_nxt: *mut UT_hash_handle = 0 as *mut UT_hash_handle;
                let mut _he_new_buckets: *mut UT_hash_bucket = 0 as *mut UT_hash_bucket;
                let mut _he_newbkt: *mut UT_hash_bucket = 0 as *mut UT_hash_bucket;
                _he_new_buckets = malloc(
                    (2 as libc::c_ulong)
                        .wrapping_mul((*(*varpeek).hh.tbl).num_buckets as libc::c_ulong)
                        .wrapping_mul(
                            ::std::mem::size_of::<UT_hash_bucket>() as libc::c_ulong,
                        ),
                ) as *mut UT_hash_bucket;
                if _he_new_buckets.is_null() {
                    exit(-(1 as libc::c_int));
                } else {
                    memset(
                        _he_new_buckets as *mut libc::c_void,
                        '\0' as i32,
                        (2 as libc::c_ulong)
                            .wrapping_mul(
                                (*(*varpeek).hh.tbl).num_buckets as libc::c_ulong,
                            )
                            .wrapping_mul(
                                ::std::mem::size_of::<UT_hash_bucket>() as libc::c_ulong,
                            ),
                    );
                    (*(*varpeek).hh.tbl)
                        .ideal_chain_maxlen = ((*(*varpeek).hh.tbl).num_items
                        >> ((*(*varpeek).hh.tbl).log2_num_buckets)
                            .wrapping_add(1 as libc::c_uint))
                        .wrapping_add(
                            (if (*(*varpeek).hh.tbl).num_items
                                & ((*(*varpeek).hh.tbl).num_buckets)
                                    .wrapping_mul(2 as libc::c_uint)
                                    .wrapping_sub(1 as libc::c_uint) != 0 as libc::c_uint
                            {
                                1 as libc::c_uint
                            } else {
                                0 as libc::c_uint
                            }),
                        );
                    (*(*varpeek).hh.tbl)
                        .nonideal_items = 0 as libc::c_int as libc::c_uint;
                    _he_bkt_i = 0 as libc::c_int as libc::c_uint;
                    while _he_bkt_i < (*(*varpeek).hh.tbl).num_buckets {
                        _he_thh = (*((*(*varpeek).hh.tbl).buckets)
                            .offset(_he_bkt_i as isize))
                            .hh_head;
                        while !_he_thh.is_null() {
                            _he_hh_nxt = (*_he_thh).hh_next;
                            _he_bkt = (*_he_thh).hashv
                                & ((*(*varpeek).hh.tbl).num_buckets)
                                    .wrapping_mul(2 as libc::c_uint)
                                    .wrapping_sub(1 as libc::c_uint);
                            _he_newbkt = &mut *_he_new_buckets.offset(_he_bkt as isize)
                                as *mut UT_hash_bucket;
                            (*_he_newbkt).count = ((*_he_newbkt).count).wrapping_add(1);
                            if (*_he_newbkt).count
                                > (*(*varpeek).hh.tbl).ideal_chain_maxlen
                            {
                                (*(*varpeek).hh.tbl)
                                    .nonideal_items = ((*(*varpeek).hh.tbl).nonideal_items)
                                    .wrapping_add(1);
                                (*(*varpeek).hh.tbl).nonideal_items;
                                (*_he_newbkt)
                                    .expand_mult = ((*_he_newbkt).count)
                                    .wrapping_div((*(*varpeek).hh.tbl).ideal_chain_maxlen);
                            }
                            (*_he_thh).hh_prev = 0 as *mut UT_hash_handle;
                            (*_he_thh).hh_next = (*_he_newbkt).hh_head;
                            if !((*_he_newbkt).hh_head).is_null() {
                                (*(*_he_newbkt).hh_head).hh_prev = _he_thh;
                            }
                            (*_he_newbkt).hh_head = _he_thh;
                            _he_thh = _he_hh_nxt;
                        }
                        _he_bkt_i = _he_bkt_i.wrapping_add(1);
                        _he_bkt_i;
                    }
                    free((*(*varpeek).hh.tbl).buckets as *mut libc::c_void);
                    (*(*varpeek).hh.tbl)
                        .num_buckets = ((*(*varpeek).hh.tbl).num_buckets)
                        .wrapping_mul(2 as libc::c_uint);
                    (*(*varpeek).hh.tbl)
                        .log2_num_buckets = ((*(*varpeek).hh.tbl).log2_num_buckets)
                        .wrapping_add(1);
                    (*(*varpeek).hh.tbl).log2_num_buckets;
                    (*(*varpeek).hh.tbl).buckets = _he_new_buckets;
                    (*(*varpeek).hh.tbl)
                        .ineff_expands = if (*(*varpeek).hh.tbl).nonideal_items
                        > (*(*varpeek).hh.tbl).num_items >> 1 as libc::c_int
                    {
                        ((*(*varpeek).hh.tbl).ineff_expands)
                            .wrapping_add(1 as libc::c_uint)
                    } else {
                        0 as libc::c_uint
                    };
                    if (*(*varpeek).hh.tbl).ineff_expands > 1 as libc::c_uint {
                        (*(*varpeek).hh.tbl).noexpand = 1 as libc::c_int as libc::c_uint;
                    }
                }
            }
        }
        var = calloc(
            1 as libc::c_int as libc::c_ulong,
            ::std::mem::size_of::<varpeek_var_t>() as libc::c_ulong,
        ) as *mut varpeek_var_t;
        snprintf(
            ((*var).name).as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
            b"%.*s\0" as *const u8 as *const libc::c_char,
            at_sign.offset_from(varspec) as libc::c_long as libc::c_int,
            varspec,
        );
        let mut _uthash_hastr_keylen_0: libc::c_uint = strlen(((*var).name).as_mut_ptr())
            as libc::c_uint;
        let mut _ha_hashv_0: libc::c_uint = 0;
        let mut _hj_i_1: libc::c_uint = 0;
        let mut _hj_j_1: libc::c_uint = 0;
        let mut _hj_k_1: libc::c_uint = 0;
        let mut _hj_key_1: *const libc::c_uchar = &mut *((*var).name)
            .as_mut_ptr()
            .offset(0 as libc::c_int as isize) as *mut libc::c_char
            as *const libc::c_uchar;
        _ha_hashv_0 = 0xfeedbeef as libc::c_uint;
        _hj_j_1 = 0x9e3779b9 as libc::c_uint;
        _hj_i_1 = _hj_j_1;
        _hj_k_1 = _uthash_hastr_keylen_0;
        while _hj_k_1 >= 12 as libc::c_uint {
            _hj_i_1 = _hj_i_1
                .wrapping_add(
                    (*_hj_key_1.offset(0 as libc::c_int as isize) as libc::c_uint)
                        .wrapping_add(
                            (*_hj_key_1.offset(1 as libc::c_int as isize)
                                as libc::c_uint) << 8 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_1.offset(2 as libc::c_int as isize)
                                as libc::c_uint) << 16 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_1.offset(3 as libc::c_int as isize)
                                as libc::c_uint) << 24 as libc::c_int,
                        ),
                );
            _hj_j_1 = _hj_j_1
                .wrapping_add(
                    (*_hj_key_1.offset(4 as libc::c_int as isize) as libc::c_uint)
                        .wrapping_add(
                            (*_hj_key_1.offset(5 as libc::c_int as isize)
                                as libc::c_uint) << 8 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_1.offset(6 as libc::c_int as isize)
                                as libc::c_uint) << 16 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_1.offset(7 as libc::c_int as isize)
                                as libc::c_uint) << 24 as libc::c_int,
                        ),
                );
            _ha_hashv_0 = _ha_hashv_0
                .wrapping_add(
                    (*_hj_key_1.offset(8 as libc::c_int as isize) as libc::c_uint)
                        .wrapping_add(
                            (*_hj_key_1.offset(9 as libc::c_int as isize)
                                as libc::c_uint) << 8 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_1.offset(10 as libc::c_int as isize)
                                as libc::c_uint) << 16 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_1.offset(11 as libc::c_int as isize)
                                as libc::c_uint) << 24 as libc::c_int,
                        ),
                );
            _hj_i_1 = _hj_i_1.wrapping_sub(_hj_j_1);
            _hj_i_1 = _hj_i_1.wrapping_sub(_ha_hashv_0);
            _hj_i_1 ^= _ha_hashv_0 >> 13 as libc::c_int;
            _hj_j_1 = _hj_j_1.wrapping_sub(_ha_hashv_0);
            _hj_j_1 = _hj_j_1.wrapping_sub(_hj_i_1);
            _hj_j_1 ^= _hj_i_1 << 8 as libc::c_int;
            _ha_hashv_0 = _ha_hashv_0.wrapping_sub(_hj_i_1);
            _ha_hashv_0 = _ha_hashv_0.wrapping_sub(_hj_j_1);
            _ha_hashv_0 ^= _hj_j_1 >> 13 as libc::c_int;
            _hj_i_1 = _hj_i_1.wrapping_sub(_hj_j_1);
            _hj_i_1 = _hj_i_1.wrapping_sub(_ha_hashv_0);
            _hj_i_1 ^= _ha_hashv_0 >> 12 as libc::c_int;
            _hj_j_1 = _hj_j_1.wrapping_sub(_ha_hashv_0);
            _hj_j_1 = _hj_j_1.wrapping_sub(_hj_i_1);
            _hj_j_1 ^= _hj_i_1 << 16 as libc::c_int;
            _ha_hashv_0 = _ha_hashv_0.wrapping_sub(_hj_i_1);
            _ha_hashv_0 = _ha_hashv_0.wrapping_sub(_hj_j_1);
            _ha_hashv_0 ^= _hj_j_1 >> 5 as libc::c_int;
            _hj_i_1 = _hj_i_1.wrapping_sub(_hj_j_1);
            _hj_i_1 = _hj_i_1.wrapping_sub(_ha_hashv_0);
            _hj_i_1 ^= _ha_hashv_0 >> 3 as libc::c_int;
            _hj_j_1 = _hj_j_1.wrapping_sub(_ha_hashv_0);
            _hj_j_1 = _hj_j_1.wrapping_sub(_hj_i_1);
            _hj_j_1 ^= _hj_i_1 << 10 as libc::c_int;
            _ha_hashv_0 = _ha_hashv_0.wrapping_sub(_hj_i_1);
            _ha_hashv_0 = _ha_hashv_0.wrapping_sub(_hj_j_1);
            _ha_hashv_0 ^= _hj_j_1 >> 15 as libc::c_int;
            _hj_key_1 = _hj_key_1.offset(12 as libc::c_int as isize);
            _hj_k_1 = _hj_k_1.wrapping_sub(12 as libc::c_uint);
        }
        _ha_hashv_0 = _ha_hashv_0.wrapping_add(_uthash_hastr_keylen_0);
        let mut current_block_373: u64;
        match _hj_k_1 {
            11 => {
                _ha_hashv_0 = _ha_hashv_0
                    .wrapping_add(
                        (*_hj_key_1.offset(10 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    );
                current_block_373 = 12585334147754424642;
            }
            10 => {
                current_block_373 = 12585334147754424642;
            }
            9 => {
                current_block_373 = 7772394513415797554;
            }
            8 => {
                current_block_373 = 5263940496478054477;
            }
            7 => {
                current_block_373 = 4284139249984766135;
            }
            6 => {
                current_block_373 = 6813479702920870218;
            }
            5 => {
                current_block_373 = 79938734078589665;
            }
            4 => {
                current_block_373 = 2723154560307166042;
            }
            3 => {
                current_block_373 = 5545726913395618258;
            }
            2 => {
                current_block_373 = 5374700192127402901;
            }
            1 => {
                current_block_373 = 888675578849847897;
            }
            _ => {
                current_block_373 = 9200713032295880585;
            }
        }
        match current_block_373 {
            12585334147754424642 => {
                _ha_hashv_0 = _ha_hashv_0
                    .wrapping_add(
                        (*_hj_key_1.offset(9 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    );
                current_block_373 = 7772394513415797554;
            }
            _ => {}
        }
        match current_block_373 {
            7772394513415797554 => {
                _ha_hashv_0 = _ha_hashv_0
                    .wrapping_add(
                        (*_hj_key_1.offset(8 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    );
                current_block_373 = 5263940496478054477;
            }
            _ => {}
        }
        match current_block_373 {
            5263940496478054477 => {
                _hj_j_1 = _hj_j_1
                    .wrapping_add(
                        (*_hj_key_1.offset(7 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    );
                current_block_373 = 4284139249984766135;
            }
            _ => {}
        }
        match current_block_373 {
            4284139249984766135 => {
                _hj_j_1 = _hj_j_1
                    .wrapping_add(
                        (*_hj_key_1.offset(6 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    );
                current_block_373 = 6813479702920870218;
            }
            _ => {}
        }
        match current_block_373 {
            6813479702920870218 => {
                _hj_j_1 = _hj_j_1
                    .wrapping_add(
                        (*_hj_key_1.offset(5 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    );
                current_block_373 = 79938734078589665;
            }
            _ => {}
        }
        match current_block_373 {
            79938734078589665 => {
                _hj_j_1 = _hj_j_1
                    .wrapping_add(
                        *_hj_key_1.offset(4 as libc::c_int as isize) as libc::c_uint,
                    );
                current_block_373 = 2723154560307166042;
            }
            _ => {}
        }
        match current_block_373 {
            2723154560307166042 => {
                _hj_i_1 = _hj_i_1
                    .wrapping_add(
                        (*_hj_key_1.offset(3 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    );
                current_block_373 = 5545726913395618258;
            }
            _ => {}
        }
        match current_block_373 {
            5545726913395618258 => {
                _hj_i_1 = _hj_i_1
                    .wrapping_add(
                        (*_hj_key_1.offset(2 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    );
                current_block_373 = 5374700192127402901;
            }
            _ => {}
        }
        match current_block_373 {
            5374700192127402901 => {
                _hj_i_1 = _hj_i_1
                    .wrapping_add(
                        (*_hj_key_1.offset(1 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    );
                current_block_373 = 888675578849847897;
            }
            _ => {}
        }
        match current_block_373 {
            888675578849847897 => {
                _hj_i_1 = _hj_i_1
                    .wrapping_add(
                        *_hj_key_1.offset(0 as libc::c_int as isize) as libc::c_uint,
                    );
            }
            _ => {}
        }
        _hj_i_1 = _hj_i_1.wrapping_sub(_hj_j_1);
        _hj_i_1 = _hj_i_1.wrapping_sub(_ha_hashv_0);
        _hj_i_1 ^= _ha_hashv_0 >> 13 as libc::c_int;
        _hj_j_1 = _hj_j_1.wrapping_sub(_ha_hashv_0);
        _hj_j_1 = _hj_j_1.wrapping_sub(_hj_i_1);
        _hj_j_1 ^= _hj_i_1 << 8 as libc::c_int;
        _ha_hashv_0 = _ha_hashv_0.wrapping_sub(_hj_i_1);
        _ha_hashv_0 = _ha_hashv_0.wrapping_sub(_hj_j_1);
        _ha_hashv_0 ^= _hj_j_1 >> 13 as libc::c_int;
        _hj_i_1 = _hj_i_1.wrapping_sub(_hj_j_1);
        _hj_i_1 = _hj_i_1.wrapping_sub(_ha_hashv_0);
        _hj_i_1 ^= _ha_hashv_0 >> 12 as libc::c_int;
        _hj_j_1 = _hj_j_1.wrapping_sub(_ha_hashv_0);
        _hj_j_1 = _hj_j_1.wrapping_sub(_hj_i_1);
        _hj_j_1 ^= _hj_i_1 << 16 as libc::c_int;
        _ha_hashv_0 = _ha_hashv_0.wrapping_sub(_hj_i_1);
        _ha_hashv_0 = _ha_hashv_0.wrapping_sub(_hj_j_1);
        _ha_hashv_0 ^= _hj_j_1 >> 5 as libc::c_int;
        _hj_i_1 = _hj_i_1.wrapping_sub(_hj_j_1);
        _hj_i_1 = _hj_i_1.wrapping_sub(_ha_hashv_0);
        _hj_i_1 ^= _ha_hashv_0 >> 3 as libc::c_int;
        _hj_j_1 = _hj_j_1.wrapping_sub(_ha_hashv_0);
        _hj_j_1 = _hj_j_1.wrapping_sub(_hj_i_1);
        _hj_j_1 ^= _hj_i_1 << 10 as libc::c_int;
        _ha_hashv_0 = _ha_hashv_0.wrapping_sub(_hj_i_1);
        _ha_hashv_0 = _ha_hashv_0.wrapping_sub(_hj_j_1);
        _ha_hashv_0 ^= _hj_j_1 >> 15 as libc::c_int;
        (*var).hh.hashv = _ha_hashv_0;
        (*var)
            .hh
            .key = &mut *((*var).name).as_mut_ptr().offset(0 as libc::c_int as isize)
            as *mut libc::c_char as *mut libc::c_void;
        (*var).hh.keylen = _uthash_hastr_keylen_0;
        if ((*varpeek).varmap).is_null() {
            (*var).hh.next = 0 as *mut libc::c_void;
            (*var).hh.prev = 0 as *mut libc::c_void;
            (*var)
                .hh
                .tbl = malloc(::std::mem::size_of::<UT_hash_table>() as libc::c_ulong)
                as *mut UT_hash_table;
            if ((*var).hh.tbl).is_null() {
                exit(-(1 as libc::c_int));
            } else {
                memset(
                    (*var).hh.tbl as *mut libc::c_void,
                    '\0' as i32,
                    ::std::mem::size_of::<UT_hash_table>() as libc::c_ulong,
                );
                (*(*var).hh.tbl).tail = &mut (*var).hh;
                (*(*var).hh.tbl).num_buckets = 32 as libc::c_uint;
                (*(*var).hh.tbl).log2_num_buckets = 5 as libc::c_uint;
                (*(*var).hh.tbl)
                    .hho = (&mut (*var).hh as *mut UT_hash_handle as *mut libc::c_char)
                    .offset_from(var as *mut libc::c_char) as libc::c_long;
                (*(*var).hh.tbl)
                    .buckets = malloc(
                    (32 as libc::c_uint as libc::c_ulong)
                        .wrapping_mul(
                            ::std::mem::size_of::<UT_hash_bucket>() as libc::c_ulong,
                        ),
                ) as *mut UT_hash_bucket;
                (*(*var).hh.tbl).signature = 0xa0111fe1 as libc::c_uint;
                if ((*(*var).hh.tbl).buckets).is_null() {
                    exit(-(1 as libc::c_int));
                } else {
                    memset(
                        (*(*var).hh.tbl).buckets as *mut libc::c_void,
                        '\0' as i32,
                        (32 as libc::c_uint as libc::c_ulong)
                            .wrapping_mul(
                                ::std::mem::size_of::<UT_hash_bucket>() as libc::c_ulong,
                            ),
                    );
                }
            }
            (*varpeek).varmap = var;
        } else {
            (*var).hh.tbl = (*(*varpeek).varmap).hh.tbl;
            (*var).hh.next = 0 as *mut libc::c_void;
            (*var)
                .hh
                .prev = ((*(*(*varpeek).varmap).hh.tbl).tail as *mut libc::c_char)
                .offset(-((*(*(*varpeek).varmap).hh.tbl).hho as isize))
                as *mut libc::c_void;
            (*(*(*(*varpeek).varmap).hh.tbl).tail).next = var as *mut libc::c_void;
            (*(*(*varpeek).varmap).hh.tbl).tail = &mut (*var).hh;
        }
        let mut _ha_bkt_0: libc::c_uint = 0;
        (*(*(*varpeek).varmap).hh.tbl)
            .num_items = ((*(*(*varpeek).varmap).hh.tbl).num_items).wrapping_add(1);
        (*(*(*varpeek).varmap).hh.tbl).num_items;
        _ha_bkt_0 = _ha_hashv_0
            & ((*(*(*varpeek).varmap).hh.tbl).num_buckets)
                .wrapping_sub(1 as libc::c_uint);
        let mut _ha_head_0: *mut UT_hash_bucket = &mut *((*(*(*varpeek).varmap).hh.tbl)
            .buckets)
            .offset(_ha_bkt_0 as isize) as *mut UT_hash_bucket;
        (*_ha_head_0).count = ((*_ha_head_0).count).wrapping_add(1);
        (*_ha_head_0).count;
        (*var).hh.hh_next = (*_ha_head_0).hh_head;
        (*var).hh.hh_prev = 0 as *mut UT_hash_handle;
        if !((*_ha_head_0).hh_head).is_null() {
            (*(*_ha_head_0).hh_head).hh_prev = &mut (*var).hh;
        }
        (*_ha_head_0).hh_head = &mut (*var).hh;
        if (*_ha_head_0).count
            >= ((*_ha_head_0).expand_mult)
                .wrapping_add(1 as libc::c_uint)
                .wrapping_mul(10 as libc::c_uint) && (*(*var).hh.tbl).noexpand == 0
        {
            let mut _he_bkt_0: libc::c_uint = 0;
            let mut _he_bkt_i_0: libc::c_uint = 0;
            let mut _he_thh_0: *mut UT_hash_handle = 0 as *mut UT_hash_handle;
            let mut _he_hh_nxt_0: *mut UT_hash_handle = 0 as *mut UT_hash_handle;
            let mut _he_new_buckets_0: *mut UT_hash_bucket = 0 as *mut UT_hash_bucket;
            let mut _he_newbkt_0: *mut UT_hash_bucket = 0 as *mut UT_hash_bucket;
            _he_new_buckets_0 = malloc(
                (2 as libc::c_ulong)
                    .wrapping_mul((*(*var).hh.tbl).num_buckets as libc::c_ulong)
                    .wrapping_mul(
                        ::std::mem::size_of::<UT_hash_bucket>() as libc::c_ulong,
                    ),
            ) as *mut UT_hash_bucket;
            if _he_new_buckets_0.is_null() {
                exit(-(1 as libc::c_int));
            } else {
                memset(
                    _he_new_buckets_0 as *mut libc::c_void,
                    '\0' as i32,
                    (2 as libc::c_ulong)
                        .wrapping_mul((*(*var).hh.tbl).num_buckets as libc::c_ulong)
                        .wrapping_mul(
                            ::std::mem::size_of::<UT_hash_bucket>() as libc::c_ulong,
                        ),
                );
                (*(*var).hh.tbl)
                    .ideal_chain_maxlen = ((*(*var).hh.tbl).num_items
                    >> ((*(*var).hh.tbl).log2_num_buckets)
                        .wrapping_add(1 as libc::c_uint))
                    .wrapping_add(
                        (if (*(*var).hh.tbl).num_items
                            & ((*(*var).hh.tbl).num_buckets)
                                .wrapping_mul(2 as libc::c_uint)
                                .wrapping_sub(1 as libc::c_uint) != 0 as libc::c_uint
                        {
                            1 as libc::c_uint
                        } else {
                            0 as libc::c_uint
                        }),
                    );
                (*(*var).hh.tbl).nonideal_items = 0 as libc::c_int as libc::c_uint;
                _he_bkt_i_0 = 0 as libc::c_int as libc::c_uint;
                while _he_bkt_i_0 < (*(*var).hh.tbl).num_buckets {
                    _he_thh_0 = (*((*(*var).hh.tbl).buckets)
                        .offset(_he_bkt_i_0 as isize))
                        .hh_head;
                    while !_he_thh_0.is_null() {
                        _he_hh_nxt_0 = (*_he_thh_0).hh_next;
                        _he_bkt_0 = (*_he_thh_0).hashv
                            & ((*(*var).hh.tbl).num_buckets)
                                .wrapping_mul(2 as libc::c_uint)
                                .wrapping_sub(1 as libc::c_uint);
                        _he_newbkt_0 = &mut *_he_new_buckets_0.offset(_he_bkt_0 as isize)
                            as *mut UT_hash_bucket;
                        (*_he_newbkt_0).count = ((*_he_newbkt_0).count).wrapping_add(1);
                        if (*_he_newbkt_0).count > (*(*var).hh.tbl).ideal_chain_maxlen {
                            (*(*var).hh.tbl)
                                .nonideal_items = ((*(*var).hh.tbl).nonideal_items)
                                .wrapping_add(1);
                            (*(*var).hh.tbl).nonideal_items;
                            (*_he_newbkt_0)
                                .expand_mult = ((*_he_newbkt_0).count)
                                .wrapping_div((*(*var).hh.tbl).ideal_chain_maxlen);
                        }
                        (*_he_thh_0).hh_prev = 0 as *mut UT_hash_handle;
                        (*_he_thh_0).hh_next = (*_he_newbkt_0).hh_head;
                        if !((*_he_newbkt_0).hh_head).is_null() {
                            (*(*_he_newbkt_0).hh_head).hh_prev = _he_thh_0;
                        }
                        (*_he_newbkt_0).hh_head = _he_thh_0;
                        _he_thh_0 = _he_hh_nxt_0;
                    }
                    _he_bkt_i_0 = _he_bkt_i_0.wrapping_add(1);
                    _he_bkt_i_0;
                }
                free((*(*var).hh.tbl).buckets as *mut libc::c_void);
                (*(*var).hh.tbl)
                    .num_buckets = ((*(*var).hh.tbl).num_buckets)
                    .wrapping_mul(2 as libc::c_uint);
                (*(*var).hh.tbl)
                    .log2_num_buckets = ((*(*var).hh.tbl).log2_num_buckets)
                    .wrapping_add(1);
                (*(*var).hh.tbl).log2_num_buckets;
                (*(*var).hh.tbl).buckets = _he_new_buckets_0;
                (*(*var).hh.tbl)
                    .ineff_expands = if (*(*var).hh.tbl).nonideal_items
                    > (*(*var).hh.tbl).num_items >> 1 as libc::c_int
                {
                    ((*(*var).hh.tbl).ineff_expands).wrapping_add(1 as libc::c_uint)
                } else {
                    0 as libc::c_uint
                };
                if (*(*var).hh.tbl).ineff_expands > 1 as libc::c_uint {
                    (*(*var).hh.tbl).noexpand = 1 as libc::c_int as libc::c_uint;
                }
            }
        }
        lineno = lineno.wrapping_add(1);
        lineno;
    }
}
unsafe extern "C" fn glopeek_add(mut glospec: *mut libc::c_char) {
    let mut dot: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut gloname: *mut libc::c_char = 0 as *mut libc::c_char;
    let mut gentry: *mut glopeek_entry_t = 0 as *mut glopeek_entry_t;
    dot = strchr(glospec, '.' as i32);
    if dot.is_null() {
        log_error(
            b"glopeek_add: Malformed glospec: %s\n\n\0" as *const u8
                as *const libc::c_char,
            glospec,
        );
        usage(stderr, 1 as libc::c_int);
    }
    let mut _uthash_hfstr_keylen: libc::c_uint = strlen(glospec) as libc::c_uint;
    let mut _hf_hashv: libc::c_uint = 0;
    let mut _hj_i: libc::c_uint = 0;
    let mut _hj_j: libc::c_uint = 0;
    let mut _hj_k: libc::c_uint = 0;
    let mut _hj_key: *const libc::c_uchar = glospec as *const libc::c_uchar;
    _hf_hashv = 0xfeedbeef as libc::c_uint;
    _hj_j = 0x9e3779b9 as libc::c_uint;
    _hj_i = _hj_j;
    _hj_k = _uthash_hfstr_keylen;
    while _hj_k >= 12 as libc::c_uint {
        _hj_i = _hj_i
            .wrapping_add(
                (*_hj_key.offset(0 as libc::c_int as isize) as libc::c_uint)
                    .wrapping_add(
                        (*_hj_key.offset(1 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(2 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(3 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    ),
            );
        _hj_j = _hj_j
            .wrapping_add(
                (*_hj_key.offset(4 as libc::c_int as isize) as libc::c_uint)
                    .wrapping_add(
                        (*_hj_key.offset(5 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(6 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(7 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    ),
            );
        _hf_hashv = _hf_hashv
            .wrapping_add(
                (*_hj_key.offset(8 as libc::c_int as isize) as libc::c_uint)
                    .wrapping_add(
                        (*_hj_key.offset(9 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(10 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(11 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    ),
            );
        _hj_i = _hj_i.wrapping_sub(_hj_j);
        _hj_i = _hj_i.wrapping_sub(_hf_hashv);
        _hj_i ^= _hf_hashv >> 13 as libc::c_int;
        _hj_j = _hj_j.wrapping_sub(_hf_hashv);
        _hj_j = _hj_j.wrapping_sub(_hj_i);
        _hj_j ^= _hj_i << 8 as libc::c_int;
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
        _hf_hashv ^= _hj_j >> 13 as libc::c_int;
        _hj_i = _hj_i.wrapping_sub(_hj_j);
        _hj_i = _hj_i.wrapping_sub(_hf_hashv);
        _hj_i ^= _hf_hashv >> 12 as libc::c_int;
        _hj_j = _hj_j.wrapping_sub(_hf_hashv);
        _hj_j = _hj_j.wrapping_sub(_hj_i);
        _hj_j ^= _hj_i << 16 as libc::c_int;
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
        _hf_hashv ^= _hj_j >> 5 as libc::c_int;
        _hj_i = _hj_i.wrapping_sub(_hj_j);
        _hj_i = _hj_i.wrapping_sub(_hf_hashv);
        _hj_i ^= _hf_hashv >> 3 as libc::c_int;
        _hj_j = _hj_j.wrapping_sub(_hf_hashv);
        _hj_j = _hj_j.wrapping_sub(_hj_i);
        _hj_j ^= _hj_i << 10 as libc::c_int;
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
        _hf_hashv ^= _hj_j >> 15 as libc::c_int;
        _hj_key = _hj_key.offset(12 as libc::c_int as isize);
        _hj_k = _hj_k.wrapping_sub(12 as libc::c_uint);
    }
    _hf_hashv = _hf_hashv.wrapping_add(_uthash_hfstr_keylen);
    let mut current_block_55: u64;
    match _hj_k {
        11 => {
            _hf_hashv = _hf_hashv
                .wrapping_add(
                    (*_hj_key.offset(10 as libc::c_int as isize) as libc::c_uint)
                        << 24 as libc::c_int,
                );
            current_block_55 = 11312965635359668183;
        }
        10 => {
            current_block_55 = 11312965635359668183;
        }
        9 => {
            current_block_55 = 5348429844684892493;
        }
        8 => {
            current_block_55 = 5262830869248702744;
        }
        7 => {
            current_block_55 = 2253050418544901430;
        }
        6 => {
            current_block_55 = 1761066260157323536;
        }
        5 => {
            current_block_55 = 5841275722779251725;
        }
        4 => {
            current_block_55 = 16938596668611284671;
        }
        3 => {
            current_block_55 = 16068697818822689623;
        }
        2 => {
            current_block_55 = 16011765981537044615;
        }
        1 => {
            current_block_55 = 1691633311269844614;
        }
        _ => {
            current_block_55 = 10399321362245223758;
        }
    }
    match current_block_55 {
        11312965635359668183 => {
            _hf_hashv = _hf_hashv
                .wrapping_add(
                    (*_hj_key.offset(9 as libc::c_int as isize) as libc::c_uint)
                        << 16 as libc::c_int,
                );
            current_block_55 = 5348429844684892493;
        }
        _ => {}
    }
    match current_block_55 {
        5348429844684892493 => {
            _hf_hashv = _hf_hashv
                .wrapping_add(
                    (*_hj_key.offset(8 as libc::c_int as isize) as libc::c_uint)
                        << 8 as libc::c_int,
                );
            current_block_55 = 5262830869248702744;
        }
        _ => {}
    }
    match current_block_55 {
        5262830869248702744 => {
            _hj_j = _hj_j
                .wrapping_add(
                    (*_hj_key.offset(7 as libc::c_int as isize) as libc::c_uint)
                        << 24 as libc::c_int,
                );
            current_block_55 = 2253050418544901430;
        }
        _ => {}
    }
    match current_block_55 {
        2253050418544901430 => {
            _hj_j = _hj_j
                .wrapping_add(
                    (*_hj_key.offset(6 as libc::c_int as isize) as libc::c_uint)
                        << 16 as libc::c_int,
                );
            current_block_55 = 1761066260157323536;
        }
        _ => {}
    }
    match current_block_55 {
        1761066260157323536 => {
            _hj_j = _hj_j
                .wrapping_add(
                    (*_hj_key.offset(5 as libc::c_int as isize) as libc::c_uint)
                        << 8 as libc::c_int,
                );
            current_block_55 = 5841275722779251725;
        }
        _ => {}
    }
    match current_block_55 {
        5841275722779251725 => {
            _hj_j = _hj_j
                .wrapping_add(
                    *_hj_key.offset(4 as libc::c_int as isize) as libc::c_uint,
                );
            current_block_55 = 16938596668611284671;
        }
        _ => {}
    }
    match current_block_55 {
        16938596668611284671 => {
            _hj_i = _hj_i
                .wrapping_add(
                    (*_hj_key.offset(3 as libc::c_int as isize) as libc::c_uint)
                        << 24 as libc::c_int,
                );
            current_block_55 = 16068697818822689623;
        }
        _ => {}
    }
    match current_block_55 {
        16068697818822689623 => {
            _hj_i = _hj_i
                .wrapping_add(
                    (*_hj_key.offset(2 as libc::c_int as isize) as libc::c_uint)
                        << 16 as libc::c_int,
                );
            current_block_55 = 16011765981537044615;
        }
        _ => {}
    }
    match current_block_55 {
        16011765981537044615 => {
            _hj_i = _hj_i
                .wrapping_add(
                    (*_hj_key.offset(1 as libc::c_int as isize) as libc::c_uint)
                        << 8 as libc::c_int,
                );
            current_block_55 = 1691633311269844614;
        }
        _ => {}
    }
    match current_block_55 {
        1691633311269844614 => {
            _hj_i = _hj_i
                .wrapping_add(
                    *_hj_key.offset(0 as libc::c_int as isize) as libc::c_uint,
                );
        }
        _ => {}
    }
    _hj_i = _hj_i.wrapping_sub(_hj_j);
    _hj_i = _hj_i.wrapping_sub(_hf_hashv);
    _hj_i ^= _hf_hashv >> 13 as libc::c_int;
    _hj_j = _hj_j.wrapping_sub(_hf_hashv);
    _hj_j = _hj_j.wrapping_sub(_hj_i);
    _hj_j ^= _hj_i << 8 as libc::c_int;
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
    _hf_hashv ^= _hj_j >> 13 as libc::c_int;
    _hj_i = _hj_i.wrapping_sub(_hj_j);
    _hj_i = _hj_i.wrapping_sub(_hf_hashv);
    _hj_i ^= _hf_hashv >> 12 as libc::c_int;
    _hj_j = _hj_j.wrapping_sub(_hf_hashv);
    _hj_j = _hj_j.wrapping_sub(_hj_i);
    _hj_j ^= _hj_i << 16 as libc::c_int;
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
    _hf_hashv ^= _hj_j >> 5 as libc::c_int;
    _hj_i = _hj_i.wrapping_sub(_hj_j);
    _hj_i = _hj_i.wrapping_sub(_hf_hashv);
    _hj_i ^= _hf_hashv >> 3 as libc::c_int;
    _hj_j = _hj_j.wrapping_sub(_hf_hashv);
    _hj_j = _hj_j.wrapping_sub(_hj_i);
    _hj_j ^= _hj_i << 10 as libc::c_int;
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
    _hf_hashv ^= _hj_j >> 15 as libc::c_int;
    gentry = 0 as *mut glopeek_entry_t;
    if !glopeek_map.is_null() {
        let mut _hf_bkt: libc::c_uint = 0;
        _hf_bkt = _hf_hashv
            & ((*(*glopeek_map).hh.tbl).num_buckets).wrapping_sub(1 as libc::c_uint);
        if 1 as libc::c_int != 0 as libc::c_int {
            if !((*((*(*glopeek_map).hh.tbl).buckets).offset(_hf_bkt as isize)).hh_head)
                .is_null()
            {
                gentry = ((*((*(*glopeek_map).hh.tbl).buckets).offset(_hf_bkt as isize))
                    .hh_head as *mut libc::c_char)
                    .offset(-((*(*glopeek_map).hh.tbl).hho as isize))
                    as *mut libc::c_void as *mut glopeek_entry_t;
            } else {
                gentry = 0 as *mut glopeek_entry_t;
            }
            while !gentry.is_null() {
                if (*gentry).hh.hashv == _hf_hashv
                    && (*gentry).hh.keylen == _uthash_hfstr_keylen
                {
                    if memcmp(
                        (*gentry).hh.key,
                        glospec as *const libc::c_void,
                        _uthash_hfstr_keylen as libc::c_ulong,
                    ) == 0 as libc::c_int
                    {
                        break;
                    }
                }
                if !((*gentry).hh.hh_next).is_null() {
                    gentry = ((*gentry).hh.hh_next as *mut libc::c_char)
                        .offset(-((*(*glopeek_map).hh.tbl).hho as isize))
                        as *mut libc::c_void as *mut glopeek_entry_t;
                } else {
                    gentry = 0 as *mut glopeek_entry_t;
                }
            }
        }
    }
    if !gentry.is_null() {
        return;
    }
    if strncmp(
        b"post.\0" as *const u8 as *const libc::c_char,
        glospec,
        dot.offset_from(glospec) as libc::c_long as libc::c_ulong,
    ) == 0 as libc::c_int
    {
        gloname = b"_POST\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
    } else if strncmp(
        b"get.\0" as *const u8 as *const libc::c_char,
        glospec,
        dot.offset_from(glospec) as libc::c_long as libc::c_ulong,
    ) == 0 as libc::c_int
    {
        gloname = b"_GET\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
    } else if strncmp(
        b"cookie.\0" as *const u8 as *const libc::c_char,
        glospec,
        dot.offset_from(glospec) as libc::c_long as libc::c_ulong,
    ) == 0 as libc::c_int
    {
        gloname = b"_COOKIE\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
    } else if strncmp(
        b"server.\0" as *const u8 as *const libc::c_char,
        glospec,
        dot.offset_from(glospec) as libc::c_long as libc::c_ulong,
    ) == 0 as libc::c_int
    {
        gloname = b"_SERVER\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
    } else if strncmp(
        b"files.\0" as *const u8 as *const libc::c_char,
        glospec,
        dot.offset_from(glospec) as libc::c_long as libc::c_ulong,
    ) == 0 as libc::c_int
    {
        gloname = b"_FILES\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
    } else if strncmp(
        b"globals.\0" as *const u8 as *const libc::c_char,
        glospec,
        dot.offset_from(glospec) as libc::c_long as libc::c_ulong,
    ) == 0 as libc::c_int
    {
        gloname = b"\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
    } else {
        log_error(
            b"glopeek_add: Invalid global: %s\n\n\0" as *const u8 as *const libc::c_char,
            glospec,
        );
        usage(stderr, 1 as libc::c_int);
    }
    gentry = calloc(
        1 as libc::c_int as libc::c_ulong,
        ::std::mem::size_of::<glopeek_entry_t>() as libc::c_ulong,
    ) as *mut glopeek_entry_t;
    snprintf(
        ((*gentry).key).as_mut_ptr(),
        ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
        b"%s\0" as *const u8 as *const libc::c_char,
        glospec,
    );
    snprintf(
        ((*gentry).gloname).as_mut_ptr(),
        ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
        b"%s\0" as *const u8 as *const libc::c_char,
        gloname,
    );
    snprintf(
        ((*gentry).varname).as_mut_ptr(),
        ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
        b"%s\0" as *const u8 as *const libc::c_char,
        dot.offset(1 as libc::c_int as isize),
    );
    let mut _uthash_hastr_keylen: libc::c_uint = strlen(((*gentry).key).as_mut_ptr())
        as libc::c_uint;
    let mut _ha_hashv: libc::c_uint = 0;
    let mut _hj_i_0: libc::c_uint = 0;
    let mut _hj_j_0: libc::c_uint = 0;
    let mut _hj_k_0: libc::c_uint = 0;
    let mut _hj_key_0: *const libc::c_uchar = &mut *((*gentry).key)
        .as_mut_ptr()
        .offset(0 as libc::c_int as isize) as *mut libc::c_char as *const libc::c_uchar;
    _ha_hashv = 0xfeedbeef as libc::c_uint;
    _hj_j_0 = 0x9e3779b9 as libc::c_uint;
    _hj_i_0 = _hj_j_0;
    _hj_k_0 = _uthash_hastr_keylen;
    while _hj_k_0 >= 12 as libc::c_uint {
        _hj_i_0 = _hj_i_0
            .wrapping_add(
                (*_hj_key_0.offset(0 as libc::c_int as isize) as libc::c_uint)
                    .wrapping_add(
                        (*_hj_key_0.offset(1 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key_0.offset(2 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key_0.offset(3 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    ),
            );
        _hj_j_0 = _hj_j_0
            .wrapping_add(
                (*_hj_key_0.offset(4 as libc::c_int as isize) as libc::c_uint)
                    .wrapping_add(
                        (*_hj_key_0.offset(5 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key_0.offset(6 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key_0.offset(7 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    ),
            );
        _ha_hashv = _ha_hashv
            .wrapping_add(
                (*_hj_key_0.offset(8 as libc::c_int as isize) as libc::c_uint)
                    .wrapping_add(
                        (*_hj_key_0.offset(9 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key_0.offset(10 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key_0.offset(11 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    ),
            );
        _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
        _hj_i_0 = _hj_i_0.wrapping_sub(_ha_hashv);
        _hj_i_0 ^= _ha_hashv >> 13 as libc::c_int;
        _hj_j_0 = _hj_j_0.wrapping_sub(_ha_hashv);
        _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
        _hj_j_0 ^= _hj_i_0 << 8 as libc::c_int;
        _ha_hashv = _ha_hashv.wrapping_sub(_hj_i_0);
        _ha_hashv = _ha_hashv.wrapping_sub(_hj_j_0);
        _ha_hashv ^= _hj_j_0 >> 13 as libc::c_int;
        _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
        _hj_i_0 = _hj_i_0.wrapping_sub(_ha_hashv);
        _hj_i_0 ^= _ha_hashv >> 12 as libc::c_int;
        _hj_j_0 = _hj_j_0.wrapping_sub(_ha_hashv);
        _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
        _hj_j_0 ^= _hj_i_0 << 16 as libc::c_int;
        _ha_hashv = _ha_hashv.wrapping_sub(_hj_i_0);
        _ha_hashv = _ha_hashv.wrapping_sub(_hj_j_0);
        _ha_hashv ^= _hj_j_0 >> 5 as libc::c_int;
        _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
        _hj_i_0 = _hj_i_0.wrapping_sub(_ha_hashv);
        _hj_i_0 ^= _ha_hashv >> 3 as libc::c_int;
        _hj_j_0 = _hj_j_0.wrapping_sub(_ha_hashv);
        _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
        _hj_j_0 ^= _hj_i_0 << 10 as libc::c_int;
        _ha_hashv = _ha_hashv.wrapping_sub(_hj_i_0);
        _ha_hashv = _ha_hashv.wrapping_sub(_hj_j_0);
        _ha_hashv ^= _hj_j_0 >> 15 as libc::c_int;
        _hj_key_0 = _hj_key_0.offset(12 as libc::c_int as isize);
        _hj_k_0 = _hj_k_0.wrapping_sub(12 as libc::c_uint);
    }
    _ha_hashv = _ha_hashv.wrapping_add(_uthash_hastr_keylen);
    let mut current_block_198: u64;
    match _hj_k_0 {
        11 => {
            _ha_hashv = _ha_hashv
                .wrapping_add(
                    (*_hj_key_0.offset(10 as libc::c_int as isize) as libc::c_uint)
                        << 24 as libc::c_int,
                );
            current_block_198 = 7749085508434103977;
        }
        10 => {
            current_block_198 = 7749085508434103977;
        }
        9 => {
            current_block_198 = 10624218562310859473;
        }
        8 => {
            current_block_198 = 12959166059103211355;
        }
        7 => {
            current_block_198 = 4035494076279309877;
        }
        6 => {
            current_block_198 = 382414147694604965;
        }
        5 => {
            current_block_198 = 14173881481625064113;
        }
        4 => {
            current_block_198 = 1984234163063783013;
        }
        3 => {
            current_block_198 = 5581955050266447687;
        }
        2 => {
            current_block_198 = 12196639097402872429;
        }
        1 => {
            current_block_198 = 16143405685376940578;
        }
        _ => {
            current_block_198 = 919396821984190499;
        }
    }
    match current_block_198 {
        7749085508434103977 => {
            _ha_hashv = _ha_hashv
                .wrapping_add(
                    (*_hj_key_0.offset(9 as libc::c_int as isize) as libc::c_uint)
                        << 16 as libc::c_int,
                );
            current_block_198 = 10624218562310859473;
        }
        _ => {}
    }
    match current_block_198 {
        10624218562310859473 => {
            _ha_hashv = _ha_hashv
                .wrapping_add(
                    (*_hj_key_0.offset(8 as libc::c_int as isize) as libc::c_uint)
                        << 8 as libc::c_int,
                );
            current_block_198 = 12959166059103211355;
        }
        _ => {}
    }
    match current_block_198 {
        12959166059103211355 => {
            _hj_j_0 = _hj_j_0
                .wrapping_add(
                    (*_hj_key_0.offset(7 as libc::c_int as isize) as libc::c_uint)
                        << 24 as libc::c_int,
                );
            current_block_198 = 4035494076279309877;
        }
        _ => {}
    }
    match current_block_198 {
        4035494076279309877 => {
            _hj_j_0 = _hj_j_0
                .wrapping_add(
                    (*_hj_key_0.offset(6 as libc::c_int as isize) as libc::c_uint)
                        << 16 as libc::c_int,
                );
            current_block_198 = 382414147694604965;
        }
        _ => {}
    }
    match current_block_198 {
        382414147694604965 => {
            _hj_j_0 = _hj_j_0
                .wrapping_add(
                    (*_hj_key_0.offset(5 as libc::c_int as isize) as libc::c_uint)
                        << 8 as libc::c_int,
                );
            current_block_198 = 14173881481625064113;
        }
        _ => {}
    }
    match current_block_198 {
        14173881481625064113 => {
            _hj_j_0 = _hj_j_0
                .wrapping_add(
                    *_hj_key_0.offset(4 as libc::c_int as isize) as libc::c_uint,
                );
            current_block_198 = 1984234163063783013;
        }
        _ => {}
    }
    match current_block_198 {
        1984234163063783013 => {
            _hj_i_0 = _hj_i_0
                .wrapping_add(
                    (*_hj_key_0.offset(3 as libc::c_int as isize) as libc::c_uint)
                        << 24 as libc::c_int,
                );
            current_block_198 = 5581955050266447687;
        }
        _ => {}
    }
    match current_block_198 {
        5581955050266447687 => {
            _hj_i_0 = _hj_i_0
                .wrapping_add(
                    (*_hj_key_0.offset(2 as libc::c_int as isize) as libc::c_uint)
                        << 16 as libc::c_int,
                );
            current_block_198 = 12196639097402872429;
        }
        _ => {}
    }
    match current_block_198 {
        12196639097402872429 => {
            _hj_i_0 = _hj_i_0
                .wrapping_add(
                    (*_hj_key_0.offset(1 as libc::c_int as isize) as libc::c_uint)
                        << 8 as libc::c_int,
                );
            current_block_198 = 16143405685376940578;
        }
        _ => {}
    }
    match current_block_198 {
        16143405685376940578 => {
            _hj_i_0 = _hj_i_0
                .wrapping_add(
                    *_hj_key_0.offset(0 as libc::c_int as isize) as libc::c_uint,
                );
        }
        _ => {}
    }
    _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
    _hj_i_0 = _hj_i_0.wrapping_sub(_ha_hashv);
    _hj_i_0 ^= _ha_hashv >> 13 as libc::c_int;
    _hj_j_0 = _hj_j_0.wrapping_sub(_ha_hashv);
    _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
    _hj_j_0 ^= _hj_i_0 << 8 as libc::c_int;
    _ha_hashv = _ha_hashv.wrapping_sub(_hj_i_0);
    _ha_hashv = _ha_hashv.wrapping_sub(_hj_j_0);
    _ha_hashv ^= _hj_j_0 >> 13 as libc::c_int;
    _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
    _hj_i_0 = _hj_i_0.wrapping_sub(_ha_hashv);
    _hj_i_0 ^= _ha_hashv >> 12 as libc::c_int;
    _hj_j_0 = _hj_j_0.wrapping_sub(_ha_hashv);
    _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
    _hj_j_0 ^= _hj_i_0 << 16 as libc::c_int;
    _ha_hashv = _ha_hashv.wrapping_sub(_hj_i_0);
    _ha_hashv = _ha_hashv.wrapping_sub(_hj_j_0);
    _ha_hashv ^= _hj_j_0 >> 5 as libc::c_int;
    _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
    _hj_i_0 = _hj_i_0.wrapping_sub(_ha_hashv);
    _hj_i_0 ^= _ha_hashv >> 3 as libc::c_int;
    _hj_j_0 = _hj_j_0.wrapping_sub(_ha_hashv);
    _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
    _hj_j_0 ^= _hj_i_0 << 10 as libc::c_int;
    _ha_hashv = _ha_hashv.wrapping_sub(_hj_i_0);
    _ha_hashv = _ha_hashv.wrapping_sub(_hj_j_0);
    _ha_hashv ^= _hj_j_0 >> 15 as libc::c_int;
    (*gentry).hh.hashv = _ha_hashv;
    (*gentry)
        .hh
        .key = &mut *((*gentry).key).as_mut_ptr().offset(0 as libc::c_int as isize)
        as *mut libc::c_char as *mut libc::c_void;
    (*gentry).hh.keylen = _uthash_hastr_keylen;
    if glopeek_map.is_null() {
        (*gentry).hh.next = 0 as *mut libc::c_void;
        (*gentry).hh.prev = 0 as *mut libc::c_void;
        (*gentry)
            .hh
            .tbl = malloc(::std::mem::size_of::<UT_hash_table>() as libc::c_ulong)
            as *mut UT_hash_table;
        if ((*gentry).hh.tbl).is_null() {
            exit(-(1 as libc::c_int));
        } else {
            memset(
                (*gentry).hh.tbl as *mut libc::c_void,
                '\0' as i32,
                ::std::mem::size_of::<UT_hash_table>() as libc::c_ulong,
            );
            (*(*gentry).hh.tbl).tail = &mut (*gentry).hh;
            (*(*gentry).hh.tbl).num_buckets = 32 as libc::c_uint;
            (*(*gentry).hh.tbl).log2_num_buckets = 5 as libc::c_uint;
            (*(*gentry).hh.tbl)
                .hho = (&mut (*gentry).hh as *mut UT_hash_handle as *mut libc::c_char)
                .offset_from(gentry as *mut libc::c_char) as libc::c_long;
            (*(*gentry).hh.tbl)
                .buckets = malloc(
                (32 as libc::c_uint as libc::c_ulong)
                    .wrapping_mul(
                        ::std::mem::size_of::<UT_hash_bucket>() as libc::c_ulong,
                    ),
            ) as *mut UT_hash_bucket;
            (*(*gentry).hh.tbl).signature = 0xa0111fe1 as libc::c_uint;
            if ((*(*gentry).hh.tbl).buckets).is_null() {
                exit(-(1 as libc::c_int));
            } else {
                memset(
                    (*(*gentry).hh.tbl).buckets as *mut libc::c_void,
                    '\0' as i32,
                    (32 as libc::c_uint as libc::c_ulong)
                        .wrapping_mul(
                            ::std::mem::size_of::<UT_hash_bucket>() as libc::c_ulong,
                        ),
                );
            }
        }
        glopeek_map = gentry;
    } else {
        (*gentry).hh.tbl = (*glopeek_map).hh.tbl;
        (*gentry).hh.next = 0 as *mut libc::c_void;
        (*gentry)
            .hh
            .prev = ((*(*glopeek_map).hh.tbl).tail as *mut libc::c_char)
            .offset(-((*(*glopeek_map).hh.tbl).hho as isize)) as *mut libc::c_void;
        (*(*(*glopeek_map).hh.tbl).tail).next = gentry as *mut libc::c_void;
        (*(*glopeek_map).hh.tbl).tail = &mut (*gentry).hh;
    }
    let mut _ha_bkt: libc::c_uint = 0;
    (*(*glopeek_map).hh.tbl)
        .num_items = ((*(*glopeek_map).hh.tbl).num_items).wrapping_add(1);
    (*(*glopeek_map).hh.tbl).num_items;
    _ha_bkt = _ha_hashv
        & ((*(*glopeek_map).hh.tbl).num_buckets).wrapping_sub(1 as libc::c_uint);
    let mut _ha_head: *mut UT_hash_bucket = &mut *((*(*glopeek_map).hh.tbl).buckets)
        .offset(_ha_bkt as isize) as *mut UT_hash_bucket;
    (*_ha_head).count = ((*_ha_head).count).wrapping_add(1);
    (*_ha_head).count;
    (*gentry).hh.hh_next = (*_ha_head).hh_head;
    (*gentry).hh.hh_prev = 0 as *mut UT_hash_handle;
    if !((*_ha_head).hh_head).is_null() {
        (*(*_ha_head).hh_head).hh_prev = &mut (*gentry).hh;
    }
    (*_ha_head).hh_head = &mut (*gentry).hh;
    if (*_ha_head).count
        >= ((*_ha_head).expand_mult)
            .wrapping_add(1 as libc::c_uint)
            .wrapping_mul(10 as libc::c_uint) && (*(*gentry).hh.tbl).noexpand == 0
    {
        let mut _he_bkt: libc::c_uint = 0;
        let mut _he_bkt_i: libc::c_uint = 0;
        let mut _he_thh: *mut UT_hash_handle = 0 as *mut UT_hash_handle;
        let mut _he_hh_nxt: *mut UT_hash_handle = 0 as *mut UT_hash_handle;
        let mut _he_new_buckets: *mut UT_hash_bucket = 0 as *mut UT_hash_bucket;
        let mut _he_newbkt: *mut UT_hash_bucket = 0 as *mut UT_hash_bucket;
        _he_new_buckets = malloc(
            (2 as libc::c_ulong)
                .wrapping_mul((*(*gentry).hh.tbl).num_buckets as libc::c_ulong)
                .wrapping_mul(::std::mem::size_of::<UT_hash_bucket>() as libc::c_ulong),
        ) as *mut UT_hash_bucket;
        if _he_new_buckets.is_null() {
            exit(-(1 as libc::c_int));
        } else {
            memset(
                _he_new_buckets as *mut libc::c_void,
                '\0' as i32,
                (2 as libc::c_ulong)
                    .wrapping_mul((*(*gentry).hh.tbl).num_buckets as libc::c_ulong)
                    .wrapping_mul(
                        ::std::mem::size_of::<UT_hash_bucket>() as libc::c_ulong,
                    ),
            );
            (*(*gentry).hh.tbl)
                .ideal_chain_maxlen = ((*(*gentry).hh.tbl).num_items
                >> ((*(*gentry).hh.tbl).log2_num_buckets)
                    .wrapping_add(1 as libc::c_uint))
                .wrapping_add(
                    (if (*(*gentry).hh.tbl).num_items
                        & ((*(*gentry).hh.tbl).num_buckets)
                            .wrapping_mul(2 as libc::c_uint)
                            .wrapping_sub(1 as libc::c_uint) != 0 as libc::c_uint
                    {
                        1 as libc::c_uint
                    } else {
                        0 as libc::c_uint
                    }),
                );
            (*(*gentry).hh.tbl).nonideal_items = 0 as libc::c_int as libc::c_uint;
            _he_bkt_i = 0 as libc::c_int as libc::c_uint;
            while _he_bkt_i < (*(*gentry).hh.tbl).num_buckets {
                _he_thh = (*((*(*gentry).hh.tbl).buckets).offset(_he_bkt_i as isize))
                    .hh_head;
                while !_he_thh.is_null() {
                    _he_hh_nxt = (*_he_thh).hh_next;
                    _he_bkt = (*_he_thh).hashv
                        & ((*(*gentry).hh.tbl).num_buckets)
                            .wrapping_mul(2 as libc::c_uint)
                            .wrapping_sub(1 as libc::c_uint);
                    _he_newbkt = &mut *_he_new_buckets.offset(_he_bkt as isize)
                        as *mut UT_hash_bucket;
                    (*_he_newbkt).count = ((*_he_newbkt).count).wrapping_add(1);
                    if (*_he_newbkt).count > (*(*gentry).hh.tbl).ideal_chain_maxlen {
                        (*(*gentry).hh.tbl)
                            .nonideal_items = ((*(*gentry).hh.tbl).nonideal_items)
                            .wrapping_add(1);
                        (*(*gentry).hh.tbl).nonideal_items;
                        (*_he_newbkt)
                            .expand_mult = ((*_he_newbkt).count)
                            .wrapping_div((*(*gentry).hh.tbl).ideal_chain_maxlen);
                    }
                    (*_he_thh).hh_prev = 0 as *mut UT_hash_handle;
                    (*_he_thh).hh_next = (*_he_newbkt).hh_head;
                    if !((*_he_newbkt).hh_head).is_null() {
                        (*(*_he_newbkt).hh_head).hh_prev = _he_thh;
                    }
                    (*_he_newbkt).hh_head = _he_thh;
                    _he_thh = _he_hh_nxt;
                }
                _he_bkt_i = _he_bkt_i.wrapping_add(1);
                _he_bkt_i;
            }
            free((*(*gentry).hh.tbl).buckets as *mut libc::c_void);
            (*(*gentry).hh.tbl)
                .num_buckets = ((*(*gentry).hh.tbl).num_buckets)
                .wrapping_mul(2 as libc::c_uint);
            (*(*gentry).hh.tbl)
                .log2_num_buckets = ((*(*gentry).hh.tbl).log2_num_buckets)
                .wrapping_add(1);
            (*(*gentry).hh.tbl).log2_num_buckets;
            (*(*gentry).hh.tbl).buckets = _he_new_buckets;
            (*(*gentry).hh.tbl)
                .ineff_expands = if (*(*gentry).hh.tbl).nonideal_items
                > (*(*gentry).hh.tbl).num_items >> 1 as libc::c_int
            {
                ((*(*gentry).hh.tbl).ineff_expands).wrapping_add(1 as libc::c_uint)
            } else {
                0 as libc::c_uint
            };
            if (*(*gentry).hh.tbl).ineff_expands > 1 as libc::c_uint {
                (*(*gentry).hh.tbl).noexpand = 1 as libc::c_int as libc::c_uint;
            }
        }
    }
}
unsafe extern "C" fn copy_proc_mem(
    mut pid: pid_t,
    mut what: *const libc::c_char,
    mut raddr: *mut libc::c_void,
    mut laddr: *mut libc::c_void,
    mut size: size_t,
) -> libc::c_int {
    let mut local: [iovec; 1] = [iovec {
        iov_base: 0 as *mut libc::c_void,
        iov_len: 0,
    }; 1];
    let mut remote: [iovec; 1] = [iovec {
        iov_base: 0 as *mut libc::c_void,
        iov_len: 0,
    }; 1];
    if raddr.is_null() {
        log_error(
            b"copy_proc_mem: Not copying %s; raddr is NULL\n\0" as *const u8
                as *const libc::c_char,
            what,
        );
        return 1 as libc::c_int;
    }
    local[0 as libc::c_int as usize].iov_base = laddr;
    local[0 as libc::c_int as usize].iov_len = size;
    remote[0 as libc::c_int as usize].iov_base = raddr;
    remote[0 as libc::c_int as usize].iov_len = size;
    if process_vm_readv(
        pid,
        local.as_mut_ptr(),
        1 as libc::c_int as libc::c_ulong,
        remote.as_mut_ptr(),
        1 as libc::c_int as libc::c_ulong,
        0 as libc::c_int as libc::c_ulong,
    ) == -(1 as libc::c_int) as libc::c_long
    {
        if *__errno_location() == 3 as libc::c_int {
            perror(b"process_vm_readv\0" as *const u8 as *const libc::c_char);
            return 1 as libc::c_int | 2 as libc::c_int;
        }
        log_error(
            b"copy_proc_mem: Failed to copy %s; err=%s raddr=%p size=%lu\n\0"
                as *const u8 as *const libc::c_char,
            what,
            strerror(*__errno_location()),
            raddr,
            size,
        );
        return 1 as libc::c_int;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn get_php_version(mut target: *mut trace_target_t) -> libc::c_int {
    let mut basic_functions_module: _zend_module_entry = _zend_module_entry {
        pad0: [0; 88],
        version: 0 as *const libc::c_char,
    };
    let mut version_cmd: [libc::c_char; 1024] = [0; 1024];
    let mut phpv: [libc::c_char; 4] = [0; 4];
    let mut pid: pid_t = 0;
    let mut pcmd: *mut FILE = 0 as *mut FILE;
    pid = (*target).pid;
    phpv[0 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
    if (*target).basic_functions_module_addr != 0 {
        if copy_proc_mem(
            pid,
            b"basic_functions_module\0" as *const u8 as *const libc::c_char,
            (*target).basic_functions_module_addr as *mut libc::c_void,
            &mut basic_functions_module as *mut _zend_module_entry as *mut libc::c_void,
            ::std::mem::size_of::<_zend_module_entry>() as libc::c_ulong,
        ) == 0 as libc::c_int
        {
            copy_proc_mem(
                pid,
                b"basic_functions_module.version\0" as *const u8 as *const libc::c_char,
                basic_functions_module.version as *mut libc::c_void,
                phpv.as_mut_ptr() as *mut libc::c_void,
                3 as libc::c_int as size_t,
            );
        }
    }
    if phpv[0 as libc::c_int as usize] as libc::c_int == '\0' as i32 {
        let mut n: libc::c_int = snprintf(
            version_cmd.as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 1024]>() as libc::c_ulong,
            b"{ echo -n /proc/%d/root/;   awk -ve=1 '/libphp[78]?/{print $NF; e=0; exit} END{exit e}' /proc/%d/maps   || readlink /proc/%d/exe; } | { xargs stat --printf=%%n 2>/dev/null || echo /proc/%d/exe; } | xargs strings | grep -Po '(?<=X-Powered-By: PHP/)\\d\\.\\d'\0"
                as *const u8 as *const libc::c_char,
            pid,
            pid,
            pid,
            pid,
        );
        if n as size_t
            >= (::std::mem::size_of::<[libc::c_char; 1024]>() as libc::c_ulong)
                .wrapping_sub(1 as libc::c_int as libc::c_ulong)
        {
            log_error(
                b"get_php_version: snprintf overflow\n\0" as *const u8
                    as *const libc::c_char,
            );
            return 1 as libc::c_int;
        }
        pcmd = popen(
            version_cmd.as_mut_ptr(),
            b"r\0" as *const u8 as *const libc::c_char,
        );
        if pcmd.is_null() {
            perror(b"get_php_version: popen\0" as *const u8 as *const libc::c_char);
            return 1 as libc::c_int;
        } else if fread(
            &mut phpv as *mut [libc::c_char; 4] as *mut libc::c_void,
            ::std::mem::size_of::<libc::c_char>() as libc::c_ulong,
            3 as libc::c_int as libc::c_ulong,
            pcmd,
        ) != 3 as libc::c_int as libc::c_ulong
        {
            log_error(
                b"get_php_version: Could not detect PHP version\n\0" as *const u8
                    as *const libc::c_char,
            );
            pclose(pcmd);
            return 1 as libc::c_int;
        }
        pclose(pcmd);
    }
    if strncmp(
        phpv.as_mut_ptr(),
        b"7.0\0" as *const u8 as *const libc::c_char,
        3 as libc::c_int as libc::c_ulong,
    ) == 0 as libc::c_int
    {
        opt_phpv = b"70\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
    } else if strncmp(
        phpv.as_mut_ptr(),
        b"7.1\0" as *const u8 as *const libc::c_char,
        3 as libc::c_int as libc::c_ulong,
    ) == 0 as libc::c_int
    {
        opt_phpv = b"71\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
    } else if strncmp(
        phpv.as_mut_ptr(),
        b"7.2\0" as *const u8 as *const libc::c_char,
        3 as libc::c_int as libc::c_ulong,
    ) == 0 as libc::c_int
    {
        opt_phpv = b"72\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
    } else if strncmp(
        phpv.as_mut_ptr(),
        b"7.3\0" as *const u8 as *const libc::c_char,
        3 as libc::c_int as libc::c_ulong,
    ) == 0 as libc::c_int
    {
        opt_phpv = b"73\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
    } else if strncmp(
        phpv.as_mut_ptr(),
        b"7.4\0" as *const u8 as *const libc::c_char,
        3 as libc::c_int as libc::c_ulong,
    ) == 0 as libc::c_int
    {
        opt_phpv = b"74\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
    } else if strncmp(
        phpv.as_mut_ptr(),
        b"8.0\0" as *const u8 as *const libc::c_char,
        3 as libc::c_int as libc::c_ulong,
    ) == 0 as libc::c_int
    {
        opt_phpv = b"80\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
    } else if strncmp(
        phpv.as_mut_ptr(),
        b"8.1\0" as *const u8 as *const libc::c_char,
        3 as libc::c_int as libc::c_ulong,
    ) == 0 as libc::c_int
    {
        opt_phpv = b"81\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
    } else if strncmp(
        phpv.as_mut_ptr(),
        b"8.2\0" as *const u8 as *const libc::c_char,
        3 as libc::c_int as libc::c_ulong,
    ) == 0 as libc::c_int
    {
        opt_phpv = b"82\0" as *const u8 as *const libc::c_char as *mut libc::c_char;
    } else {
        log_error(
            b"get_php_version: Unrecognized PHP version (%s)\n\0" as *const u8
                as *const libc::c_char,
            phpv.as_mut_ptr(),
        );
        return 1 as libc::c_int;
    }
    return 0 as libc::c_int;
}
pub unsafe extern "C" fn phpspy_zend_inline_hash_func(
    mut str: *const libc::c_char,
    mut len: size_t,
) -> uint64_t {
    let mut hash: uint64_t = 0;
    hash = 5381 as libc::c_ulong;
    while len >= 8 as libc::c_int as libc::c_ulong {
        let fresh21 = str;
        str = str.offset(1);
        hash = (hash << 5 as libc::c_int)
            .wrapping_add(hash)
            .wrapping_add(*fresh21 as libc::c_ulong);
        let fresh22 = str;
        str = str.offset(1);
        hash = (hash << 5 as libc::c_int)
            .wrapping_add(hash)
            .wrapping_add(*fresh22 as libc::c_ulong);
        let fresh23 = str;
        str = str.offset(1);
        hash = (hash << 5 as libc::c_int)
            .wrapping_add(hash)
            .wrapping_add(*fresh23 as libc::c_ulong);
        let fresh24 = str;
        str = str.offset(1);
        hash = (hash << 5 as libc::c_int)
            .wrapping_add(hash)
            .wrapping_add(*fresh24 as libc::c_ulong);
        let fresh25 = str;
        str = str.offset(1);
        hash = (hash << 5 as libc::c_int)
            .wrapping_add(hash)
            .wrapping_add(*fresh25 as libc::c_ulong);
        let fresh26 = str;
        str = str.offset(1);
        hash = (hash << 5 as libc::c_int)
            .wrapping_add(hash)
            .wrapping_add(*fresh26 as libc::c_ulong);
        let fresh27 = str;
        str = str.offset(1);
        hash = (hash << 5 as libc::c_int)
            .wrapping_add(hash)
            .wrapping_add(*fresh27 as libc::c_ulong);
        let fresh28 = str;
        str = str.offset(1);
        hash = (hash << 5 as libc::c_int)
            .wrapping_add(hash)
            .wrapping_add(*fresh28 as libc::c_ulong);
        len = (len as libc::c_ulong).wrapping_sub(8 as libc::c_int as libc::c_ulong)
            as size_t as size_t;
    }
    let mut current_block_17: u64;
    match len {
        7 => {
            let fresh29 = str;
            str = str.offset(1);
            hash = (hash << 5 as libc::c_int)
                .wrapping_add(hash)
                .wrapping_add(*fresh29 as libc::c_ulong);
            current_block_17 = 14367264679481556092;
        }
        6 => {
            current_block_17 = 14367264679481556092;
        }
        5 => {
            current_block_17 = 5929713143979794429;
        }
        4 => {
            current_block_17 = 15150909326099737896;
        }
        3 => {
            current_block_17 = 8858624609182150505;
        }
        2 => {
            current_block_17 = 10020857267363746328;
        }
        1 => {
            current_block_17 = 4084005700592239931;
        }
        0 | _ => {
            current_block_17 = 5143058163439228106;
        }
    }
    match current_block_17 {
        14367264679481556092 => {
            let fresh30 = str;
            str = str.offset(1);
            hash = (hash << 5 as libc::c_int)
                .wrapping_add(hash)
                .wrapping_add(*fresh30 as libc::c_ulong);
            current_block_17 = 5929713143979794429;
        }
        _ => {}
    }
    match current_block_17 {
        5929713143979794429 => {
            let fresh31 = str;
            str = str.offset(1);
            hash = (hash << 5 as libc::c_int)
                .wrapping_add(hash)
                .wrapping_add(*fresh31 as libc::c_ulong);
            current_block_17 = 15150909326099737896;
        }
        _ => {}
    }
    match current_block_17 {
        15150909326099737896 => {
            let fresh32 = str;
            str = str.offset(1);
            hash = (hash << 5 as libc::c_int)
                .wrapping_add(hash)
                .wrapping_add(*fresh32 as libc::c_ulong);
            current_block_17 = 8858624609182150505;
        }
        _ => {}
    }
    match current_block_17 {
        8858624609182150505 => {
            let fresh33 = str;
            str = str.offset(1);
            hash = (hash << 5 as libc::c_int)
                .wrapping_add(hash)
                .wrapping_add(*fresh33 as libc::c_ulong);
            current_block_17 = 10020857267363746328;
        }
        _ => {}
    }
    match current_block_17 {
        10020857267363746328 => {
            let fresh34 = str;
            str = str.offset(1);
            hash = (hash << 5 as libc::c_int)
                .wrapping_add(hash)
                .wrapping_add(*fresh34 as libc::c_ulong);
            current_block_17 = 4084005700592239931;
        }
        _ => {}
    }
    match current_block_17 {
        4084005700592239931 => {
            let fresh35 = str;
            str = str.offset(1);
            hash = (hash << 5 as libc::c_int)
                .wrapping_add(hash)
                .wrapping_add(*fresh35 as libc::c_ulong);
        }
        _ => {}
    }
    return hash | 0x8000000000000000 as libc::c_ulong;
}
pub unsafe extern "C" fn log_error(mut fmt: *const libc::c_char, mut args: ...) {
    let mut args_0: ::std::ffi::VaListImpl;
    if log_error_enabled != 0 {
        args_0 = args.clone();
        vfprintf(stderr, fmt, args_0.as_va_list());
    }
}
unsafe extern "C" fn do_trace_72(mut context: *mut trace_context_t) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut depth: libc::c_int = 0;
    let mut executor_globals: zend_executor_globals_72 = zend_executor_globals_72 {
        pad0: [0; 304],
        symbol_table: zend_array_72 {
            pad0: [0; 12],
            nTableMask: 0,
            arData: 0 as *mut Bucket_72,
            nNumUsed: 0,
            nNumOfElements: 0,
            nTableSize: 0,
        },
        pad1: [0; 140],
        current_execute_data: 0 as *mut zend_execute_data_72,
    };
    rv = copy_executor_globals_72(context, &mut executor_globals);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = ((*context).event_handler).unwrap()(context, 1 as libc::c_int);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = 0 as libc::c_int;
    rv |= trace_stack_72(context, executor_globals.current_execute_data, &mut depth);
    if !(rv & 2 as libc::c_int != 0 as libc::c_int) {
        if !(rv & 4 as libc::c_int != 0 as libc::c_int) {
            opt_continue_on_error == 0;
        }
    }
    if !(depth < 1 as libc::c_int) {
        if opt_capture_req != 0 {
            rv |= trace_request_info_72(context);
            if !(rv & 2 as libc::c_int != 0 as libc::c_int) {
                if !(rv & 4 as libc::c_int != 0 as libc::c_int) {
                    opt_continue_on_error == 0;
                }
            }
        }
        if opt_capture_mem != 0 {
            rv |= trace_memory_info_72(context);
            if !(rv & 2 as libc::c_int != 0 as libc::c_int) {
                if !(rv & 4 as libc::c_int != 0 as libc::c_int) {
                    opt_continue_on_error == 0;
                }
            }
        }
        if (if !glopeek_map.is_null() {
            (*(*glopeek_map).hh.tbl).num_items
        } else {
            0 as libc::c_uint
        }) > 0 as libc::c_int as libc::c_uint
        {
            rv |= trace_globals_72(context);
            if !(rv & 2 as libc::c_int != 0 as libc::c_int) {
                if !(rv & 4 as libc::c_int != 0 as libc::c_int) {
                    opt_continue_on_error == 0;
                }
            }
        }
    }
    if rv == 0 as libc::c_int || opt_continue_on_error != 0 {
        rv = ((*context).event_handler).unwrap()(context, 7 as libc::c_int);
        if rv != 0 as libc::c_int {
            return rv;
        }
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn do_trace_74(mut context: *mut trace_context_t) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut depth: libc::c_int = 0;
    let mut executor_globals: zend_executor_globals_74 = zend_executor_globals_74 {
        pad0: [0; 304],
        symbol_table: zend_array_74 {
            pad0: [0; 12],
            nTableMask: 0,
            arData: 0 as *mut Bucket_74,
            nNumUsed: 0,
            nNumOfElements: 0,
            nTableSize: 0,
        },
        pad1: [0; 148],
        current_execute_data: 0 as *mut zend_execute_data_74,
    };
    rv = copy_executor_globals_74(context, &mut executor_globals);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = ((*context).event_handler).unwrap()(context, 1 as libc::c_int);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = 0 as libc::c_int;
    rv |= trace_stack_74(context, executor_globals.current_execute_data, &mut depth);
    if !(rv & 2 as libc::c_int != 0 as libc::c_int) {
        if !(rv & 4 as libc::c_int != 0 as libc::c_int) {
            opt_continue_on_error == 0;
        }
    }
    if !(depth < 1 as libc::c_int) {
        if opt_capture_req != 0 {
            rv |= trace_request_info_74(context);
            if !(rv & 2 as libc::c_int != 0 as libc::c_int) {
                if !(rv & 4 as libc::c_int != 0 as libc::c_int) {
                    opt_continue_on_error == 0;
                }
            }
        }
        if opt_capture_mem != 0 {
            rv |= trace_memory_info_74(context);
            if !(rv & 2 as libc::c_int != 0 as libc::c_int) {
                if !(rv & 4 as libc::c_int != 0 as libc::c_int) {
                    opt_continue_on_error == 0;
                }
            }
        }
        if (if !glopeek_map.is_null() {
            (*(*glopeek_map).hh.tbl).num_items
        } else {
            0 as libc::c_uint
        }) > 0 as libc::c_int as libc::c_uint
        {
            rv |= trace_globals_74(context);
            if !(rv & 2 as libc::c_int != 0 as libc::c_int) {
                if !(rv & 4 as libc::c_int != 0 as libc::c_int) {
                    opt_continue_on_error == 0;
                }
            }
        }
    }
    if rv == 0 as libc::c_int || opt_continue_on_error != 0 {
        rv = ((*context).event_handler).unwrap()(context, 7 as libc::c_int);
        if rv != 0 as libc::c_int {
            return rv;
        }
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn do_trace_80(mut context: *mut trace_context_t) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut depth: libc::c_int = 0;
    let mut executor_globals: zend_executor_globals_80 = zend_executor_globals_80 {
        pad0: [0; 304],
        symbol_table: zend_array_80 {
            pad0: [0; 12],
            nTableMask: 0,
            arData: 0 as *mut Bucket_80,
            nNumUsed: 0,
            nNumOfElements: 0,
            nTableSize: 0,
        },
        pad1: [0; 148],
        current_execute_data: 0 as *mut zend_execute_data_80,
    };
    rv = copy_executor_globals_80(context, &mut executor_globals);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = ((*context).event_handler).unwrap()(context, 1 as libc::c_int);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = 0 as libc::c_int;
    rv |= trace_stack_80(context, executor_globals.current_execute_data, &mut depth);
    if !(rv & 2 as libc::c_int != 0 as libc::c_int) {
        if !(rv & 4 as libc::c_int != 0 as libc::c_int) {
            opt_continue_on_error == 0;
        }
    }
    if !(depth < 1 as libc::c_int) {
        if opt_capture_req != 0 {
            rv |= trace_request_info_80(context);
            if !(rv & 2 as libc::c_int != 0 as libc::c_int) {
                if !(rv & 4 as libc::c_int != 0 as libc::c_int) {
                    opt_continue_on_error == 0;
                }
            }
        }
        if opt_capture_mem != 0 {
            rv |= trace_memory_info_80(context);
            if !(rv & 2 as libc::c_int != 0 as libc::c_int) {
                if !(rv & 4 as libc::c_int != 0 as libc::c_int) {
                    opt_continue_on_error == 0;
                }
            }
        }
        if (if !glopeek_map.is_null() {
            (*(*glopeek_map).hh.tbl).num_items
        } else {
            0 as libc::c_uint
        }) > 0 as libc::c_int as libc::c_uint
        {
            rv |= trace_globals_80(context);
            if !(rv & 2 as libc::c_int != 0 as libc::c_int) {
                if !(rv & 4 as libc::c_int != 0 as libc::c_int) {
                    opt_continue_on_error == 0;
                }
            }
        }
    }
    if rv == 0 as libc::c_int || opt_continue_on_error != 0 {
        rv = ((*context).event_handler).unwrap()(context, 7 as libc::c_int);
        if rv != 0 as libc::c_int {
            return rv;
        }
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn do_trace_73(mut context: *mut trace_context_t) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut depth: libc::c_int = 0;
    let mut executor_globals: zend_executor_globals_73 = zend_executor_globals_73 {
        pad0: [0; 304],
        symbol_table: zend_array_73 {
            pad0: [0; 12],
            nTableMask: 0,
            arData: 0 as *mut Bucket_73,
            nNumUsed: 0,
            nNumOfElements: 0,
            nTableSize: 0,
        },
        pad1: [0; 148],
        current_execute_data: 0 as *mut zend_execute_data_73,
    };
    rv = copy_executor_globals_73(context, &mut executor_globals);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = ((*context).event_handler).unwrap()(context, 1 as libc::c_int);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = 0 as libc::c_int;
    rv |= trace_stack_73(context, executor_globals.current_execute_data, &mut depth);
    if !(rv & 2 as libc::c_int != 0 as libc::c_int) {
        if !(rv & 4 as libc::c_int != 0 as libc::c_int) {
            opt_continue_on_error == 0;
        }
    }
    if !(depth < 1 as libc::c_int) {
        if opt_capture_req != 0 {
            rv |= trace_request_info_73(context);
            if !(rv & 2 as libc::c_int != 0 as libc::c_int) {
                if !(rv & 4 as libc::c_int != 0 as libc::c_int) {
                    opt_continue_on_error == 0;
                }
            }
        }
        if opt_capture_mem != 0 {
            rv |= trace_memory_info_73(context);
            if !(rv & 2 as libc::c_int != 0 as libc::c_int) {
                if !(rv & 4 as libc::c_int != 0 as libc::c_int) {
                    opt_continue_on_error == 0;
                }
            }
        }
        if (if !glopeek_map.is_null() {
            (*(*glopeek_map).hh.tbl).num_items
        } else {
            0 as libc::c_uint
        }) > 0 as libc::c_int as libc::c_uint
        {
            rv |= trace_globals_73(context);
            if !(rv & 2 as libc::c_int != 0 as libc::c_int) {
                if !(rv & 4 as libc::c_int != 0 as libc::c_int) {
                    opt_continue_on_error == 0;
                }
            }
        }
    }
    if rv == 0 as libc::c_int || opt_continue_on_error != 0 {
        rv = ((*context).event_handler).unwrap()(context, 7 as libc::c_int);
        if rv != 0 as libc::c_int {
            return rv;
        }
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn do_trace_70(mut context: *mut trace_context_t) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut depth: libc::c_int = 0;
    let mut executor_globals: zend_executor_globals_70 = zend_executor_globals_70 {
        pad0: [0; 304],
        symbol_table: zend_array_70 {
            pad0: [0; 12],
            nTableMask: 0,
            arData: 0 as *mut Bucket_70,
            nNumUsed: 0,
            nNumOfElements: 0,
            nTableSize: 0,
        },
        pad1: [0; 140],
        current_execute_data: 0 as *mut zend_execute_data_70,
    };
    rv = copy_executor_globals_70(context, &mut executor_globals);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = ((*context).event_handler).unwrap()(context, 1 as libc::c_int);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = 0 as libc::c_int;
    rv |= trace_stack_70(context, executor_globals.current_execute_data, &mut depth);
    if !(rv & 2 as libc::c_int != 0 as libc::c_int) {
        if !(rv & 4 as libc::c_int != 0 as libc::c_int) {
            opt_continue_on_error == 0;
        }
    }
    if !(depth < 1 as libc::c_int) {
        if opt_capture_req != 0 {
            rv |= trace_request_info_70(context);
            if !(rv & 2 as libc::c_int != 0 as libc::c_int) {
                if !(rv & 4 as libc::c_int != 0 as libc::c_int) {
                    opt_continue_on_error == 0;
                }
            }
        }
        if opt_capture_mem != 0 {
            rv |= trace_memory_info_70(context);
            if !(rv & 2 as libc::c_int != 0 as libc::c_int) {
                if !(rv & 4 as libc::c_int != 0 as libc::c_int) {
                    opt_continue_on_error == 0;
                }
            }
        }
        if (if !glopeek_map.is_null() {
            (*(*glopeek_map).hh.tbl).num_items
        } else {
            0 as libc::c_uint
        }) > 0 as libc::c_int as libc::c_uint
        {
            rv |= trace_globals_70(context);
            if !(rv & 2 as libc::c_int != 0 as libc::c_int) {
                if !(rv & 4 as libc::c_int != 0 as libc::c_int) {
                    opt_continue_on_error == 0;
                }
            }
        }
    }
    if rv == 0 as libc::c_int || opt_continue_on_error != 0 {
        rv = ((*context).event_handler).unwrap()(context, 7 as libc::c_int);
        if rv != 0 as libc::c_int {
            return rv;
        }
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn do_trace_71(mut context: *mut trace_context_t) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut depth: libc::c_int = 0;
    let mut executor_globals: zend_executor_globals_71 = zend_executor_globals_71 {
        pad0: [0; 304],
        symbol_table: zend_array_71 {
            pad0: [0; 12],
            nTableMask: 0,
            arData: 0 as *mut Bucket_71,
            nNumUsed: 0,
            nNumOfElements: 0,
            nTableSize: 0,
        },
        pad1: [0; 140],
        current_execute_data: 0 as *mut zend_execute_data_71,
    };
    rv = copy_executor_globals_71(context, &mut executor_globals);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = ((*context).event_handler).unwrap()(context, 1 as libc::c_int);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = 0 as libc::c_int;
    rv |= trace_stack_71(context, executor_globals.current_execute_data, &mut depth);
    if !(rv & 2 as libc::c_int != 0 as libc::c_int) {
        if !(rv & 4 as libc::c_int != 0 as libc::c_int) {
            opt_continue_on_error == 0;
        }
    }
    if !(depth < 1 as libc::c_int) {
        if opt_capture_req != 0 {
            rv |= trace_request_info_71(context);
            if !(rv & 2 as libc::c_int != 0 as libc::c_int) {
                if !(rv & 4 as libc::c_int != 0 as libc::c_int) {
                    opt_continue_on_error == 0;
                }
            }
        }
        if opt_capture_mem != 0 {
            rv |= trace_memory_info_71(context);
            if !(rv & 2 as libc::c_int != 0 as libc::c_int) {
                if !(rv & 4 as libc::c_int != 0 as libc::c_int) {
                    opt_continue_on_error == 0;
                }
            }
        }
        if (if !glopeek_map.is_null() {
            (*(*glopeek_map).hh.tbl).num_items
        } else {
            0 as libc::c_uint
        }) > 0 as libc::c_int as libc::c_uint
        {
            rv |= trace_globals_71(context);
            if !(rv & 2 as libc::c_int != 0 as libc::c_int) {
                if !(rv & 4 as libc::c_int != 0 as libc::c_int) {
                    opt_continue_on_error == 0;
                }
            }
        }
    }
    if rv == 0 as libc::c_int || opt_continue_on_error != 0 {
        rv = ((*context).event_handler).unwrap()(context, 7 as libc::c_int);
        if rv != 0 as libc::c_int {
            return rv;
        }
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn do_trace_81(mut context: *mut trace_context_t) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut depth: libc::c_int = 0;
    let mut executor_globals: zend_executor_globals_81 = zend_executor_globals_81 {
        pad0: [0; 304],
        symbol_table: zend_array_81 {
            pad0: [0; 12],
            nTableMask: 0,
            arData: 0 as *mut Bucket_81,
            nNumUsed: 0,
            nNumOfElements: 0,
            nTableSize: 0,
        },
        pad1: [0; 148],
        current_execute_data: 0 as *mut zend_execute_data_81,
    };
    rv = copy_executor_globals_81(context, &mut executor_globals);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = ((*context).event_handler).unwrap()(context, 1 as libc::c_int);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = 0 as libc::c_int;
    rv |= trace_stack_81(context, executor_globals.current_execute_data, &mut depth);
    if !(rv & 2 as libc::c_int != 0 as libc::c_int) {
        if !(rv & 4 as libc::c_int != 0 as libc::c_int) {
            opt_continue_on_error == 0;
        }
    }
    if !(depth < 1 as libc::c_int) {
        if opt_capture_req != 0 {
            rv |= trace_request_info_81(context);
            if !(rv & 2 as libc::c_int != 0 as libc::c_int) {
                if !(rv & 4 as libc::c_int != 0 as libc::c_int) {
                    opt_continue_on_error == 0;
                }
            }
        }
        if opt_capture_mem != 0 {
            rv |= trace_memory_info_81(context);
            if !(rv & 2 as libc::c_int != 0 as libc::c_int) {
                if !(rv & 4 as libc::c_int != 0 as libc::c_int) {
                    opt_continue_on_error == 0;
                }
            }
        }
        if (if !glopeek_map.is_null() {
            (*(*glopeek_map).hh.tbl).num_items
        } else {
            0 as libc::c_uint
        }) > 0 as libc::c_int as libc::c_uint
        {
            rv |= trace_globals_81(context);
            if !(rv & 2 as libc::c_int != 0 as libc::c_int) {
                if !(rv & 4 as libc::c_int != 0 as libc::c_int) {
                    opt_continue_on_error == 0;
                }
            }
        }
    }
    if rv == 0 as libc::c_int || opt_continue_on_error != 0 {
        rv = ((*context).event_handler).unwrap()(context, 7 as libc::c_int);
        if rv != 0 as libc::c_int {
            return rv;
        }
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_stack_70(
    mut context: *mut trace_context_t,
    mut remote_execute_data: *mut zend_execute_data_70,
    mut depth: *mut libc::c_int,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut execute_data: zend_execute_data_70 = zend_execute_data_70 {
        opline: 0 as *mut zend_op_70,
        pad0: [0; 16],
        func: 0 as *mut zend_function_70,
        pad1: [0; 24],
        prev_execute_data: 0 as *mut zend_execute_data_70,
        symbol_table: 0 as *mut zend_array_70,
    };
    let mut zfunc: zend_function_70 = _zend_function_70 { type_0: 0 };
    let mut zstring: zend_string_70 = zend_string_70 {
        pad0: [0; 16],
        len: 0,
        val: [0; 1],
    };
    let mut zce: zend_class_entry_70 = zend_class_entry_70 {
        pad0: [0; 8],
        name: 0 as *mut zend_string_70,
    };
    let mut zop: zend_op_70 = zend_op_70 {
        pad0: [0; 24],
        lineno: 0,
    };
    let mut target: *mut trace_target_t = 0 as *mut trace_target_t;
    let mut frame: *mut trace_frame_t = 0 as *mut trace_frame_t;
    target = &mut (*context).target;
    frame = &mut (*context).event.frame;
    *depth = 0 as libc::c_int;
    while !remote_execute_data.is_null() && *depth != opt_max_stack_depth {
        memset(
            &mut execute_data as *mut zend_execute_data_70 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_execute_data_70>() as libc::c_ulong,
        );
        memset(
            &mut zfunc as *mut zend_function_70 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_function_70>() as libc::c_ulong,
        );
        memset(
            &mut zstring as *mut zend_string_70 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_string_70>() as libc::c_ulong,
        );
        memset(
            &mut zce as *mut zend_class_entry_70 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_class_entry_70>() as libc::c_ulong,
        );
        memset(
            &mut zop as *mut zend_op_70 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_op_70>() as libc::c_ulong,
        );
        rv = copy_proc_mem(
            (*context).target.pid,
            b"execute_data\0" as *const u8 as *const libc::c_char,
            remote_execute_data as *mut libc::c_void,
            &mut execute_data as *mut zend_execute_data_70 as *mut libc::c_void,
            ::std::mem::size_of::<zend_execute_data_70>() as libc::c_ulong,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        rv = copy_proc_mem(
            (*context).target.pid,
            b"zfunc\0" as *const u8 as *const libc::c_char,
            execute_data.func as *mut libc::c_void,
            &mut zfunc as *mut zend_function_70 as *mut libc::c_void,
            ::std::mem::size_of::<zend_function_70>() as libc::c_ulong,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        if !(zfunc.common.function_name).is_null() {
            rv = sprint_zstring_70(
                context,
                b"function_name\0" as *const u8 as *const libc::c_char,
                zfunc.common.function_name,
                ((*frame).loc.func).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                &mut (*frame).loc.func_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
        } else {
            (*frame)
                .loc
                .func_len = snprintf(
                ((*frame).loc.func).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                b"<main>\0" as *const u8 as *const libc::c_char,
            ) as size_t;
        }
        if !(zfunc.common.scope).is_null() {
            rv = copy_proc_mem(
                (*context).target.pid,
                b"zce\0" as *const u8 as *const libc::c_char,
                zfunc.common.scope as *mut libc::c_void,
                &mut zce as *mut zend_class_entry_70 as *mut libc::c_void,
                ::std::mem::size_of::<zend_class_entry_70>() as libc::c_ulong,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            rv = sprint_zstring_70(
                context,
                b"class_name\0" as *const u8 as *const libc::c_char,
                zce.name,
                ((*frame).loc.class).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                &mut (*frame).loc.class_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
        } else {
            (*frame).loc.class[0 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
            (*frame).loc.class_len = 0 as libc::c_int as size_t;
        }
        if zfunc.type_0 as libc::c_int == 2 as libc::c_int {
            rv = sprint_zstring_70(
                context,
                b"filename\0" as *const u8 as *const libc::c_char,
                zfunc.op_array.filename,
                ((*frame).loc.file).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                &mut (*frame).loc.file_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            (*frame).loc.lineno = zfunc.op_array.line_start as libc::c_int;
            if (if !varpeek_map.is_null() {
                (*(*varpeek_map).hh.tbl).num_items
            } else {
                0 as libc::c_uint
            }) > 0 as libc::c_int as libc::c_uint
            {
                if copy_proc_mem(
                    (*target).pid,
                    b"opline\0" as *const u8 as *const libc::c_char,
                    execute_data.opline as *mut libc::c_void,
                    &mut zop as *mut zend_op_70 as *mut libc::c_void,
                    ::std::mem::size_of::<zend_op_70>() as libc::c_ulong,
                ) == 0 as libc::c_int
                {
                    trace_locals_70(
                        context,
                        &mut zop,
                        remote_execute_data,
                        &mut zfunc.op_array,
                        ((*frame).loc.file).as_mut_ptr(),
                        (*frame).loc.file_len as libc::c_int,
                    );
                }
            }
        } else {
            (*frame)
                .loc
                .file_len = snprintf(
                ((*frame).loc.file).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                b"<internal>\0" as *const u8 as *const libc::c_char,
            ) as size_t;
            (*frame).loc.lineno = -(1 as libc::c_int);
        }
        (*frame).depth = *depth;
        rv = ((*context).event_handler).unwrap()(context, 2 as libc::c_int);
        if rv != 0 as libc::c_int {
            return rv;
        }
        remote_execute_data = execute_data.prev_execute_data;
        *depth += 1 as libc::c_int;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_stack_73(
    mut context: *mut trace_context_t,
    mut remote_execute_data: *mut zend_execute_data_73,
    mut depth: *mut libc::c_int,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut execute_data: zend_execute_data_73 = zend_execute_data_73 {
        opline: 0 as *mut zend_op_73,
        pad0: [0; 16],
        func: 0 as *mut zend_function_73,
        pad1: [0; 16],
        prev_execute_data: 0 as *mut zend_execute_data_73,
        symbol_table: 0 as *mut zend_array_73,
    };
    let mut zfunc: zend_function_73 = _zend_function_73 { type_0: 0 };
    let mut zstring: zend_string_73 = zend_string_73 {
        pad0: [0; 16],
        len: 0,
        val: [0; 1],
    };
    let mut zce: zend_class_entry_73 = zend_class_entry_73 {
        pad0: [0; 8],
        name: 0 as *mut zend_string_73,
    };
    let mut zop: zend_op_73 = zend_op_73 {
        pad0: [0; 24],
        lineno: 0,
    };
    let mut target: *mut trace_target_t = 0 as *mut trace_target_t;
    let mut frame: *mut trace_frame_t = 0 as *mut trace_frame_t;
    target = &mut (*context).target;
    frame = &mut (*context).event.frame;
    *depth = 0 as libc::c_int;
    while !remote_execute_data.is_null() && *depth != opt_max_stack_depth {
        memset(
            &mut execute_data as *mut zend_execute_data_73 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_execute_data_73>() as libc::c_ulong,
        );
        memset(
            &mut zfunc as *mut zend_function_73 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_function_73>() as libc::c_ulong,
        );
        memset(
            &mut zstring as *mut zend_string_73 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_string_73>() as libc::c_ulong,
        );
        memset(
            &mut zce as *mut zend_class_entry_73 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_class_entry_73>() as libc::c_ulong,
        );
        memset(
            &mut zop as *mut zend_op_73 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_op_73>() as libc::c_ulong,
        );
        rv = copy_proc_mem(
            (*context).target.pid,
            b"execute_data\0" as *const u8 as *const libc::c_char,
            remote_execute_data as *mut libc::c_void,
            &mut execute_data as *mut zend_execute_data_73 as *mut libc::c_void,
            ::std::mem::size_of::<zend_execute_data_73>() as libc::c_ulong,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        rv = copy_proc_mem(
            (*context).target.pid,
            b"zfunc\0" as *const u8 as *const libc::c_char,
            execute_data.func as *mut libc::c_void,
            &mut zfunc as *mut zend_function_73 as *mut libc::c_void,
            ::std::mem::size_of::<zend_function_73>() as libc::c_ulong,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        if !(zfunc.common.function_name).is_null() {
            rv = sprint_zstring_73(
                context,
                b"function_name\0" as *const u8 as *const libc::c_char,
                zfunc.common.function_name,
                ((*frame).loc.func).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                &mut (*frame).loc.func_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
        } else {
            (*frame)
                .loc
                .func_len = snprintf(
                ((*frame).loc.func).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                b"<main>\0" as *const u8 as *const libc::c_char,
            ) as size_t;
        }
        if !(zfunc.common.scope).is_null() {
            rv = copy_proc_mem(
                (*context).target.pid,
                b"zce\0" as *const u8 as *const libc::c_char,
                zfunc.common.scope as *mut libc::c_void,
                &mut zce as *mut zend_class_entry_73 as *mut libc::c_void,
                ::std::mem::size_of::<zend_class_entry_73>() as libc::c_ulong,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            rv = sprint_zstring_73(
                context,
                b"class_name\0" as *const u8 as *const libc::c_char,
                zce.name,
                ((*frame).loc.class).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                &mut (*frame).loc.class_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
        } else {
            (*frame).loc.class[0 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
            (*frame).loc.class_len = 0 as libc::c_int as size_t;
        }
        if zfunc.type_0 as libc::c_int == 2 as libc::c_int {
            rv = sprint_zstring_73(
                context,
                b"filename\0" as *const u8 as *const libc::c_char,
                zfunc.op_array.filename,
                ((*frame).loc.file).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                &mut (*frame).loc.file_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            (*frame).loc.lineno = zfunc.op_array.line_start as libc::c_int;
            if (if !varpeek_map.is_null() {
                (*(*varpeek_map).hh.tbl).num_items
            } else {
                0 as libc::c_uint
            }) > 0 as libc::c_int as libc::c_uint
            {
                if copy_proc_mem(
                    (*target).pid,
                    b"opline\0" as *const u8 as *const libc::c_char,
                    execute_data.opline as *mut libc::c_void,
                    &mut zop as *mut zend_op_73 as *mut libc::c_void,
                    ::std::mem::size_of::<zend_op_73>() as libc::c_ulong,
                ) == 0 as libc::c_int
                {
                    trace_locals_73(
                        context,
                        &mut zop,
                        remote_execute_data,
                        &mut zfunc.op_array,
                        ((*frame).loc.file).as_mut_ptr(),
                        (*frame).loc.file_len as libc::c_int,
                    );
                }
            }
        } else {
            (*frame)
                .loc
                .file_len = snprintf(
                ((*frame).loc.file).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                b"<internal>\0" as *const u8 as *const libc::c_char,
            ) as size_t;
            (*frame).loc.lineno = -(1 as libc::c_int);
        }
        (*frame).depth = *depth;
        rv = ((*context).event_handler).unwrap()(context, 2 as libc::c_int);
        if rv != 0 as libc::c_int {
            return rv;
        }
        remote_execute_data = execute_data.prev_execute_data;
        *depth += 1 as libc::c_int;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_stack_81(
    mut context: *mut trace_context_t,
    mut remote_execute_data: *mut zend_execute_data_81,
    mut depth: *mut libc::c_int,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut execute_data: zend_execute_data_81 = zend_execute_data_81 {
        opline: 0 as *mut zend_op_81,
        pad0: [0; 16],
        func: 0 as *mut zend_function_81,
        pad1: [0; 16],
        prev_execute_data: 0 as *mut zend_execute_data_81,
        symbol_table: 0 as *mut zend_array_81,
    };
    let mut zfunc: zend_function_81 = _zend_function_81 { type_0: 0 };
    let mut zstring: zend_string_81 = zend_string_81 {
        pad0: [0; 16],
        len: 0,
        val: [0; 1],
    };
    let mut zce: zend_class_entry_81 = zend_class_entry_81 {
        pad0: [0; 8],
        name: 0 as *mut zend_string_81,
    };
    let mut zop: zend_op_81 = zend_op_81 {
        pad0: [0; 24],
        lineno: 0,
    };
    let mut target: *mut trace_target_t = 0 as *mut trace_target_t;
    let mut frame: *mut trace_frame_t = 0 as *mut trace_frame_t;
    target = &mut (*context).target;
    frame = &mut (*context).event.frame;
    *depth = 0 as libc::c_int;
    while !remote_execute_data.is_null() && *depth != opt_max_stack_depth {
        memset(
            &mut execute_data as *mut zend_execute_data_81 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_execute_data_81>() as libc::c_ulong,
        );
        memset(
            &mut zfunc as *mut zend_function_81 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_function_81>() as libc::c_ulong,
        );
        memset(
            &mut zstring as *mut zend_string_81 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_string_81>() as libc::c_ulong,
        );
        memset(
            &mut zce as *mut zend_class_entry_81 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_class_entry_81>() as libc::c_ulong,
        );
        memset(
            &mut zop as *mut zend_op_81 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_op_81>() as libc::c_ulong,
        );
        rv = copy_proc_mem(
            (*context).target.pid,
            b"execute_data\0" as *const u8 as *const libc::c_char,
            remote_execute_data as *mut libc::c_void,
            &mut execute_data as *mut zend_execute_data_81 as *mut libc::c_void,
            ::std::mem::size_of::<zend_execute_data_81>() as libc::c_ulong,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        rv = copy_proc_mem(
            (*context).target.pid,
            b"zfunc\0" as *const u8 as *const libc::c_char,
            execute_data.func as *mut libc::c_void,
            &mut zfunc as *mut zend_function_81 as *mut libc::c_void,
            ::std::mem::size_of::<zend_function_81>() as libc::c_ulong,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        if !(zfunc.common.function_name).is_null() {
            rv = sprint_zstring_81(
                context,
                b"function_name\0" as *const u8 as *const libc::c_char,
                zfunc.common.function_name,
                ((*frame).loc.func).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                &mut (*frame).loc.func_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
        } else {
            (*frame)
                .loc
                .func_len = snprintf(
                ((*frame).loc.func).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                b"<main>\0" as *const u8 as *const libc::c_char,
            ) as size_t;
        }
        if !(zfunc.common.scope).is_null() {
            rv = copy_proc_mem(
                (*context).target.pid,
                b"zce\0" as *const u8 as *const libc::c_char,
                zfunc.common.scope as *mut libc::c_void,
                &mut zce as *mut zend_class_entry_81 as *mut libc::c_void,
                ::std::mem::size_of::<zend_class_entry_81>() as libc::c_ulong,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            rv = sprint_zstring_81(
                context,
                b"class_name\0" as *const u8 as *const libc::c_char,
                zce.name,
                ((*frame).loc.class).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                &mut (*frame).loc.class_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
        } else {
            (*frame).loc.class[0 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
            (*frame).loc.class_len = 0 as libc::c_int as size_t;
        }
        if zfunc.type_0 as libc::c_int == 2 as libc::c_int {
            rv = sprint_zstring_81(
                context,
                b"filename\0" as *const u8 as *const libc::c_char,
                zfunc.op_array.filename,
                ((*frame).loc.file).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                &mut (*frame).loc.file_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            (*frame).loc.lineno = zfunc.op_array.line_start as libc::c_int;
            if (if !varpeek_map.is_null() {
                (*(*varpeek_map).hh.tbl).num_items
            } else {
                0 as libc::c_uint
            }) > 0 as libc::c_int as libc::c_uint
            {
                if copy_proc_mem(
                    (*target).pid,
                    b"opline\0" as *const u8 as *const libc::c_char,
                    execute_data.opline as *mut libc::c_void,
                    &mut zop as *mut zend_op_81 as *mut libc::c_void,
                    ::std::mem::size_of::<zend_op_81>() as libc::c_ulong,
                ) == 0 as libc::c_int
                {
                    trace_locals_81(
                        context,
                        &mut zop,
                        remote_execute_data,
                        &mut zfunc.op_array,
                        ((*frame).loc.file).as_mut_ptr(),
                        (*frame).loc.file_len as libc::c_int,
                    );
                }
            }
        } else {
            (*frame)
                .loc
                .file_len = snprintf(
                ((*frame).loc.file).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                b"<internal>\0" as *const u8 as *const libc::c_char,
            ) as size_t;
            (*frame).loc.lineno = -(1 as libc::c_int);
        }
        (*frame).depth = *depth;
        rv = ((*context).event_handler).unwrap()(context, 2 as libc::c_int);
        if rv != 0 as libc::c_int {
            return rv;
        }
        remote_execute_data = execute_data.prev_execute_data;
        *depth += 1 as libc::c_int;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_stack_74(
    mut context: *mut trace_context_t,
    mut remote_execute_data: *mut zend_execute_data_74,
    mut depth: *mut libc::c_int,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut execute_data: zend_execute_data_74 = zend_execute_data_74 {
        opline: 0 as *mut zend_op_74,
        pad0: [0; 16],
        func: 0 as *mut zend_function_74,
        pad1: [0; 16],
        prev_execute_data: 0 as *mut zend_execute_data_74,
        symbol_table: 0 as *mut zend_array_74,
    };
    let mut zfunc: zend_function_74 = _zend_function_74 { type_0: 0 };
    let mut zstring: zend_string_74 = zend_string_74 {
        pad0: [0; 16],
        len: 0,
        val: [0; 1],
    };
    let mut zce: zend_class_entry_74 = zend_class_entry_74 {
        pad0: [0; 8],
        name: 0 as *mut zend_string_74,
    };
    let mut zop: zend_op_74 = zend_op_74 {
        pad0: [0; 24],
        lineno: 0,
    };
    let mut target: *mut trace_target_t = 0 as *mut trace_target_t;
    let mut frame: *mut trace_frame_t = 0 as *mut trace_frame_t;
    target = &mut (*context).target;
    frame = &mut (*context).event.frame;
    *depth = 0 as libc::c_int;
    while !remote_execute_data.is_null() && *depth != opt_max_stack_depth {
        memset(
            &mut execute_data as *mut zend_execute_data_74 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_execute_data_74>() as libc::c_ulong,
        );
        memset(
            &mut zfunc as *mut zend_function_74 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_function_74>() as libc::c_ulong,
        );
        memset(
            &mut zstring as *mut zend_string_74 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_string_74>() as libc::c_ulong,
        );
        memset(
            &mut zce as *mut zend_class_entry_74 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_class_entry_74>() as libc::c_ulong,
        );
        memset(
            &mut zop as *mut zend_op_74 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_op_74>() as libc::c_ulong,
        );
        rv = copy_proc_mem(
            (*context).target.pid,
            b"execute_data\0" as *const u8 as *const libc::c_char,
            remote_execute_data as *mut libc::c_void,
            &mut execute_data as *mut zend_execute_data_74 as *mut libc::c_void,
            ::std::mem::size_of::<zend_execute_data_74>() as libc::c_ulong,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        rv = copy_proc_mem(
            (*context).target.pid,
            b"zfunc\0" as *const u8 as *const libc::c_char,
            execute_data.func as *mut libc::c_void,
            &mut zfunc as *mut zend_function_74 as *mut libc::c_void,
            ::std::mem::size_of::<zend_function_74>() as libc::c_ulong,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        if !(zfunc.common.function_name).is_null() {
            rv = sprint_zstring_74(
                context,
                b"function_name\0" as *const u8 as *const libc::c_char,
                zfunc.common.function_name,
                ((*frame).loc.func).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                &mut (*frame).loc.func_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
        } else {
            (*frame)
                .loc
                .func_len = snprintf(
                ((*frame).loc.func).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                b"<main>\0" as *const u8 as *const libc::c_char,
            ) as size_t;
        }
        if !(zfunc.common.scope).is_null() {
            rv = copy_proc_mem(
                (*context).target.pid,
                b"zce\0" as *const u8 as *const libc::c_char,
                zfunc.common.scope as *mut libc::c_void,
                &mut zce as *mut zend_class_entry_74 as *mut libc::c_void,
                ::std::mem::size_of::<zend_class_entry_74>() as libc::c_ulong,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            rv = sprint_zstring_74(
                context,
                b"class_name\0" as *const u8 as *const libc::c_char,
                zce.name,
                ((*frame).loc.class).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                &mut (*frame).loc.class_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
        } else {
            (*frame).loc.class[0 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
            (*frame).loc.class_len = 0 as libc::c_int as size_t;
        }
        if zfunc.type_0 as libc::c_int == 2 as libc::c_int {
            rv = sprint_zstring_74(
                context,
                b"filename\0" as *const u8 as *const libc::c_char,
                zfunc.op_array.filename,
                ((*frame).loc.file).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                &mut (*frame).loc.file_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            (*frame).loc.lineno = zfunc.op_array.line_start as libc::c_int;
            if (if !varpeek_map.is_null() {
                (*(*varpeek_map).hh.tbl).num_items
            } else {
                0 as libc::c_uint
            }) > 0 as libc::c_int as libc::c_uint
            {
                if copy_proc_mem(
                    (*target).pid,
                    b"opline\0" as *const u8 as *const libc::c_char,
                    execute_data.opline as *mut libc::c_void,
                    &mut zop as *mut zend_op_74 as *mut libc::c_void,
                    ::std::mem::size_of::<zend_op_74>() as libc::c_ulong,
                ) == 0 as libc::c_int
                {
                    trace_locals_74(
                        context,
                        &mut zop,
                        remote_execute_data,
                        &mut zfunc.op_array,
                        ((*frame).loc.file).as_mut_ptr(),
                        (*frame).loc.file_len as libc::c_int,
                    );
                }
            }
        } else {
            (*frame)
                .loc
                .file_len = snprintf(
                ((*frame).loc.file).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                b"<internal>\0" as *const u8 as *const libc::c_char,
            ) as size_t;
            (*frame).loc.lineno = -(1 as libc::c_int);
        }
        (*frame).depth = *depth;
        rv = ((*context).event_handler).unwrap()(context, 2 as libc::c_int);
        if rv != 0 as libc::c_int {
            return rv;
        }
        remote_execute_data = execute_data.prev_execute_data;
        *depth += 1 as libc::c_int;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_stack_72(
    mut context: *mut trace_context_t,
    mut remote_execute_data: *mut zend_execute_data_72,
    mut depth: *mut libc::c_int,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut execute_data: zend_execute_data_72 = zend_execute_data_72 {
        opline: 0 as *mut zend_op_72,
        pad0: [0; 16],
        func: 0 as *mut zend_function_72,
        pad1: [0; 16],
        prev_execute_data: 0 as *mut zend_execute_data_72,
        symbol_table: 0 as *mut zend_array_72,
    };
    let mut zfunc: zend_function_72 = _zend_function_72 { type_0: 0 };
    let mut zstring: zend_string_72 = zend_string_72 {
        pad0: [0; 16],
        len: 0,
        val: [0; 1],
    };
    let mut zce: zend_class_entry_72 = zend_class_entry_72 {
        pad0: [0; 8],
        name: 0 as *mut zend_string_72,
    };
    let mut zop: zend_op_72 = zend_op_72 {
        pad0: [0; 24],
        lineno: 0,
    };
    let mut target: *mut trace_target_t = 0 as *mut trace_target_t;
    let mut frame: *mut trace_frame_t = 0 as *mut trace_frame_t;
    target = &mut (*context).target;
    frame = &mut (*context).event.frame;
    *depth = 0 as libc::c_int;
    while !remote_execute_data.is_null() && *depth != opt_max_stack_depth {
        memset(
            &mut execute_data as *mut zend_execute_data_72 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_execute_data_72>() as libc::c_ulong,
        );
        memset(
            &mut zfunc as *mut zend_function_72 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_function_72>() as libc::c_ulong,
        );
        memset(
            &mut zstring as *mut zend_string_72 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_string_72>() as libc::c_ulong,
        );
        memset(
            &mut zce as *mut zend_class_entry_72 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_class_entry_72>() as libc::c_ulong,
        );
        memset(
            &mut zop as *mut zend_op_72 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_op_72>() as libc::c_ulong,
        );
        rv = copy_proc_mem(
            (*context).target.pid,
            b"execute_data\0" as *const u8 as *const libc::c_char,
            remote_execute_data as *mut libc::c_void,
            &mut execute_data as *mut zend_execute_data_72 as *mut libc::c_void,
            ::std::mem::size_of::<zend_execute_data_72>() as libc::c_ulong,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        rv = copy_proc_mem(
            (*context).target.pid,
            b"zfunc\0" as *const u8 as *const libc::c_char,
            execute_data.func as *mut libc::c_void,
            &mut zfunc as *mut zend_function_72 as *mut libc::c_void,
            ::std::mem::size_of::<zend_function_72>() as libc::c_ulong,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        if !(zfunc.common.function_name).is_null() {
            rv = sprint_zstring_72(
                context,
                b"function_name\0" as *const u8 as *const libc::c_char,
                zfunc.common.function_name,
                ((*frame).loc.func).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                &mut (*frame).loc.func_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
        } else {
            (*frame)
                .loc
                .func_len = snprintf(
                ((*frame).loc.func).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                b"<main>\0" as *const u8 as *const libc::c_char,
            ) as size_t;
        }
        if !(zfunc.common.scope).is_null() {
            rv = copy_proc_mem(
                (*context).target.pid,
                b"zce\0" as *const u8 as *const libc::c_char,
                zfunc.common.scope as *mut libc::c_void,
                &mut zce as *mut zend_class_entry_72 as *mut libc::c_void,
                ::std::mem::size_of::<zend_class_entry_72>() as libc::c_ulong,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            rv = sprint_zstring_72(
                context,
                b"class_name\0" as *const u8 as *const libc::c_char,
                zce.name,
                ((*frame).loc.class).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                &mut (*frame).loc.class_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
        } else {
            (*frame).loc.class[0 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
            (*frame).loc.class_len = 0 as libc::c_int as size_t;
        }
        if zfunc.type_0 as libc::c_int == 2 as libc::c_int {
            rv = sprint_zstring_72(
                context,
                b"filename\0" as *const u8 as *const libc::c_char,
                zfunc.op_array.filename,
                ((*frame).loc.file).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                &mut (*frame).loc.file_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            (*frame).loc.lineno = zfunc.op_array.line_start as libc::c_int;
            if (if !varpeek_map.is_null() {
                (*(*varpeek_map).hh.tbl).num_items
            } else {
                0 as libc::c_uint
            }) > 0 as libc::c_int as libc::c_uint
            {
                if copy_proc_mem(
                    (*target).pid,
                    b"opline\0" as *const u8 as *const libc::c_char,
                    execute_data.opline as *mut libc::c_void,
                    &mut zop as *mut zend_op_72 as *mut libc::c_void,
                    ::std::mem::size_of::<zend_op_72>() as libc::c_ulong,
                ) == 0 as libc::c_int
                {
                    trace_locals_72(
                        context,
                        &mut zop,
                        remote_execute_data,
                        &mut zfunc.op_array,
                        ((*frame).loc.file).as_mut_ptr(),
                        (*frame).loc.file_len as libc::c_int,
                    );
                }
            }
        } else {
            (*frame)
                .loc
                .file_len = snprintf(
                ((*frame).loc.file).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                b"<internal>\0" as *const u8 as *const libc::c_char,
            ) as size_t;
            (*frame).loc.lineno = -(1 as libc::c_int);
        }
        (*frame).depth = *depth;
        rv = ((*context).event_handler).unwrap()(context, 2 as libc::c_int);
        if rv != 0 as libc::c_int {
            return rv;
        }
        remote_execute_data = execute_data.prev_execute_data;
        *depth += 1 as libc::c_int;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_stack_71(
    mut context: *mut trace_context_t,
    mut remote_execute_data: *mut zend_execute_data_71,
    mut depth: *mut libc::c_int,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut execute_data: zend_execute_data_71 = zend_execute_data_71 {
        opline: 0 as *mut zend_op_71,
        pad0: [0; 16],
        func: 0 as *mut zend_function_71,
        pad1: [0; 16],
        prev_execute_data: 0 as *mut zend_execute_data_71,
        symbol_table: 0 as *mut zend_array_71,
    };
    let mut zfunc: zend_function_71 = _zend_function_71 { type_0: 0 };
    let mut zstring: zend_string_71 = zend_string_71 {
        pad0: [0; 16],
        len: 0,
        val: [0; 1],
    };
    let mut zce: zend_class_entry_71 = zend_class_entry_71 {
        pad0: [0; 8],
        name: 0 as *mut zend_string_71,
    };
    let mut zop: zend_op_71 = zend_op_71 {
        pad0: [0; 24],
        lineno: 0,
    };
    let mut target: *mut trace_target_t = 0 as *mut trace_target_t;
    let mut frame: *mut trace_frame_t = 0 as *mut trace_frame_t;
    target = &mut (*context).target;
    frame = &mut (*context).event.frame;
    *depth = 0 as libc::c_int;
    while !remote_execute_data.is_null() && *depth != opt_max_stack_depth {
        memset(
            &mut execute_data as *mut zend_execute_data_71 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_execute_data_71>() as libc::c_ulong,
        );
        memset(
            &mut zfunc as *mut zend_function_71 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_function_71>() as libc::c_ulong,
        );
        memset(
            &mut zstring as *mut zend_string_71 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_string_71>() as libc::c_ulong,
        );
        memset(
            &mut zce as *mut zend_class_entry_71 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_class_entry_71>() as libc::c_ulong,
        );
        memset(
            &mut zop as *mut zend_op_71 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_op_71>() as libc::c_ulong,
        );
        rv = copy_proc_mem(
            (*context).target.pid,
            b"execute_data\0" as *const u8 as *const libc::c_char,
            remote_execute_data as *mut libc::c_void,
            &mut execute_data as *mut zend_execute_data_71 as *mut libc::c_void,
            ::std::mem::size_of::<zend_execute_data_71>() as libc::c_ulong,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        rv = copy_proc_mem(
            (*context).target.pid,
            b"zfunc\0" as *const u8 as *const libc::c_char,
            execute_data.func as *mut libc::c_void,
            &mut zfunc as *mut zend_function_71 as *mut libc::c_void,
            ::std::mem::size_of::<zend_function_71>() as libc::c_ulong,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        if !(zfunc.common.function_name).is_null() {
            rv = sprint_zstring_71(
                context,
                b"function_name\0" as *const u8 as *const libc::c_char,
                zfunc.common.function_name,
                ((*frame).loc.func).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                &mut (*frame).loc.func_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
        } else {
            (*frame)
                .loc
                .func_len = snprintf(
                ((*frame).loc.func).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                b"<main>\0" as *const u8 as *const libc::c_char,
            ) as size_t;
        }
        if !(zfunc.common.scope).is_null() {
            rv = copy_proc_mem(
                (*context).target.pid,
                b"zce\0" as *const u8 as *const libc::c_char,
                zfunc.common.scope as *mut libc::c_void,
                &mut zce as *mut zend_class_entry_71 as *mut libc::c_void,
                ::std::mem::size_of::<zend_class_entry_71>() as libc::c_ulong,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            rv = sprint_zstring_71(
                context,
                b"class_name\0" as *const u8 as *const libc::c_char,
                zce.name,
                ((*frame).loc.class).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                &mut (*frame).loc.class_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
        } else {
            (*frame).loc.class[0 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
            (*frame).loc.class_len = 0 as libc::c_int as size_t;
        }
        if zfunc.type_0 as libc::c_int == 2 as libc::c_int {
            rv = sprint_zstring_71(
                context,
                b"filename\0" as *const u8 as *const libc::c_char,
                zfunc.op_array.filename,
                ((*frame).loc.file).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                &mut (*frame).loc.file_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            (*frame).loc.lineno = zfunc.op_array.line_start as libc::c_int;
            if (if !varpeek_map.is_null() {
                (*(*varpeek_map).hh.tbl).num_items
            } else {
                0 as libc::c_uint
            }) > 0 as libc::c_int as libc::c_uint
            {
                if copy_proc_mem(
                    (*target).pid,
                    b"opline\0" as *const u8 as *const libc::c_char,
                    execute_data.opline as *mut libc::c_void,
                    &mut zop as *mut zend_op_71 as *mut libc::c_void,
                    ::std::mem::size_of::<zend_op_71>() as libc::c_ulong,
                ) == 0 as libc::c_int
                {
                    trace_locals_71(
                        context,
                        &mut zop,
                        remote_execute_data,
                        &mut zfunc.op_array,
                        ((*frame).loc.file).as_mut_ptr(),
                        (*frame).loc.file_len as libc::c_int,
                    );
                }
            }
        } else {
            (*frame)
                .loc
                .file_len = snprintf(
                ((*frame).loc.file).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                b"<internal>\0" as *const u8 as *const libc::c_char,
            ) as size_t;
            (*frame).loc.lineno = -(1 as libc::c_int);
        }
        (*frame).depth = *depth;
        rv = ((*context).event_handler).unwrap()(context, 2 as libc::c_int);
        if rv != 0 as libc::c_int {
            return rv;
        }
        remote_execute_data = execute_data.prev_execute_data;
        *depth += 1 as libc::c_int;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_stack_80(
    mut context: *mut trace_context_t,
    mut remote_execute_data: *mut zend_execute_data_80,
    mut depth: *mut libc::c_int,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut execute_data: zend_execute_data_80 = zend_execute_data_80 {
        opline: 0 as *mut zend_op_80,
        pad0: [0; 16],
        func: 0 as *mut zend_function_80,
        pad1: [0; 16],
        prev_execute_data: 0 as *mut zend_execute_data_80,
        symbol_table: 0 as *mut zend_array_80,
    };
    let mut zfunc: zend_function_80 = _zend_function_80 { type_0: 0 };
    let mut zstring: zend_string_80 = zend_string_80 {
        pad0: [0; 16],
        len: 0,
        val: [0; 1],
    };
    let mut zce: zend_class_entry_80 = zend_class_entry_80 {
        pad0: [0; 8],
        name: 0 as *mut zend_string_80,
    };
    let mut zop: zend_op_80 = zend_op_80 {
        pad0: [0; 24],
        lineno: 0,
    };
    let mut target: *mut trace_target_t = 0 as *mut trace_target_t;
    let mut frame: *mut trace_frame_t = 0 as *mut trace_frame_t;
    target = &mut (*context).target;
    frame = &mut (*context).event.frame;
    *depth = 0 as libc::c_int;
    while !remote_execute_data.is_null() && *depth != opt_max_stack_depth {
        memset(
            &mut execute_data as *mut zend_execute_data_80 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_execute_data_80>() as libc::c_ulong,
        );
        memset(
            &mut zfunc as *mut zend_function_80 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_function_80>() as libc::c_ulong,
        );
        memset(
            &mut zstring as *mut zend_string_80 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_string_80>() as libc::c_ulong,
        );
        memset(
            &mut zce as *mut zend_class_entry_80 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_class_entry_80>() as libc::c_ulong,
        );
        memset(
            &mut zop as *mut zend_op_80 as *mut libc::c_void,
            0 as libc::c_int,
            ::std::mem::size_of::<zend_op_80>() as libc::c_ulong,
        );
        rv = copy_proc_mem(
            (*context).target.pid,
            b"execute_data\0" as *const u8 as *const libc::c_char,
            remote_execute_data as *mut libc::c_void,
            &mut execute_data as *mut zend_execute_data_80 as *mut libc::c_void,
            ::std::mem::size_of::<zend_execute_data_80>() as libc::c_ulong,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        rv = copy_proc_mem(
            (*context).target.pid,
            b"zfunc\0" as *const u8 as *const libc::c_char,
            execute_data.func as *mut libc::c_void,
            &mut zfunc as *mut zend_function_80 as *mut libc::c_void,
            ::std::mem::size_of::<zend_function_80>() as libc::c_ulong,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        if !(zfunc.common.function_name).is_null() {
            rv = sprint_zstring_80(
                context,
                b"function_name\0" as *const u8 as *const libc::c_char,
                zfunc.common.function_name,
                ((*frame).loc.func).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                &mut (*frame).loc.func_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
        } else {
            (*frame)
                .loc
                .func_len = snprintf(
                ((*frame).loc.func).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                b"<main>\0" as *const u8 as *const libc::c_char,
            ) as size_t;
        }
        if !(zfunc.common.scope).is_null() {
            rv = copy_proc_mem(
                (*context).target.pid,
                b"zce\0" as *const u8 as *const libc::c_char,
                zfunc.common.scope as *mut libc::c_void,
                &mut zce as *mut zend_class_entry_80 as *mut libc::c_void,
                ::std::mem::size_of::<zend_class_entry_80>() as libc::c_ulong,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            rv = sprint_zstring_80(
                context,
                b"class_name\0" as *const u8 as *const libc::c_char,
                zce.name,
                ((*frame).loc.class).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                &mut (*frame).loc.class_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
        } else {
            (*frame).loc.class[0 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
            (*frame).loc.class_len = 0 as libc::c_int as size_t;
        }
        if zfunc.type_0 as libc::c_int == 2 as libc::c_int {
            rv = sprint_zstring_80(
                context,
                b"filename\0" as *const u8 as *const libc::c_char,
                zfunc.op_array.filename,
                ((*frame).loc.file).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                &mut (*frame).loc.file_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            (*frame).loc.lineno = zfunc.op_array.line_start as libc::c_int;
            if (if !varpeek_map.is_null() {
                (*(*varpeek_map).hh.tbl).num_items
            } else {
                0 as libc::c_uint
            }) > 0 as libc::c_int as libc::c_uint
            {
                if copy_proc_mem(
                    (*target).pid,
                    b"opline\0" as *const u8 as *const libc::c_char,
                    execute_data.opline as *mut libc::c_void,
                    &mut zop as *mut zend_op_80 as *mut libc::c_void,
                    ::std::mem::size_of::<zend_op_80>() as libc::c_ulong,
                ) == 0 as libc::c_int
                {
                    trace_locals_80(
                        context,
                        &mut zop,
                        remote_execute_data,
                        &mut zfunc.op_array,
                        ((*frame).loc.file).as_mut_ptr(),
                        (*frame).loc.file_len as libc::c_int,
                    );
                }
            }
        } else {
            (*frame)
                .loc
                .file_len = snprintf(
                ((*frame).loc.file).as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                b"<internal>\0" as *const u8 as *const libc::c_char,
            ) as size_t;
            (*frame).loc.lineno = -(1 as libc::c_int);
        }
        (*frame).depth = *depth;
        rv = ((*context).event_handler).unwrap()(context, 2 as libc::c_int);
        if rv != 0 as libc::c_int {
            return rv;
        }
        remote_execute_data = execute_data.prev_execute_data;
        *depth += 1 as libc::c_int;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_request_info_70(
    mut context: *mut trace_context_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut sapi_globals: sapi_globals_struct_70 = sapi_globals_struct_70 {
        pad0: [0; 8],
        request_info: sapi_request_info_70 {
            pad0: [0; 8],
            query_string: 0 as *mut libc::c_char,
            cookie_data: 0 as *mut libc::c_char,
            pad1: [0; 8],
            path_translated: 0 as *mut libc::c_char,
            request_uri: 0 as *mut libc::c_char,
        },
        pad1: [0; 384],
        global_request_time: 0.,
    };
    let mut target: *mut trace_target_t = 0 as *mut trace_target_t;
    let mut request: *mut trace_request_t = 0 as *mut trace_request_t;
    memset(
        &mut sapi_globals as *mut sapi_globals_struct_70 as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<sapi_globals_struct_70>() as libc::c_ulong,
    );
    request = &mut (*context).event.request;
    target = &mut (*context).target;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"sapi_globals\0" as *const u8 as *const libc::c_char,
        (*target).sapi_globals_addr as *mut libc::c_void,
        &mut sapi_globals as *mut sapi_globals_struct_70 as *mut libc::c_void,
        ::std::mem::size_of::<sapi_globals_struct_70>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    if opt_capture_req_qstring != 0
        && !(sapi_globals.request_info.query_string).is_null()
    {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"query_string\0" as *const u8 as *const libc::c_char,
            sapi_globals.request_info.query_string as *mut libc::c_void,
            ((*request).qstring).as_mut_ptr() as *mut libc::c_void,
            256 as libc::c_int as size_t,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
    } else {
        (*request).qstring[0 as libc::c_int as usize] = '-' as i32 as libc::c_char;
        (*request).qstring[1 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
    }
    if opt_capture_req_cookie != 0 && !(sapi_globals.request_info.cookie_data).is_null()
    {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"cookie_data\0" as *const u8 as *const libc::c_char,
            sapi_globals.request_info.cookie_data as *mut libc::c_void,
            ((*request).cookie).as_mut_ptr() as *mut libc::c_void,
            256 as libc::c_int as size_t,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
    } else {
        (*request).cookie[0 as libc::c_int as usize] = '-' as i32 as libc::c_char;
        (*request).cookie[1 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
    }
    if opt_capture_req_uri != 0 && !(sapi_globals.request_info.request_uri).is_null() {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"request_uri\0" as *const u8 as *const libc::c_char,
            sapi_globals.request_info.request_uri as *mut libc::c_void,
            ((*request).uri).as_mut_ptr() as *mut libc::c_void,
            256 as libc::c_int as size_t,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
    } else {
        (*request).uri[0 as libc::c_int as usize] = '-' as i32 as libc::c_char;
        (*request).uri[1 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
    }
    if opt_capture_req_path != 0
        && !(sapi_globals.request_info.path_translated).is_null()
    {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"path_translated\0" as *const u8 as *const libc::c_char,
            sapi_globals.request_info.path_translated as *mut libc::c_void,
            ((*request).path).as_mut_ptr() as *mut libc::c_void,
            256 as libc::c_int as size_t,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
    } else {
        (*request).path[0 as libc::c_int as usize] = '-' as i32 as libc::c_char;
        (*request).path[1 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
    }
    (*request).ts = sapi_globals.global_request_time;
    rv = ((*context).event_handler).unwrap()(context, 5 as libc::c_int);
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_request_info_73(
    mut context: *mut trace_context_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut sapi_globals: sapi_globals_struct_73 = sapi_globals_struct_73 {
        pad0: [0; 8],
        request_info: sapi_request_info_73 {
            pad0: [0; 8],
            query_string: 0 as *mut libc::c_char,
            cookie_data: 0 as *mut libc::c_char,
            pad1: [0; 8],
            path_translated: 0 as *mut libc::c_char,
            request_uri: 0 as *mut libc::c_char,
        },
        pad1: [0; 384],
        global_request_time: 0.,
    };
    let mut target: *mut trace_target_t = 0 as *mut trace_target_t;
    let mut request: *mut trace_request_t = 0 as *mut trace_request_t;
    memset(
        &mut sapi_globals as *mut sapi_globals_struct_73 as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<sapi_globals_struct_73>() as libc::c_ulong,
    );
    request = &mut (*context).event.request;
    target = &mut (*context).target;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"sapi_globals\0" as *const u8 as *const libc::c_char,
        (*target).sapi_globals_addr as *mut libc::c_void,
        &mut sapi_globals as *mut sapi_globals_struct_73 as *mut libc::c_void,
        ::std::mem::size_of::<sapi_globals_struct_73>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    if opt_capture_req_qstring != 0
        && !(sapi_globals.request_info.query_string).is_null()
    {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"query_string\0" as *const u8 as *const libc::c_char,
            sapi_globals.request_info.query_string as *mut libc::c_void,
            ((*request).qstring).as_mut_ptr() as *mut libc::c_void,
            256 as libc::c_int as size_t,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
    } else {
        (*request).qstring[0 as libc::c_int as usize] = '-' as i32 as libc::c_char;
        (*request).qstring[1 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
    }
    if opt_capture_req_cookie != 0 && !(sapi_globals.request_info.cookie_data).is_null()
    {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"cookie_data\0" as *const u8 as *const libc::c_char,
            sapi_globals.request_info.cookie_data as *mut libc::c_void,
            ((*request).cookie).as_mut_ptr() as *mut libc::c_void,
            256 as libc::c_int as size_t,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
    } else {
        (*request).cookie[0 as libc::c_int as usize] = '-' as i32 as libc::c_char;
        (*request).cookie[1 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
    }
    if opt_capture_req_uri != 0 && !(sapi_globals.request_info.request_uri).is_null() {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"request_uri\0" as *const u8 as *const libc::c_char,
            sapi_globals.request_info.request_uri as *mut libc::c_void,
            ((*request).uri).as_mut_ptr() as *mut libc::c_void,
            256 as libc::c_int as size_t,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
    } else {
        (*request).uri[0 as libc::c_int as usize] = '-' as i32 as libc::c_char;
        (*request).uri[1 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
    }
    if opt_capture_req_path != 0
        && !(sapi_globals.request_info.path_translated).is_null()
    {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"path_translated\0" as *const u8 as *const libc::c_char,
            sapi_globals.request_info.path_translated as *mut libc::c_void,
            ((*request).path).as_mut_ptr() as *mut libc::c_void,
            256 as libc::c_int as size_t,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
    } else {
        (*request).path[0 as libc::c_int as usize] = '-' as i32 as libc::c_char;
        (*request).path[1 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
    }
    (*request).ts = sapi_globals.global_request_time;
    rv = ((*context).event_handler).unwrap()(context, 5 as libc::c_int);
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_request_info_81(
    mut context: *mut trace_context_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut sapi_globals: sapi_globals_struct_81 = sapi_globals_struct_81 {
        pad0: [0; 8],
        request_info: sapi_request_info_81 {
            pad0: [0; 8],
            query_string: 0 as *mut libc::c_char,
            cookie_data: 0 as *mut libc::c_char,
            pad1: [0; 8],
            path_translated: 0 as *mut libc::c_char,
            request_uri: 0 as *mut libc::c_char,
        },
        pad1: [0; 384],
        global_request_time: 0.,
    };
    let mut target: *mut trace_target_t = 0 as *mut trace_target_t;
    let mut request: *mut trace_request_t = 0 as *mut trace_request_t;
    memset(
        &mut sapi_globals as *mut sapi_globals_struct_81 as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<sapi_globals_struct_81>() as libc::c_ulong,
    );
    request = &mut (*context).event.request;
    target = &mut (*context).target;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"sapi_globals\0" as *const u8 as *const libc::c_char,
        (*target).sapi_globals_addr as *mut libc::c_void,
        &mut sapi_globals as *mut sapi_globals_struct_81 as *mut libc::c_void,
        ::std::mem::size_of::<sapi_globals_struct_81>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    if opt_capture_req_qstring != 0
        && !(sapi_globals.request_info.query_string).is_null()
    {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"query_string\0" as *const u8 as *const libc::c_char,
            sapi_globals.request_info.query_string as *mut libc::c_void,
            ((*request).qstring).as_mut_ptr() as *mut libc::c_void,
            256 as libc::c_int as size_t,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
    } else {
        (*request).qstring[0 as libc::c_int as usize] = '-' as i32 as libc::c_char;
        (*request).qstring[1 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
    }
    if opt_capture_req_cookie != 0 && !(sapi_globals.request_info.cookie_data).is_null()
    {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"cookie_data\0" as *const u8 as *const libc::c_char,
            sapi_globals.request_info.cookie_data as *mut libc::c_void,
            ((*request).cookie).as_mut_ptr() as *mut libc::c_void,
            256 as libc::c_int as size_t,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
    } else {
        (*request).cookie[0 as libc::c_int as usize] = '-' as i32 as libc::c_char;
        (*request).cookie[1 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
    }
    if opt_capture_req_uri != 0 && !(sapi_globals.request_info.request_uri).is_null() {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"request_uri\0" as *const u8 as *const libc::c_char,
            sapi_globals.request_info.request_uri as *mut libc::c_void,
            ((*request).uri).as_mut_ptr() as *mut libc::c_void,
            256 as libc::c_int as size_t,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
    } else {
        (*request).uri[0 as libc::c_int as usize] = '-' as i32 as libc::c_char;
        (*request).uri[1 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
    }
    if opt_capture_req_path != 0
        && !(sapi_globals.request_info.path_translated).is_null()
    {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"path_translated\0" as *const u8 as *const libc::c_char,
            sapi_globals.request_info.path_translated as *mut libc::c_void,
            ((*request).path).as_mut_ptr() as *mut libc::c_void,
            256 as libc::c_int as size_t,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
    } else {
        (*request).path[0 as libc::c_int as usize] = '-' as i32 as libc::c_char;
        (*request).path[1 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
    }
    (*request).ts = sapi_globals.global_request_time;
    rv = ((*context).event_handler).unwrap()(context, 5 as libc::c_int);
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_request_info_71(
    mut context: *mut trace_context_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut sapi_globals: sapi_globals_struct_71 = sapi_globals_struct_71 {
        pad0: [0; 8],
        request_info: sapi_request_info_71 {
            pad0: [0; 8],
            query_string: 0 as *mut libc::c_char,
            cookie_data: 0 as *mut libc::c_char,
            pad1: [0; 8],
            path_translated: 0 as *mut libc::c_char,
            request_uri: 0 as *mut libc::c_char,
        },
        pad1: [0; 384],
        global_request_time: 0.,
    };
    let mut target: *mut trace_target_t = 0 as *mut trace_target_t;
    let mut request: *mut trace_request_t = 0 as *mut trace_request_t;
    memset(
        &mut sapi_globals as *mut sapi_globals_struct_71 as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<sapi_globals_struct_71>() as libc::c_ulong,
    );
    request = &mut (*context).event.request;
    target = &mut (*context).target;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"sapi_globals\0" as *const u8 as *const libc::c_char,
        (*target).sapi_globals_addr as *mut libc::c_void,
        &mut sapi_globals as *mut sapi_globals_struct_71 as *mut libc::c_void,
        ::std::mem::size_of::<sapi_globals_struct_71>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    if opt_capture_req_qstring != 0
        && !(sapi_globals.request_info.query_string).is_null()
    {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"query_string\0" as *const u8 as *const libc::c_char,
            sapi_globals.request_info.query_string as *mut libc::c_void,
            ((*request).qstring).as_mut_ptr() as *mut libc::c_void,
            256 as libc::c_int as size_t,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
    } else {
        (*request).qstring[0 as libc::c_int as usize] = '-' as i32 as libc::c_char;
        (*request).qstring[1 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
    }
    if opt_capture_req_cookie != 0 && !(sapi_globals.request_info.cookie_data).is_null()
    {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"cookie_data\0" as *const u8 as *const libc::c_char,
            sapi_globals.request_info.cookie_data as *mut libc::c_void,
            ((*request).cookie).as_mut_ptr() as *mut libc::c_void,
            256 as libc::c_int as size_t,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
    } else {
        (*request).cookie[0 as libc::c_int as usize] = '-' as i32 as libc::c_char;
        (*request).cookie[1 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
    }
    if opt_capture_req_uri != 0 && !(sapi_globals.request_info.request_uri).is_null() {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"request_uri\0" as *const u8 as *const libc::c_char,
            sapi_globals.request_info.request_uri as *mut libc::c_void,
            ((*request).uri).as_mut_ptr() as *mut libc::c_void,
            256 as libc::c_int as size_t,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
    } else {
        (*request).uri[0 as libc::c_int as usize] = '-' as i32 as libc::c_char;
        (*request).uri[1 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
    }
    if opt_capture_req_path != 0
        && !(sapi_globals.request_info.path_translated).is_null()
    {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"path_translated\0" as *const u8 as *const libc::c_char,
            sapi_globals.request_info.path_translated as *mut libc::c_void,
            ((*request).path).as_mut_ptr() as *mut libc::c_void,
            256 as libc::c_int as size_t,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
    } else {
        (*request).path[0 as libc::c_int as usize] = '-' as i32 as libc::c_char;
        (*request).path[1 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
    }
    (*request).ts = sapi_globals.global_request_time;
    rv = ((*context).event_handler).unwrap()(context, 5 as libc::c_int);
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_request_info_74(
    mut context: *mut trace_context_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut sapi_globals: sapi_globals_struct_74 = sapi_globals_struct_74 {
        pad0: [0; 8],
        request_info: sapi_request_info_74 {
            pad0: [0; 8],
            query_string: 0 as *mut libc::c_char,
            cookie_data: 0 as *mut libc::c_char,
            pad1: [0; 8],
            path_translated: 0 as *mut libc::c_char,
            request_uri: 0 as *mut libc::c_char,
        },
        pad1: [0; 384],
        global_request_time: 0.,
    };
    let mut target: *mut trace_target_t = 0 as *mut trace_target_t;
    let mut request: *mut trace_request_t = 0 as *mut trace_request_t;
    memset(
        &mut sapi_globals as *mut sapi_globals_struct_74 as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<sapi_globals_struct_74>() as libc::c_ulong,
    );
    request = &mut (*context).event.request;
    target = &mut (*context).target;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"sapi_globals\0" as *const u8 as *const libc::c_char,
        (*target).sapi_globals_addr as *mut libc::c_void,
        &mut sapi_globals as *mut sapi_globals_struct_74 as *mut libc::c_void,
        ::std::mem::size_of::<sapi_globals_struct_74>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    if opt_capture_req_qstring != 0
        && !(sapi_globals.request_info.query_string).is_null()
    {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"query_string\0" as *const u8 as *const libc::c_char,
            sapi_globals.request_info.query_string as *mut libc::c_void,
            ((*request).qstring).as_mut_ptr() as *mut libc::c_void,
            256 as libc::c_int as size_t,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
    } else {
        (*request).qstring[0 as libc::c_int as usize] = '-' as i32 as libc::c_char;
        (*request).qstring[1 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
    }
    if opt_capture_req_cookie != 0 && !(sapi_globals.request_info.cookie_data).is_null()
    {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"cookie_data\0" as *const u8 as *const libc::c_char,
            sapi_globals.request_info.cookie_data as *mut libc::c_void,
            ((*request).cookie).as_mut_ptr() as *mut libc::c_void,
            256 as libc::c_int as size_t,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
    } else {
        (*request).cookie[0 as libc::c_int as usize] = '-' as i32 as libc::c_char;
        (*request).cookie[1 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
    }
    if opt_capture_req_uri != 0 && !(sapi_globals.request_info.request_uri).is_null() {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"request_uri\0" as *const u8 as *const libc::c_char,
            sapi_globals.request_info.request_uri as *mut libc::c_void,
            ((*request).uri).as_mut_ptr() as *mut libc::c_void,
            256 as libc::c_int as size_t,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
    } else {
        (*request).uri[0 as libc::c_int as usize] = '-' as i32 as libc::c_char;
        (*request).uri[1 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
    }
    if opt_capture_req_path != 0
        && !(sapi_globals.request_info.path_translated).is_null()
    {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"path_translated\0" as *const u8 as *const libc::c_char,
            sapi_globals.request_info.path_translated as *mut libc::c_void,
            ((*request).path).as_mut_ptr() as *mut libc::c_void,
            256 as libc::c_int as size_t,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
    } else {
        (*request).path[0 as libc::c_int as usize] = '-' as i32 as libc::c_char;
        (*request).path[1 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
    }
    (*request).ts = sapi_globals.global_request_time;
    rv = ((*context).event_handler).unwrap()(context, 5 as libc::c_int);
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_request_info_72(
    mut context: *mut trace_context_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut sapi_globals: sapi_globals_struct_72 = sapi_globals_struct_72 {
        pad0: [0; 8],
        request_info: sapi_request_info_72 {
            pad0: [0; 8],
            query_string: 0 as *mut libc::c_char,
            cookie_data: 0 as *mut libc::c_char,
            pad1: [0; 8],
            path_translated: 0 as *mut libc::c_char,
            request_uri: 0 as *mut libc::c_char,
        },
        pad1: [0; 384],
        global_request_time: 0.,
    };
    let mut target: *mut trace_target_t = 0 as *mut trace_target_t;
    let mut request: *mut trace_request_t = 0 as *mut trace_request_t;
    memset(
        &mut sapi_globals as *mut sapi_globals_struct_72 as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<sapi_globals_struct_72>() as libc::c_ulong,
    );
    request = &mut (*context).event.request;
    target = &mut (*context).target;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"sapi_globals\0" as *const u8 as *const libc::c_char,
        (*target).sapi_globals_addr as *mut libc::c_void,
        &mut sapi_globals as *mut sapi_globals_struct_72 as *mut libc::c_void,
        ::std::mem::size_of::<sapi_globals_struct_72>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    if opt_capture_req_qstring != 0
        && !(sapi_globals.request_info.query_string).is_null()
    {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"query_string\0" as *const u8 as *const libc::c_char,
            sapi_globals.request_info.query_string as *mut libc::c_void,
            ((*request).qstring).as_mut_ptr() as *mut libc::c_void,
            256 as libc::c_int as size_t,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
    } else {
        (*request).qstring[0 as libc::c_int as usize] = '-' as i32 as libc::c_char;
        (*request).qstring[1 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
    }
    if opt_capture_req_cookie != 0 && !(sapi_globals.request_info.cookie_data).is_null()
    {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"cookie_data\0" as *const u8 as *const libc::c_char,
            sapi_globals.request_info.cookie_data as *mut libc::c_void,
            ((*request).cookie).as_mut_ptr() as *mut libc::c_void,
            256 as libc::c_int as size_t,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
    } else {
        (*request).cookie[0 as libc::c_int as usize] = '-' as i32 as libc::c_char;
        (*request).cookie[1 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
    }
    if opt_capture_req_uri != 0 && !(sapi_globals.request_info.request_uri).is_null() {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"request_uri\0" as *const u8 as *const libc::c_char,
            sapi_globals.request_info.request_uri as *mut libc::c_void,
            ((*request).uri).as_mut_ptr() as *mut libc::c_void,
            256 as libc::c_int as size_t,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
    } else {
        (*request).uri[0 as libc::c_int as usize] = '-' as i32 as libc::c_char;
        (*request).uri[1 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
    }
    if opt_capture_req_path != 0
        && !(sapi_globals.request_info.path_translated).is_null()
    {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"path_translated\0" as *const u8 as *const libc::c_char,
            sapi_globals.request_info.path_translated as *mut libc::c_void,
            ((*request).path).as_mut_ptr() as *mut libc::c_void,
            256 as libc::c_int as size_t,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
    } else {
        (*request).path[0 as libc::c_int as usize] = '-' as i32 as libc::c_char;
        (*request).path[1 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
    }
    (*request).ts = sapi_globals.global_request_time;
    rv = ((*context).event_handler).unwrap()(context, 5 as libc::c_int);
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_request_info_80(
    mut context: *mut trace_context_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut sapi_globals: sapi_globals_struct_80 = sapi_globals_struct_80 {
        pad0: [0; 8],
        request_info: sapi_request_info_80 {
            pad0: [0; 8],
            query_string: 0 as *mut libc::c_char,
            cookie_data: 0 as *mut libc::c_char,
            pad1: [0; 8],
            path_translated: 0 as *mut libc::c_char,
            request_uri: 0 as *mut libc::c_char,
        },
        pad1: [0; 384],
        global_request_time: 0.,
    };
    let mut target: *mut trace_target_t = 0 as *mut trace_target_t;
    let mut request: *mut trace_request_t = 0 as *mut trace_request_t;
    memset(
        &mut sapi_globals as *mut sapi_globals_struct_80 as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<sapi_globals_struct_80>() as libc::c_ulong,
    );
    request = &mut (*context).event.request;
    target = &mut (*context).target;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"sapi_globals\0" as *const u8 as *const libc::c_char,
        (*target).sapi_globals_addr as *mut libc::c_void,
        &mut sapi_globals as *mut sapi_globals_struct_80 as *mut libc::c_void,
        ::std::mem::size_of::<sapi_globals_struct_80>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    if opt_capture_req_qstring != 0
        && !(sapi_globals.request_info.query_string).is_null()
    {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"query_string\0" as *const u8 as *const libc::c_char,
            sapi_globals.request_info.query_string as *mut libc::c_void,
            ((*request).qstring).as_mut_ptr() as *mut libc::c_void,
            256 as libc::c_int as size_t,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
    } else {
        (*request).qstring[0 as libc::c_int as usize] = '-' as i32 as libc::c_char;
        (*request).qstring[1 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
    }
    if opt_capture_req_cookie != 0 && !(sapi_globals.request_info.cookie_data).is_null()
    {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"cookie_data\0" as *const u8 as *const libc::c_char,
            sapi_globals.request_info.cookie_data as *mut libc::c_void,
            ((*request).cookie).as_mut_ptr() as *mut libc::c_void,
            256 as libc::c_int as size_t,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
    } else {
        (*request).cookie[0 as libc::c_int as usize] = '-' as i32 as libc::c_char;
        (*request).cookie[1 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
    }
    if opt_capture_req_uri != 0 && !(sapi_globals.request_info.request_uri).is_null() {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"request_uri\0" as *const u8 as *const libc::c_char,
            sapi_globals.request_info.request_uri as *mut libc::c_void,
            ((*request).uri).as_mut_ptr() as *mut libc::c_void,
            256 as libc::c_int as size_t,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
    } else {
        (*request).uri[0 as libc::c_int as usize] = '-' as i32 as libc::c_char;
        (*request).uri[1 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
    }
    if opt_capture_req_path != 0
        && !(sapi_globals.request_info.path_translated).is_null()
    {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"path_translated\0" as *const u8 as *const libc::c_char,
            sapi_globals.request_info.path_translated as *mut libc::c_void,
            ((*request).path).as_mut_ptr() as *mut libc::c_void,
            256 as libc::c_int as size_t,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
    } else {
        (*request).path[0 as libc::c_int as usize] = '-' as i32 as libc::c_char;
        (*request).path[1 as libc::c_int as usize] = '\0' as i32 as libc::c_char;
    }
    (*request).ts = sapi_globals.global_request_time;
    rv = ((*context).event_handler).unwrap()(context, 5 as libc::c_int);
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_memory_info_81(
    mut context: *mut trace_context_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut mm_heap: zend_mm_heap_81 = zend_mm_heap_81 {
        pad0: [0; 16],
        size: 0,
        peak: 0,
    };
    let mut alloc_globals: zend_alloc_globals_81 = zend_alloc_globals_81 {
        mm_heap: 0 as *mut zend_mm_heap_81,
    };
    let mut target: *mut trace_target_t = 0 as *mut trace_target_t;
    memset(
        &mut mm_heap as *mut zend_mm_heap_81 as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<zend_mm_heap_81>() as libc::c_ulong,
    );
    alloc_globals.mm_heap = 0 as *mut zend_mm_heap_81;
    target = &mut (*context).target;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"alloc_globals\0" as *const u8 as *const libc::c_char,
        (*target).alloc_globals_addr as *mut libc::c_void,
        &mut alloc_globals as *mut zend_alloc_globals_81 as *mut libc::c_void,
        ::std::mem::size_of::<zend_alloc_globals_81>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = copy_proc_mem(
        (*context).target.pid,
        b"mm_heap\0" as *const u8 as *const libc::c_char,
        alloc_globals.mm_heap as *mut libc::c_void,
        &mut mm_heap as *mut zend_mm_heap_81 as *mut libc::c_void,
        ::std::mem::size_of::<zend_mm_heap_81>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    (*context).event.mem.size = mm_heap.size;
    (*context).event.mem.peak = mm_heap.peak;
    rv = ((*context).event_handler).unwrap()(context, 6 as libc::c_int);
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_memory_info_70(
    mut context: *mut trace_context_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut mm_heap: zend_mm_heap_70 = zend_mm_heap_70 {
        pad0: [0; 16],
        size: 0,
        peak: 0,
    };
    let mut alloc_globals: zend_alloc_globals_70 = zend_alloc_globals_70 {
        mm_heap: 0 as *mut zend_mm_heap_70,
    };
    let mut target: *mut trace_target_t = 0 as *mut trace_target_t;
    memset(
        &mut mm_heap as *mut zend_mm_heap_70 as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<zend_mm_heap_70>() as libc::c_ulong,
    );
    alloc_globals.mm_heap = 0 as *mut zend_mm_heap_70;
    target = &mut (*context).target;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"alloc_globals\0" as *const u8 as *const libc::c_char,
        (*target).alloc_globals_addr as *mut libc::c_void,
        &mut alloc_globals as *mut zend_alloc_globals_70 as *mut libc::c_void,
        ::std::mem::size_of::<zend_alloc_globals_70>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = copy_proc_mem(
        (*context).target.pid,
        b"mm_heap\0" as *const u8 as *const libc::c_char,
        alloc_globals.mm_heap as *mut libc::c_void,
        &mut mm_heap as *mut zend_mm_heap_70 as *mut libc::c_void,
        ::std::mem::size_of::<zend_mm_heap_70>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    (*context).event.mem.size = mm_heap.size;
    (*context).event.mem.peak = mm_heap.peak;
    rv = ((*context).event_handler).unwrap()(context, 6 as libc::c_int);
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_memory_info_73(
    mut context: *mut trace_context_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut mm_heap: zend_mm_heap_73 = zend_mm_heap_73 {
        pad0: [0; 16],
        size: 0,
        peak: 0,
    };
    let mut alloc_globals: zend_alloc_globals_73 = zend_alloc_globals_73 {
        mm_heap: 0 as *mut zend_mm_heap_73,
    };
    let mut target: *mut trace_target_t = 0 as *mut trace_target_t;
    memset(
        &mut mm_heap as *mut zend_mm_heap_73 as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<zend_mm_heap_73>() as libc::c_ulong,
    );
    alloc_globals.mm_heap = 0 as *mut zend_mm_heap_73;
    target = &mut (*context).target;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"alloc_globals\0" as *const u8 as *const libc::c_char,
        (*target).alloc_globals_addr as *mut libc::c_void,
        &mut alloc_globals as *mut zend_alloc_globals_73 as *mut libc::c_void,
        ::std::mem::size_of::<zend_alloc_globals_73>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = copy_proc_mem(
        (*context).target.pid,
        b"mm_heap\0" as *const u8 as *const libc::c_char,
        alloc_globals.mm_heap as *mut libc::c_void,
        &mut mm_heap as *mut zend_mm_heap_73 as *mut libc::c_void,
        ::std::mem::size_of::<zend_mm_heap_73>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    (*context).event.mem.size = mm_heap.size;
    (*context).event.mem.peak = mm_heap.peak;
    rv = ((*context).event_handler).unwrap()(context, 6 as libc::c_int);
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_memory_info_72(
    mut context: *mut trace_context_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut mm_heap: zend_mm_heap_72 = zend_mm_heap_72 {
        pad0: [0; 16],
        size: 0,
        peak: 0,
    };
    let mut alloc_globals: zend_alloc_globals_72 = zend_alloc_globals_72 {
        mm_heap: 0 as *mut zend_mm_heap_72,
    };
    let mut target: *mut trace_target_t = 0 as *mut trace_target_t;
    memset(
        &mut mm_heap as *mut zend_mm_heap_72 as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<zend_mm_heap_72>() as libc::c_ulong,
    );
    alloc_globals.mm_heap = 0 as *mut zend_mm_heap_72;
    target = &mut (*context).target;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"alloc_globals\0" as *const u8 as *const libc::c_char,
        (*target).alloc_globals_addr as *mut libc::c_void,
        &mut alloc_globals as *mut zend_alloc_globals_72 as *mut libc::c_void,
        ::std::mem::size_of::<zend_alloc_globals_72>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = copy_proc_mem(
        (*context).target.pid,
        b"mm_heap\0" as *const u8 as *const libc::c_char,
        alloc_globals.mm_heap as *mut libc::c_void,
        &mut mm_heap as *mut zend_mm_heap_72 as *mut libc::c_void,
        ::std::mem::size_of::<zend_mm_heap_72>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    (*context).event.mem.size = mm_heap.size;
    (*context).event.mem.peak = mm_heap.peak;
    rv = ((*context).event_handler).unwrap()(context, 6 as libc::c_int);
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_memory_info_71(
    mut context: *mut trace_context_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut mm_heap: zend_mm_heap_71 = zend_mm_heap_71 {
        pad0: [0; 16],
        size: 0,
        peak: 0,
    };
    let mut alloc_globals: zend_alloc_globals_71 = zend_alloc_globals_71 {
        mm_heap: 0 as *mut zend_mm_heap_71,
    };
    let mut target: *mut trace_target_t = 0 as *mut trace_target_t;
    memset(
        &mut mm_heap as *mut zend_mm_heap_71 as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<zend_mm_heap_71>() as libc::c_ulong,
    );
    alloc_globals.mm_heap = 0 as *mut zend_mm_heap_71;
    target = &mut (*context).target;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"alloc_globals\0" as *const u8 as *const libc::c_char,
        (*target).alloc_globals_addr as *mut libc::c_void,
        &mut alloc_globals as *mut zend_alloc_globals_71 as *mut libc::c_void,
        ::std::mem::size_of::<zend_alloc_globals_71>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = copy_proc_mem(
        (*context).target.pid,
        b"mm_heap\0" as *const u8 as *const libc::c_char,
        alloc_globals.mm_heap as *mut libc::c_void,
        &mut mm_heap as *mut zend_mm_heap_71 as *mut libc::c_void,
        ::std::mem::size_of::<zend_mm_heap_71>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    (*context).event.mem.size = mm_heap.size;
    (*context).event.mem.peak = mm_heap.peak;
    rv = ((*context).event_handler).unwrap()(context, 6 as libc::c_int);
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_memory_info_74(
    mut context: *mut trace_context_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut mm_heap: zend_mm_heap_74 = zend_mm_heap_74 {
        pad0: [0; 16],
        size: 0,
        peak: 0,
    };
    let mut alloc_globals: zend_alloc_globals_74 = zend_alloc_globals_74 {
        mm_heap: 0 as *mut zend_mm_heap_74,
    };
    let mut target: *mut trace_target_t = 0 as *mut trace_target_t;
    memset(
        &mut mm_heap as *mut zend_mm_heap_74 as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<zend_mm_heap_74>() as libc::c_ulong,
    );
    alloc_globals.mm_heap = 0 as *mut zend_mm_heap_74;
    target = &mut (*context).target;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"alloc_globals\0" as *const u8 as *const libc::c_char,
        (*target).alloc_globals_addr as *mut libc::c_void,
        &mut alloc_globals as *mut zend_alloc_globals_74 as *mut libc::c_void,
        ::std::mem::size_of::<zend_alloc_globals_74>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = copy_proc_mem(
        (*context).target.pid,
        b"mm_heap\0" as *const u8 as *const libc::c_char,
        alloc_globals.mm_heap as *mut libc::c_void,
        &mut mm_heap as *mut zend_mm_heap_74 as *mut libc::c_void,
        ::std::mem::size_of::<zend_mm_heap_74>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    (*context).event.mem.size = mm_heap.size;
    (*context).event.mem.peak = mm_heap.peak;
    rv = ((*context).event_handler).unwrap()(context, 6 as libc::c_int);
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_memory_info_80(
    mut context: *mut trace_context_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut mm_heap: zend_mm_heap_80 = zend_mm_heap_80 {
        pad0: [0; 16],
        size: 0,
        peak: 0,
    };
    let mut alloc_globals: zend_alloc_globals_80 = zend_alloc_globals_80 {
        mm_heap: 0 as *mut zend_mm_heap_80,
    };
    let mut target: *mut trace_target_t = 0 as *mut trace_target_t;
    memset(
        &mut mm_heap as *mut zend_mm_heap_80 as *mut libc::c_void,
        0 as libc::c_int,
        ::std::mem::size_of::<zend_mm_heap_80>() as libc::c_ulong,
    );
    alloc_globals.mm_heap = 0 as *mut zend_mm_heap_80;
    target = &mut (*context).target;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"alloc_globals\0" as *const u8 as *const libc::c_char,
        (*target).alloc_globals_addr as *mut libc::c_void,
        &mut alloc_globals as *mut zend_alloc_globals_80 as *mut libc::c_void,
        ::std::mem::size_of::<zend_alloc_globals_80>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = copy_proc_mem(
        (*context).target.pid,
        b"mm_heap\0" as *const u8 as *const libc::c_char,
        alloc_globals.mm_heap as *mut libc::c_void,
        &mut mm_heap as *mut zend_mm_heap_80 as *mut libc::c_void,
        ::std::mem::size_of::<zend_mm_heap_80>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    (*context).event.mem.size = mm_heap.size;
    (*context).event.mem.peak = mm_heap.peak;
    rv = ((*context).event_handler).unwrap()(context, 6 as libc::c_int);
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_globals_72(mut context: *mut trace_context_t) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut gentry: *mut glopeek_entry_t = 0 as *mut glopeek_entry_t;
    let mut gentry_tmp: *mut glopeek_entry_t = 0 as *mut glopeek_entry_t;
    let mut garray: *mut zend_array_72 = 0 as *mut zend_array_72;
    let mut symtable: *mut zend_array_72 = 0 as *mut zend_array_72;
    let mut lbucket: Bucket_72 = Bucket_72 {
        val: zval_72 {
            value: _zend_value_72 { lval: 0 },
            u1: C2RustUnnamed_24 {
                v: C2RustUnnamed_25 {
                    type_0: 0,
                    pad0: [0; 3],
                },
            },
            u2: C2RustUnnamed_23 { next: 0 },
        },
        h: 0,
        key: 0 as *mut zend_string_72,
    };
    symtable = ((*context).target.executor_globals_addr)
        .wrapping_add(304 as libc::c_ulong) as *mut zend_array_72;
    gentry = glopeek_map;
    gentry_tmp = (if !glopeek_map.is_null() {
        (*glopeek_map).hh.next
    } else {
        0 as *mut libc::c_void
    }) as *mut glopeek_entry_t;
    while !gentry.is_null() {
        if (*gentry).gloname[0 as libc::c_int as usize] != 0 {
            rv = copy_zarray_bucket_72(
                context,
                symtable,
                ((*gentry).gloname).as_mut_ptr(),
                &mut lbucket,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            garray = lbucket.val.value.arr;
        } else {
            garray = symtable;
        }
        rv = sprint_zarray_val72(
            context,
            garray,
            ((*gentry).varname).as_mut_ptr(),
            ((*context).buf).as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
            &mut (*context).buf_len,
        );
        if rv == 0 as libc::c_int {
            (*context).event.glopeek.gentry = gentry;
            (*context).event.glopeek.zval_str = ((*context).buf).as_mut_ptr();
            rv = ((*context).event_handler).unwrap()(context, 4 as libc::c_int);
            if rv != 0 as libc::c_int {
                return rv;
            }
        }
        gentry = gentry_tmp;
        gentry_tmp = (if !gentry_tmp.is_null() {
            (*gentry_tmp).hh.next
        } else {
            0 as *mut libc::c_void
        }) as *mut glopeek_entry_t;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_globals_74(mut context: *mut trace_context_t) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut gentry: *mut glopeek_entry_t = 0 as *mut glopeek_entry_t;
    let mut gentry_tmp: *mut glopeek_entry_t = 0 as *mut glopeek_entry_t;
    let mut garray: *mut zend_array_74 = 0 as *mut zend_array_74;
    let mut symtable: *mut zend_array_74 = 0 as *mut zend_array_74;
    let mut lbucket: Bucket_74 = Bucket_74 {
        val: zval_74 {
            value: _zend_value_74 { lval: 0 },
            u1: C2RustUnnamed_32 {
                v: C2RustUnnamed_33 {
                    type_0: 0,
                    pad0: [0; 3],
                },
            },
            u2: C2RustUnnamed_31 { next: 0 },
        },
        h: 0,
        key: 0 as *mut zend_string_74,
    };
    symtable = ((*context).target.executor_globals_addr)
        .wrapping_add(304 as libc::c_ulong) as *mut zend_array_74;
    gentry = glopeek_map;
    gentry_tmp = (if !glopeek_map.is_null() {
        (*glopeek_map).hh.next
    } else {
        0 as *mut libc::c_void
    }) as *mut glopeek_entry_t;
    while !gentry.is_null() {
        if (*gentry).gloname[0 as libc::c_int as usize] != 0 {
            rv = copy_zarray_bucket_74(
                context,
                symtable,
                ((*gentry).gloname).as_mut_ptr(),
                &mut lbucket,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            garray = lbucket.val.value.arr;
        } else {
            garray = symtable;
        }
        rv = sprint_zarray_val74(
            context,
            garray,
            ((*gentry).varname).as_mut_ptr(),
            ((*context).buf).as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
            &mut (*context).buf_len,
        );
        if rv == 0 as libc::c_int {
            (*context).event.glopeek.gentry = gentry;
            (*context).event.glopeek.zval_str = ((*context).buf).as_mut_ptr();
            rv = ((*context).event_handler).unwrap()(context, 4 as libc::c_int);
            if rv != 0 as libc::c_int {
                return rv;
            }
        }
        gentry = gentry_tmp;
        gentry_tmp = (if !gentry_tmp.is_null() {
            (*gentry_tmp).hh.next
        } else {
            0 as *mut libc::c_void
        }) as *mut glopeek_entry_t;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_globals_80(mut context: *mut trace_context_t) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut gentry: *mut glopeek_entry_t = 0 as *mut glopeek_entry_t;
    let mut gentry_tmp: *mut glopeek_entry_t = 0 as *mut glopeek_entry_t;
    let mut garray: *mut zend_array_80 = 0 as *mut zend_array_80;
    let mut symtable: *mut zend_array_80 = 0 as *mut zend_array_80;
    let mut lbucket: Bucket_80 = Bucket_80 {
        val: zval_80 {
            value: _zend_value_80 { lval: 0 },
            u1: C2RustUnnamed_36 {
                v: C2RustUnnamed_37 {
                    type_0: 0,
                    pad0: [0; 3],
                },
            },
            u2: C2RustUnnamed_35 { next: 0 },
        },
        h: 0,
        key: 0 as *mut zend_string_80,
    };
    symtable = ((*context).target.executor_globals_addr)
        .wrapping_add(304 as libc::c_ulong) as *mut zend_array_80;
    gentry = glopeek_map;
    gentry_tmp = (if !glopeek_map.is_null() {
        (*glopeek_map).hh.next
    } else {
        0 as *mut libc::c_void
    }) as *mut glopeek_entry_t;
    while !gentry.is_null() {
        if (*gentry).gloname[0 as libc::c_int as usize] != 0 {
            rv = copy_zarray_bucket_80(
                context,
                symtable,
                ((*gentry).gloname).as_mut_ptr(),
                &mut lbucket,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            garray = lbucket.val.value.arr;
        } else {
            garray = symtable;
        }
        rv = sprint_zarray_val80(
            context,
            garray,
            ((*gentry).varname).as_mut_ptr(),
            ((*context).buf).as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
            &mut (*context).buf_len,
        );
        if rv == 0 as libc::c_int {
            (*context).event.glopeek.gentry = gentry;
            (*context).event.glopeek.zval_str = ((*context).buf).as_mut_ptr();
            rv = ((*context).event_handler).unwrap()(context, 4 as libc::c_int);
            if rv != 0 as libc::c_int {
                return rv;
            }
        }
        gentry = gentry_tmp;
        gentry_tmp = (if !gentry_tmp.is_null() {
            (*gentry_tmp).hh.next
        } else {
            0 as *mut libc::c_void
        }) as *mut glopeek_entry_t;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_globals_73(mut context: *mut trace_context_t) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut gentry: *mut glopeek_entry_t = 0 as *mut glopeek_entry_t;
    let mut gentry_tmp: *mut glopeek_entry_t = 0 as *mut glopeek_entry_t;
    let mut garray: *mut zend_array_73 = 0 as *mut zend_array_73;
    let mut symtable: *mut zend_array_73 = 0 as *mut zend_array_73;
    let mut lbucket: Bucket_73 = Bucket_73 {
        val: zval_73 {
            value: _zend_value_73 { lval: 0 },
            u1: C2RustUnnamed_28 {
                v: C2RustUnnamed_29 {
                    type_0: 0,
                    pad0: [0; 3],
                },
            },
            u2: C2RustUnnamed_27 { next: 0 },
        },
        h: 0,
        key: 0 as *mut zend_string_73,
    };
    symtable = ((*context).target.executor_globals_addr)
        .wrapping_add(304 as libc::c_ulong) as *mut zend_array_73;
    gentry = glopeek_map;
    gentry_tmp = (if !glopeek_map.is_null() {
        (*glopeek_map).hh.next
    } else {
        0 as *mut libc::c_void
    }) as *mut glopeek_entry_t;
    while !gentry.is_null() {
        if (*gentry).gloname[0 as libc::c_int as usize] != 0 {
            rv = copy_zarray_bucket_73(
                context,
                symtable,
                ((*gentry).gloname).as_mut_ptr(),
                &mut lbucket,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            garray = lbucket.val.value.arr;
        } else {
            garray = symtable;
        }
        rv = sprint_zarray_val73(
            context,
            garray,
            ((*gentry).varname).as_mut_ptr(),
            ((*context).buf).as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
            &mut (*context).buf_len,
        );
        if rv == 0 as libc::c_int {
            (*context).event.glopeek.gentry = gentry;
            (*context).event.glopeek.zval_str = ((*context).buf).as_mut_ptr();
            rv = ((*context).event_handler).unwrap()(context, 4 as libc::c_int);
            if rv != 0 as libc::c_int {
                return rv;
            }
        }
        gentry = gentry_tmp;
        gentry_tmp = (if !gentry_tmp.is_null() {
            (*gentry_tmp).hh.next
        } else {
            0 as *mut libc::c_void
        }) as *mut glopeek_entry_t;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_globals_81(mut context: *mut trace_context_t) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut gentry: *mut glopeek_entry_t = 0 as *mut glopeek_entry_t;
    let mut gentry_tmp: *mut glopeek_entry_t = 0 as *mut glopeek_entry_t;
    let mut garray: *mut zend_array_81 = 0 as *mut zend_array_81;
    let mut symtable: *mut zend_array_81 = 0 as *mut zend_array_81;
    let mut lbucket: Bucket_81 = Bucket_81 {
        val: zval_81 {
            value: _zend_value_81 { lval: 0 },
            u1: C2RustUnnamed_40 {
                v: C2RustUnnamed_41 {
                    type_0: 0,
                    pad0: [0; 3],
                },
            },
            u2: C2RustUnnamed_39 { next: 0 },
        },
        h: 0,
        key: 0 as *mut zend_string_81,
    };
    symtable = ((*context).target.executor_globals_addr)
        .wrapping_add(304 as libc::c_ulong) as *mut zend_array_81;
    gentry = glopeek_map;
    gentry_tmp = (if !glopeek_map.is_null() {
        (*glopeek_map).hh.next
    } else {
        0 as *mut libc::c_void
    }) as *mut glopeek_entry_t;
    while !gentry.is_null() {
        if (*gentry).gloname[0 as libc::c_int as usize] != 0 {
            rv = copy_zarray_bucket_81(
                context,
                symtable,
                ((*gentry).gloname).as_mut_ptr(),
                &mut lbucket,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            garray = lbucket.val.value.arr;
        } else {
            garray = symtable;
        }
        rv = sprint_zarray_val81(
            context,
            garray,
            ((*gentry).varname).as_mut_ptr(),
            ((*context).buf).as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
            &mut (*context).buf_len,
        );
        if rv == 0 as libc::c_int {
            (*context).event.glopeek.gentry = gentry;
            (*context).event.glopeek.zval_str = ((*context).buf).as_mut_ptr();
            rv = ((*context).event_handler).unwrap()(context, 4 as libc::c_int);
            if rv != 0 as libc::c_int {
                return rv;
            }
        }
        gentry = gentry_tmp;
        gentry_tmp = (if !gentry_tmp.is_null() {
            (*gentry_tmp).hh.next
        } else {
            0 as *mut libc::c_void
        }) as *mut glopeek_entry_t;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_globals_71(mut context: *mut trace_context_t) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut gentry: *mut glopeek_entry_t = 0 as *mut glopeek_entry_t;
    let mut gentry_tmp: *mut glopeek_entry_t = 0 as *mut glopeek_entry_t;
    let mut garray: *mut zend_array_71 = 0 as *mut zend_array_71;
    let mut symtable: *mut zend_array_71 = 0 as *mut zend_array_71;
    let mut lbucket: Bucket_71 = Bucket_71 {
        val: zval_71 {
            value: _zend_value_71 { lval: 0 },
            u1: C2RustUnnamed_20 {
                v: C2RustUnnamed_21 {
                    type_0: 0,
                    pad0: [0; 3],
                },
            },
            u2: C2RustUnnamed_19 { next: 0 },
        },
        h: 0,
        key: 0 as *mut zend_string_71,
    };
    symtable = ((*context).target.executor_globals_addr)
        .wrapping_add(304 as libc::c_ulong) as *mut zend_array_71;
    gentry = glopeek_map;
    gentry_tmp = (if !glopeek_map.is_null() {
        (*glopeek_map).hh.next
    } else {
        0 as *mut libc::c_void
    }) as *mut glopeek_entry_t;
    while !gentry.is_null() {
        if (*gentry).gloname[0 as libc::c_int as usize] != 0 {
            rv = copy_zarray_bucket_71(
                context,
                symtable,
                ((*gentry).gloname).as_mut_ptr(),
                &mut lbucket,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            garray = lbucket.val.value.arr;
        } else {
            garray = symtable;
        }
        rv = sprint_zarray_val71(
            context,
            garray,
            ((*gentry).varname).as_mut_ptr(),
            ((*context).buf).as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
            &mut (*context).buf_len,
        );
        if rv == 0 as libc::c_int {
            (*context).event.glopeek.gentry = gentry;
            (*context).event.glopeek.zval_str = ((*context).buf).as_mut_ptr();
            rv = ((*context).event_handler).unwrap()(context, 4 as libc::c_int);
            if rv != 0 as libc::c_int {
                return rv;
            }
        }
        gentry = gentry_tmp;
        gentry_tmp = (if !gentry_tmp.is_null() {
            (*gentry_tmp).hh.next
        } else {
            0 as *mut libc::c_void
        }) as *mut glopeek_entry_t;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_globals_70(mut context: *mut trace_context_t) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut gentry: *mut glopeek_entry_t = 0 as *mut glopeek_entry_t;
    let mut gentry_tmp: *mut glopeek_entry_t = 0 as *mut glopeek_entry_t;
    let mut garray: *mut zend_array_70 = 0 as *mut zend_array_70;
    let mut symtable: *mut zend_array_70 = 0 as *mut zend_array_70;
    let mut lbucket: Bucket_70 = Bucket_70 {
        val: zval_70 {
            value: _zend_value_70 { lval: 0 },
            u1: C2RustUnnamed_16 {
                v: C2RustUnnamed_17 {
                    type_0: 0,
                    pad0: [0; 3],
                },
            },
            u2: C2RustUnnamed_15 { next: 0 },
        },
        h: 0,
        key: 0 as *mut zend_string_70,
    };
    symtable = ((*context).target.executor_globals_addr)
        .wrapping_add(304 as libc::c_ulong) as *mut zend_array_70;
    gentry = glopeek_map;
    gentry_tmp = (if !glopeek_map.is_null() {
        (*glopeek_map).hh.next
    } else {
        0 as *mut libc::c_void
    }) as *mut glopeek_entry_t;
    while !gentry.is_null() {
        if (*gentry).gloname[0 as libc::c_int as usize] != 0 {
            rv = copy_zarray_bucket_70(
                context,
                symtable,
                ((*gentry).gloname).as_mut_ptr(),
                &mut lbucket,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            garray = lbucket.val.value.arr;
        } else {
            garray = symtable;
        }
        rv = sprint_zarray_val70(
            context,
            garray,
            ((*gentry).varname).as_mut_ptr(),
            ((*context).buf).as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
            &mut (*context).buf_len,
        );
        if rv == 0 as libc::c_int {
            (*context).event.glopeek.gentry = gentry;
            (*context).event.glopeek.zval_str = ((*context).buf).as_mut_ptr();
            rv = ((*context).event_handler).unwrap()(context, 4 as libc::c_int);
            if rv != 0 as libc::c_int {
                return rv;
            }
        }
        gentry = gentry_tmp;
        gentry_tmp = (if !gentry_tmp.is_null() {
            (*gentry_tmp).hh.next
        } else {
            0 as *mut libc::c_void
        }) as *mut glopeek_entry_t;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_locals_80(
    mut context: *mut trace_context_t,
    mut zop: *mut zend_op_80,
    mut remote_execute_data: *mut zend_execute_data_80,
    mut op_array: *mut zend_op_array_80,
    mut file: *mut libc::c_char,
    mut file_len: libc::c_int,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut i: libc::c_int = 0;
    let mut num_vars_found: libc::c_int = 0;
    let mut num_vars_peeking: libc::c_int = 0;
    let mut tmp: [libc::c_char; 256] = [0; 256];
    let mut tmp_len: size_t = 0;
    let mut zstrp: *mut zend_string_80 = 0 as *mut zend_string_80;
    let mut entry: *mut varpeek_entry_t = 0 as *mut varpeek_entry_t;
    let mut var: *mut varpeek_var_t = 0 as *mut varpeek_var_t;
    let mut varpeek_key: [libc::c_char; 256] = [0; 256];
    let mut zv: zval_80 = zval_80 {
        value: _zend_value_80 { lval: 0 },
        u1: C2RustUnnamed_36 {
            v: C2RustUnnamed_37 {
                type_0: 0,
                pad0: [0; 3],
            },
        },
        u2: C2RustUnnamed_35 { next: 0 },
    };
    snprintf(
        varpeek_key.as_mut_ptr(),
        ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
        b"%.*s:%d\0" as *const u8 as *const libc::c_char,
        file_len,
        file,
        (*zop).lineno,
    );
    let mut _uthash_hfstr_keylen: libc::c_uint = strlen(varpeek_key.as_mut_ptr())
        as libc::c_uint;
    let mut _hf_hashv: libc::c_uint = 0;
    let mut _hj_i: libc::c_uint = 0;
    let mut _hj_j: libc::c_uint = 0;
    let mut _hj_k: libc::c_uint = 0;
    let mut _hj_key: *const libc::c_uchar = varpeek_key.as_mut_ptr()
        as *const libc::c_uchar;
    _hf_hashv = 0xfeedbeef as libc::c_uint;
    _hj_j = 0x9e3779b9 as libc::c_uint;
    _hj_i = _hj_j;
    _hj_k = _uthash_hfstr_keylen;
    while _hj_k >= 12 as libc::c_uint {
        _hj_i = _hj_i
            .wrapping_add(
                (*_hj_key.offset(0 as libc::c_int as isize) as libc::c_uint)
                    .wrapping_add(
                        (*_hj_key.offset(1 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(2 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(3 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    ),
            );
        _hj_j = _hj_j
            .wrapping_add(
                (*_hj_key.offset(4 as libc::c_int as isize) as libc::c_uint)
                    .wrapping_add(
                        (*_hj_key.offset(5 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(6 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(7 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    ),
            );
        _hf_hashv = _hf_hashv
            .wrapping_add(
                (*_hj_key.offset(8 as libc::c_int as isize) as libc::c_uint)
                    .wrapping_add(
                        (*_hj_key.offset(9 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(10 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(11 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    ),
            );
        _hj_i = _hj_i.wrapping_sub(_hj_j);
        _hj_i = _hj_i.wrapping_sub(_hf_hashv);
        _hj_i ^= _hf_hashv >> 13 as libc::c_int;
        _hj_j = _hj_j.wrapping_sub(_hf_hashv);
        _hj_j = _hj_j.wrapping_sub(_hj_i);
        _hj_j ^= _hj_i << 8 as libc::c_int;
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
        _hf_hashv ^= _hj_j >> 13 as libc::c_int;
        _hj_i = _hj_i.wrapping_sub(_hj_j);
        _hj_i = _hj_i.wrapping_sub(_hf_hashv);
        _hj_i ^= _hf_hashv >> 12 as libc::c_int;
        _hj_j = _hj_j.wrapping_sub(_hf_hashv);
        _hj_j = _hj_j.wrapping_sub(_hj_i);
        _hj_j ^= _hj_i << 16 as libc::c_int;
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
        _hf_hashv ^= _hj_j >> 5 as libc::c_int;
        _hj_i = _hj_i.wrapping_sub(_hj_j);
        _hj_i = _hj_i.wrapping_sub(_hf_hashv);
        _hj_i ^= _hf_hashv >> 3 as libc::c_int;
        _hj_j = _hj_j.wrapping_sub(_hf_hashv);
        _hj_j = _hj_j.wrapping_sub(_hj_i);
        _hj_j ^= _hj_i << 10 as libc::c_int;
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
        _hf_hashv ^= _hj_j >> 15 as libc::c_int;
        _hj_key = _hj_key.offset(12 as libc::c_int as isize);
        _hj_k = _hj_k.wrapping_sub(12 as libc::c_uint);
    }
    _hf_hashv = _hf_hashv.wrapping_add(_uthash_hfstr_keylen);
    let mut current_block_51: u64;
    match _hj_k {
        11 => {
            _hf_hashv = _hf_hashv
                .wrapping_add(
                    (*_hj_key.offset(10 as libc::c_int as isize) as libc::c_uint)
                        << 24 as libc::c_int,
                );
            current_block_51 = 13123247282646307832;
        }
        10 => {
            current_block_51 = 13123247282646307832;
        }
        9 => {
            current_block_51 = 14853848573952860288;
        }
        8 => {
            current_block_51 = 15431895544887093819;
        }
        7 => {
            current_block_51 = 12075132031745075122;
        }
        6 => {
            current_block_51 = 11405499526447123277;
        }
        5 => {
            current_block_51 = 13808454444484529224;
        }
        4 => {
            current_block_51 = 3698854699900794795;
        }
        3 => {
            current_block_51 = 5833383872235047996;
        }
        2 => {
            current_block_51 = 6055324840116454512;
        }
        1 => {
            current_block_51 = 9450336222286149879;
        }
        _ => {
            current_block_51 = 2122094917359643297;
        }
    }
    match current_block_51 {
        13123247282646307832 => {
            _hf_hashv = _hf_hashv
                .wrapping_add(
                    (*_hj_key.offset(9 as libc::c_int as isize) as libc::c_uint)
                        << 16 as libc::c_int,
                );
            current_block_51 = 14853848573952860288;
        }
        _ => {}
    }
    match current_block_51 {
        14853848573952860288 => {
            _hf_hashv = _hf_hashv
                .wrapping_add(
                    (*_hj_key.offset(8 as libc::c_int as isize) as libc::c_uint)
                        << 8 as libc::c_int,
                );
            current_block_51 = 15431895544887093819;
        }
        _ => {}
    }
    match current_block_51 {
        15431895544887093819 => {
            _hj_j = _hj_j
                .wrapping_add(
                    (*_hj_key.offset(7 as libc::c_int as isize) as libc::c_uint)
                        << 24 as libc::c_int,
                );
            current_block_51 = 12075132031745075122;
        }
        _ => {}
    }
    match current_block_51 {
        12075132031745075122 => {
            _hj_j = _hj_j
                .wrapping_add(
                    (*_hj_key.offset(6 as libc::c_int as isize) as libc::c_uint)
                        << 16 as libc::c_int,
                );
            current_block_51 = 11405499526447123277;
        }
        _ => {}
    }
    match current_block_51 {
        11405499526447123277 => {
            _hj_j = _hj_j
                .wrapping_add(
                    (*_hj_key.offset(5 as libc::c_int as isize) as libc::c_uint)
                        << 8 as libc::c_int,
                );
            current_block_51 = 13808454444484529224;
        }
        _ => {}
    }
    match current_block_51 {
        13808454444484529224 => {
            _hj_j = _hj_j
                .wrapping_add(
                    *_hj_key.offset(4 as libc::c_int as isize) as libc::c_uint,
                );
            current_block_51 = 3698854699900794795;
        }
        _ => {}
    }
    match current_block_51 {
        3698854699900794795 => {
            _hj_i = _hj_i
                .wrapping_add(
                    (*_hj_key.offset(3 as libc::c_int as isize) as libc::c_uint)
                        << 24 as libc::c_int,
                );
            current_block_51 = 5833383872235047996;
        }
        _ => {}
    }
    match current_block_51 {
        5833383872235047996 => {
            _hj_i = _hj_i
                .wrapping_add(
                    (*_hj_key.offset(2 as libc::c_int as isize) as libc::c_uint)
                        << 16 as libc::c_int,
                );
            current_block_51 = 6055324840116454512;
        }
        _ => {}
    }
    match current_block_51 {
        6055324840116454512 => {
            _hj_i = _hj_i
                .wrapping_add(
                    (*_hj_key.offset(1 as libc::c_int as isize) as libc::c_uint)
                        << 8 as libc::c_int,
                );
            current_block_51 = 9450336222286149879;
        }
        _ => {}
    }
    match current_block_51 {
        9450336222286149879 => {
            _hj_i = _hj_i
                .wrapping_add(
                    *_hj_key.offset(0 as libc::c_int as isize) as libc::c_uint,
                );
        }
        _ => {}
    }
    _hj_i = _hj_i.wrapping_sub(_hj_j);
    _hj_i = _hj_i.wrapping_sub(_hf_hashv);
    _hj_i ^= _hf_hashv >> 13 as libc::c_int;
    _hj_j = _hj_j.wrapping_sub(_hf_hashv);
    _hj_j = _hj_j.wrapping_sub(_hj_i);
    _hj_j ^= _hj_i << 8 as libc::c_int;
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
    _hf_hashv ^= _hj_j >> 13 as libc::c_int;
    _hj_i = _hj_i.wrapping_sub(_hj_j);
    _hj_i = _hj_i.wrapping_sub(_hf_hashv);
    _hj_i ^= _hf_hashv >> 12 as libc::c_int;
    _hj_j = _hj_j.wrapping_sub(_hf_hashv);
    _hj_j = _hj_j.wrapping_sub(_hj_i);
    _hj_j ^= _hj_i << 16 as libc::c_int;
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
    _hf_hashv ^= _hj_j >> 5 as libc::c_int;
    _hj_i = _hj_i.wrapping_sub(_hj_j);
    _hj_i = _hj_i.wrapping_sub(_hf_hashv);
    _hj_i ^= _hf_hashv >> 3 as libc::c_int;
    _hj_j = _hj_j.wrapping_sub(_hf_hashv);
    _hj_j = _hj_j.wrapping_sub(_hj_i);
    _hj_j ^= _hj_i << 10 as libc::c_int;
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
    _hf_hashv ^= _hj_j >> 15 as libc::c_int;
    entry = 0 as *mut varpeek_entry_t;
    if !varpeek_map.is_null() {
        let mut _hf_bkt: libc::c_uint = 0;
        _hf_bkt = _hf_hashv
            & ((*(*varpeek_map).hh.tbl).num_buckets).wrapping_sub(1 as libc::c_uint);
        if 1 as libc::c_int != 0 as libc::c_int {
            if !((*((*(*varpeek_map).hh.tbl).buckets).offset(_hf_bkt as isize)).hh_head)
                .is_null()
            {
                entry = ((*((*(*varpeek_map).hh.tbl).buckets).offset(_hf_bkt as isize))
                    .hh_head as *mut libc::c_char)
                    .offset(-((*(*varpeek_map).hh.tbl).hho as isize))
                    as *mut libc::c_void as *mut varpeek_entry_t;
            } else {
                entry = 0 as *mut varpeek_entry_t;
            }
            while !entry.is_null() {
                if (*entry).hh.hashv == _hf_hashv
                    && (*entry).hh.keylen == _uthash_hfstr_keylen
                {
                    if memcmp(
                        (*entry).hh.key,
                        varpeek_key.as_mut_ptr() as *const libc::c_void,
                        _uthash_hfstr_keylen as libc::c_ulong,
                    ) == 0 as libc::c_int
                    {
                        break;
                    }
                }
                if !((*entry).hh.hh_next).is_null() {
                    entry = ((*entry).hh.hh_next as *mut libc::c_char)
                        .offset(-((*(*varpeek_map).hh.tbl).hho as isize))
                        as *mut libc::c_void as *mut varpeek_entry_t;
                } else {
                    entry = 0 as *mut varpeek_entry_t;
                }
            }
        }
    }
    if entry.is_null() {
        return 0 as libc::c_int;
    }
    num_vars_found = 0 as libc::c_int;
    num_vars_peeking = (if !((*entry).varmap).is_null() {
        (*(*(*entry).varmap).hh.tbl).num_items
    } else {
        0 as libc::c_uint
    }) as libc::c_int;
    i = 0 as libc::c_int;
    while i < (*op_array).last_var {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"var\0" as *const u8 as *const libc::c_char,
            ((*op_array).vars).offset(i as isize) as *mut libc::c_void,
            &mut zstrp as *mut *mut zend_string_80 as *mut libc::c_void,
            ::std::mem::size_of::<*mut zend_string_80>() as libc::c_ulong,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        rv = sprint_zstring_80(
            context,
            b"var\0" as *const u8 as *const libc::c_char,
            zstrp,
            tmp.as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
            &mut tmp_len,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        let mut _hf_hashv_0: libc::c_uint = 0;
        let mut _hj_i_0: libc::c_uint = 0;
        let mut _hj_j_0: libc::c_uint = 0;
        let mut _hj_k_0: libc::c_uint = 0;
        let mut _hj_key_0: *const libc::c_uchar = tmp.as_mut_ptr()
            as *const libc::c_uchar;
        _hf_hashv_0 = 0xfeedbeef as libc::c_uint;
        _hj_j_0 = 0x9e3779b9 as libc::c_uint;
        _hj_i_0 = _hj_j_0;
        _hj_k_0 = tmp_len as libc::c_uint;
        while _hj_k_0 >= 12 as libc::c_uint {
            _hj_i_0 = _hj_i_0
                .wrapping_add(
                    (*_hj_key_0.offset(0 as libc::c_int as isize) as libc::c_uint)
                        .wrapping_add(
                            (*_hj_key_0.offset(1 as libc::c_int as isize)
                                as libc::c_uint) << 8 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(2 as libc::c_int as isize)
                                as libc::c_uint) << 16 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(3 as libc::c_int as isize)
                                as libc::c_uint) << 24 as libc::c_int,
                        ),
                );
            _hj_j_0 = _hj_j_0
                .wrapping_add(
                    (*_hj_key_0.offset(4 as libc::c_int as isize) as libc::c_uint)
                        .wrapping_add(
                            (*_hj_key_0.offset(5 as libc::c_int as isize)
                                as libc::c_uint) << 8 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(6 as libc::c_int as isize)
                                as libc::c_uint) << 16 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(7 as libc::c_int as isize)
                                as libc::c_uint) << 24 as libc::c_int,
                        ),
                );
            _hf_hashv_0 = _hf_hashv_0
                .wrapping_add(
                    (*_hj_key_0.offset(8 as libc::c_int as isize) as libc::c_uint)
                        .wrapping_add(
                            (*_hj_key_0.offset(9 as libc::c_int as isize)
                                as libc::c_uint) << 8 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(10 as libc::c_int as isize)
                                as libc::c_uint) << 16 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(11 as libc::c_int as isize)
                                as libc::c_uint) << 24 as libc::c_int,
                        ),
                );
            _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
            _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
            _hj_i_0 ^= _hf_hashv_0 >> 13 as libc::c_int;
            _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
            _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
            _hj_j_0 ^= _hj_i_0 << 8 as libc::c_int;
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
            _hf_hashv_0 ^= _hj_j_0 >> 13 as libc::c_int;
            _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
            _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
            _hj_i_0 ^= _hf_hashv_0 >> 12 as libc::c_int;
            _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
            _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
            _hj_j_0 ^= _hj_i_0 << 16 as libc::c_int;
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
            _hf_hashv_0 ^= _hj_j_0 >> 5 as libc::c_int;
            _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
            _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
            _hj_i_0 ^= _hf_hashv_0 >> 3 as libc::c_int;
            _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
            _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
            _hj_j_0 ^= _hj_i_0 << 10 as libc::c_int;
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
            _hf_hashv_0 ^= _hj_j_0 >> 15 as libc::c_int;
            _hj_key_0 = _hj_key_0.offset(12 as libc::c_int as isize);
            _hj_k_0 = _hj_k_0.wrapping_sub(12 as libc::c_uint);
        }
        _hf_hashv_0 = _hf_hashv_0.wrapping_add(tmp_len as libc::c_uint);
        let mut current_block_180: u64;
        match _hj_k_0 {
            11 => {
                _hf_hashv_0 = _hf_hashv_0
                    .wrapping_add(
                        (*_hj_key_0.offset(10 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    );
                current_block_180 = 2733378890296845863;
            }
            10 => {
                current_block_180 = 2733378890296845863;
            }
            9 => {
                current_block_180 = 5253539668012596322;
            }
            8 => {
                current_block_180 = 16142136264699743456;
            }
            7 => {
                current_block_180 = 4070826078710924919;
            }
            6 => {
                current_block_180 = 17233726847460454466;
            }
            5 => {
                current_block_180 = 150377910770538727;
            }
            4 => {
                current_block_180 = 11754764909036198237;
            }
            3 => {
                current_block_180 = 277759850295617268;
            }
            2 => {
                current_block_180 = 10129034005401564058;
            }
            1 => {
                current_block_180 = 4035010254227904572;
            }
            _ => {
                current_block_180 = 6215370584428403858;
            }
        }
        match current_block_180 {
            2733378890296845863 => {
                _hf_hashv_0 = _hf_hashv_0
                    .wrapping_add(
                        (*_hj_key_0.offset(9 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    );
                current_block_180 = 5253539668012596322;
            }
            _ => {}
        }
        match current_block_180 {
            5253539668012596322 => {
                _hf_hashv_0 = _hf_hashv_0
                    .wrapping_add(
                        (*_hj_key_0.offset(8 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    );
                current_block_180 = 16142136264699743456;
            }
            _ => {}
        }
        match current_block_180 {
            16142136264699743456 => {
                _hj_j_0 = _hj_j_0
                    .wrapping_add(
                        (*_hj_key_0.offset(7 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    );
                current_block_180 = 4070826078710924919;
            }
            _ => {}
        }
        match current_block_180 {
            4070826078710924919 => {
                _hj_j_0 = _hj_j_0
                    .wrapping_add(
                        (*_hj_key_0.offset(6 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    );
                current_block_180 = 17233726847460454466;
            }
            _ => {}
        }
        match current_block_180 {
            17233726847460454466 => {
                _hj_j_0 = _hj_j_0
                    .wrapping_add(
                        (*_hj_key_0.offset(5 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    );
                current_block_180 = 150377910770538727;
            }
            _ => {}
        }
        match current_block_180 {
            150377910770538727 => {
                _hj_j_0 = _hj_j_0
                    .wrapping_add(
                        *_hj_key_0.offset(4 as libc::c_int as isize) as libc::c_uint,
                    );
                current_block_180 = 11754764909036198237;
            }
            _ => {}
        }
        match current_block_180 {
            11754764909036198237 => {
                _hj_i_0 = _hj_i_0
                    .wrapping_add(
                        (*_hj_key_0.offset(3 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    );
                current_block_180 = 277759850295617268;
            }
            _ => {}
        }
        match current_block_180 {
            277759850295617268 => {
                _hj_i_0 = _hj_i_0
                    .wrapping_add(
                        (*_hj_key_0.offset(2 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    );
                current_block_180 = 10129034005401564058;
            }
            _ => {}
        }
        match current_block_180 {
            10129034005401564058 => {
                _hj_i_0 = _hj_i_0
                    .wrapping_add(
                        (*_hj_key_0.offset(1 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    );
                current_block_180 = 4035010254227904572;
            }
            _ => {}
        }
        match current_block_180 {
            4035010254227904572 => {
                _hj_i_0 = _hj_i_0
                    .wrapping_add(
                        *_hj_key_0.offset(0 as libc::c_int as isize) as libc::c_uint,
                    );
            }
            _ => {}
        }
        _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
        _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
        _hj_i_0 ^= _hf_hashv_0 >> 13 as libc::c_int;
        _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
        _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
        _hj_j_0 ^= _hj_i_0 << 8 as libc::c_int;
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
        _hf_hashv_0 ^= _hj_j_0 >> 13 as libc::c_int;
        _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
        _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
        _hj_i_0 ^= _hf_hashv_0 >> 12 as libc::c_int;
        _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
        _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
        _hj_j_0 ^= _hj_i_0 << 16 as libc::c_int;
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
        _hf_hashv_0 ^= _hj_j_0 >> 5 as libc::c_int;
        _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
        _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
        _hj_i_0 ^= _hf_hashv_0 >> 3 as libc::c_int;
        _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
        _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
        _hj_j_0 ^= _hj_i_0 << 10 as libc::c_int;
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
        _hf_hashv_0 ^= _hj_j_0 >> 15 as libc::c_int;
        var = 0 as *mut varpeek_var_t;
        if !((*entry).varmap).is_null() {
            let mut _hf_bkt_0: libc::c_uint = 0;
            _hf_bkt_0 = _hf_hashv_0
                & ((*(*(*entry).varmap).hh.tbl).num_buckets)
                    .wrapping_sub(1 as libc::c_uint);
            if 1 as libc::c_int != 0 as libc::c_int {
                if !((*((*(*(*entry).varmap).hh.tbl).buckets).offset(_hf_bkt_0 as isize))
                    .hh_head)
                    .is_null()
                {
                    var = ((*((*(*(*entry).varmap).hh.tbl).buckets)
                        .offset(_hf_bkt_0 as isize))
                        .hh_head as *mut libc::c_char)
                        .offset(-((*(*(*entry).varmap).hh.tbl).hho as isize))
                        as *mut libc::c_void as *mut varpeek_var_t;
                } else {
                    var = 0 as *mut varpeek_var_t;
                }
                while !var.is_null() {
                    if (*var).hh.hashv == _hf_hashv_0
                        && (*var).hh.keylen as libc::c_ulong == tmp_len
                    {
                        if memcmp(
                            (*var).hh.key,
                            tmp.as_mut_ptr() as *const libc::c_void,
                            tmp_len,
                        ) == 0 as libc::c_int
                        {
                            break;
                        }
                    }
                    if !((*var).hh.hh_next).is_null() {
                        var = ((*var).hh.hh_next as *mut libc::c_char)
                            .offset(-((*(*(*entry).varmap).hh.tbl).hho as isize))
                            as *mut libc::c_void as *mut varpeek_var_t;
                    } else {
                        var = 0 as *mut varpeek_var_t;
                    }
                }
            }
        }
        if !var.is_null() {
            num_vars_found += 1 as libc::c_int;
            rv = copy_proc_mem(
                (*context).target.pid,
                b"zval\0" as *const u8 as *const libc::c_char,
                (remote_execute_data as *mut zval_80)
                    .offset((5 as libc::c_int + i) as isize) as *mut libc::c_void,
                &mut zv as *mut zval_80 as *mut libc::c_void,
                ::std::mem::size_of::<zval_80>() as libc::c_ulong,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            rv = sprint_zval_80(
                context,
                &mut zv,
                tmp.as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                &mut tmp_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            (*context).event.varpeek.entry = entry;
            (*context).event.varpeek.var = var;
            (*context).event.varpeek.zval_str = tmp.as_mut_ptr();
            rv = ((*context).event_handler).unwrap()(context, 3 as libc::c_int);
            if rv != 0 as libc::c_int {
                return rv;
            }
            if num_vars_found >= num_vars_peeking {
                break;
            }
        }
        i += 1;
        i;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_locals_70(
    mut context: *mut trace_context_t,
    mut zop: *mut zend_op_70,
    mut remote_execute_data: *mut zend_execute_data_70,
    mut op_array: *mut zend_op_array_70,
    mut file: *mut libc::c_char,
    mut file_len: libc::c_int,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut i: libc::c_int = 0;
    let mut num_vars_found: libc::c_int = 0;
    let mut num_vars_peeking: libc::c_int = 0;
    let mut tmp: [libc::c_char; 256] = [0; 256];
    let mut tmp_len: size_t = 0;
    let mut zstrp: *mut zend_string_70 = 0 as *mut zend_string_70;
    let mut entry: *mut varpeek_entry_t = 0 as *mut varpeek_entry_t;
    let mut var: *mut varpeek_var_t = 0 as *mut varpeek_var_t;
    let mut varpeek_key: [libc::c_char; 256] = [0; 256];
    let mut zv: zval_70 = zval_70 {
        value: _zend_value_70 { lval: 0 },
        u1: C2RustUnnamed_16 {
            v: C2RustUnnamed_17 {
                type_0: 0,
                pad0: [0; 3],
            },
        },
        u2: C2RustUnnamed_15 { next: 0 },
    };
    snprintf(
        varpeek_key.as_mut_ptr(),
        ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
        b"%.*s:%d\0" as *const u8 as *const libc::c_char,
        file_len,
        file,
        (*zop).lineno,
    );
    let mut _uthash_hfstr_keylen: libc::c_uint = strlen(varpeek_key.as_mut_ptr())
        as libc::c_uint;
    let mut _hf_hashv: libc::c_uint = 0;
    let mut _hj_i: libc::c_uint = 0;
    let mut _hj_j: libc::c_uint = 0;
    let mut _hj_k: libc::c_uint = 0;
    let mut _hj_key: *const libc::c_uchar = varpeek_key.as_mut_ptr()
        as *const libc::c_uchar;
    _hf_hashv = 0xfeedbeef as libc::c_uint;
    _hj_j = 0x9e3779b9 as libc::c_uint;
    _hj_i = _hj_j;
    _hj_k = _uthash_hfstr_keylen;
    while _hj_k >= 12 as libc::c_uint {
        _hj_i = _hj_i
            .wrapping_add(
                (*_hj_key.offset(0 as libc::c_int as isize) as libc::c_uint)
                    .wrapping_add(
                        (*_hj_key.offset(1 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(2 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(3 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    ),
            );
        _hj_j = _hj_j
            .wrapping_add(
                (*_hj_key.offset(4 as libc::c_int as isize) as libc::c_uint)
                    .wrapping_add(
                        (*_hj_key.offset(5 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(6 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(7 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    ),
            );
        _hf_hashv = _hf_hashv
            .wrapping_add(
                (*_hj_key.offset(8 as libc::c_int as isize) as libc::c_uint)
                    .wrapping_add(
                        (*_hj_key.offset(9 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(10 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(11 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    ),
            );
        _hj_i = _hj_i.wrapping_sub(_hj_j);
        _hj_i = _hj_i.wrapping_sub(_hf_hashv);
        _hj_i ^= _hf_hashv >> 13 as libc::c_int;
        _hj_j = _hj_j.wrapping_sub(_hf_hashv);
        _hj_j = _hj_j.wrapping_sub(_hj_i);
        _hj_j ^= _hj_i << 8 as libc::c_int;
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
        _hf_hashv ^= _hj_j >> 13 as libc::c_int;
        _hj_i = _hj_i.wrapping_sub(_hj_j);
        _hj_i = _hj_i.wrapping_sub(_hf_hashv);
        _hj_i ^= _hf_hashv >> 12 as libc::c_int;
        _hj_j = _hj_j.wrapping_sub(_hf_hashv);
        _hj_j = _hj_j.wrapping_sub(_hj_i);
        _hj_j ^= _hj_i << 16 as libc::c_int;
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
        _hf_hashv ^= _hj_j >> 5 as libc::c_int;
        _hj_i = _hj_i.wrapping_sub(_hj_j);
        _hj_i = _hj_i.wrapping_sub(_hf_hashv);
        _hj_i ^= _hf_hashv >> 3 as libc::c_int;
        _hj_j = _hj_j.wrapping_sub(_hf_hashv);
        _hj_j = _hj_j.wrapping_sub(_hj_i);
        _hj_j ^= _hj_i << 10 as libc::c_int;
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
        _hf_hashv ^= _hj_j >> 15 as libc::c_int;
        _hj_key = _hj_key.offset(12 as libc::c_int as isize);
        _hj_k = _hj_k.wrapping_sub(12 as libc::c_uint);
    }
    _hf_hashv = _hf_hashv.wrapping_add(_uthash_hfstr_keylen);
    let mut current_block_51: u64;
    match _hj_k {
        11 => {
            _hf_hashv = _hf_hashv
                .wrapping_add(
                    (*_hj_key.offset(10 as libc::c_int as isize) as libc::c_uint)
                        << 24 as libc::c_int,
                );
            current_block_51 = 8167610489481516926;
        }
        10 => {
            current_block_51 = 8167610489481516926;
        }
        9 => {
            current_block_51 = 9079051014678707311;
        }
        8 => {
            current_block_51 = 820618448328385132;
        }
        7 => {
            current_block_51 = 156173412262971790;
        }
        6 => {
            current_block_51 = 16414671544637706643;
        }
        5 => {
            current_block_51 = 16387024115351872110;
        }
        4 => {
            current_block_51 = 3786507298470799200;
        }
        3 => {
            current_block_51 = 4476726861521291313;
        }
        2 => {
            current_block_51 = 1901383105422891195;
        }
        1 => {
            current_block_51 = 1880499993493072654;
        }
        _ => {
            current_block_51 = 2122094917359643297;
        }
    }
    match current_block_51 {
        8167610489481516926 => {
            _hf_hashv = _hf_hashv
                .wrapping_add(
                    (*_hj_key.offset(9 as libc::c_int as isize) as libc::c_uint)
                        << 16 as libc::c_int,
                );
            current_block_51 = 9079051014678707311;
        }
        _ => {}
    }
    match current_block_51 {
        9079051014678707311 => {
            _hf_hashv = _hf_hashv
                .wrapping_add(
                    (*_hj_key.offset(8 as libc::c_int as isize) as libc::c_uint)
                        << 8 as libc::c_int,
                );
            current_block_51 = 820618448328385132;
        }
        _ => {}
    }
    match current_block_51 {
        820618448328385132 => {
            _hj_j = _hj_j
                .wrapping_add(
                    (*_hj_key.offset(7 as libc::c_int as isize) as libc::c_uint)
                        << 24 as libc::c_int,
                );
            current_block_51 = 156173412262971790;
        }
        _ => {}
    }
    match current_block_51 {
        156173412262971790 => {
            _hj_j = _hj_j
                .wrapping_add(
                    (*_hj_key.offset(6 as libc::c_int as isize) as libc::c_uint)
                        << 16 as libc::c_int,
                );
            current_block_51 = 16414671544637706643;
        }
        _ => {}
    }
    match current_block_51 {
        16414671544637706643 => {
            _hj_j = _hj_j
                .wrapping_add(
                    (*_hj_key.offset(5 as libc::c_int as isize) as libc::c_uint)
                        << 8 as libc::c_int,
                );
            current_block_51 = 16387024115351872110;
        }
        _ => {}
    }
    match current_block_51 {
        16387024115351872110 => {
            _hj_j = _hj_j
                .wrapping_add(
                    *_hj_key.offset(4 as libc::c_int as isize) as libc::c_uint,
                );
            current_block_51 = 3786507298470799200;
        }
        _ => {}
    }
    match current_block_51 {
        3786507298470799200 => {
            _hj_i = _hj_i
                .wrapping_add(
                    (*_hj_key.offset(3 as libc::c_int as isize) as libc::c_uint)
                        << 24 as libc::c_int,
                );
            current_block_51 = 4476726861521291313;
        }
        _ => {}
    }
    match current_block_51 {
        4476726861521291313 => {
            _hj_i = _hj_i
                .wrapping_add(
                    (*_hj_key.offset(2 as libc::c_int as isize) as libc::c_uint)
                        << 16 as libc::c_int,
                );
            current_block_51 = 1901383105422891195;
        }
        _ => {}
    }
    match current_block_51 {
        1901383105422891195 => {
            _hj_i = _hj_i
                .wrapping_add(
                    (*_hj_key.offset(1 as libc::c_int as isize) as libc::c_uint)
                        << 8 as libc::c_int,
                );
            current_block_51 = 1880499993493072654;
        }
        _ => {}
    }
    match current_block_51 {
        1880499993493072654 => {
            _hj_i = _hj_i
                .wrapping_add(
                    *_hj_key.offset(0 as libc::c_int as isize) as libc::c_uint,
                );
        }
        _ => {}
    }
    _hj_i = _hj_i.wrapping_sub(_hj_j);
    _hj_i = _hj_i.wrapping_sub(_hf_hashv);
    _hj_i ^= _hf_hashv >> 13 as libc::c_int;
    _hj_j = _hj_j.wrapping_sub(_hf_hashv);
    _hj_j = _hj_j.wrapping_sub(_hj_i);
    _hj_j ^= _hj_i << 8 as libc::c_int;
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
    _hf_hashv ^= _hj_j >> 13 as libc::c_int;
    _hj_i = _hj_i.wrapping_sub(_hj_j);
    _hj_i = _hj_i.wrapping_sub(_hf_hashv);
    _hj_i ^= _hf_hashv >> 12 as libc::c_int;
    _hj_j = _hj_j.wrapping_sub(_hf_hashv);
    _hj_j = _hj_j.wrapping_sub(_hj_i);
    _hj_j ^= _hj_i << 16 as libc::c_int;
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
    _hf_hashv ^= _hj_j >> 5 as libc::c_int;
    _hj_i = _hj_i.wrapping_sub(_hj_j);
    _hj_i = _hj_i.wrapping_sub(_hf_hashv);
    _hj_i ^= _hf_hashv >> 3 as libc::c_int;
    _hj_j = _hj_j.wrapping_sub(_hf_hashv);
    _hj_j = _hj_j.wrapping_sub(_hj_i);
    _hj_j ^= _hj_i << 10 as libc::c_int;
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
    _hf_hashv ^= _hj_j >> 15 as libc::c_int;
    entry = 0 as *mut varpeek_entry_t;
    if !varpeek_map.is_null() {
        let mut _hf_bkt: libc::c_uint = 0;
        _hf_bkt = _hf_hashv
            & ((*(*varpeek_map).hh.tbl).num_buckets).wrapping_sub(1 as libc::c_uint);
        if 1 as libc::c_int != 0 as libc::c_int {
            if !((*((*(*varpeek_map).hh.tbl).buckets).offset(_hf_bkt as isize)).hh_head)
                .is_null()
            {
                entry = ((*((*(*varpeek_map).hh.tbl).buckets).offset(_hf_bkt as isize))
                    .hh_head as *mut libc::c_char)
                    .offset(-((*(*varpeek_map).hh.tbl).hho as isize))
                    as *mut libc::c_void as *mut varpeek_entry_t;
            } else {
                entry = 0 as *mut varpeek_entry_t;
            }
            while !entry.is_null() {
                if (*entry).hh.hashv == _hf_hashv
                    && (*entry).hh.keylen == _uthash_hfstr_keylen
                {
                    if memcmp(
                        (*entry).hh.key,
                        varpeek_key.as_mut_ptr() as *const libc::c_void,
                        _uthash_hfstr_keylen as libc::c_ulong,
                    ) == 0 as libc::c_int
                    {
                        break;
                    }
                }
                if !((*entry).hh.hh_next).is_null() {
                    entry = ((*entry).hh.hh_next as *mut libc::c_char)
                        .offset(-((*(*varpeek_map).hh.tbl).hho as isize))
                        as *mut libc::c_void as *mut varpeek_entry_t;
                } else {
                    entry = 0 as *mut varpeek_entry_t;
                }
            }
        }
    }
    if entry.is_null() {
        return 0 as libc::c_int;
    }
    num_vars_found = 0 as libc::c_int;
    num_vars_peeking = (if !((*entry).varmap).is_null() {
        (*(*(*entry).varmap).hh.tbl).num_items
    } else {
        0 as libc::c_uint
    }) as libc::c_int;
    i = 0 as libc::c_int;
    while i < (*op_array).last_var {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"var\0" as *const u8 as *const libc::c_char,
            ((*op_array).vars).offset(i as isize) as *mut libc::c_void,
            &mut zstrp as *mut *mut zend_string_70 as *mut libc::c_void,
            ::std::mem::size_of::<*mut zend_string_70>() as libc::c_ulong,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        rv = sprint_zstring_70(
            context,
            b"var\0" as *const u8 as *const libc::c_char,
            zstrp,
            tmp.as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
            &mut tmp_len,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        let mut _hf_hashv_0: libc::c_uint = 0;
        let mut _hj_i_0: libc::c_uint = 0;
        let mut _hj_j_0: libc::c_uint = 0;
        let mut _hj_k_0: libc::c_uint = 0;
        let mut _hj_key_0: *const libc::c_uchar = tmp.as_mut_ptr()
            as *const libc::c_uchar;
        _hf_hashv_0 = 0xfeedbeef as libc::c_uint;
        _hj_j_0 = 0x9e3779b9 as libc::c_uint;
        _hj_i_0 = _hj_j_0;
        _hj_k_0 = tmp_len as libc::c_uint;
        while _hj_k_0 >= 12 as libc::c_uint {
            _hj_i_0 = _hj_i_0
                .wrapping_add(
                    (*_hj_key_0.offset(0 as libc::c_int as isize) as libc::c_uint)
                        .wrapping_add(
                            (*_hj_key_0.offset(1 as libc::c_int as isize)
                                as libc::c_uint) << 8 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(2 as libc::c_int as isize)
                                as libc::c_uint) << 16 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(3 as libc::c_int as isize)
                                as libc::c_uint) << 24 as libc::c_int,
                        ),
                );
            _hj_j_0 = _hj_j_0
                .wrapping_add(
                    (*_hj_key_0.offset(4 as libc::c_int as isize) as libc::c_uint)
                        .wrapping_add(
                            (*_hj_key_0.offset(5 as libc::c_int as isize)
                                as libc::c_uint) << 8 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(6 as libc::c_int as isize)
                                as libc::c_uint) << 16 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(7 as libc::c_int as isize)
                                as libc::c_uint) << 24 as libc::c_int,
                        ),
                );
            _hf_hashv_0 = _hf_hashv_0
                .wrapping_add(
                    (*_hj_key_0.offset(8 as libc::c_int as isize) as libc::c_uint)
                        .wrapping_add(
                            (*_hj_key_0.offset(9 as libc::c_int as isize)
                                as libc::c_uint) << 8 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(10 as libc::c_int as isize)
                                as libc::c_uint) << 16 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(11 as libc::c_int as isize)
                                as libc::c_uint) << 24 as libc::c_int,
                        ),
                );
            _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
            _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
            _hj_i_0 ^= _hf_hashv_0 >> 13 as libc::c_int;
            _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
            _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
            _hj_j_0 ^= _hj_i_0 << 8 as libc::c_int;
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
            _hf_hashv_0 ^= _hj_j_0 >> 13 as libc::c_int;
            _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
            _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
            _hj_i_0 ^= _hf_hashv_0 >> 12 as libc::c_int;
            _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
            _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
            _hj_j_0 ^= _hj_i_0 << 16 as libc::c_int;
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
            _hf_hashv_0 ^= _hj_j_0 >> 5 as libc::c_int;
            _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
            _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
            _hj_i_0 ^= _hf_hashv_0 >> 3 as libc::c_int;
            _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
            _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
            _hj_j_0 ^= _hj_i_0 << 10 as libc::c_int;
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
            _hf_hashv_0 ^= _hj_j_0 >> 15 as libc::c_int;
            _hj_key_0 = _hj_key_0.offset(12 as libc::c_int as isize);
            _hj_k_0 = _hj_k_0.wrapping_sub(12 as libc::c_uint);
        }
        _hf_hashv_0 = _hf_hashv_0.wrapping_add(tmp_len as libc::c_uint);
        let mut current_block_180: u64;
        match _hj_k_0 {
            11 => {
                _hf_hashv_0 = _hf_hashv_0
                    .wrapping_add(
                        (*_hj_key_0.offset(10 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    );
                current_block_180 = 12972714634871671174;
            }
            10 => {
                current_block_180 = 12972714634871671174;
            }
            9 => {
                current_block_180 = 13918884706835629565;
            }
            8 => {
                current_block_180 = 13741875794808782830;
            }
            7 => {
                current_block_180 = 9925985181717985107;
            }
            6 => {
                current_block_180 = 7379472546304228473;
            }
            5 => {
                current_block_180 = 10664718878981705812;
            }
            4 => {
                current_block_180 = 15363974799731913075;
            }
            3 => {
                current_block_180 = 13829248945472509006;
            }
            2 => {
                current_block_180 = 2144465338334542481;
            }
            1 => {
                current_block_180 = 1175327137076458911;
            }
            _ => {
                current_block_180 = 6215370584428403858;
            }
        }
        match current_block_180 {
            12972714634871671174 => {
                _hf_hashv_0 = _hf_hashv_0
                    .wrapping_add(
                        (*_hj_key_0.offset(9 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    );
                current_block_180 = 13918884706835629565;
            }
            _ => {}
        }
        match current_block_180 {
            13918884706835629565 => {
                _hf_hashv_0 = _hf_hashv_0
                    .wrapping_add(
                        (*_hj_key_0.offset(8 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    );
                current_block_180 = 13741875794808782830;
            }
            _ => {}
        }
        match current_block_180 {
            13741875794808782830 => {
                _hj_j_0 = _hj_j_0
                    .wrapping_add(
                        (*_hj_key_0.offset(7 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    );
                current_block_180 = 9925985181717985107;
            }
            _ => {}
        }
        match current_block_180 {
            9925985181717985107 => {
                _hj_j_0 = _hj_j_0
                    .wrapping_add(
                        (*_hj_key_0.offset(6 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    );
                current_block_180 = 7379472546304228473;
            }
            _ => {}
        }
        match current_block_180 {
            7379472546304228473 => {
                _hj_j_0 = _hj_j_0
                    .wrapping_add(
                        (*_hj_key_0.offset(5 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    );
                current_block_180 = 10664718878981705812;
            }
            _ => {}
        }
        match current_block_180 {
            10664718878981705812 => {
                _hj_j_0 = _hj_j_0
                    .wrapping_add(
                        *_hj_key_0.offset(4 as libc::c_int as isize) as libc::c_uint,
                    );
                current_block_180 = 15363974799731913075;
            }
            _ => {}
        }
        match current_block_180 {
            15363974799731913075 => {
                _hj_i_0 = _hj_i_0
                    .wrapping_add(
                        (*_hj_key_0.offset(3 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    );
                current_block_180 = 13829248945472509006;
            }
            _ => {}
        }
        match current_block_180 {
            13829248945472509006 => {
                _hj_i_0 = _hj_i_0
                    .wrapping_add(
                        (*_hj_key_0.offset(2 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    );
                current_block_180 = 2144465338334542481;
            }
            _ => {}
        }
        match current_block_180 {
            2144465338334542481 => {
                _hj_i_0 = _hj_i_0
                    .wrapping_add(
                        (*_hj_key_0.offset(1 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    );
                current_block_180 = 1175327137076458911;
            }
            _ => {}
        }
        match current_block_180 {
            1175327137076458911 => {
                _hj_i_0 = _hj_i_0
                    .wrapping_add(
                        *_hj_key_0.offset(0 as libc::c_int as isize) as libc::c_uint,
                    );
            }
            _ => {}
        }
        _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
        _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
        _hj_i_0 ^= _hf_hashv_0 >> 13 as libc::c_int;
        _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
        _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
        _hj_j_0 ^= _hj_i_0 << 8 as libc::c_int;
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
        _hf_hashv_0 ^= _hj_j_0 >> 13 as libc::c_int;
        _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
        _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
        _hj_i_0 ^= _hf_hashv_0 >> 12 as libc::c_int;
        _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
        _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
        _hj_j_0 ^= _hj_i_0 << 16 as libc::c_int;
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
        _hf_hashv_0 ^= _hj_j_0 >> 5 as libc::c_int;
        _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
        _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
        _hj_i_0 ^= _hf_hashv_0 >> 3 as libc::c_int;
        _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
        _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
        _hj_j_0 ^= _hj_i_0 << 10 as libc::c_int;
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
        _hf_hashv_0 ^= _hj_j_0 >> 15 as libc::c_int;
        var = 0 as *mut varpeek_var_t;
        if !((*entry).varmap).is_null() {
            let mut _hf_bkt_0: libc::c_uint = 0;
            _hf_bkt_0 = _hf_hashv_0
                & ((*(*(*entry).varmap).hh.tbl).num_buckets)
                    .wrapping_sub(1 as libc::c_uint);
            if 1 as libc::c_int != 0 as libc::c_int {
                if !((*((*(*(*entry).varmap).hh.tbl).buckets).offset(_hf_bkt_0 as isize))
                    .hh_head)
                    .is_null()
                {
                    var = ((*((*(*(*entry).varmap).hh.tbl).buckets)
                        .offset(_hf_bkt_0 as isize))
                        .hh_head as *mut libc::c_char)
                        .offset(-((*(*(*entry).varmap).hh.tbl).hho as isize))
                        as *mut libc::c_void as *mut varpeek_var_t;
                } else {
                    var = 0 as *mut varpeek_var_t;
                }
                while !var.is_null() {
                    if (*var).hh.hashv == _hf_hashv_0
                        && (*var).hh.keylen as libc::c_ulong == tmp_len
                    {
                        if memcmp(
                            (*var).hh.key,
                            tmp.as_mut_ptr() as *const libc::c_void,
                            tmp_len,
                        ) == 0 as libc::c_int
                        {
                            break;
                        }
                    }
                    if !((*var).hh.hh_next).is_null() {
                        var = ((*var).hh.hh_next as *mut libc::c_char)
                            .offset(-((*(*(*entry).varmap).hh.tbl).hho as isize))
                            as *mut libc::c_void as *mut varpeek_var_t;
                    } else {
                        var = 0 as *mut varpeek_var_t;
                    }
                }
            }
        }
        if !var.is_null() {
            num_vars_found += 1 as libc::c_int;
            rv = copy_proc_mem(
                (*context).target.pid,
                b"zval\0" as *const u8 as *const libc::c_char,
                (remote_execute_data as *mut zval_70)
                    .offset((5 as libc::c_int + i) as isize) as *mut libc::c_void,
                &mut zv as *mut zval_70 as *mut libc::c_void,
                ::std::mem::size_of::<zval_70>() as libc::c_ulong,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            rv = sprint_zval_70(
                context,
                &mut zv,
                tmp.as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                &mut tmp_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            (*context).event.varpeek.entry = entry;
            (*context).event.varpeek.var = var;
            (*context).event.varpeek.zval_str = tmp.as_mut_ptr();
            rv = ((*context).event_handler).unwrap()(context, 3 as libc::c_int);
            if rv != 0 as libc::c_int {
                return rv;
            }
            if num_vars_found >= num_vars_peeking {
                break;
            }
        }
        i += 1;
        i;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_locals_81(
    mut context: *mut trace_context_t,
    mut zop: *mut zend_op_81,
    mut remote_execute_data: *mut zend_execute_data_81,
    mut op_array: *mut zend_op_array_81,
    mut file: *mut libc::c_char,
    mut file_len: libc::c_int,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut i: libc::c_int = 0;
    let mut num_vars_found: libc::c_int = 0;
    let mut num_vars_peeking: libc::c_int = 0;
    let mut tmp: [libc::c_char; 256] = [0; 256];
    let mut tmp_len: size_t = 0;
    let mut zstrp: *mut zend_string_81 = 0 as *mut zend_string_81;
    let mut entry: *mut varpeek_entry_t = 0 as *mut varpeek_entry_t;
    let mut var: *mut varpeek_var_t = 0 as *mut varpeek_var_t;
    let mut varpeek_key: [libc::c_char; 256] = [0; 256];
    let mut zv: zval_81 = zval_81 {
        value: _zend_value_81 { lval: 0 },
        u1: C2RustUnnamed_40 {
            v: C2RustUnnamed_41 {
                type_0: 0,
                pad0: [0; 3],
            },
        },
        u2: C2RustUnnamed_39 { next: 0 },
    };
    snprintf(
        varpeek_key.as_mut_ptr(),
        ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
        b"%.*s:%d\0" as *const u8 as *const libc::c_char,
        file_len,
        file,
        (*zop).lineno,
    );
    let mut _uthash_hfstr_keylen: libc::c_uint = strlen(varpeek_key.as_mut_ptr())
        as libc::c_uint;
    let mut _hf_hashv: libc::c_uint = 0;
    let mut _hj_i: libc::c_uint = 0;
    let mut _hj_j: libc::c_uint = 0;
    let mut _hj_k: libc::c_uint = 0;
    let mut _hj_key: *const libc::c_uchar = varpeek_key.as_mut_ptr()
        as *const libc::c_uchar;
    _hf_hashv = 0xfeedbeef as libc::c_uint;
    _hj_j = 0x9e3779b9 as libc::c_uint;
    _hj_i = _hj_j;
    _hj_k = _uthash_hfstr_keylen;
    while _hj_k >= 12 as libc::c_uint {
        _hj_i = _hj_i
            .wrapping_add(
                (*_hj_key.offset(0 as libc::c_int as isize) as libc::c_uint)
                    .wrapping_add(
                        (*_hj_key.offset(1 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(2 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(3 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    ),
            );
        _hj_j = _hj_j
            .wrapping_add(
                (*_hj_key.offset(4 as libc::c_int as isize) as libc::c_uint)
                    .wrapping_add(
                        (*_hj_key.offset(5 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(6 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(7 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    ),
            );
        _hf_hashv = _hf_hashv
            .wrapping_add(
                (*_hj_key.offset(8 as libc::c_int as isize) as libc::c_uint)
                    .wrapping_add(
                        (*_hj_key.offset(9 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(10 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(11 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    ),
            );
        _hj_i = _hj_i.wrapping_sub(_hj_j);
        _hj_i = _hj_i.wrapping_sub(_hf_hashv);
        _hj_i ^= _hf_hashv >> 13 as libc::c_int;
        _hj_j = _hj_j.wrapping_sub(_hf_hashv);
        _hj_j = _hj_j.wrapping_sub(_hj_i);
        _hj_j ^= _hj_i << 8 as libc::c_int;
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
        _hf_hashv ^= _hj_j >> 13 as libc::c_int;
        _hj_i = _hj_i.wrapping_sub(_hj_j);
        _hj_i = _hj_i.wrapping_sub(_hf_hashv);
        _hj_i ^= _hf_hashv >> 12 as libc::c_int;
        _hj_j = _hj_j.wrapping_sub(_hf_hashv);
        _hj_j = _hj_j.wrapping_sub(_hj_i);
        _hj_j ^= _hj_i << 16 as libc::c_int;
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
        _hf_hashv ^= _hj_j >> 5 as libc::c_int;
        _hj_i = _hj_i.wrapping_sub(_hj_j);
        _hj_i = _hj_i.wrapping_sub(_hf_hashv);
        _hj_i ^= _hf_hashv >> 3 as libc::c_int;
        _hj_j = _hj_j.wrapping_sub(_hf_hashv);
        _hj_j = _hj_j.wrapping_sub(_hj_i);
        _hj_j ^= _hj_i << 10 as libc::c_int;
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
        _hf_hashv ^= _hj_j >> 15 as libc::c_int;
        _hj_key = _hj_key.offset(12 as libc::c_int as isize);
        _hj_k = _hj_k.wrapping_sub(12 as libc::c_uint);
    }
    _hf_hashv = _hf_hashv.wrapping_add(_uthash_hfstr_keylen);
    let mut current_block_51: u64;
    match _hj_k {
        11 => {
            _hf_hashv = _hf_hashv
                .wrapping_add(
                    (*_hj_key.offset(10 as libc::c_int as isize) as libc::c_uint)
                        << 24 as libc::c_int,
                );
            current_block_51 = 14365703371008985302;
        }
        10 => {
            current_block_51 = 14365703371008985302;
        }
        9 => {
            current_block_51 = 9860922865898211689;
        }
        8 => {
            current_block_51 = 14446126407096610143;
        }
        7 => {
            current_block_51 = 17744983987127152725;
        }
        6 => {
            current_block_51 = 1349680389701616210;
        }
        5 => {
            current_block_51 = 13768106165536507445;
        }
        4 => {
            current_block_51 = 5283174973461395937;
        }
        3 => {
            current_block_51 = 2933254074008519217;
        }
        2 => {
            current_block_51 = 2339125390404385036;
        }
        1 => {
            current_block_51 = 10356656854032139423;
        }
        _ => {
            current_block_51 = 2122094917359643297;
        }
    }
    match current_block_51 {
        14365703371008985302 => {
            _hf_hashv = _hf_hashv
                .wrapping_add(
                    (*_hj_key.offset(9 as libc::c_int as isize) as libc::c_uint)
                        << 16 as libc::c_int,
                );
            current_block_51 = 9860922865898211689;
        }
        _ => {}
    }
    match current_block_51 {
        9860922865898211689 => {
            _hf_hashv = _hf_hashv
                .wrapping_add(
                    (*_hj_key.offset(8 as libc::c_int as isize) as libc::c_uint)
                        << 8 as libc::c_int,
                );
            current_block_51 = 14446126407096610143;
        }
        _ => {}
    }
    match current_block_51 {
        14446126407096610143 => {
            _hj_j = _hj_j
                .wrapping_add(
                    (*_hj_key.offset(7 as libc::c_int as isize) as libc::c_uint)
                        << 24 as libc::c_int,
                );
            current_block_51 = 17744983987127152725;
        }
        _ => {}
    }
    match current_block_51 {
        17744983987127152725 => {
            _hj_j = _hj_j
                .wrapping_add(
                    (*_hj_key.offset(6 as libc::c_int as isize) as libc::c_uint)
                        << 16 as libc::c_int,
                );
            current_block_51 = 1349680389701616210;
        }
        _ => {}
    }
    match current_block_51 {
        1349680389701616210 => {
            _hj_j = _hj_j
                .wrapping_add(
                    (*_hj_key.offset(5 as libc::c_int as isize) as libc::c_uint)
                        << 8 as libc::c_int,
                );
            current_block_51 = 13768106165536507445;
        }
        _ => {}
    }
    match current_block_51 {
        13768106165536507445 => {
            _hj_j = _hj_j
                .wrapping_add(
                    *_hj_key.offset(4 as libc::c_int as isize) as libc::c_uint,
                );
            current_block_51 = 5283174973461395937;
        }
        _ => {}
    }
    match current_block_51 {
        5283174973461395937 => {
            _hj_i = _hj_i
                .wrapping_add(
                    (*_hj_key.offset(3 as libc::c_int as isize) as libc::c_uint)
                        << 24 as libc::c_int,
                );
            current_block_51 = 2933254074008519217;
        }
        _ => {}
    }
    match current_block_51 {
        2933254074008519217 => {
            _hj_i = _hj_i
                .wrapping_add(
                    (*_hj_key.offset(2 as libc::c_int as isize) as libc::c_uint)
                        << 16 as libc::c_int,
                );
            current_block_51 = 2339125390404385036;
        }
        _ => {}
    }
    match current_block_51 {
        2339125390404385036 => {
            _hj_i = _hj_i
                .wrapping_add(
                    (*_hj_key.offset(1 as libc::c_int as isize) as libc::c_uint)
                        << 8 as libc::c_int,
                );
            current_block_51 = 10356656854032139423;
        }
        _ => {}
    }
    match current_block_51 {
        10356656854032139423 => {
            _hj_i = _hj_i
                .wrapping_add(
                    *_hj_key.offset(0 as libc::c_int as isize) as libc::c_uint,
                );
        }
        _ => {}
    }
    _hj_i = _hj_i.wrapping_sub(_hj_j);
    _hj_i = _hj_i.wrapping_sub(_hf_hashv);
    _hj_i ^= _hf_hashv >> 13 as libc::c_int;
    _hj_j = _hj_j.wrapping_sub(_hf_hashv);
    _hj_j = _hj_j.wrapping_sub(_hj_i);
    _hj_j ^= _hj_i << 8 as libc::c_int;
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
    _hf_hashv ^= _hj_j >> 13 as libc::c_int;
    _hj_i = _hj_i.wrapping_sub(_hj_j);
    _hj_i = _hj_i.wrapping_sub(_hf_hashv);
    _hj_i ^= _hf_hashv >> 12 as libc::c_int;
    _hj_j = _hj_j.wrapping_sub(_hf_hashv);
    _hj_j = _hj_j.wrapping_sub(_hj_i);
    _hj_j ^= _hj_i << 16 as libc::c_int;
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
    _hf_hashv ^= _hj_j >> 5 as libc::c_int;
    _hj_i = _hj_i.wrapping_sub(_hj_j);
    _hj_i = _hj_i.wrapping_sub(_hf_hashv);
    _hj_i ^= _hf_hashv >> 3 as libc::c_int;
    _hj_j = _hj_j.wrapping_sub(_hf_hashv);
    _hj_j = _hj_j.wrapping_sub(_hj_i);
    _hj_j ^= _hj_i << 10 as libc::c_int;
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
    _hf_hashv ^= _hj_j >> 15 as libc::c_int;
    entry = 0 as *mut varpeek_entry_t;
    if !varpeek_map.is_null() {
        let mut _hf_bkt: libc::c_uint = 0;
        _hf_bkt = _hf_hashv
            & ((*(*varpeek_map).hh.tbl).num_buckets).wrapping_sub(1 as libc::c_uint);
        if 1 as libc::c_int != 0 as libc::c_int {
            if !((*((*(*varpeek_map).hh.tbl).buckets).offset(_hf_bkt as isize)).hh_head)
                .is_null()
            {
                entry = ((*((*(*varpeek_map).hh.tbl).buckets).offset(_hf_bkt as isize))
                    .hh_head as *mut libc::c_char)
                    .offset(-((*(*varpeek_map).hh.tbl).hho as isize))
                    as *mut libc::c_void as *mut varpeek_entry_t;
            } else {
                entry = 0 as *mut varpeek_entry_t;
            }
            while !entry.is_null() {
                if (*entry).hh.hashv == _hf_hashv
                    && (*entry).hh.keylen == _uthash_hfstr_keylen
                {
                    if memcmp(
                        (*entry).hh.key,
                        varpeek_key.as_mut_ptr() as *const libc::c_void,
                        _uthash_hfstr_keylen as libc::c_ulong,
                    ) == 0 as libc::c_int
                    {
                        break;
                    }
                }
                if !((*entry).hh.hh_next).is_null() {
                    entry = ((*entry).hh.hh_next as *mut libc::c_char)
                        .offset(-((*(*varpeek_map).hh.tbl).hho as isize))
                        as *mut libc::c_void as *mut varpeek_entry_t;
                } else {
                    entry = 0 as *mut varpeek_entry_t;
                }
            }
        }
    }
    if entry.is_null() {
        return 0 as libc::c_int;
    }
    num_vars_found = 0 as libc::c_int;
    num_vars_peeking = (if !((*entry).varmap).is_null() {
        (*(*(*entry).varmap).hh.tbl).num_items
    } else {
        0 as libc::c_uint
    }) as libc::c_int;
    i = 0 as libc::c_int;
    while i < (*op_array).last_var {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"var\0" as *const u8 as *const libc::c_char,
            ((*op_array).vars).offset(i as isize) as *mut libc::c_void,
            &mut zstrp as *mut *mut zend_string_81 as *mut libc::c_void,
            ::std::mem::size_of::<*mut zend_string_81>() as libc::c_ulong,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        rv = sprint_zstring_81(
            context,
            b"var\0" as *const u8 as *const libc::c_char,
            zstrp,
            tmp.as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
            &mut tmp_len,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        let mut _hf_hashv_0: libc::c_uint = 0;
        let mut _hj_i_0: libc::c_uint = 0;
        let mut _hj_j_0: libc::c_uint = 0;
        let mut _hj_k_0: libc::c_uint = 0;
        let mut _hj_key_0: *const libc::c_uchar = tmp.as_mut_ptr()
            as *const libc::c_uchar;
        _hf_hashv_0 = 0xfeedbeef as libc::c_uint;
        _hj_j_0 = 0x9e3779b9 as libc::c_uint;
        _hj_i_0 = _hj_j_0;
        _hj_k_0 = tmp_len as libc::c_uint;
        while _hj_k_0 >= 12 as libc::c_uint {
            _hj_i_0 = _hj_i_0
                .wrapping_add(
                    (*_hj_key_0.offset(0 as libc::c_int as isize) as libc::c_uint)
                        .wrapping_add(
                            (*_hj_key_0.offset(1 as libc::c_int as isize)
                                as libc::c_uint) << 8 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(2 as libc::c_int as isize)
                                as libc::c_uint) << 16 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(3 as libc::c_int as isize)
                                as libc::c_uint) << 24 as libc::c_int,
                        ),
                );
            _hj_j_0 = _hj_j_0
                .wrapping_add(
                    (*_hj_key_0.offset(4 as libc::c_int as isize) as libc::c_uint)
                        .wrapping_add(
                            (*_hj_key_0.offset(5 as libc::c_int as isize)
                                as libc::c_uint) << 8 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(6 as libc::c_int as isize)
                                as libc::c_uint) << 16 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(7 as libc::c_int as isize)
                                as libc::c_uint) << 24 as libc::c_int,
                        ),
                );
            _hf_hashv_0 = _hf_hashv_0
                .wrapping_add(
                    (*_hj_key_0.offset(8 as libc::c_int as isize) as libc::c_uint)
                        .wrapping_add(
                            (*_hj_key_0.offset(9 as libc::c_int as isize)
                                as libc::c_uint) << 8 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(10 as libc::c_int as isize)
                                as libc::c_uint) << 16 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(11 as libc::c_int as isize)
                                as libc::c_uint) << 24 as libc::c_int,
                        ),
                );
            _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
            _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
            _hj_i_0 ^= _hf_hashv_0 >> 13 as libc::c_int;
            _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
            _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
            _hj_j_0 ^= _hj_i_0 << 8 as libc::c_int;
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
            _hf_hashv_0 ^= _hj_j_0 >> 13 as libc::c_int;
            _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
            _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
            _hj_i_0 ^= _hf_hashv_0 >> 12 as libc::c_int;
            _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
            _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
            _hj_j_0 ^= _hj_i_0 << 16 as libc::c_int;
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
            _hf_hashv_0 ^= _hj_j_0 >> 5 as libc::c_int;
            _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
            _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
            _hj_i_0 ^= _hf_hashv_0 >> 3 as libc::c_int;
            _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
            _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
            _hj_j_0 ^= _hj_i_0 << 10 as libc::c_int;
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
            _hf_hashv_0 ^= _hj_j_0 >> 15 as libc::c_int;
            _hj_key_0 = _hj_key_0.offset(12 as libc::c_int as isize);
            _hj_k_0 = _hj_k_0.wrapping_sub(12 as libc::c_uint);
        }
        _hf_hashv_0 = _hf_hashv_0.wrapping_add(tmp_len as libc::c_uint);
        let mut current_block_180: u64;
        match _hj_k_0 {
            11 => {
                _hf_hashv_0 = _hf_hashv_0
                    .wrapping_add(
                        (*_hj_key_0.offset(10 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    );
                current_block_180 = 3621890316551291770;
            }
            10 => {
                current_block_180 = 3621890316551291770;
            }
            9 => {
                current_block_180 = 7196264205058751459;
            }
            8 => {
                current_block_180 = 4806467916458610791;
            }
            7 => {
                current_block_180 = 3457636476297407980;
            }
            6 => {
                current_block_180 = 15534838934153830049;
            }
            5 => {
                current_block_180 = 16493344053828847318;
            }
            4 => {
                current_block_180 = 9082505872491770756;
            }
            3 => {
                current_block_180 = 10224812045070048880;
            }
            2 => {
                current_block_180 = 1853339736213751865;
            }
            1 => {
                current_block_180 = 477114748379466449;
            }
            _ => {
                current_block_180 = 6215370584428403858;
            }
        }
        match current_block_180 {
            3621890316551291770 => {
                _hf_hashv_0 = _hf_hashv_0
                    .wrapping_add(
                        (*_hj_key_0.offset(9 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    );
                current_block_180 = 7196264205058751459;
            }
            _ => {}
        }
        match current_block_180 {
            7196264205058751459 => {
                _hf_hashv_0 = _hf_hashv_0
                    .wrapping_add(
                        (*_hj_key_0.offset(8 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    );
                current_block_180 = 4806467916458610791;
            }
            _ => {}
        }
        match current_block_180 {
            4806467916458610791 => {
                _hj_j_0 = _hj_j_0
                    .wrapping_add(
                        (*_hj_key_0.offset(7 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    );
                current_block_180 = 3457636476297407980;
            }
            _ => {}
        }
        match current_block_180 {
            3457636476297407980 => {
                _hj_j_0 = _hj_j_0
                    .wrapping_add(
                        (*_hj_key_0.offset(6 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    );
                current_block_180 = 15534838934153830049;
            }
            _ => {}
        }
        match current_block_180 {
            15534838934153830049 => {
                _hj_j_0 = _hj_j_0
                    .wrapping_add(
                        (*_hj_key_0.offset(5 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    );
                current_block_180 = 16493344053828847318;
            }
            _ => {}
        }
        match current_block_180 {
            16493344053828847318 => {
                _hj_j_0 = _hj_j_0
                    .wrapping_add(
                        *_hj_key_0.offset(4 as libc::c_int as isize) as libc::c_uint,
                    );
                current_block_180 = 9082505872491770756;
            }
            _ => {}
        }
        match current_block_180 {
            9082505872491770756 => {
                _hj_i_0 = _hj_i_0
                    .wrapping_add(
                        (*_hj_key_0.offset(3 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    );
                current_block_180 = 10224812045070048880;
            }
            _ => {}
        }
        match current_block_180 {
            10224812045070048880 => {
                _hj_i_0 = _hj_i_0
                    .wrapping_add(
                        (*_hj_key_0.offset(2 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    );
                current_block_180 = 1853339736213751865;
            }
            _ => {}
        }
        match current_block_180 {
            1853339736213751865 => {
                _hj_i_0 = _hj_i_0
                    .wrapping_add(
                        (*_hj_key_0.offset(1 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    );
                current_block_180 = 477114748379466449;
            }
            _ => {}
        }
        match current_block_180 {
            477114748379466449 => {
                _hj_i_0 = _hj_i_0
                    .wrapping_add(
                        *_hj_key_0.offset(0 as libc::c_int as isize) as libc::c_uint,
                    );
            }
            _ => {}
        }
        _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
        _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
        _hj_i_0 ^= _hf_hashv_0 >> 13 as libc::c_int;
        _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
        _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
        _hj_j_0 ^= _hj_i_0 << 8 as libc::c_int;
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
        _hf_hashv_0 ^= _hj_j_0 >> 13 as libc::c_int;
        _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
        _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
        _hj_i_0 ^= _hf_hashv_0 >> 12 as libc::c_int;
        _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
        _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
        _hj_j_0 ^= _hj_i_0 << 16 as libc::c_int;
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
        _hf_hashv_0 ^= _hj_j_0 >> 5 as libc::c_int;
        _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
        _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
        _hj_i_0 ^= _hf_hashv_0 >> 3 as libc::c_int;
        _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
        _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
        _hj_j_0 ^= _hj_i_0 << 10 as libc::c_int;
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
        _hf_hashv_0 ^= _hj_j_0 >> 15 as libc::c_int;
        var = 0 as *mut varpeek_var_t;
        if !((*entry).varmap).is_null() {
            let mut _hf_bkt_0: libc::c_uint = 0;
            _hf_bkt_0 = _hf_hashv_0
                & ((*(*(*entry).varmap).hh.tbl).num_buckets)
                    .wrapping_sub(1 as libc::c_uint);
            if 1 as libc::c_int != 0 as libc::c_int {
                if !((*((*(*(*entry).varmap).hh.tbl).buckets).offset(_hf_bkt_0 as isize))
                    .hh_head)
                    .is_null()
                {
                    var = ((*((*(*(*entry).varmap).hh.tbl).buckets)
                        .offset(_hf_bkt_0 as isize))
                        .hh_head as *mut libc::c_char)
                        .offset(-((*(*(*entry).varmap).hh.tbl).hho as isize))
                        as *mut libc::c_void as *mut varpeek_var_t;
                } else {
                    var = 0 as *mut varpeek_var_t;
                }
                while !var.is_null() {
                    if (*var).hh.hashv == _hf_hashv_0
                        && (*var).hh.keylen as libc::c_ulong == tmp_len
                    {
                        if memcmp(
                            (*var).hh.key,
                            tmp.as_mut_ptr() as *const libc::c_void,
                            tmp_len,
                        ) == 0 as libc::c_int
                        {
                            break;
                        }
                    }
                    if !((*var).hh.hh_next).is_null() {
                        var = ((*var).hh.hh_next as *mut libc::c_char)
                            .offset(-((*(*(*entry).varmap).hh.tbl).hho as isize))
                            as *mut libc::c_void as *mut varpeek_var_t;
                    } else {
                        var = 0 as *mut varpeek_var_t;
                    }
                }
            }
        }
        if !var.is_null() {
            num_vars_found += 1 as libc::c_int;
            rv = copy_proc_mem(
                (*context).target.pid,
                b"zval\0" as *const u8 as *const libc::c_char,
                (remote_execute_data as *mut zval_81)
                    .offset((5 as libc::c_int + i) as isize) as *mut libc::c_void,
                &mut zv as *mut zval_81 as *mut libc::c_void,
                ::std::mem::size_of::<zval_81>() as libc::c_ulong,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            rv = sprint_zval_81(
                context,
                &mut zv,
                tmp.as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                &mut tmp_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            (*context).event.varpeek.entry = entry;
            (*context).event.varpeek.var = var;
            (*context).event.varpeek.zval_str = tmp.as_mut_ptr();
            rv = ((*context).event_handler).unwrap()(context, 3 as libc::c_int);
            if rv != 0 as libc::c_int {
                return rv;
            }
            if num_vars_found >= num_vars_peeking {
                break;
            }
        }
        i += 1;
        i;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_locals_74(
    mut context: *mut trace_context_t,
    mut zop: *mut zend_op_74,
    mut remote_execute_data: *mut zend_execute_data_74,
    mut op_array: *mut zend_op_array_74,
    mut file: *mut libc::c_char,
    mut file_len: libc::c_int,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut i: libc::c_int = 0;
    let mut num_vars_found: libc::c_int = 0;
    let mut num_vars_peeking: libc::c_int = 0;
    let mut tmp: [libc::c_char; 256] = [0; 256];
    let mut tmp_len: size_t = 0;
    let mut zstrp: *mut zend_string_74 = 0 as *mut zend_string_74;
    let mut entry: *mut varpeek_entry_t = 0 as *mut varpeek_entry_t;
    let mut var: *mut varpeek_var_t = 0 as *mut varpeek_var_t;
    let mut varpeek_key: [libc::c_char; 256] = [0; 256];
    let mut zv: zval_74 = zval_74 {
        value: _zend_value_74 { lval: 0 },
        u1: C2RustUnnamed_32 {
            v: C2RustUnnamed_33 {
                type_0: 0,
                pad0: [0; 3],
            },
        },
        u2: C2RustUnnamed_31 { next: 0 },
    };
    snprintf(
        varpeek_key.as_mut_ptr(),
        ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
        b"%.*s:%d\0" as *const u8 as *const libc::c_char,
        file_len,
        file,
        (*zop).lineno,
    );
    let mut _uthash_hfstr_keylen: libc::c_uint = strlen(varpeek_key.as_mut_ptr())
        as libc::c_uint;
    let mut _hf_hashv: libc::c_uint = 0;
    let mut _hj_i: libc::c_uint = 0;
    let mut _hj_j: libc::c_uint = 0;
    let mut _hj_k: libc::c_uint = 0;
    let mut _hj_key: *const libc::c_uchar = varpeek_key.as_mut_ptr()
        as *const libc::c_uchar;
    _hf_hashv = 0xfeedbeef as libc::c_uint;
    _hj_j = 0x9e3779b9 as libc::c_uint;
    _hj_i = _hj_j;
    _hj_k = _uthash_hfstr_keylen;
    while _hj_k >= 12 as libc::c_uint {
        _hj_i = _hj_i
            .wrapping_add(
                (*_hj_key.offset(0 as libc::c_int as isize) as libc::c_uint)
                    .wrapping_add(
                        (*_hj_key.offset(1 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(2 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(3 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    ),
            );
        _hj_j = _hj_j
            .wrapping_add(
                (*_hj_key.offset(4 as libc::c_int as isize) as libc::c_uint)
                    .wrapping_add(
                        (*_hj_key.offset(5 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(6 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(7 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    ),
            );
        _hf_hashv = _hf_hashv
            .wrapping_add(
                (*_hj_key.offset(8 as libc::c_int as isize) as libc::c_uint)
                    .wrapping_add(
                        (*_hj_key.offset(9 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(10 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(11 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    ),
            );
        _hj_i = _hj_i.wrapping_sub(_hj_j);
        _hj_i = _hj_i.wrapping_sub(_hf_hashv);
        _hj_i ^= _hf_hashv >> 13 as libc::c_int;
        _hj_j = _hj_j.wrapping_sub(_hf_hashv);
        _hj_j = _hj_j.wrapping_sub(_hj_i);
        _hj_j ^= _hj_i << 8 as libc::c_int;
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
        _hf_hashv ^= _hj_j >> 13 as libc::c_int;
        _hj_i = _hj_i.wrapping_sub(_hj_j);
        _hj_i = _hj_i.wrapping_sub(_hf_hashv);
        _hj_i ^= _hf_hashv >> 12 as libc::c_int;
        _hj_j = _hj_j.wrapping_sub(_hf_hashv);
        _hj_j = _hj_j.wrapping_sub(_hj_i);
        _hj_j ^= _hj_i << 16 as libc::c_int;
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
        _hf_hashv ^= _hj_j >> 5 as libc::c_int;
        _hj_i = _hj_i.wrapping_sub(_hj_j);
        _hj_i = _hj_i.wrapping_sub(_hf_hashv);
        _hj_i ^= _hf_hashv >> 3 as libc::c_int;
        _hj_j = _hj_j.wrapping_sub(_hf_hashv);
        _hj_j = _hj_j.wrapping_sub(_hj_i);
        _hj_j ^= _hj_i << 10 as libc::c_int;
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
        _hf_hashv ^= _hj_j >> 15 as libc::c_int;
        _hj_key = _hj_key.offset(12 as libc::c_int as isize);
        _hj_k = _hj_k.wrapping_sub(12 as libc::c_uint);
    }
    _hf_hashv = _hf_hashv.wrapping_add(_uthash_hfstr_keylen);
    let mut current_block_51: u64;
    match _hj_k {
        11 => {
            _hf_hashv = _hf_hashv
                .wrapping_add(
                    (*_hj_key.offset(10 as libc::c_int as isize) as libc::c_uint)
                        << 24 as libc::c_int,
                );
            current_block_51 = 5709748888028298090;
        }
        10 => {
            current_block_51 = 5709748888028298090;
        }
        9 => {
            current_block_51 = 13079766595533272054;
        }
        8 => {
            current_block_51 = 811631990485898697;
        }
        7 => {
            current_block_51 = 2440606330325031573;
        }
        6 => {
            current_block_51 = 7047385284831520090;
        }
        5 => {
            current_block_51 = 16512325159280492820;
        }
        4 => {
            current_block_51 = 8162274657341804224;
        }
        3 => {
            current_block_51 = 11517648756775087272;
        }
        2 => {
            current_block_51 = 17935676874802580792;
        }
        1 => {
            current_block_51 = 14575128459776834784;
        }
        _ => {
            current_block_51 = 2122094917359643297;
        }
    }
    match current_block_51 {
        5709748888028298090 => {
            _hf_hashv = _hf_hashv
                .wrapping_add(
                    (*_hj_key.offset(9 as libc::c_int as isize) as libc::c_uint)
                        << 16 as libc::c_int,
                );
            current_block_51 = 13079766595533272054;
        }
        _ => {}
    }
    match current_block_51 {
        13079766595533272054 => {
            _hf_hashv = _hf_hashv
                .wrapping_add(
                    (*_hj_key.offset(8 as libc::c_int as isize) as libc::c_uint)
                        << 8 as libc::c_int,
                );
            current_block_51 = 811631990485898697;
        }
        _ => {}
    }
    match current_block_51 {
        811631990485898697 => {
            _hj_j = _hj_j
                .wrapping_add(
                    (*_hj_key.offset(7 as libc::c_int as isize) as libc::c_uint)
                        << 24 as libc::c_int,
                );
            current_block_51 = 2440606330325031573;
        }
        _ => {}
    }
    match current_block_51 {
        2440606330325031573 => {
            _hj_j = _hj_j
                .wrapping_add(
                    (*_hj_key.offset(6 as libc::c_int as isize) as libc::c_uint)
                        << 16 as libc::c_int,
                );
            current_block_51 = 7047385284831520090;
        }
        _ => {}
    }
    match current_block_51 {
        7047385284831520090 => {
            _hj_j = _hj_j
                .wrapping_add(
                    (*_hj_key.offset(5 as libc::c_int as isize) as libc::c_uint)
                        << 8 as libc::c_int,
                );
            current_block_51 = 16512325159280492820;
        }
        _ => {}
    }
    match current_block_51 {
        16512325159280492820 => {
            _hj_j = _hj_j
                .wrapping_add(
                    *_hj_key.offset(4 as libc::c_int as isize) as libc::c_uint,
                );
            current_block_51 = 8162274657341804224;
        }
        _ => {}
    }
    match current_block_51 {
        8162274657341804224 => {
            _hj_i = _hj_i
                .wrapping_add(
                    (*_hj_key.offset(3 as libc::c_int as isize) as libc::c_uint)
                        << 24 as libc::c_int,
                );
            current_block_51 = 11517648756775087272;
        }
        _ => {}
    }
    match current_block_51 {
        11517648756775087272 => {
            _hj_i = _hj_i
                .wrapping_add(
                    (*_hj_key.offset(2 as libc::c_int as isize) as libc::c_uint)
                        << 16 as libc::c_int,
                );
            current_block_51 = 17935676874802580792;
        }
        _ => {}
    }
    match current_block_51 {
        17935676874802580792 => {
            _hj_i = _hj_i
                .wrapping_add(
                    (*_hj_key.offset(1 as libc::c_int as isize) as libc::c_uint)
                        << 8 as libc::c_int,
                );
            current_block_51 = 14575128459776834784;
        }
        _ => {}
    }
    match current_block_51 {
        14575128459776834784 => {
            _hj_i = _hj_i
                .wrapping_add(
                    *_hj_key.offset(0 as libc::c_int as isize) as libc::c_uint,
                );
        }
        _ => {}
    }
    _hj_i = _hj_i.wrapping_sub(_hj_j);
    _hj_i = _hj_i.wrapping_sub(_hf_hashv);
    _hj_i ^= _hf_hashv >> 13 as libc::c_int;
    _hj_j = _hj_j.wrapping_sub(_hf_hashv);
    _hj_j = _hj_j.wrapping_sub(_hj_i);
    _hj_j ^= _hj_i << 8 as libc::c_int;
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
    _hf_hashv ^= _hj_j >> 13 as libc::c_int;
    _hj_i = _hj_i.wrapping_sub(_hj_j);
    _hj_i = _hj_i.wrapping_sub(_hf_hashv);
    _hj_i ^= _hf_hashv >> 12 as libc::c_int;
    _hj_j = _hj_j.wrapping_sub(_hf_hashv);
    _hj_j = _hj_j.wrapping_sub(_hj_i);
    _hj_j ^= _hj_i << 16 as libc::c_int;
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
    _hf_hashv ^= _hj_j >> 5 as libc::c_int;
    _hj_i = _hj_i.wrapping_sub(_hj_j);
    _hj_i = _hj_i.wrapping_sub(_hf_hashv);
    _hj_i ^= _hf_hashv >> 3 as libc::c_int;
    _hj_j = _hj_j.wrapping_sub(_hf_hashv);
    _hj_j = _hj_j.wrapping_sub(_hj_i);
    _hj_j ^= _hj_i << 10 as libc::c_int;
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
    _hf_hashv ^= _hj_j >> 15 as libc::c_int;
    entry = 0 as *mut varpeek_entry_t;
    if !varpeek_map.is_null() {
        let mut _hf_bkt: libc::c_uint = 0;
        _hf_bkt = _hf_hashv
            & ((*(*varpeek_map).hh.tbl).num_buckets).wrapping_sub(1 as libc::c_uint);
        if 1 as libc::c_int != 0 as libc::c_int {
            if !((*((*(*varpeek_map).hh.tbl).buckets).offset(_hf_bkt as isize)).hh_head)
                .is_null()
            {
                entry = ((*((*(*varpeek_map).hh.tbl).buckets).offset(_hf_bkt as isize))
                    .hh_head as *mut libc::c_char)
                    .offset(-((*(*varpeek_map).hh.tbl).hho as isize))
                    as *mut libc::c_void as *mut varpeek_entry_t;
            } else {
                entry = 0 as *mut varpeek_entry_t;
            }
            while !entry.is_null() {
                if (*entry).hh.hashv == _hf_hashv
                    && (*entry).hh.keylen == _uthash_hfstr_keylen
                {
                    if memcmp(
                        (*entry).hh.key,
                        varpeek_key.as_mut_ptr() as *const libc::c_void,
                        _uthash_hfstr_keylen as libc::c_ulong,
                    ) == 0 as libc::c_int
                    {
                        break;
                    }
                }
                if !((*entry).hh.hh_next).is_null() {
                    entry = ((*entry).hh.hh_next as *mut libc::c_char)
                        .offset(-((*(*varpeek_map).hh.tbl).hho as isize))
                        as *mut libc::c_void as *mut varpeek_entry_t;
                } else {
                    entry = 0 as *mut varpeek_entry_t;
                }
            }
        }
    }
    if entry.is_null() {
        return 0 as libc::c_int;
    }
    num_vars_found = 0 as libc::c_int;
    num_vars_peeking = (if !((*entry).varmap).is_null() {
        (*(*(*entry).varmap).hh.tbl).num_items
    } else {
        0 as libc::c_uint
    }) as libc::c_int;
    i = 0 as libc::c_int;
    while i < (*op_array).last_var {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"var\0" as *const u8 as *const libc::c_char,
            ((*op_array).vars).offset(i as isize) as *mut libc::c_void,
            &mut zstrp as *mut *mut zend_string_74 as *mut libc::c_void,
            ::std::mem::size_of::<*mut zend_string_74>() as libc::c_ulong,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        rv = sprint_zstring_74(
            context,
            b"var\0" as *const u8 as *const libc::c_char,
            zstrp,
            tmp.as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
            &mut tmp_len,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        let mut _hf_hashv_0: libc::c_uint = 0;
        let mut _hj_i_0: libc::c_uint = 0;
        let mut _hj_j_0: libc::c_uint = 0;
        let mut _hj_k_0: libc::c_uint = 0;
        let mut _hj_key_0: *const libc::c_uchar = tmp.as_mut_ptr()
            as *const libc::c_uchar;
        _hf_hashv_0 = 0xfeedbeef as libc::c_uint;
        _hj_j_0 = 0x9e3779b9 as libc::c_uint;
        _hj_i_0 = _hj_j_0;
        _hj_k_0 = tmp_len as libc::c_uint;
        while _hj_k_0 >= 12 as libc::c_uint {
            _hj_i_0 = _hj_i_0
                .wrapping_add(
                    (*_hj_key_0.offset(0 as libc::c_int as isize) as libc::c_uint)
                        .wrapping_add(
                            (*_hj_key_0.offset(1 as libc::c_int as isize)
                                as libc::c_uint) << 8 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(2 as libc::c_int as isize)
                                as libc::c_uint) << 16 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(3 as libc::c_int as isize)
                                as libc::c_uint) << 24 as libc::c_int,
                        ),
                );
            _hj_j_0 = _hj_j_0
                .wrapping_add(
                    (*_hj_key_0.offset(4 as libc::c_int as isize) as libc::c_uint)
                        .wrapping_add(
                            (*_hj_key_0.offset(5 as libc::c_int as isize)
                                as libc::c_uint) << 8 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(6 as libc::c_int as isize)
                                as libc::c_uint) << 16 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(7 as libc::c_int as isize)
                                as libc::c_uint) << 24 as libc::c_int,
                        ),
                );
            _hf_hashv_0 = _hf_hashv_0
                .wrapping_add(
                    (*_hj_key_0.offset(8 as libc::c_int as isize) as libc::c_uint)
                        .wrapping_add(
                            (*_hj_key_0.offset(9 as libc::c_int as isize)
                                as libc::c_uint) << 8 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(10 as libc::c_int as isize)
                                as libc::c_uint) << 16 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(11 as libc::c_int as isize)
                                as libc::c_uint) << 24 as libc::c_int,
                        ),
                );
            _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
            _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
            _hj_i_0 ^= _hf_hashv_0 >> 13 as libc::c_int;
            _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
            _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
            _hj_j_0 ^= _hj_i_0 << 8 as libc::c_int;
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
            _hf_hashv_0 ^= _hj_j_0 >> 13 as libc::c_int;
            _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
            _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
            _hj_i_0 ^= _hf_hashv_0 >> 12 as libc::c_int;
            _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
            _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
            _hj_j_0 ^= _hj_i_0 << 16 as libc::c_int;
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
            _hf_hashv_0 ^= _hj_j_0 >> 5 as libc::c_int;
            _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
            _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
            _hj_i_0 ^= _hf_hashv_0 >> 3 as libc::c_int;
            _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
            _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
            _hj_j_0 ^= _hj_i_0 << 10 as libc::c_int;
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
            _hf_hashv_0 ^= _hj_j_0 >> 15 as libc::c_int;
            _hj_key_0 = _hj_key_0.offset(12 as libc::c_int as isize);
            _hj_k_0 = _hj_k_0.wrapping_sub(12 as libc::c_uint);
        }
        _hf_hashv_0 = _hf_hashv_0.wrapping_add(tmp_len as libc::c_uint);
        let mut current_block_180: u64;
        match _hj_k_0 {
            11 => {
                _hf_hashv_0 = _hf_hashv_0
                    .wrapping_add(
                        (*_hj_key_0.offset(10 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    );
                current_block_180 = 4199236917958161639;
            }
            10 => {
                current_block_180 = 4199236917958161639;
            }
            9 => {
                current_block_180 = 17971495553072486782;
            }
            8 => {
                current_block_180 = 3742358775798225006;
            }
            7 => {
                current_block_180 = 17880650366069952102;
            }
            6 => {
                current_block_180 = 4552080830906165256;
            }
            5 => {
                current_block_180 = 16188454788990506337;
            }
            4 => {
                current_block_180 = 243010533577881164;
            }
            3 => {
                current_block_180 = 3446834640289739420;
            }
            2 => {
                current_block_180 = 12136556484591223839;
            }
            1 => {
                current_block_180 = 932559048464069196;
            }
            _ => {
                current_block_180 = 6215370584428403858;
            }
        }
        match current_block_180 {
            4199236917958161639 => {
                _hf_hashv_0 = _hf_hashv_0
                    .wrapping_add(
                        (*_hj_key_0.offset(9 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    );
                current_block_180 = 17971495553072486782;
            }
            _ => {}
        }
        match current_block_180 {
            17971495553072486782 => {
                _hf_hashv_0 = _hf_hashv_0
                    .wrapping_add(
                        (*_hj_key_0.offset(8 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    );
                current_block_180 = 3742358775798225006;
            }
            _ => {}
        }
        match current_block_180 {
            3742358775798225006 => {
                _hj_j_0 = _hj_j_0
                    .wrapping_add(
                        (*_hj_key_0.offset(7 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    );
                current_block_180 = 17880650366069952102;
            }
            _ => {}
        }
        match current_block_180 {
            17880650366069952102 => {
                _hj_j_0 = _hj_j_0
                    .wrapping_add(
                        (*_hj_key_0.offset(6 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    );
                current_block_180 = 4552080830906165256;
            }
            _ => {}
        }
        match current_block_180 {
            4552080830906165256 => {
                _hj_j_0 = _hj_j_0
                    .wrapping_add(
                        (*_hj_key_0.offset(5 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    );
                current_block_180 = 16188454788990506337;
            }
            _ => {}
        }
        match current_block_180 {
            16188454788990506337 => {
                _hj_j_0 = _hj_j_0
                    .wrapping_add(
                        *_hj_key_0.offset(4 as libc::c_int as isize) as libc::c_uint,
                    );
                current_block_180 = 243010533577881164;
            }
            _ => {}
        }
        match current_block_180 {
            243010533577881164 => {
                _hj_i_0 = _hj_i_0
                    .wrapping_add(
                        (*_hj_key_0.offset(3 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    );
                current_block_180 = 3446834640289739420;
            }
            _ => {}
        }
        match current_block_180 {
            3446834640289739420 => {
                _hj_i_0 = _hj_i_0
                    .wrapping_add(
                        (*_hj_key_0.offset(2 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    );
                current_block_180 = 12136556484591223839;
            }
            _ => {}
        }
        match current_block_180 {
            12136556484591223839 => {
                _hj_i_0 = _hj_i_0
                    .wrapping_add(
                        (*_hj_key_0.offset(1 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    );
                current_block_180 = 932559048464069196;
            }
            _ => {}
        }
        match current_block_180 {
            932559048464069196 => {
                _hj_i_0 = _hj_i_0
                    .wrapping_add(
                        *_hj_key_0.offset(0 as libc::c_int as isize) as libc::c_uint,
                    );
            }
            _ => {}
        }
        _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
        _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
        _hj_i_0 ^= _hf_hashv_0 >> 13 as libc::c_int;
        _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
        _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
        _hj_j_0 ^= _hj_i_0 << 8 as libc::c_int;
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
        _hf_hashv_0 ^= _hj_j_0 >> 13 as libc::c_int;
        _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
        _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
        _hj_i_0 ^= _hf_hashv_0 >> 12 as libc::c_int;
        _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
        _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
        _hj_j_0 ^= _hj_i_0 << 16 as libc::c_int;
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
        _hf_hashv_0 ^= _hj_j_0 >> 5 as libc::c_int;
        _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
        _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
        _hj_i_0 ^= _hf_hashv_0 >> 3 as libc::c_int;
        _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
        _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
        _hj_j_0 ^= _hj_i_0 << 10 as libc::c_int;
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
        _hf_hashv_0 ^= _hj_j_0 >> 15 as libc::c_int;
        var = 0 as *mut varpeek_var_t;
        if !((*entry).varmap).is_null() {
            let mut _hf_bkt_0: libc::c_uint = 0;
            _hf_bkt_0 = _hf_hashv_0
                & ((*(*(*entry).varmap).hh.tbl).num_buckets)
                    .wrapping_sub(1 as libc::c_uint);
            if 1 as libc::c_int != 0 as libc::c_int {
                if !((*((*(*(*entry).varmap).hh.tbl).buckets).offset(_hf_bkt_0 as isize))
                    .hh_head)
                    .is_null()
                {
                    var = ((*((*(*(*entry).varmap).hh.tbl).buckets)
                        .offset(_hf_bkt_0 as isize))
                        .hh_head as *mut libc::c_char)
                        .offset(-((*(*(*entry).varmap).hh.tbl).hho as isize))
                        as *mut libc::c_void as *mut varpeek_var_t;
                } else {
                    var = 0 as *mut varpeek_var_t;
                }
                while !var.is_null() {
                    if (*var).hh.hashv == _hf_hashv_0
                        && (*var).hh.keylen as libc::c_ulong == tmp_len
                    {
                        if memcmp(
                            (*var).hh.key,
                            tmp.as_mut_ptr() as *const libc::c_void,
                            tmp_len,
                        ) == 0 as libc::c_int
                        {
                            break;
                        }
                    }
                    if !((*var).hh.hh_next).is_null() {
                        var = ((*var).hh.hh_next as *mut libc::c_char)
                            .offset(-((*(*(*entry).varmap).hh.tbl).hho as isize))
                            as *mut libc::c_void as *mut varpeek_var_t;
                    } else {
                        var = 0 as *mut varpeek_var_t;
                    }
                }
            }
        }
        if !var.is_null() {
            num_vars_found += 1 as libc::c_int;
            rv = copy_proc_mem(
                (*context).target.pid,
                b"zval\0" as *const u8 as *const libc::c_char,
                (remote_execute_data as *mut zval_74)
                    .offset((5 as libc::c_int + i) as isize) as *mut libc::c_void,
                &mut zv as *mut zval_74 as *mut libc::c_void,
                ::std::mem::size_of::<zval_74>() as libc::c_ulong,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            rv = sprint_zval_74(
                context,
                &mut zv,
                tmp.as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                &mut tmp_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            (*context).event.varpeek.entry = entry;
            (*context).event.varpeek.var = var;
            (*context).event.varpeek.zval_str = tmp.as_mut_ptr();
            rv = ((*context).event_handler).unwrap()(context, 3 as libc::c_int);
            if rv != 0 as libc::c_int {
                return rv;
            }
            if num_vars_found >= num_vars_peeking {
                break;
            }
        }
        i += 1;
        i;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_locals_71(
    mut context: *mut trace_context_t,
    mut zop: *mut zend_op_71,
    mut remote_execute_data: *mut zend_execute_data_71,
    mut op_array: *mut zend_op_array_71,
    mut file: *mut libc::c_char,
    mut file_len: libc::c_int,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut i: libc::c_int = 0;
    let mut num_vars_found: libc::c_int = 0;
    let mut num_vars_peeking: libc::c_int = 0;
    let mut tmp: [libc::c_char; 256] = [0; 256];
    let mut tmp_len: size_t = 0;
    let mut zstrp: *mut zend_string_71 = 0 as *mut zend_string_71;
    let mut entry: *mut varpeek_entry_t = 0 as *mut varpeek_entry_t;
    let mut var: *mut varpeek_var_t = 0 as *mut varpeek_var_t;
    let mut varpeek_key: [libc::c_char; 256] = [0; 256];
    let mut zv: zval_71 = zval_71 {
        value: _zend_value_71 { lval: 0 },
        u1: C2RustUnnamed_20 {
            v: C2RustUnnamed_21 {
                type_0: 0,
                pad0: [0; 3],
            },
        },
        u2: C2RustUnnamed_19 { next: 0 },
    };
    snprintf(
        varpeek_key.as_mut_ptr(),
        ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
        b"%.*s:%d\0" as *const u8 as *const libc::c_char,
        file_len,
        file,
        (*zop).lineno,
    );
    let mut _uthash_hfstr_keylen: libc::c_uint = strlen(varpeek_key.as_mut_ptr())
        as libc::c_uint;
    let mut _hf_hashv: libc::c_uint = 0;
    let mut _hj_i: libc::c_uint = 0;
    let mut _hj_j: libc::c_uint = 0;
    let mut _hj_k: libc::c_uint = 0;
    let mut _hj_key: *const libc::c_uchar = varpeek_key.as_mut_ptr()
        as *const libc::c_uchar;
    _hf_hashv = 0xfeedbeef as libc::c_uint;
    _hj_j = 0x9e3779b9 as libc::c_uint;
    _hj_i = _hj_j;
    _hj_k = _uthash_hfstr_keylen;
    while _hj_k >= 12 as libc::c_uint {
        _hj_i = _hj_i
            .wrapping_add(
                (*_hj_key.offset(0 as libc::c_int as isize) as libc::c_uint)
                    .wrapping_add(
                        (*_hj_key.offset(1 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(2 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(3 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    ),
            );
        _hj_j = _hj_j
            .wrapping_add(
                (*_hj_key.offset(4 as libc::c_int as isize) as libc::c_uint)
                    .wrapping_add(
                        (*_hj_key.offset(5 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(6 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(7 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    ),
            );
        _hf_hashv = _hf_hashv
            .wrapping_add(
                (*_hj_key.offset(8 as libc::c_int as isize) as libc::c_uint)
                    .wrapping_add(
                        (*_hj_key.offset(9 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(10 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(11 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    ),
            );
        _hj_i = _hj_i.wrapping_sub(_hj_j);
        _hj_i = _hj_i.wrapping_sub(_hf_hashv);
        _hj_i ^= _hf_hashv >> 13 as libc::c_int;
        _hj_j = _hj_j.wrapping_sub(_hf_hashv);
        _hj_j = _hj_j.wrapping_sub(_hj_i);
        _hj_j ^= _hj_i << 8 as libc::c_int;
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
        _hf_hashv ^= _hj_j >> 13 as libc::c_int;
        _hj_i = _hj_i.wrapping_sub(_hj_j);
        _hj_i = _hj_i.wrapping_sub(_hf_hashv);
        _hj_i ^= _hf_hashv >> 12 as libc::c_int;
        _hj_j = _hj_j.wrapping_sub(_hf_hashv);
        _hj_j = _hj_j.wrapping_sub(_hj_i);
        _hj_j ^= _hj_i << 16 as libc::c_int;
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
        _hf_hashv ^= _hj_j >> 5 as libc::c_int;
        _hj_i = _hj_i.wrapping_sub(_hj_j);
        _hj_i = _hj_i.wrapping_sub(_hf_hashv);
        _hj_i ^= _hf_hashv >> 3 as libc::c_int;
        _hj_j = _hj_j.wrapping_sub(_hf_hashv);
        _hj_j = _hj_j.wrapping_sub(_hj_i);
        _hj_j ^= _hj_i << 10 as libc::c_int;
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
        _hf_hashv ^= _hj_j >> 15 as libc::c_int;
        _hj_key = _hj_key.offset(12 as libc::c_int as isize);
        _hj_k = _hj_k.wrapping_sub(12 as libc::c_uint);
    }
    _hf_hashv = _hf_hashv.wrapping_add(_uthash_hfstr_keylen);
    let mut current_block_51: u64;
    match _hj_k {
        11 => {
            _hf_hashv = _hf_hashv
                .wrapping_add(
                    (*_hj_key.offset(10 as libc::c_int as isize) as libc::c_uint)
                        << 24 as libc::c_int,
                );
            current_block_51 = 7703490883596076409;
        }
        10 => {
            current_block_51 = 7703490883596076409;
        }
        9 => {
            current_block_51 = 11640438226164823948;
        }
        8 => {
            current_block_51 = 16692744812244064270;
        }
        7 => {
            current_block_51 = 13845998277048951969;
        }
        6 => {
            current_block_51 = 6027393950823060684;
        }
        5 => {
            current_block_51 = 11856092996027499079;
        }
        4 => {
            current_block_51 = 14947187310187575123;
        }
        3 => {
            current_block_51 = 6916391411310893358;
        }
        2 => {
            current_block_51 = 7626426121896314348;
        }
        1 => {
            current_block_51 = 548206169509259565;
        }
        _ => {
            current_block_51 = 2122094917359643297;
        }
    }
    match current_block_51 {
        7703490883596076409 => {
            _hf_hashv = _hf_hashv
                .wrapping_add(
                    (*_hj_key.offset(9 as libc::c_int as isize) as libc::c_uint)
                        << 16 as libc::c_int,
                );
            current_block_51 = 11640438226164823948;
        }
        _ => {}
    }
    match current_block_51 {
        11640438226164823948 => {
            _hf_hashv = _hf_hashv
                .wrapping_add(
                    (*_hj_key.offset(8 as libc::c_int as isize) as libc::c_uint)
                        << 8 as libc::c_int,
                );
            current_block_51 = 16692744812244064270;
        }
        _ => {}
    }
    match current_block_51 {
        16692744812244064270 => {
            _hj_j = _hj_j
                .wrapping_add(
                    (*_hj_key.offset(7 as libc::c_int as isize) as libc::c_uint)
                        << 24 as libc::c_int,
                );
            current_block_51 = 13845998277048951969;
        }
        _ => {}
    }
    match current_block_51 {
        13845998277048951969 => {
            _hj_j = _hj_j
                .wrapping_add(
                    (*_hj_key.offset(6 as libc::c_int as isize) as libc::c_uint)
                        << 16 as libc::c_int,
                );
            current_block_51 = 6027393950823060684;
        }
        _ => {}
    }
    match current_block_51 {
        6027393950823060684 => {
            _hj_j = _hj_j
                .wrapping_add(
                    (*_hj_key.offset(5 as libc::c_int as isize) as libc::c_uint)
                        << 8 as libc::c_int,
                );
            current_block_51 = 11856092996027499079;
        }
        _ => {}
    }
    match current_block_51 {
        11856092996027499079 => {
            _hj_j = _hj_j
                .wrapping_add(
                    *_hj_key.offset(4 as libc::c_int as isize) as libc::c_uint,
                );
            current_block_51 = 14947187310187575123;
        }
        _ => {}
    }
    match current_block_51 {
        14947187310187575123 => {
            _hj_i = _hj_i
                .wrapping_add(
                    (*_hj_key.offset(3 as libc::c_int as isize) as libc::c_uint)
                        << 24 as libc::c_int,
                );
            current_block_51 = 6916391411310893358;
        }
        _ => {}
    }
    match current_block_51 {
        6916391411310893358 => {
            _hj_i = _hj_i
                .wrapping_add(
                    (*_hj_key.offset(2 as libc::c_int as isize) as libc::c_uint)
                        << 16 as libc::c_int,
                );
            current_block_51 = 7626426121896314348;
        }
        _ => {}
    }
    match current_block_51 {
        7626426121896314348 => {
            _hj_i = _hj_i
                .wrapping_add(
                    (*_hj_key.offset(1 as libc::c_int as isize) as libc::c_uint)
                        << 8 as libc::c_int,
                );
            current_block_51 = 548206169509259565;
        }
        _ => {}
    }
    match current_block_51 {
        548206169509259565 => {
            _hj_i = _hj_i
                .wrapping_add(
                    *_hj_key.offset(0 as libc::c_int as isize) as libc::c_uint,
                );
        }
        _ => {}
    }
    _hj_i = _hj_i.wrapping_sub(_hj_j);
    _hj_i = _hj_i.wrapping_sub(_hf_hashv);
    _hj_i ^= _hf_hashv >> 13 as libc::c_int;
    _hj_j = _hj_j.wrapping_sub(_hf_hashv);
    _hj_j = _hj_j.wrapping_sub(_hj_i);
    _hj_j ^= _hj_i << 8 as libc::c_int;
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
    _hf_hashv ^= _hj_j >> 13 as libc::c_int;
    _hj_i = _hj_i.wrapping_sub(_hj_j);
    _hj_i = _hj_i.wrapping_sub(_hf_hashv);
    _hj_i ^= _hf_hashv >> 12 as libc::c_int;
    _hj_j = _hj_j.wrapping_sub(_hf_hashv);
    _hj_j = _hj_j.wrapping_sub(_hj_i);
    _hj_j ^= _hj_i << 16 as libc::c_int;
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
    _hf_hashv ^= _hj_j >> 5 as libc::c_int;
    _hj_i = _hj_i.wrapping_sub(_hj_j);
    _hj_i = _hj_i.wrapping_sub(_hf_hashv);
    _hj_i ^= _hf_hashv >> 3 as libc::c_int;
    _hj_j = _hj_j.wrapping_sub(_hf_hashv);
    _hj_j = _hj_j.wrapping_sub(_hj_i);
    _hj_j ^= _hj_i << 10 as libc::c_int;
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
    _hf_hashv ^= _hj_j >> 15 as libc::c_int;
    entry = 0 as *mut varpeek_entry_t;
    if !varpeek_map.is_null() {
        let mut _hf_bkt: libc::c_uint = 0;
        _hf_bkt = _hf_hashv
            & ((*(*varpeek_map).hh.tbl).num_buckets).wrapping_sub(1 as libc::c_uint);
        if 1 as libc::c_int != 0 as libc::c_int {
            if !((*((*(*varpeek_map).hh.tbl).buckets).offset(_hf_bkt as isize)).hh_head)
                .is_null()
            {
                entry = ((*((*(*varpeek_map).hh.tbl).buckets).offset(_hf_bkt as isize))
                    .hh_head as *mut libc::c_char)
                    .offset(-((*(*varpeek_map).hh.tbl).hho as isize))
                    as *mut libc::c_void as *mut varpeek_entry_t;
            } else {
                entry = 0 as *mut varpeek_entry_t;
            }
            while !entry.is_null() {
                if (*entry).hh.hashv == _hf_hashv
                    && (*entry).hh.keylen == _uthash_hfstr_keylen
                {
                    if memcmp(
                        (*entry).hh.key,
                        varpeek_key.as_mut_ptr() as *const libc::c_void,
                        _uthash_hfstr_keylen as libc::c_ulong,
                    ) == 0 as libc::c_int
                    {
                        break;
                    }
                }
                if !((*entry).hh.hh_next).is_null() {
                    entry = ((*entry).hh.hh_next as *mut libc::c_char)
                        .offset(-((*(*varpeek_map).hh.tbl).hho as isize))
                        as *mut libc::c_void as *mut varpeek_entry_t;
                } else {
                    entry = 0 as *mut varpeek_entry_t;
                }
            }
        }
    }
    if entry.is_null() {
        return 0 as libc::c_int;
    }
    num_vars_found = 0 as libc::c_int;
    num_vars_peeking = (if !((*entry).varmap).is_null() {
        (*(*(*entry).varmap).hh.tbl).num_items
    } else {
        0 as libc::c_uint
    }) as libc::c_int;
    i = 0 as libc::c_int;
    while i < (*op_array).last_var {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"var\0" as *const u8 as *const libc::c_char,
            ((*op_array).vars).offset(i as isize) as *mut libc::c_void,
            &mut zstrp as *mut *mut zend_string_71 as *mut libc::c_void,
            ::std::mem::size_of::<*mut zend_string_71>() as libc::c_ulong,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        rv = sprint_zstring_71(
            context,
            b"var\0" as *const u8 as *const libc::c_char,
            zstrp,
            tmp.as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
            &mut tmp_len,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        let mut _hf_hashv_0: libc::c_uint = 0;
        let mut _hj_i_0: libc::c_uint = 0;
        let mut _hj_j_0: libc::c_uint = 0;
        let mut _hj_k_0: libc::c_uint = 0;
        let mut _hj_key_0: *const libc::c_uchar = tmp.as_mut_ptr()
            as *const libc::c_uchar;
        _hf_hashv_0 = 0xfeedbeef as libc::c_uint;
        _hj_j_0 = 0x9e3779b9 as libc::c_uint;
        _hj_i_0 = _hj_j_0;
        _hj_k_0 = tmp_len as libc::c_uint;
        while _hj_k_0 >= 12 as libc::c_uint {
            _hj_i_0 = _hj_i_0
                .wrapping_add(
                    (*_hj_key_0.offset(0 as libc::c_int as isize) as libc::c_uint)
                        .wrapping_add(
                            (*_hj_key_0.offset(1 as libc::c_int as isize)
                                as libc::c_uint) << 8 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(2 as libc::c_int as isize)
                                as libc::c_uint) << 16 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(3 as libc::c_int as isize)
                                as libc::c_uint) << 24 as libc::c_int,
                        ),
                );
            _hj_j_0 = _hj_j_0
                .wrapping_add(
                    (*_hj_key_0.offset(4 as libc::c_int as isize) as libc::c_uint)
                        .wrapping_add(
                            (*_hj_key_0.offset(5 as libc::c_int as isize)
                                as libc::c_uint) << 8 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(6 as libc::c_int as isize)
                                as libc::c_uint) << 16 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(7 as libc::c_int as isize)
                                as libc::c_uint) << 24 as libc::c_int,
                        ),
                );
            _hf_hashv_0 = _hf_hashv_0
                .wrapping_add(
                    (*_hj_key_0.offset(8 as libc::c_int as isize) as libc::c_uint)
                        .wrapping_add(
                            (*_hj_key_0.offset(9 as libc::c_int as isize)
                                as libc::c_uint) << 8 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(10 as libc::c_int as isize)
                                as libc::c_uint) << 16 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(11 as libc::c_int as isize)
                                as libc::c_uint) << 24 as libc::c_int,
                        ),
                );
            _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
            _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
            _hj_i_0 ^= _hf_hashv_0 >> 13 as libc::c_int;
            _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
            _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
            _hj_j_0 ^= _hj_i_0 << 8 as libc::c_int;
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
            _hf_hashv_0 ^= _hj_j_0 >> 13 as libc::c_int;
            _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
            _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
            _hj_i_0 ^= _hf_hashv_0 >> 12 as libc::c_int;
            _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
            _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
            _hj_j_0 ^= _hj_i_0 << 16 as libc::c_int;
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
            _hf_hashv_0 ^= _hj_j_0 >> 5 as libc::c_int;
            _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
            _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
            _hj_i_0 ^= _hf_hashv_0 >> 3 as libc::c_int;
            _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
            _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
            _hj_j_0 ^= _hj_i_0 << 10 as libc::c_int;
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
            _hf_hashv_0 ^= _hj_j_0 >> 15 as libc::c_int;
            _hj_key_0 = _hj_key_0.offset(12 as libc::c_int as isize);
            _hj_k_0 = _hj_k_0.wrapping_sub(12 as libc::c_uint);
        }
        _hf_hashv_0 = _hf_hashv_0.wrapping_add(tmp_len as libc::c_uint);
        let mut current_block_180: u64;
        match _hj_k_0 {
            11 => {
                _hf_hashv_0 = _hf_hashv_0
                    .wrapping_add(
                        (*_hj_key_0.offset(10 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    );
                current_block_180 = 11614056141112934386;
            }
            10 => {
                current_block_180 = 11614056141112934386;
            }
            9 => {
                current_block_180 = 2172345023003293092;
            }
            8 => {
                current_block_180 = 15155355503009951688;
            }
            7 => {
                current_block_180 = 1872491218591101944;
            }
            6 => {
                current_block_180 = 5117570109778997037;
            }
            5 => {
                current_block_180 = 14218756864272716250;
            }
            4 => {
                current_block_180 = 14575630978958041130;
            }
            3 => {
                current_block_180 = 10251753225417761204;
            }
            2 => {
                current_block_180 = 7610410479670926929;
            }
            1 => {
                current_block_180 = 662418527283889907;
            }
            _ => {
                current_block_180 = 6215370584428403858;
            }
        }
        match current_block_180 {
            11614056141112934386 => {
                _hf_hashv_0 = _hf_hashv_0
                    .wrapping_add(
                        (*_hj_key_0.offset(9 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    );
                current_block_180 = 2172345023003293092;
            }
            _ => {}
        }
        match current_block_180 {
            2172345023003293092 => {
                _hf_hashv_0 = _hf_hashv_0
                    .wrapping_add(
                        (*_hj_key_0.offset(8 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    );
                current_block_180 = 15155355503009951688;
            }
            _ => {}
        }
        match current_block_180 {
            15155355503009951688 => {
                _hj_j_0 = _hj_j_0
                    .wrapping_add(
                        (*_hj_key_0.offset(7 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    );
                current_block_180 = 1872491218591101944;
            }
            _ => {}
        }
        match current_block_180 {
            1872491218591101944 => {
                _hj_j_0 = _hj_j_0
                    .wrapping_add(
                        (*_hj_key_0.offset(6 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    );
                current_block_180 = 5117570109778997037;
            }
            _ => {}
        }
        match current_block_180 {
            5117570109778997037 => {
                _hj_j_0 = _hj_j_0
                    .wrapping_add(
                        (*_hj_key_0.offset(5 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    );
                current_block_180 = 14218756864272716250;
            }
            _ => {}
        }
        match current_block_180 {
            14218756864272716250 => {
                _hj_j_0 = _hj_j_0
                    .wrapping_add(
                        *_hj_key_0.offset(4 as libc::c_int as isize) as libc::c_uint,
                    );
                current_block_180 = 14575630978958041130;
            }
            _ => {}
        }
        match current_block_180 {
            14575630978958041130 => {
                _hj_i_0 = _hj_i_0
                    .wrapping_add(
                        (*_hj_key_0.offset(3 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    );
                current_block_180 = 10251753225417761204;
            }
            _ => {}
        }
        match current_block_180 {
            10251753225417761204 => {
                _hj_i_0 = _hj_i_0
                    .wrapping_add(
                        (*_hj_key_0.offset(2 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    );
                current_block_180 = 7610410479670926929;
            }
            _ => {}
        }
        match current_block_180 {
            7610410479670926929 => {
                _hj_i_0 = _hj_i_0
                    .wrapping_add(
                        (*_hj_key_0.offset(1 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    );
                current_block_180 = 662418527283889907;
            }
            _ => {}
        }
        match current_block_180 {
            662418527283889907 => {
                _hj_i_0 = _hj_i_0
                    .wrapping_add(
                        *_hj_key_0.offset(0 as libc::c_int as isize) as libc::c_uint,
                    );
            }
            _ => {}
        }
        _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
        _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
        _hj_i_0 ^= _hf_hashv_0 >> 13 as libc::c_int;
        _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
        _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
        _hj_j_0 ^= _hj_i_0 << 8 as libc::c_int;
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
        _hf_hashv_0 ^= _hj_j_0 >> 13 as libc::c_int;
        _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
        _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
        _hj_i_0 ^= _hf_hashv_0 >> 12 as libc::c_int;
        _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
        _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
        _hj_j_0 ^= _hj_i_0 << 16 as libc::c_int;
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
        _hf_hashv_0 ^= _hj_j_0 >> 5 as libc::c_int;
        _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
        _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
        _hj_i_0 ^= _hf_hashv_0 >> 3 as libc::c_int;
        _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
        _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
        _hj_j_0 ^= _hj_i_0 << 10 as libc::c_int;
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
        _hf_hashv_0 ^= _hj_j_0 >> 15 as libc::c_int;
        var = 0 as *mut varpeek_var_t;
        if !((*entry).varmap).is_null() {
            let mut _hf_bkt_0: libc::c_uint = 0;
            _hf_bkt_0 = _hf_hashv_0
                & ((*(*(*entry).varmap).hh.tbl).num_buckets)
                    .wrapping_sub(1 as libc::c_uint);
            if 1 as libc::c_int != 0 as libc::c_int {
                if !((*((*(*(*entry).varmap).hh.tbl).buckets).offset(_hf_bkt_0 as isize))
                    .hh_head)
                    .is_null()
                {
                    var = ((*((*(*(*entry).varmap).hh.tbl).buckets)
                        .offset(_hf_bkt_0 as isize))
                        .hh_head as *mut libc::c_char)
                        .offset(-((*(*(*entry).varmap).hh.tbl).hho as isize))
                        as *mut libc::c_void as *mut varpeek_var_t;
                } else {
                    var = 0 as *mut varpeek_var_t;
                }
                while !var.is_null() {
                    if (*var).hh.hashv == _hf_hashv_0
                        && (*var).hh.keylen as libc::c_ulong == tmp_len
                    {
                        if memcmp(
                            (*var).hh.key,
                            tmp.as_mut_ptr() as *const libc::c_void,
                            tmp_len,
                        ) == 0 as libc::c_int
                        {
                            break;
                        }
                    }
                    if !((*var).hh.hh_next).is_null() {
                        var = ((*var).hh.hh_next as *mut libc::c_char)
                            .offset(-((*(*(*entry).varmap).hh.tbl).hho as isize))
                            as *mut libc::c_void as *mut varpeek_var_t;
                    } else {
                        var = 0 as *mut varpeek_var_t;
                    }
                }
            }
        }
        if !var.is_null() {
            num_vars_found += 1 as libc::c_int;
            rv = copy_proc_mem(
                (*context).target.pid,
                b"zval\0" as *const u8 as *const libc::c_char,
                (remote_execute_data as *mut zval_71)
                    .offset((5 as libc::c_int + i) as isize) as *mut libc::c_void,
                &mut zv as *mut zval_71 as *mut libc::c_void,
                ::std::mem::size_of::<zval_71>() as libc::c_ulong,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            rv = sprint_zval_71(
                context,
                &mut zv,
                tmp.as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                &mut tmp_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            (*context).event.varpeek.entry = entry;
            (*context).event.varpeek.var = var;
            (*context).event.varpeek.zval_str = tmp.as_mut_ptr();
            rv = ((*context).event_handler).unwrap()(context, 3 as libc::c_int);
            if rv != 0 as libc::c_int {
                return rv;
            }
            if num_vars_found >= num_vars_peeking {
                break;
            }
        }
        i += 1;
        i;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_locals_73(
    mut context: *mut trace_context_t,
    mut zop: *mut zend_op_73,
    mut remote_execute_data: *mut zend_execute_data_73,
    mut op_array: *mut zend_op_array_73,
    mut file: *mut libc::c_char,
    mut file_len: libc::c_int,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut i: libc::c_int = 0;
    let mut num_vars_found: libc::c_int = 0;
    let mut num_vars_peeking: libc::c_int = 0;
    let mut tmp: [libc::c_char; 256] = [0; 256];
    let mut tmp_len: size_t = 0;
    let mut zstrp: *mut zend_string_73 = 0 as *mut zend_string_73;
    let mut entry: *mut varpeek_entry_t = 0 as *mut varpeek_entry_t;
    let mut var: *mut varpeek_var_t = 0 as *mut varpeek_var_t;
    let mut varpeek_key: [libc::c_char; 256] = [0; 256];
    let mut zv: zval_73 = zval_73 {
        value: _zend_value_73 { lval: 0 },
        u1: C2RustUnnamed_28 {
            v: C2RustUnnamed_29 {
                type_0: 0,
                pad0: [0; 3],
            },
        },
        u2: C2RustUnnamed_27 { next: 0 },
    };
    snprintf(
        varpeek_key.as_mut_ptr(),
        ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
        b"%.*s:%d\0" as *const u8 as *const libc::c_char,
        file_len,
        file,
        (*zop).lineno,
    );
    let mut _uthash_hfstr_keylen: libc::c_uint = strlen(varpeek_key.as_mut_ptr())
        as libc::c_uint;
    let mut _hf_hashv: libc::c_uint = 0;
    let mut _hj_i: libc::c_uint = 0;
    let mut _hj_j: libc::c_uint = 0;
    let mut _hj_k: libc::c_uint = 0;
    let mut _hj_key: *const libc::c_uchar = varpeek_key.as_mut_ptr()
        as *const libc::c_uchar;
    _hf_hashv = 0xfeedbeef as libc::c_uint;
    _hj_j = 0x9e3779b9 as libc::c_uint;
    _hj_i = _hj_j;
    _hj_k = _uthash_hfstr_keylen;
    while _hj_k >= 12 as libc::c_uint {
        _hj_i = _hj_i
            .wrapping_add(
                (*_hj_key.offset(0 as libc::c_int as isize) as libc::c_uint)
                    .wrapping_add(
                        (*_hj_key.offset(1 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(2 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(3 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    ),
            );
        _hj_j = _hj_j
            .wrapping_add(
                (*_hj_key.offset(4 as libc::c_int as isize) as libc::c_uint)
                    .wrapping_add(
                        (*_hj_key.offset(5 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(6 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(7 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    ),
            );
        _hf_hashv = _hf_hashv
            .wrapping_add(
                (*_hj_key.offset(8 as libc::c_int as isize) as libc::c_uint)
                    .wrapping_add(
                        (*_hj_key.offset(9 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(10 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(11 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    ),
            );
        _hj_i = _hj_i.wrapping_sub(_hj_j);
        _hj_i = _hj_i.wrapping_sub(_hf_hashv);
        _hj_i ^= _hf_hashv >> 13 as libc::c_int;
        _hj_j = _hj_j.wrapping_sub(_hf_hashv);
        _hj_j = _hj_j.wrapping_sub(_hj_i);
        _hj_j ^= _hj_i << 8 as libc::c_int;
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
        _hf_hashv ^= _hj_j >> 13 as libc::c_int;
        _hj_i = _hj_i.wrapping_sub(_hj_j);
        _hj_i = _hj_i.wrapping_sub(_hf_hashv);
        _hj_i ^= _hf_hashv >> 12 as libc::c_int;
        _hj_j = _hj_j.wrapping_sub(_hf_hashv);
        _hj_j = _hj_j.wrapping_sub(_hj_i);
        _hj_j ^= _hj_i << 16 as libc::c_int;
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
        _hf_hashv ^= _hj_j >> 5 as libc::c_int;
        _hj_i = _hj_i.wrapping_sub(_hj_j);
        _hj_i = _hj_i.wrapping_sub(_hf_hashv);
        _hj_i ^= _hf_hashv >> 3 as libc::c_int;
        _hj_j = _hj_j.wrapping_sub(_hf_hashv);
        _hj_j = _hj_j.wrapping_sub(_hj_i);
        _hj_j ^= _hj_i << 10 as libc::c_int;
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
        _hf_hashv ^= _hj_j >> 15 as libc::c_int;
        _hj_key = _hj_key.offset(12 as libc::c_int as isize);
        _hj_k = _hj_k.wrapping_sub(12 as libc::c_uint);
    }
    _hf_hashv = _hf_hashv.wrapping_add(_uthash_hfstr_keylen);
    let mut current_block_51: u64;
    match _hj_k {
        11 => {
            _hf_hashv = _hf_hashv
                .wrapping_add(
                    (*_hj_key.offset(10 as libc::c_int as isize) as libc::c_uint)
                        << 24 as libc::c_int,
                );
            current_block_51 = 16248407313755841820;
        }
        10 => {
            current_block_51 = 16248407313755841820;
        }
        9 => {
            current_block_51 = 5090543220795522339;
        }
        8 => {
            current_block_51 = 7374375530179395593;
        }
        7 => {
            current_block_51 = 1687590412630888302;
        }
        6 => {
            current_block_51 = 2300421527130135635;
        }
        5 => {
            current_block_51 = 7527092427964429453;
        }
        4 => {
            current_block_51 = 17696512545717931465;
        }
        3 => {
            current_block_51 = 4194459045163817243;
        }
        2 => {
            current_block_51 = 17654588577772887124;
        }
        1 => {
            current_block_51 = 10571652858845026654;
        }
        _ => {
            current_block_51 = 2122094917359643297;
        }
    }
    match current_block_51 {
        16248407313755841820 => {
            _hf_hashv = _hf_hashv
                .wrapping_add(
                    (*_hj_key.offset(9 as libc::c_int as isize) as libc::c_uint)
                        << 16 as libc::c_int,
                );
            current_block_51 = 5090543220795522339;
        }
        _ => {}
    }
    match current_block_51 {
        5090543220795522339 => {
            _hf_hashv = _hf_hashv
                .wrapping_add(
                    (*_hj_key.offset(8 as libc::c_int as isize) as libc::c_uint)
                        << 8 as libc::c_int,
                );
            current_block_51 = 7374375530179395593;
        }
        _ => {}
    }
    match current_block_51 {
        7374375530179395593 => {
            _hj_j = _hj_j
                .wrapping_add(
                    (*_hj_key.offset(7 as libc::c_int as isize) as libc::c_uint)
                        << 24 as libc::c_int,
                );
            current_block_51 = 1687590412630888302;
        }
        _ => {}
    }
    match current_block_51 {
        1687590412630888302 => {
            _hj_j = _hj_j
                .wrapping_add(
                    (*_hj_key.offset(6 as libc::c_int as isize) as libc::c_uint)
                        << 16 as libc::c_int,
                );
            current_block_51 = 2300421527130135635;
        }
        _ => {}
    }
    match current_block_51 {
        2300421527130135635 => {
            _hj_j = _hj_j
                .wrapping_add(
                    (*_hj_key.offset(5 as libc::c_int as isize) as libc::c_uint)
                        << 8 as libc::c_int,
                );
            current_block_51 = 7527092427964429453;
        }
        _ => {}
    }
    match current_block_51 {
        7527092427964429453 => {
            _hj_j = _hj_j
                .wrapping_add(
                    *_hj_key.offset(4 as libc::c_int as isize) as libc::c_uint,
                );
            current_block_51 = 17696512545717931465;
        }
        _ => {}
    }
    match current_block_51 {
        17696512545717931465 => {
            _hj_i = _hj_i
                .wrapping_add(
                    (*_hj_key.offset(3 as libc::c_int as isize) as libc::c_uint)
                        << 24 as libc::c_int,
                );
            current_block_51 = 4194459045163817243;
        }
        _ => {}
    }
    match current_block_51 {
        4194459045163817243 => {
            _hj_i = _hj_i
                .wrapping_add(
                    (*_hj_key.offset(2 as libc::c_int as isize) as libc::c_uint)
                        << 16 as libc::c_int,
                );
            current_block_51 = 17654588577772887124;
        }
        _ => {}
    }
    match current_block_51 {
        17654588577772887124 => {
            _hj_i = _hj_i
                .wrapping_add(
                    (*_hj_key.offset(1 as libc::c_int as isize) as libc::c_uint)
                        << 8 as libc::c_int,
                );
            current_block_51 = 10571652858845026654;
        }
        _ => {}
    }
    match current_block_51 {
        10571652858845026654 => {
            _hj_i = _hj_i
                .wrapping_add(
                    *_hj_key.offset(0 as libc::c_int as isize) as libc::c_uint,
                );
        }
        _ => {}
    }
    _hj_i = _hj_i.wrapping_sub(_hj_j);
    _hj_i = _hj_i.wrapping_sub(_hf_hashv);
    _hj_i ^= _hf_hashv >> 13 as libc::c_int;
    _hj_j = _hj_j.wrapping_sub(_hf_hashv);
    _hj_j = _hj_j.wrapping_sub(_hj_i);
    _hj_j ^= _hj_i << 8 as libc::c_int;
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
    _hf_hashv ^= _hj_j >> 13 as libc::c_int;
    _hj_i = _hj_i.wrapping_sub(_hj_j);
    _hj_i = _hj_i.wrapping_sub(_hf_hashv);
    _hj_i ^= _hf_hashv >> 12 as libc::c_int;
    _hj_j = _hj_j.wrapping_sub(_hf_hashv);
    _hj_j = _hj_j.wrapping_sub(_hj_i);
    _hj_j ^= _hj_i << 16 as libc::c_int;
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
    _hf_hashv ^= _hj_j >> 5 as libc::c_int;
    _hj_i = _hj_i.wrapping_sub(_hj_j);
    _hj_i = _hj_i.wrapping_sub(_hf_hashv);
    _hj_i ^= _hf_hashv >> 3 as libc::c_int;
    _hj_j = _hj_j.wrapping_sub(_hf_hashv);
    _hj_j = _hj_j.wrapping_sub(_hj_i);
    _hj_j ^= _hj_i << 10 as libc::c_int;
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
    _hf_hashv ^= _hj_j >> 15 as libc::c_int;
    entry = 0 as *mut varpeek_entry_t;
    if !varpeek_map.is_null() {
        let mut _hf_bkt: libc::c_uint = 0;
        _hf_bkt = _hf_hashv
            & ((*(*varpeek_map).hh.tbl).num_buckets).wrapping_sub(1 as libc::c_uint);
        if 1 as libc::c_int != 0 as libc::c_int {
            if !((*((*(*varpeek_map).hh.tbl).buckets).offset(_hf_bkt as isize)).hh_head)
                .is_null()
            {
                entry = ((*((*(*varpeek_map).hh.tbl).buckets).offset(_hf_bkt as isize))
                    .hh_head as *mut libc::c_char)
                    .offset(-((*(*varpeek_map).hh.tbl).hho as isize))
                    as *mut libc::c_void as *mut varpeek_entry_t;
            } else {
                entry = 0 as *mut varpeek_entry_t;
            }
            while !entry.is_null() {
                if (*entry).hh.hashv == _hf_hashv
                    && (*entry).hh.keylen == _uthash_hfstr_keylen
                {
                    if memcmp(
                        (*entry).hh.key,
                        varpeek_key.as_mut_ptr() as *const libc::c_void,
                        _uthash_hfstr_keylen as libc::c_ulong,
                    ) == 0 as libc::c_int
                    {
                        break;
                    }
                }
                if !((*entry).hh.hh_next).is_null() {
                    entry = ((*entry).hh.hh_next as *mut libc::c_char)
                        .offset(-((*(*varpeek_map).hh.tbl).hho as isize))
                        as *mut libc::c_void as *mut varpeek_entry_t;
                } else {
                    entry = 0 as *mut varpeek_entry_t;
                }
            }
        }
    }
    if entry.is_null() {
        return 0 as libc::c_int;
    }
    num_vars_found = 0 as libc::c_int;
    num_vars_peeking = (if !((*entry).varmap).is_null() {
        (*(*(*entry).varmap).hh.tbl).num_items
    } else {
        0 as libc::c_uint
    }) as libc::c_int;
    i = 0 as libc::c_int;
    while i < (*op_array).last_var {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"var\0" as *const u8 as *const libc::c_char,
            ((*op_array).vars).offset(i as isize) as *mut libc::c_void,
            &mut zstrp as *mut *mut zend_string_73 as *mut libc::c_void,
            ::std::mem::size_of::<*mut zend_string_73>() as libc::c_ulong,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        rv = sprint_zstring_73(
            context,
            b"var\0" as *const u8 as *const libc::c_char,
            zstrp,
            tmp.as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
            &mut tmp_len,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        let mut _hf_hashv_0: libc::c_uint = 0;
        let mut _hj_i_0: libc::c_uint = 0;
        let mut _hj_j_0: libc::c_uint = 0;
        let mut _hj_k_0: libc::c_uint = 0;
        let mut _hj_key_0: *const libc::c_uchar = tmp.as_mut_ptr()
            as *const libc::c_uchar;
        _hf_hashv_0 = 0xfeedbeef as libc::c_uint;
        _hj_j_0 = 0x9e3779b9 as libc::c_uint;
        _hj_i_0 = _hj_j_0;
        _hj_k_0 = tmp_len as libc::c_uint;
        while _hj_k_0 >= 12 as libc::c_uint {
            _hj_i_0 = _hj_i_0
                .wrapping_add(
                    (*_hj_key_0.offset(0 as libc::c_int as isize) as libc::c_uint)
                        .wrapping_add(
                            (*_hj_key_0.offset(1 as libc::c_int as isize)
                                as libc::c_uint) << 8 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(2 as libc::c_int as isize)
                                as libc::c_uint) << 16 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(3 as libc::c_int as isize)
                                as libc::c_uint) << 24 as libc::c_int,
                        ),
                );
            _hj_j_0 = _hj_j_0
                .wrapping_add(
                    (*_hj_key_0.offset(4 as libc::c_int as isize) as libc::c_uint)
                        .wrapping_add(
                            (*_hj_key_0.offset(5 as libc::c_int as isize)
                                as libc::c_uint) << 8 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(6 as libc::c_int as isize)
                                as libc::c_uint) << 16 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(7 as libc::c_int as isize)
                                as libc::c_uint) << 24 as libc::c_int,
                        ),
                );
            _hf_hashv_0 = _hf_hashv_0
                .wrapping_add(
                    (*_hj_key_0.offset(8 as libc::c_int as isize) as libc::c_uint)
                        .wrapping_add(
                            (*_hj_key_0.offset(9 as libc::c_int as isize)
                                as libc::c_uint) << 8 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(10 as libc::c_int as isize)
                                as libc::c_uint) << 16 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(11 as libc::c_int as isize)
                                as libc::c_uint) << 24 as libc::c_int,
                        ),
                );
            _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
            _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
            _hj_i_0 ^= _hf_hashv_0 >> 13 as libc::c_int;
            _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
            _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
            _hj_j_0 ^= _hj_i_0 << 8 as libc::c_int;
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
            _hf_hashv_0 ^= _hj_j_0 >> 13 as libc::c_int;
            _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
            _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
            _hj_i_0 ^= _hf_hashv_0 >> 12 as libc::c_int;
            _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
            _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
            _hj_j_0 ^= _hj_i_0 << 16 as libc::c_int;
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
            _hf_hashv_0 ^= _hj_j_0 >> 5 as libc::c_int;
            _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
            _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
            _hj_i_0 ^= _hf_hashv_0 >> 3 as libc::c_int;
            _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
            _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
            _hj_j_0 ^= _hj_i_0 << 10 as libc::c_int;
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
            _hf_hashv_0 ^= _hj_j_0 >> 15 as libc::c_int;
            _hj_key_0 = _hj_key_0.offset(12 as libc::c_int as isize);
            _hj_k_0 = _hj_k_0.wrapping_sub(12 as libc::c_uint);
        }
        _hf_hashv_0 = _hf_hashv_0.wrapping_add(tmp_len as libc::c_uint);
        let mut current_block_180: u64;
        match _hj_k_0 {
            11 => {
                _hf_hashv_0 = _hf_hashv_0
                    .wrapping_add(
                        (*_hj_key_0.offset(10 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    );
                current_block_180 = 13019476826479650340;
            }
            10 => {
                current_block_180 = 13019476826479650340;
            }
            9 => {
                current_block_180 = 15400517092704343059;
            }
            8 => {
                current_block_180 = 15139583566849041816;
            }
            7 => {
                current_block_180 = 2350602415788186534;
            }
            6 => {
                current_block_180 = 3313549466501994341;
            }
            5 => {
                current_block_180 = 1932425310680316383;
            }
            4 => {
                current_block_180 = 18000009067648066635;
            }
            3 => {
                current_block_180 = 6742421755019015524;
            }
            2 => {
                current_block_180 = 3130392304119251422;
            }
            1 => {
                current_block_180 = 10879175264106785184;
            }
            _ => {
                current_block_180 = 6215370584428403858;
            }
        }
        match current_block_180 {
            13019476826479650340 => {
                _hf_hashv_0 = _hf_hashv_0
                    .wrapping_add(
                        (*_hj_key_0.offset(9 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    );
                current_block_180 = 15400517092704343059;
            }
            _ => {}
        }
        match current_block_180 {
            15400517092704343059 => {
                _hf_hashv_0 = _hf_hashv_0
                    .wrapping_add(
                        (*_hj_key_0.offset(8 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    );
                current_block_180 = 15139583566849041816;
            }
            _ => {}
        }
        match current_block_180 {
            15139583566849041816 => {
                _hj_j_0 = _hj_j_0
                    .wrapping_add(
                        (*_hj_key_0.offset(7 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    );
                current_block_180 = 2350602415788186534;
            }
            _ => {}
        }
        match current_block_180 {
            2350602415788186534 => {
                _hj_j_0 = _hj_j_0
                    .wrapping_add(
                        (*_hj_key_0.offset(6 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    );
                current_block_180 = 3313549466501994341;
            }
            _ => {}
        }
        match current_block_180 {
            3313549466501994341 => {
                _hj_j_0 = _hj_j_0
                    .wrapping_add(
                        (*_hj_key_0.offset(5 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    );
                current_block_180 = 1932425310680316383;
            }
            _ => {}
        }
        match current_block_180 {
            1932425310680316383 => {
                _hj_j_0 = _hj_j_0
                    .wrapping_add(
                        *_hj_key_0.offset(4 as libc::c_int as isize) as libc::c_uint,
                    );
                current_block_180 = 18000009067648066635;
            }
            _ => {}
        }
        match current_block_180 {
            18000009067648066635 => {
                _hj_i_0 = _hj_i_0
                    .wrapping_add(
                        (*_hj_key_0.offset(3 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    );
                current_block_180 = 6742421755019015524;
            }
            _ => {}
        }
        match current_block_180 {
            6742421755019015524 => {
                _hj_i_0 = _hj_i_0
                    .wrapping_add(
                        (*_hj_key_0.offset(2 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    );
                current_block_180 = 3130392304119251422;
            }
            _ => {}
        }
        match current_block_180 {
            3130392304119251422 => {
                _hj_i_0 = _hj_i_0
                    .wrapping_add(
                        (*_hj_key_0.offset(1 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    );
                current_block_180 = 10879175264106785184;
            }
            _ => {}
        }
        match current_block_180 {
            10879175264106785184 => {
                _hj_i_0 = _hj_i_0
                    .wrapping_add(
                        *_hj_key_0.offset(0 as libc::c_int as isize) as libc::c_uint,
                    );
            }
            _ => {}
        }
        _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
        _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
        _hj_i_0 ^= _hf_hashv_0 >> 13 as libc::c_int;
        _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
        _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
        _hj_j_0 ^= _hj_i_0 << 8 as libc::c_int;
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
        _hf_hashv_0 ^= _hj_j_0 >> 13 as libc::c_int;
        _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
        _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
        _hj_i_0 ^= _hf_hashv_0 >> 12 as libc::c_int;
        _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
        _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
        _hj_j_0 ^= _hj_i_0 << 16 as libc::c_int;
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
        _hf_hashv_0 ^= _hj_j_0 >> 5 as libc::c_int;
        _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
        _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
        _hj_i_0 ^= _hf_hashv_0 >> 3 as libc::c_int;
        _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
        _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
        _hj_j_0 ^= _hj_i_0 << 10 as libc::c_int;
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
        _hf_hashv_0 ^= _hj_j_0 >> 15 as libc::c_int;
        var = 0 as *mut varpeek_var_t;
        if !((*entry).varmap).is_null() {
            let mut _hf_bkt_0: libc::c_uint = 0;
            _hf_bkt_0 = _hf_hashv_0
                & ((*(*(*entry).varmap).hh.tbl).num_buckets)
                    .wrapping_sub(1 as libc::c_uint);
            if 1 as libc::c_int != 0 as libc::c_int {
                if !((*((*(*(*entry).varmap).hh.tbl).buckets).offset(_hf_bkt_0 as isize))
                    .hh_head)
                    .is_null()
                {
                    var = ((*((*(*(*entry).varmap).hh.tbl).buckets)
                        .offset(_hf_bkt_0 as isize))
                        .hh_head as *mut libc::c_char)
                        .offset(-((*(*(*entry).varmap).hh.tbl).hho as isize))
                        as *mut libc::c_void as *mut varpeek_var_t;
                } else {
                    var = 0 as *mut varpeek_var_t;
                }
                while !var.is_null() {
                    if (*var).hh.hashv == _hf_hashv_0
                        && (*var).hh.keylen as libc::c_ulong == tmp_len
                    {
                        if memcmp(
                            (*var).hh.key,
                            tmp.as_mut_ptr() as *const libc::c_void,
                            tmp_len,
                        ) == 0 as libc::c_int
                        {
                            break;
                        }
                    }
                    if !((*var).hh.hh_next).is_null() {
                        var = ((*var).hh.hh_next as *mut libc::c_char)
                            .offset(-((*(*(*entry).varmap).hh.tbl).hho as isize))
                            as *mut libc::c_void as *mut varpeek_var_t;
                    } else {
                        var = 0 as *mut varpeek_var_t;
                    }
                }
            }
        }
        if !var.is_null() {
            num_vars_found += 1 as libc::c_int;
            rv = copy_proc_mem(
                (*context).target.pid,
                b"zval\0" as *const u8 as *const libc::c_char,
                (remote_execute_data as *mut zval_73)
                    .offset((5 as libc::c_int + i) as isize) as *mut libc::c_void,
                &mut zv as *mut zval_73 as *mut libc::c_void,
                ::std::mem::size_of::<zval_73>() as libc::c_ulong,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            rv = sprint_zval_73(
                context,
                &mut zv,
                tmp.as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                &mut tmp_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            (*context).event.varpeek.entry = entry;
            (*context).event.varpeek.var = var;
            (*context).event.varpeek.zval_str = tmp.as_mut_ptr();
            rv = ((*context).event_handler).unwrap()(context, 3 as libc::c_int);
            if rv != 0 as libc::c_int {
                return rv;
            }
            if num_vars_found >= num_vars_peeking {
                break;
            }
        }
        i += 1;
        i;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn trace_locals_72(
    mut context: *mut trace_context_t,
    mut zop: *mut zend_op_72,
    mut remote_execute_data: *mut zend_execute_data_72,
    mut op_array: *mut zend_op_array_72,
    mut file: *mut libc::c_char,
    mut file_len: libc::c_int,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut i: libc::c_int = 0;
    let mut num_vars_found: libc::c_int = 0;
    let mut num_vars_peeking: libc::c_int = 0;
    let mut tmp: [libc::c_char; 256] = [0; 256];
    let mut tmp_len: size_t = 0;
    let mut zstrp: *mut zend_string_72 = 0 as *mut zend_string_72;
    let mut entry: *mut varpeek_entry_t = 0 as *mut varpeek_entry_t;
    let mut var: *mut varpeek_var_t = 0 as *mut varpeek_var_t;
    let mut varpeek_key: [libc::c_char; 256] = [0; 256];
    let mut zv: zval_72 = zval_72 {
        value: _zend_value_72 { lval: 0 },
        u1: C2RustUnnamed_24 {
            v: C2RustUnnamed_25 {
                type_0: 0,
                pad0: [0; 3],
            },
        },
        u2: C2RustUnnamed_23 { next: 0 },
    };
    snprintf(
        varpeek_key.as_mut_ptr(),
        ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
        b"%.*s:%d\0" as *const u8 as *const libc::c_char,
        file_len,
        file,
        (*zop).lineno,
    );
    let mut _uthash_hfstr_keylen: libc::c_uint = strlen(varpeek_key.as_mut_ptr())
        as libc::c_uint;
    let mut _hf_hashv: libc::c_uint = 0;
    let mut _hj_i: libc::c_uint = 0;
    let mut _hj_j: libc::c_uint = 0;
    let mut _hj_k: libc::c_uint = 0;
    let mut _hj_key: *const libc::c_uchar = varpeek_key.as_mut_ptr()
        as *const libc::c_uchar;
    _hf_hashv = 0xfeedbeef as libc::c_uint;
    _hj_j = 0x9e3779b9 as libc::c_uint;
    _hj_i = _hj_j;
    _hj_k = _uthash_hfstr_keylen;
    while _hj_k >= 12 as libc::c_uint {
        _hj_i = _hj_i
            .wrapping_add(
                (*_hj_key.offset(0 as libc::c_int as isize) as libc::c_uint)
                    .wrapping_add(
                        (*_hj_key.offset(1 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(2 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(3 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    ),
            );
        _hj_j = _hj_j
            .wrapping_add(
                (*_hj_key.offset(4 as libc::c_int as isize) as libc::c_uint)
                    .wrapping_add(
                        (*_hj_key.offset(5 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(6 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(7 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    ),
            );
        _hf_hashv = _hf_hashv
            .wrapping_add(
                (*_hj_key.offset(8 as libc::c_int as isize) as libc::c_uint)
                    .wrapping_add(
                        (*_hj_key.offset(9 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(10 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    )
                    .wrapping_add(
                        (*_hj_key.offset(11 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    ),
            );
        _hj_i = _hj_i.wrapping_sub(_hj_j);
        _hj_i = _hj_i.wrapping_sub(_hf_hashv);
        _hj_i ^= _hf_hashv >> 13 as libc::c_int;
        _hj_j = _hj_j.wrapping_sub(_hf_hashv);
        _hj_j = _hj_j.wrapping_sub(_hj_i);
        _hj_j ^= _hj_i << 8 as libc::c_int;
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
        _hf_hashv ^= _hj_j >> 13 as libc::c_int;
        _hj_i = _hj_i.wrapping_sub(_hj_j);
        _hj_i = _hj_i.wrapping_sub(_hf_hashv);
        _hj_i ^= _hf_hashv >> 12 as libc::c_int;
        _hj_j = _hj_j.wrapping_sub(_hf_hashv);
        _hj_j = _hj_j.wrapping_sub(_hj_i);
        _hj_j ^= _hj_i << 16 as libc::c_int;
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
        _hf_hashv ^= _hj_j >> 5 as libc::c_int;
        _hj_i = _hj_i.wrapping_sub(_hj_j);
        _hj_i = _hj_i.wrapping_sub(_hf_hashv);
        _hj_i ^= _hf_hashv >> 3 as libc::c_int;
        _hj_j = _hj_j.wrapping_sub(_hf_hashv);
        _hj_j = _hj_j.wrapping_sub(_hj_i);
        _hj_j ^= _hj_i << 10 as libc::c_int;
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
        _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
        _hf_hashv ^= _hj_j >> 15 as libc::c_int;
        _hj_key = _hj_key.offset(12 as libc::c_int as isize);
        _hj_k = _hj_k.wrapping_sub(12 as libc::c_uint);
    }
    _hf_hashv = _hf_hashv.wrapping_add(_uthash_hfstr_keylen);
    let mut current_block_51: u64;
    match _hj_k {
        11 => {
            _hf_hashv = _hf_hashv
                .wrapping_add(
                    (*_hj_key.offset(10 as libc::c_int as isize) as libc::c_uint)
                        << 24 as libc::c_int,
                );
            current_block_51 = 1793749414097711611;
        }
        10 => {
            current_block_51 = 1793749414097711611;
        }
        9 => {
            current_block_51 = 8306574488599745794;
        }
        8 => {
            current_block_51 = 16658930188330696878;
        }
        7 => {
            current_block_51 = 4287747468066269810;
        }
        6 => {
            current_block_51 = 18315917941963207432;
        }
        5 => {
            current_block_51 = 5279940490367192221;
        }
        4 => {
            current_block_51 = 7543185049324804208;
        }
        3 => {
            current_block_51 = 5120779847983037567;
        }
        2 => {
            current_block_51 = 4451318237964228064;
        }
        1 => {
            current_block_51 = 5907669316249512512;
        }
        _ => {
            current_block_51 = 2122094917359643297;
        }
    }
    match current_block_51 {
        1793749414097711611 => {
            _hf_hashv = _hf_hashv
                .wrapping_add(
                    (*_hj_key.offset(9 as libc::c_int as isize) as libc::c_uint)
                        << 16 as libc::c_int,
                );
            current_block_51 = 8306574488599745794;
        }
        _ => {}
    }
    match current_block_51 {
        8306574488599745794 => {
            _hf_hashv = _hf_hashv
                .wrapping_add(
                    (*_hj_key.offset(8 as libc::c_int as isize) as libc::c_uint)
                        << 8 as libc::c_int,
                );
            current_block_51 = 16658930188330696878;
        }
        _ => {}
    }
    match current_block_51 {
        16658930188330696878 => {
            _hj_j = _hj_j
                .wrapping_add(
                    (*_hj_key.offset(7 as libc::c_int as isize) as libc::c_uint)
                        << 24 as libc::c_int,
                );
            current_block_51 = 4287747468066269810;
        }
        _ => {}
    }
    match current_block_51 {
        4287747468066269810 => {
            _hj_j = _hj_j
                .wrapping_add(
                    (*_hj_key.offset(6 as libc::c_int as isize) as libc::c_uint)
                        << 16 as libc::c_int,
                );
            current_block_51 = 18315917941963207432;
        }
        _ => {}
    }
    match current_block_51 {
        18315917941963207432 => {
            _hj_j = _hj_j
                .wrapping_add(
                    (*_hj_key.offset(5 as libc::c_int as isize) as libc::c_uint)
                        << 8 as libc::c_int,
                );
            current_block_51 = 5279940490367192221;
        }
        _ => {}
    }
    match current_block_51 {
        5279940490367192221 => {
            _hj_j = _hj_j
                .wrapping_add(
                    *_hj_key.offset(4 as libc::c_int as isize) as libc::c_uint,
                );
            current_block_51 = 7543185049324804208;
        }
        _ => {}
    }
    match current_block_51 {
        7543185049324804208 => {
            _hj_i = _hj_i
                .wrapping_add(
                    (*_hj_key.offset(3 as libc::c_int as isize) as libc::c_uint)
                        << 24 as libc::c_int,
                );
            current_block_51 = 5120779847983037567;
        }
        _ => {}
    }
    match current_block_51 {
        5120779847983037567 => {
            _hj_i = _hj_i
                .wrapping_add(
                    (*_hj_key.offset(2 as libc::c_int as isize) as libc::c_uint)
                        << 16 as libc::c_int,
                );
            current_block_51 = 4451318237964228064;
        }
        _ => {}
    }
    match current_block_51 {
        4451318237964228064 => {
            _hj_i = _hj_i
                .wrapping_add(
                    (*_hj_key.offset(1 as libc::c_int as isize) as libc::c_uint)
                        << 8 as libc::c_int,
                );
            current_block_51 = 5907669316249512512;
        }
        _ => {}
    }
    match current_block_51 {
        5907669316249512512 => {
            _hj_i = _hj_i
                .wrapping_add(
                    *_hj_key.offset(0 as libc::c_int as isize) as libc::c_uint,
                );
        }
        _ => {}
    }
    _hj_i = _hj_i.wrapping_sub(_hj_j);
    _hj_i = _hj_i.wrapping_sub(_hf_hashv);
    _hj_i ^= _hf_hashv >> 13 as libc::c_int;
    _hj_j = _hj_j.wrapping_sub(_hf_hashv);
    _hj_j = _hj_j.wrapping_sub(_hj_i);
    _hj_j ^= _hj_i << 8 as libc::c_int;
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
    _hf_hashv ^= _hj_j >> 13 as libc::c_int;
    _hj_i = _hj_i.wrapping_sub(_hj_j);
    _hj_i = _hj_i.wrapping_sub(_hf_hashv);
    _hj_i ^= _hf_hashv >> 12 as libc::c_int;
    _hj_j = _hj_j.wrapping_sub(_hf_hashv);
    _hj_j = _hj_j.wrapping_sub(_hj_i);
    _hj_j ^= _hj_i << 16 as libc::c_int;
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
    _hf_hashv ^= _hj_j >> 5 as libc::c_int;
    _hj_i = _hj_i.wrapping_sub(_hj_j);
    _hj_i = _hj_i.wrapping_sub(_hf_hashv);
    _hj_i ^= _hf_hashv >> 3 as libc::c_int;
    _hj_j = _hj_j.wrapping_sub(_hf_hashv);
    _hj_j = _hj_j.wrapping_sub(_hj_i);
    _hj_j ^= _hj_i << 10 as libc::c_int;
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_i);
    _hf_hashv = _hf_hashv.wrapping_sub(_hj_j);
    _hf_hashv ^= _hj_j >> 15 as libc::c_int;
    entry = 0 as *mut varpeek_entry_t;
    if !varpeek_map.is_null() {
        let mut _hf_bkt: libc::c_uint = 0;
        _hf_bkt = _hf_hashv
            & ((*(*varpeek_map).hh.tbl).num_buckets).wrapping_sub(1 as libc::c_uint);
        if 1 as libc::c_int != 0 as libc::c_int {
            if !((*((*(*varpeek_map).hh.tbl).buckets).offset(_hf_bkt as isize)).hh_head)
                .is_null()
            {
                entry = ((*((*(*varpeek_map).hh.tbl).buckets).offset(_hf_bkt as isize))
                    .hh_head as *mut libc::c_char)
                    .offset(-((*(*varpeek_map).hh.tbl).hho as isize))
                    as *mut libc::c_void as *mut varpeek_entry_t;
            } else {
                entry = 0 as *mut varpeek_entry_t;
            }
            while !entry.is_null() {
                if (*entry).hh.hashv == _hf_hashv
                    && (*entry).hh.keylen == _uthash_hfstr_keylen
                {
                    if memcmp(
                        (*entry).hh.key,
                        varpeek_key.as_mut_ptr() as *const libc::c_void,
                        _uthash_hfstr_keylen as libc::c_ulong,
                    ) == 0 as libc::c_int
                    {
                        break;
                    }
                }
                if !((*entry).hh.hh_next).is_null() {
                    entry = ((*entry).hh.hh_next as *mut libc::c_char)
                        .offset(-((*(*varpeek_map).hh.tbl).hho as isize))
                        as *mut libc::c_void as *mut varpeek_entry_t;
                } else {
                    entry = 0 as *mut varpeek_entry_t;
                }
            }
        }
    }
    if entry.is_null() {
        return 0 as libc::c_int;
    }
    num_vars_found = 0 as libc::c_int;
    num_vars_peeking = (if !((*entry).varmap).is_null() {
        (*(*(*entry).varmap).hh.tbl).num_items
    } else {
        0 as libc::c_uint
    }) as libc::c_int;
    i = 0 as libc::c_int;
    while i < (*op_array).last_var {
        rv = copy_proc_mem(
            (*context).target.pid,
            b"var\0" as *const u8 as *const libc::c_char,
            ((*op_array).vars).offset(i as isize) as *mut libc::c_void,
            &mut zstrp as *mut *mut zend_string_72 as *mut libc::c_void,
            ::std::mem::size_of::<*mut zend_string_72>() as libc::c_ulong,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        rv = sprint_zstring_72(
            context,
            b"var\0" as *const u8 as *const libc::c_char,
            zstrp,
            tmp.as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
            &mut tmp_len,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        let mut _hf_hashv_0: libc::c_uint = 0;
        let mut _hj_i_0: libc::c_uint = 0;
        let mut _hj_j_0: libc::c_uint = 0;
        let mut _hj_k_0: libc::c_uint = 0;
        let mut _hj_key_0: *const libc::c_uchar = tmp.as_mut_ptr()
            as *const libc::c_uchar;
        _hf_hashv_0 = 0xfeedbeef as libc::c_uint;
        _hj_j_0 = 0x9e3779b9 as libc::c_uint;
        _hj_i_0 = _hj_j_0;
        _hj_k_0 = tmp_len as libc::c_uint;
        while _hj_k_0 >= 12 as libc::c_uint {
            _hj_i_0 = _hj_i_0
                .wrapping_add(
                    (*_hj_key_0.offset(0 as libc::c_int as isize) as libc::c_uint)
                        .wrapping_add(
                            (*_hj_key_0.offset(1 as libc::c_int as isize)
                                as libc::c_uint) << 8 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(2 as libc::c_int as isize)
                                as libc::c_uint) << 16 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(3 as libc::c_int as isize)
                                as libc::c_uint) << 24 as libc::c_int,
                        ),
                );
            _hj_j_0 = _hj_j_0
                .wrapping_add(
                    (*_hj_key_0.offset(4 as libc::c_int as isize) as libc::c_uint)
                        .wrapping_add(
                            (*_hj_key_0.offset(5 as libc::c_int as isize)
                                as libc::c_uint) << 8 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(6 as libc::c_int as isize)
                                as libc::c_uint) << 16 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(7 as libc::c_int as isize)
                                as libc::c_uint) << 24 as libc::c_int,
                        ),
                );
            _hf_hashv_0 = _hf_hashv_0
                .wrapping_add(
                    (*_hj_key_0.offset(8 as libc::c_int as isize) as libc::c_uint)
                        .wrapping_add(
                            (*_hj_key_0.offset(9 as libc::c_int as isize)
                                as libc::c_uint) << 8 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(10 as libc::c_int as isize)
                                as libc::c_uint) << 16 as libc::c_int,
                        )
                        .wrapping_add(
                            (*_hj_key_0.offset(11 as libc::c_int as isize)
                                as libc::c_uint) << 24 as libc::c_int,
                        ),
                );
            _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
            _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
            _hj_i_0 ^= _hf_hashv_0 >> 13 as libc::c_int;
            _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
            _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
            _hj_j_0 ^= _hj_i_0 << 8 as libc::c_int;
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
            _hf_hashv_0 ^= _hj_j_0 >> 13 as libc::c_int;
            _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
            _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
            _hj_i_0 ^= _hf_hashv_0 >> 12 as libc::c_int;
            _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
            _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
            _hj_j_0 ^= _hj_i_0 << 16 as libc::c_int;
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
            _hf_hashv_0 ^= _hj_j_0 >> 5 as libc::c_int;
            _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
            _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
            _hj_i_0 ^= _hf_hashv_0 >> 3 as libc::c_int;
            _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
            _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
            _hj_j_0 ^= _hj_i_0 << 10 as libc::c_int;
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
            _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
            _hf_hashv_0 ^= _hj_j_0 >> 15 as libc::c_int;
            _hj_key_0 = _hj_key_0.offset(12 as libc::c_int as isize);
            _hj_k_0 = _hj_k_0.wrapping_sub(12 as libc::c_uint);
        }
        _hf_hashv_0 = _hf_hashv_0.wrapping_add(tmp_len as libc::c_uint);
        let mut current_block_180: u64;
        match _hj_k_0 {
            11 => {
                _hf_hashv_0 = _hf_hashv_0
                    .wrapping_add(
                        (*_hj_key_0.offset(10 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    );
                current_block_180 = 2993137940847911941;
            }
            10 => {
                current_block_180 = 2993137940847911941;
            }
            9 => {
                current_block_180 = 12530761725794406341;
            }
            8 => {
                current_block_180 = 11699864395602660912;
            }
            7 => {
                current_block_180 = 17034053861867019061;
            }
            6 => {
                current_block_180 = 7524396525998069875;
            }
            5 => {
                current_block_180 = 15002451068763025061;
            }
            4 => {
                current_block_180 = 6979780622217544596;
            }
            3 => {
                current_block_180 = 11238455570327453404;
            }
            2 => {
                current_block_180 = 7032249148547396787;
            }
            1 => {
                current_block_180 = 9130219933821575110;
            }
            _ => {
                current_block_180 = 6215370584428403858;
            }
        }
        match current_block_180 {
            2993137940847911941 => {
                _hf_hashv_0 = _hf_hashv_0
                    .wrapping_add(
                        (*_hj_key_0.offset(9 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    );
                current_block_180 = 12530761725794406341;
            }
            _ => {}
        }
        match current_block_180 {
            12530761725794406341 => {
                _hf_hashv_0 = _hf_hashv_0
                    .wrapping_add(
                        (*_hj_key_0.offset(8 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    );
                current_block_180 = 11699864395602660912;
            }
            _ => {}
        }
        match current_block_180 {
            11699864395602660912 => {
                _hj_j_0 = _hj_j_0
                    .wrapping_add(
                        (*_hj_key_0.offset(7 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    );
                current_block_180 = 17034053861867019061;
            }
            _ => {}
        }
        match current_block_180 {
            17034053861867019061 => {
                _hj_j_0 = _hj_j_0
                    .wrapping_add(
                        (*_hj_key_0.offset(6 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    );
                current_block_180 = 7524396525998069875;
            }
            _ => {}
        }
        match current_block_180 {
            7524396525998069875 => {
                _hj_j_0 = _hj_j_0
                    .wrapping_add(
                        (*_hj_key_0.offset(5 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    );
                current_block_180 = 15002451068763025061;
            }
            _ => {}
        }
        match current_block_180 {
            15002451068763025061 => {
                _hj_j_0 = _hj_j_0
                    .wrapping_add(
                        *_hj_key_0.offset(4 as libc::c_int as isize) as libc::c_uint,
                    );
                current_block_180 = 6979780622217544596;
            }
            _ => {}
        }
        match current_block_180 {
            6979780622217544596 => {
                _hj_i_0 = _hj_i_0
                    .wrapping_add(
                        (*_hj_key_0.offset(3 as libc::c_int as isize) as libc::c_uint)
                            << 24 as libc::c_int,
                    );
                current_block_180 = 11238455570327453404;
            }
            _ => {}
        }
        match current_block_180 {
            11238455570327453404 => {
                _hj_i_0 = _hj_i_0
                    .wrapping_add(
                        (*_hj_key_0.offset(2 as libc::c_int as isize) as libc::c_uint)
                            << 16 as libc::c_int,
                    );
                current_block_180 = 7032249148547396787;
            }
            _ => {}
        }
        match current_block_180 {
            7032249148547396787 => {
                _hj_i_0 = _hj_i_0
                    .wrapping_add(
                        (*_hj_key_0.offset(1 as libc::c_int as isize) as libc::c_uint)
                            << 8 as libc::c_int,
                    );
                current_block_180 = 9130219933821575110;
            }
            _ => {}
        }
        match current_block_180 {
            9130219933821575110 => {
                _hj_i_0 = _hj_i_0
                    .wrapping_add(
                        *_hj_key_0.offset(0 as libc::c_int as isize) as libc::c_uint,
                    );
            }
            _ => {}
        }
        _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
        _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
        _hj_i_0 ^= _hf_hashv_0 >> 13 as libc::c_int;
        _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
        _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
        _hj_j_0 ^= _hj_i_0 << 8 as libc::c_int;
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
        _hf_hashv_0 ^= _hj_j_0 >> 13 as libc::c_int;
        _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
        _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
        _hj_i_0 ^= _hf_hashv_0 >> 12 as libc::c_int;
        _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
        _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
        _hj_j_0 ^= _hj_i_0 << 16 as libc::c_int;
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
        _hf_hashv_0 ^= _hj_j_0 >> 5 as libc::c_int;
        _hj_i_0 = _hj_i_0.wrapping_sub(_hj_j_0);
        _hj_i_0 = _hj_i_0.wrapping_sub(_hf_hashv_0);
        _hj_i_0 ^= _hf_hashv_0 >> 3 as libc::c_int;
        _hj_j_0 = _hj_j_0.wrapping_sub(_hf_hashv_0);
        _hj_j_0 = _hj_j_0.wrapping_sub(_hj_i_0);
        _hj_j_0 ^= _hj_i_0 << 10 as libc::c_int;
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_i_0);
        _hf_hashv_0 = _hf_hashv_0.wrapping_sub(_hj_j_0);
        _hf_hashv_0 ^= _hj_j_0 >> 15 as libc::c_int;
        var = 0 as *mut varpeek_var_t;
        if !((*entry).varmap).is_null() {
            let mut _hf_bkt_0: libc::c_uint = 0;
            _hf_bkt_0 = _hf_hashv_0
                & ((*(*(*entry).varmap).hh.tbl).num_buckets)
                    .wrapping_sub(1 as libc::c_uint);
            if 1 as libc::c_int != 0 as libc::c_int {
                if !((*((*(*(*entry).varmap).hh.tbl).buckets).offset(_hf_bkt_0 as isize))
                    .hh_head)
                    .is_null()
                {
                    var = ((*((*(*(*entry).varmap).hh.tbl).buckets)
                        .offset(_hf_bkt_0 as isize))
                        .hh_head as *mut libc::c_char)
                        .offset(-((*(*(*entry).varmap).hh.tbl).hho as isize))
                        as *mut libc::c_void as *mut varpeek_var_t;
                } else {
                    var = 0 as *mut varpeek_var_t;
                }
                while !var.is_null() {
                    if (*var).hh.hashv == _hf_hashv_0
                        && (*var).hh.keylen as libc::c_ulong == tmp_len
                    {
                        if memcmp(
                            (*var).hh.key,
                            tmp.as_mut_ptr() as *const libc::c_void,
                            tmp_len,
                        ) == 0 as libc::c_int
                        {
                            break;
                        }
                    }
                    if !((*var).hh.hh_next).is_null() {
                        var = ((*var).hh.hh_next as *mut libc::c_char)
                            .offset(-((*(*(*entry).varmap).hh.tbl).hho as isize))
                            as *mut libc::c_void as *mut varpeek_var_t;
                    } else {
                        var = 0 as *mut varpeek_var_t;
                    }
                }
            }
        }
        if !var.is_null() {
            num_vars_found += 1 as libc::c_int;
            rv = copy_proc_mem(
                (*context).target.pid,
                b"zval\0" as *const u8 as *const libc::c_char,
                (remote_execute_data as *mut zval_72)
                    .offset((5 as libc::c_int + i) as isize) as *mut libc::c_void,
                &mut zv as *mut zval_72 as *mut libc::c_void,
                ::std::mem::size_of::<zval_72>() as libc::c_ulong,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            rv = sprint_zval_72(
                context,
                &mut zv,
                tmp.as_mut_ptr(),
                ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
                &mut tmp_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
            (*context).event.varpeek.entry = entry;
            (*context).event.varpeek.var = var;
            (*context).event.varpeek.zval_str = tmp.as_mut_ptr();
            rv = ((*context).event_handler).unwrap()(context, 3 as libc::c_int);
            if rv != 0 as libc::c_int {
                return rv;
            }
            if num_vars_found >= num_vars_peeking {
                break;
            }
        }
        i += 1;
        i;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn copy_executor_globals_70(
    mut context: *mut trace_context_t,
    mut executor_globals: *mut zend_executor_globals_70,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    (*executor_globals).current_execute_data = 0 as *mut zend_execute_data_70;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"executor_globals\0" as *const u8 as *const libc::c_char,
        (*context).target.executor_globals_addr as *mut libc::c_void,
        executor_globals as *mut libc::c_void,
        ::std::mem::size_of::<zend_executor_globals_70>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn copy_executor_globals_72(
    mut context: *mut trace_context_t,
    mut executor_globals: *mut zend_executor_globals_72,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    (*executor_globals).current_execute_data = 0 as *mut zend_execute_data_72;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"executor_globals\0" as *const u8 as *const libc::c_char,
        (*context).target.executor_globals_addr as *mut libc::c_void,
        executor_globals as *mut libc::c_void,
        ::std::mem::size_of::<zend_executor_globals_72>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn copy_executor_globals_81(
    mut context: *mut trace_context_t,
    mut executor_globals: *mut zend_executor_globals_81,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    (*executor_globals).current_execute_data = 0 as *mut zend_execute_data_81;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"executor_globals\0" as *const u8 as *const libc::c_char,
        (*context).target.executor_globals_addr as *mut libc::c_void,
        executor_globals as *mut libc::c_void,
        ::std::mem::size_of::<zend_executor_globals_81>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn copy_executor_globals_73(
    mut context: *mut trace_context_t,
    mut executor_globals: *mut zend_executor_globals_73,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    (*executor_globals).current_execute_data = 0 as *mut zend_execute_data_73;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"executor_globals\0" as *const u8 as *const libc::c_char,
        (*context).target.executor_globals_addr as *mut libc::c_void,
        executor_globals as *mut libc::c_void,
        ::std::mem::size_of::<zend_executor_globals_73>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn copy_executor_globals_80(
    mut context: *mut trace_context_t,
    mut executor_globals: *mut zend_executor_globals_80,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    (*executor_globals).current_execute_data = 0 as *mut zend_execute_data_80;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"executor_globals\0" as *const u8 as *const libc::c_char,
        (*context).target.executor_globals_addr as *mut libc::c_void,
        executor_globals as *mut libc::c_void,
        ::std::mem::size_of::<zend_executor_globals_80>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn copy_executor_globals_71(
    mut context: *mut trace_context_t,
    mut executor_globals: *mut zend_executor_globals_71,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    (*executor_globals).current_execute_data = 0 as *mut zend_execute_data_71;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"executor_globals\0" as *const u8 as *const libc::c_char,
        (*context).target.executor_globals_addr as *mut libc::c_void,
        executor_globals as *mut libc::c_void,
        ::std::mem::size_of::<zend_executor_globals_71>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn copy_executor_globals_74(
    mut context: *mut trace_context_t,
    mut executor_globals: *mut zend_executor_globals_74,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    (*executor_globals).current_execute_data = 0 as *mut zend_execute_data_74;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"executor_globals\0" as *const u8 as *const libc::c_char,
        (*context).target.executor_globals_addr as *mut libc::c_void,
        executor_globals as *mut libc::c_void,
        ::std::mem::size_of::<zend_executor_globals_74>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn copy_zarray_bucket_70(
    mut context: *mut trace_context_t,
    mut rzarray: *mut zend_array_70,
    mut key: *const libc::c_char,
    mut lbucket: *mut Bucket_70,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut lzarray: zend_array_70 = zend_array_70 {
        pad0: [0; 12],
        nTableMask: 0,
        arData: 0 as *mut Bucket_70,
        nNumUsed: 0,
        nNumOfElements: 0,
        nTableSize: 0,
    };
    let mut hash_table_size: uint32_t = 0;
    let mut hash_val: uint64_t = 0;
    let mut hash_index: uint32_t = 0;
    let mut hash_table_val: uint32_t = 0;
    let mut hash_bucket: *mut uint32_t = 0 as *mut uint32_t;
    let mut tmp_key: [libc::c_char; 256] = [0; 256];
    let mut tmp_len: size_t = 0;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"array\0" as *const u8 as *const libc::c_char,
        rzarray as *mut libc::c_void,
        &mut lzarray as *mut zend_array_70 as *mut libc::c_void,
        ::std::mem::size_of::<zend_array_70>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    hash_val = phpspy_zend_inline_hash_func(key, strlen(key));
    hash_table_size = (-(1 as libc::c_int) * lzarray.nTableMask as int32_t) as uint32_t;
    hash_index = hash_val.wrapping_rem(hash_table_size as libc::c_ulong) as uint32_t;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"hash_table_val\0" as *const u8 as *const libc::c_char,
        (lzarray.arData as *mut uint32_t)
            .offset(-(hash_table_size as isize))
            .offset(hash_index as isize) as *mut libc::c_void,
        &mut hash_table_val as *mut uint32_t as *mut libc::c_void,
        ::std::mem::size_of::<uint32_t>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    hash_bucket = &mut hash_table_val;
    loop {
        if *hash_bucket == -(1 as libc::c_int) as uint32_t {
            return 1 as libc::c_int;
        }
        rv = copy_proc_mem(
            (*context).target.pid,
            b"bucket\0" as *const u8 as *const libc::c_char,
            (lzarray.arData).offset(*hash_bucket as isize) as *mut libc::c_void,
            lbucket as *mut libc::c_void,
            ::std::mem::size_of::<Bucket_70>() as libc::c_ulong,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        if ((*lbucket).key).is_null() {
            break;
        }
        rv = sprint_zstring_70(
            context,
            b"array_key\0" as *const u8 as *const libc::c_char,
            (*lbucket).key,
            tmp_key.as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
            &mut tmp_len,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        if strcmp(key, tmp_key.as_mut_ptr()) == 0 as libc::c_int {
            hash_bucket = 0 as *mut uint32_t;
        } else {
            hash_bucket = &mut (*lbucket).val.u2.next;
        }
        if hash_bucket.is_null() {
            break;
        }
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn copy_zarray_bucket_71(
    mut context: *mut trace_context_t,
    mut rzarray: *mut zend_array_71,
    mut key: *const libc::c_char,
    mut lbucket: *mut Bucket_71,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut lzarray: zend_array_71 = zend_array_71 {
        pad0: [0; 12],
        nTableMask: 0,
        arData: 0 as *mut Bucket_71,
        nNumUsed: 0,
        nNumOfElements: 0,
        nTableSize: 0,
    };
    let mut hash_table_size: uint32_t = 0;
    let mut hash_val: uint64_t = 0;
    let mut hash_index: uint32_t = 0;
    let mut hash_table_val: uint32_t = 0;
    let mut hash_bucket: *mut uint32_t = 0 as *mut uint32_t;
    let mut tmp_key: [libc::c_char; 256] = [0; 256];
    let mut tmp_len: size_t = 0;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"array\0" as *const u8 as *const libc::c_char,
        rzarray as *mut libc::c_void,
        &mut lzarray as *mut zend_array_71 as *mut libc::c_void,
        ::std::mem::size_of::<zend_array_71>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    hash_val = phpspy_zend_inline_hash_func(key, strlen(key));
    hash_table_size = (-(1 as libc::c_int) * lzarray.nTableMask as int32_t) as uint32_t;
    hash_index = hash_val.wrapping_rem(hash_table_size as libc::c_ulong) as uint32_t;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"hash_table_val\0" as *const u8 as *const libc::c_char,
        (lzarray.arData as *mut uint32_t)
            .offset(-(hash_table_size as isize))
            .offset(hash_index as isize) as *mut libc::c_void,
        &mut hash_table_val as *mut uint32_t as *mut libc::c_void,
        ::std::mem::size_of::<uint32_t>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    hash_bucket = &mut hash_table_val;
    loop {
        if *hash_bucket == -(1 as libc::c_int) as uint32_t {
            return 1 as libc::c_int;
        }
        rv = copy_proc_mem(
            (*context).target.pid,
            b"bucket\0" as *const u8 as *const libc::c_char,
            (lzarray.arData).offset(*hash_bucket as isize) as *mut libc::c_void,
            lbucket as *mut libc::c_void,
            ::std::mem::size_of::<Bucket_71>() as libc::c_ulong,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        if ((*lbucket).key).is_null() {
            break;
        }
        rv = sprint_zstring_71(
            context,
            b"array_key\0" as *const u8 as *const libc::c_char,
            (*lbucket).key,
            tmp_key.as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
            &mut tmp_len,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        if strcmp(key, tmp_key.as_mut_ptr()) == 0 as libc::c_int {
            hash_bucket = 0 as *mut uint32_t;
        } else {
            hash_bucket = &mut (*lbucket).val.u2.next;
        }
        if hash_bucket.is_null() {
            break;
        }
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn copy_zarray_bucket_81(
    mut context: *mut trace_context_t,
    mut rzarray: *mut zend_array_81,
    mut key: *const libc::c_char,
    mut lbucket: *mut Bucket_81,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut lzarray: zend_array_81 = zend_array_81 {
        pad0: [0; 12],
        nTableMask: 0,
        arData: 0 as *mut Bucket_81,
        nNumUsed: 0,
        nNumOfElements: 0,
        nTableSize: 0,
    };
    let mut hash_table_size: uint32_t = 0;
    let mut hash_val: uint64_t = 0;
    let mut hash_index: uint32_t = 0;
    let mut hash_table_val: uint32_t = 0;
    let mut hash_bucket: *mut uint32_t = 0 as *mut uint32_t;
    let mut tmp_key: [libc::c_char; 256] = [0; 256];
    let mut tmp_len: size_t = 0;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"array\0" as *const u8 as *const libc::c_char,
        rzarray as *mut libc::c_void,
        &mut lzarray as *mut zend_array_81 as *mut libc::c_void,
        ::std::mem::size_of::<zend_array_81>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    hash_val = phpspy_zend_inline_hash_func(key, strlen(key));
    hash_table_size = (-(1 as libc::c_int) * lzarray.nTableMask as int32_t) as uint32_t;
    hash_index = hash_val.wrapping_rem(hash_table_size as libc::c_ulong) as uint32_t;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"hash_table_val\0" as *const u8 as *const libc::c_char,
        (lzarray.arData as *mut uint32_t)
            .offset(-(hash_table_size as isize))
            .offset(hash_index as isize) as *mut libc::c_void,
        &mut hash_table_val as *mut uint32_t as *mut libc::c_void,
        ::std::mem::size_of::<uint32_t>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    hash_bucket = &mut hash_table_val;
    loop {
        if *hash_bucket == -(1 as libc::c_int) as uint32_t {
            return 1 as libc::c_int;
        }
        rv = copy_proc_mem(
            (*context).target.pid,
            b"bucket\0" as *const u8 as *const libc::c_char,
            (lzarray.arData).offset(*hash_bucket as isize) as *mut libc::c_void,
            lbucket as *mut libc::c_void,
            ::std::mem::size_of::<Bucket_81>() as libc::c_ulong,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        if ((*lbucket).key).is_null() {
            break;
        }
        rv = sprint_zstring_81(
            context,
            b"array_key\0" as *const u8 as *const libc::c_char,
            (*lbucket).key,
            tmp_key.as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
            &mut tmp_len,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        if strcmp(key, tmp_key.as_mut_ptr()) == 0 as libc::c_int {
            hash_bucket = 0 as *mut uint32_t;
        } else {
            hash_bucket = &mut (*lbucket).val.u2.next;
        }
        if hash_bucket.is_null() {
            break;
        }
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn copy_zarray_bucket_72(
    mut context: *mut trace_context_t,
    mut rzarray: *mut zend_array_72,
    mut key: *const libc::c_char,
    mut lbucket: *mut Bucket_72,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut lzarray: zend_array_72 = zend_array_72 {
        pad0: [0; 12],
        nTableMask: 0,
        arData: 0 as *mut Bucket_72,
        nNumUsed: 0,
        nNumOfElements: 0,
        nTableSize: 0,
    };
    let mut hash_table_size: uint32_t = 0;
    let mut hash_val: uint64_t = 0;
    let mut hash_index: uint32_t = 0;
    let mut hash_table_val: uint32_t = 0;
    let mut hash_bucket: *mut uint32_t = 0 as *mut uint32_t;
    let mut tmp_key: [libc::c_char; 256] = [0; 256];
    let mut tmp_len: size_t = 0;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"array\0" as *const u8 as *const libc::c_char,
        rzarray as *mut libc::c_void,
        &mut lzarray as *mut zend_array_72 as *mut libc::c_void,
        ::std::mem::size_of::<zend_array_72>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    hash_val = phpspy_zend_inline_hash_func(key, strlen(key));
    hash_table_size = (-(1 as libc::c_int) * lzarray.nTableMask as int32_t) as uint32_t;
    hash_index = hash_val.wrapping_rem(hash_table_size as libc::c_ulong) as uint32_t;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"hash_table_val\0" as *const u8 as *const libc::c_char,
        (lzarray.arData as *mut uint32_t)
            .offset(-(hash_table_size as isize))
            .offset(hash_index as isize) as *mut libc::c_void,
        &mut hash_table_val as *mut uint32_t as *mut libc::c_void,
        ::std::mem::size_of::<uint32_t>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    hash_bucket = &mut hash_table_val;
    loop {
        if *hash_bucket == -(1 as libc::c_int) as uint32_t {
            return 1 as libc::c_int;
        }
        rv = copy_proc_mem(
            (*context).target.pid,
            b"bucket\0" as *const u8 as *const libc::c_char,
            (lzarray.arData).offset(*hash_bucket as isize) as *mut libc::c_void,
            lbucket as *mut libc::c_void,
            ::std::mem::size_of::<Bucket_72>() as libc::c_ulong,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        if ((*lbucket).key).is_null() {
            break;
        }
        rv = sprint_zstring_72(
            context,
            b"array_key\0" as *const u8 as *const libc::c_char,
            (*lbucket).key,
            tmp_key.as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
            &mut tmp_len,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        if strcmp(key, tmp_key.as_mut_ptr()) == 0 as libc::c_int {
            hash_bucket = 0 as *mut uint32_t;
        } else {
            hash_bucket = &mut (*lbucket).val.u2.next;
        }
        if hash_bucket.is_null() {
            break;
        }
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn copy_zarray_bucket_73(
    mut context: *mut trace_context_t,
    mut rzarray: *mut zend_array_73,
    mut key: *const libc::c_char,
    mut lbucket: *mut Bucket_73,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut lzarray: zend_array_73 = zend_array_73 {
        pad0: [0; 12],
        nTableMask: 0,
        arData: 0 as *mut Bucket_73,
        nNumUsed: 0,
        nNumOfElements: 0,
        nTableSize: 0,
    };
    let mut hash_table_size: uint32_t = 0;
    let mut hash_val: uint64_t = 0;
    let mut hash_index: uint32_t = 0;
    let mut hash_table_val: uint32_t = 0;
    let mut hash_bucket: *mut uint32_t = 0 as *mut uint32_t;
    let mut tmp_key: [libc::c_char; 256] = [0; 256];
    let mut tmp_len: size_t = 0;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"array\0" as *const u8 as *const libc::c_char,
        rzarray as *mut libc::c_void,
        &mut lzarray as *mut zend_array_73 as *mut libc::c_void,
        ::std::mem::size_of::<zend_array_73>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    hash_val = phpspy_zend_inline_hash_func(key, strlen(key));
    hash_table_size = (-(1 as libc::c_int) * lzarray.nTableMask as int32_t) as uint32_t;
    hash_index = hash_val.wrapping_rem(hash_table_size as libc::c_ulong) as uint32_t;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"hash_table_val\0" as *const u8 as *const libc::c_char,
        (lzarray.arData as *mut uint32_t)
            .offset(-(hash_table_size as isize))
            .offset(hash_index as isize) as *mut libc::c_void,
        &mut hash_table_val as *mut uint32_t as *mut libc::c_void,
        ::std::mem::size_of::<uint32_t>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    hash_bucket = &mut hash_table_val;
    loop {
        if *hash_bucket == -(1 as libc::c_int) as uint32_t {
            return 1 as libc::c_int;
        }
        rv = copy_proc_mem(
            (*context).target.pid,
            b"bucket\0" as *const u8 as *const libc::c_char,
            (lzarray.arData).offset(*hash_bucket as isize) as *mut libc::c_void,
            lbucket as *mut libc::c_void,
            ::std::mem::size_of::<Bucket_73>() as libc::c_ulong,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        if ((*lbucket).key).is_null() {
            break;
        }
        rv = sprint_zstring_73(
            context,
            b"array_key\0" as *const u8 as *const libc::c_char,
            (*lbucket).key,
            tmp_key.as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
            &mut tmp_len,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        if strcmp(key, tmp_key.as_mut_ptr()) == 0 as libc::c_int {
            hash_bucket = 0 as *mut uint32_t;
        } else {
            hash_bucket = &mut (*lbucket).val.u2.next;
        }
        if hash_bucket.is_null() {
            break;
        }
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn copy_zarray_bucket_80(
    mut context: *mut trace_context_t,
    mut rzarray: *mut zend_array_80,
    mut key: *const libc::c_char,
    mut lbucket: *mut Bucket_80,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut lzarray: zend_array_80 = zend_array_80 {
        pad0: [0; 12],
        nTableMask: 0,
        arData: 0 as *mut Bucket_80,
        nNumUsed: 0,
        nNumOfElements: 0,
        nTableSize: 0,
    };
    let mut hash_table_size: uint32_t = 0;
    let mut hash_val: uint64_t = 0;
    let mut hash_index: uint32_t = 0;
    let mut hash_table_val: uint32_t = 0;
    let mut hash_bucket: *mut uint32_t = 0 as *mut uint32_t;
    let mut tmp_key: [libc::c_char; 256] = [0; 256];
    let mut tmp_len: size_t = 0;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"array\0" as *const u8 as *const libc::c_char,
        rzarray as *mut libc::c_void,
        &mut lzarray as *mut zend_array_80 as *mut libc::c_void,
        ::std::mem::size_of::<zend_array_80>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    hash_val = phpspy_zend_inline_hash_func(key, strlen(key));
    hash_table_size = (-(1 as libc::c_int) * lzarray.nTableMask as int32_t) as uint32_t;
    hash_index = hash_val.wrapping_rem(hash_table_size as libc::c_ulong) as uint32_t;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"hash_table_val\0" as *const u8 as *const libc::c_char,
        (lzarray.arData as *mut uint32_t)
            .offset(-(hash_table_size as isize))
            .offset(hash_index as isize) as *mut libc::c_void,
        &mut hash_table_val as *mut uint32_t as *mut libc::c_void,
        ::std::mem::size_of::<uint32_t>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    hash_bucket = &mut hash_table_val;
    loop {
        if *hash_bucket == -(1 as libc::c_int) as uint32_t {
            return 1 as libc::c_int;
        }
        rv = copy_proc_mem(
            (*context).target.pid,
            b"bucket\0" as *const u8 as *const libc::c_char,
            (lzarray.arData).offset(*hash_bucket as isize) as *mut libc::c_void,
            lbucket as *mut libc::c_void,
            ::std::mem::size_of::<Bucket_80>() as libc::c_ulong,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        if ((*lbucket).key).is_null() {
            break;
        }
        rv = sprint_zstring_80(
            context,
            b"array_key\0" as *const u8 as *const libc::c_char,
            (*lbucket).key,
            tmp_key.as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
            &mut tmp_len,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        if strcmp(key, tmp_key.as_mut_ptr()) == 0 as libc::c_int {
            hash_bucket = 0 as *mut uint32_t;
        } else {
            hash_bucket = &mut (*lbucket).val.u2.next;
        }
        if hash_bucket.is_null() {
            break;
        }
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn copy_zarray_bucket_74(
    mut context: *mut trace_context_t,
    mut rzarray: *mut zend_array_74,
    mut key: *const libc::c_char,
    mut lbucket: *mut Bucket_74,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut lzarray: zend_array_74 = zend_array_74 {
        pad0: [0; 12],
        nTableMask: 0,
        arData: 0 as *mut Bucket_74,
        nNumUsed: 0,
        nNumOfElements: 0,
        nTableSize: 0,
    };
    let mut hash_table_size: uint32_t = 0;
    let mut hash_val: uint64_t = 0;
    let mut hash_index: uint32_t = 0;
    let mut hash_table_val: uint32_t = 0;
    let mut hash_bucket: *mut uint32_t = 0 as *mut uint32_t;
    let mut tmp_key: [libc::c_char; 256] = [0; 256];
    let mut tmp_len: size_t = 0;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"array\0" as *const u8 as *const libc::c_char,
        rzarray as *mut libc::c_void,
        &mut lzarray as *mut zend_array_74 as *mut libc::c_void,
        ::std::mem::size_of::<zend_array_74>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    hash_val = phpspy_zend_inline_hash_func(key, strlen(key));
    hash_table_size = (-(1 as libc::c_int) * lzarray.nTableMask as int32_t) as uint32_t;
    hash_index = hash_val.wrapping_rem(hash_table_size as libc::c_ulong) as uint32_t;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"hash_table_val\0" as *const u8 as *const libc::c_char,
        (lzarray.arData as *mut uint32_t)
            .offset(-(hash_table_size as isize))
            .offset(hash_index as isize) as *mut libc::c_void,
        &mut hash_table_val as *mut uint32_t as *mut libc::c_void,
        ::std::mem::size_of::<uint32_t>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    hash_bucket = &mut hash_table_val;
    loop {
        if *hash_bucket == -(1 as libc::c_int) as uint32_t {
            return 1 as libc::c_int;
        }
        rv = copy_proc_mem(
            (*context).target.pid,
            b"bucket\0" as *const u8 as *const libc::c_char,
            (lzarray.arData).offset(*hash_bucket as isize) as *mut libc::c_void,
            lbucket as *mut libc::c_void,
            ::std::mem::size_of::<Bucket_74>() as libc::c_ulong,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        if ((*lbucket).key).is_null() {
            break;
        }
        rv = sprint_zstring_74(
            context,
            b"array_key\0" as *const u8 as *const libc::c_char,
            (*lbucket).key,
            tmp_key.as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
            &mut tmp_len,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        if strcmp(key, tmp_key.as_mut_ptr()) == 0 as libc::c_int {
            hash_bucket = 0 as *mut uint32_t;
        } else {
            hash_bucket = &mut (*lbucket).val.u2.next;
        }
        if hash_bucket.is_null() {
            break;
        }
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zstring_74(
    mut context: *mut trace_context_t,
    mut what: *const libc::c_char,
    mut rzstring: *mut zend_string_74,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut lzstring: zend_string_74 = zend_string_74 {
        pad0: [0; 16],
        len: 0,
        val: [0; 1],
    };
    *buf = '\0' as i32 as libc::c_char;
    *buf_len = 0 as libc::c_int as size_t;
    rv = copy_proc_mem(
        (*context).target.pid,
        what,
        rzstring as *mut libc::c_void,
        &mut lzstring as *mut zend_string_74 as *mut libc::c_void,
        ::std::mem::size_of::<zend_string_74>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    *buf_len = if lzstring.len
        < (if 1 as libc::c_int as libc::c_ulong > buf_size {
            1 as libc::c_int as libc::c_ulong
        } else {
            buf_size
        })
            .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    {
        lzstring.len
    } else {
        (if 1 as libc::c_int as libc::c_ulong > buf_size {
            1 as libc::c_int as libc::c_ulong
        } else {
            buf_size
        })
            .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    };
    rv = copy_proc_mem(
        (*context).target.pid,
        what,
        (rzstring as *mut libc::c_char).offset(24 as libc::c_ulong as isize)
            as *mut libc::c_void,
        buf as *mut libc::c_void,
        *buf_len,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    *buf.offset(*buf_len as libc::c_int as isize) = '\0' as i32 as libc::c_char;
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zstring_70(
    mut context: *mut trace_context_t,
    mut what: *const libc::c_char,
    mut rzstring: *mut zend_string_70,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut lzstring: zend_string_70 = zend_string_70 {
        pad0: [0; 16],
        len: 0,
        val: [0; 1],
    };
    *buf = '\0' as i32 as libc::c_char;
    *buf_len = 0 as libc::c_int as size_t;
    rv = copy_proc_mem(
        (*context).target.pid,
        what,
        rzstring as *mut libc::c_void,
        &mut lzstring as *mut zend_string_70 as *mut libc::c_void,
        ::std::mem::size_of::<zend_string_70>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    *buf_len = if lzstring.len
        < (if 1 as libc::c_int as libc::c_ulong > buf_size {
            1 as libc::c_int as libc::c_ulong
        } else {
            buf_size
        })
            .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    {
        lzstring.len
    } else {
        (if 1 as libc::c_int as libc::c_ulong > buf_size {
            1 as libc::c_int as libc::c_ulong
        } else {
            buf_size
        })
            .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    };
    rv = copy_proc_mem(
        (*context).target.pid,
        what,
        (rzstring as *mut libc::c_char).offset(24 as libc::c_ulong as isize)
            as *mut libc::c_void,
        buf as *mut libc::c_void,
        *buf_len,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    *buf.offset(*buf_len as libc::c_int as isize) = '\0' as i32 as libc::c_char;
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zstring_71(
    mut context: *mut trace_context_t,
    mut what: *const libc::c_char,
    mut rzstring: *mut zend_string_71,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut lzstring: zend_string_71 = zend_string_71 {
        pad0: [0; 16],
        len: 0,
        val: [0; 1],
    };
    *buf = '\0' as i32 as libc::c_char;
    *buf_len = 0 as libc::c_int as size_t;
    rv = copy_proc_mem(
        (*context).target.pid,
        what,
        rzstring as *mut libc::c_void,
        &mut lzstring as *mut zend_string_71 as *mut libc::c_void,
        ::std::mem::size_of::<zend_string_71>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    *buf_len = if lzstring.len
        < (if 1 as libc::c_int as libc::c_ulong > buf_size {
            1 as libc::c_int as libc::c_ulong
        } else {
            buf_size
        })
            .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    {
        lzstring.len
    } else {
        (if 1 as libc::c_int as libc::c_ulong > buf_size {
            1 as libc::c_int as libc::c_ulong
        } else {
            buf_size
        })
            .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    };
    rv = copy_proc_mem(
        (*context).target.pid,
        what,
        (rzstring as *mut libc::c_char).offset(24 as libc::c_ulong as isize)
            as *mut libc::c_void,
        buf as *mut libc::c_void,
        *buf_len,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    *buf.offset(*buf_len as libc::c_int as isize) = '\0' as i32 as libc::c_char;
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zstring_81(
    mut context: *mut trace_context_t,
    mut what: *const libc::c_char,
    mut rzstring: *mut zend_string_81,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut lzstring: zend_string_81 = zend_string_81 {
        pad0: [0; 16],
        len: 0,
        val: [0; 1],
    };
    *buf = '\0' as i32 as libc::c_char;
    *buf_len = 0 as libc::c_int as size_t;
    rv = copy_proc_mem(
        (*context).target.pid,
        what,
        rzstring as *mut libc::c_void,
        &mut lzstring as *mut zend_string_81 as *mut libc::c_void,
        ::std::mem::size_of::<zend_string_81>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    *buf_len = if lzstring.len
        < (if 1 as libc::c_int as libc::c_ulong > buf_size {
            1 as libc::c_int as libc::c_ulong
        } else {
            buf_size
        })
            .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    {
        lzstring.len
    } else {
        (if 1 as libc::c_int as libc::c_ulong > buf_size {
            1 as libc::c_int as libc::c_ulong
        } else {
            buf_size
        })
            .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    };
    rv = copy_proc_mem(
        (*context).target.pid,
        what,
        (rzstring as *mut libc::c_char).offset(24 as libc::c_ulong as isize)
            as *mut libc::c_void,
        buf as *mut libc::c_void,
        *buf_len,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    *buf.offset(*buf_len as libc::c_int as isize) = '\0' as i32 as libc::c_char;
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zstring_72(
    mut context: *mut trace_context_t,
    mut what: *const libc::c_char,
    mut rzstring: *mut zend_string_72,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut lzstring: zend_string_72 = zend_string_72 {
        pad0: [0; 16],
        len: 0,
        val: [0; 1],
    };
    *buf = '\0' as i32 as libc::c_char;
    *buf_len = 0 as libc::c_int as size_t;
    rv = copy_proc_mem(
        (*context).target.pid,
        what,
        rzstring as *mut libc::c_void,
        &mut lzstring as *mut zend_string_72 as *mut libc::c_void,
        ::std::mem::size_of::<zend_string_72>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    *buf_len = if lzstring.len
        < (if 1 as libc::c_int as libc::c_ulong > buf_size {
            1 as libc::c_int as libc::c_ulong
        } else {
            buf_size
        })
            .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    {
        lzstring.len
    } else {
        (if 1 as libc::c_int as libc::c_ulong > buf_size {
            1 as libc::c_int as libc::c_ulong
        } else {
            buf_size
        })
            .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    };
    rv = copy_proc_mem(
        (*context).target.pid,
        what,
        (rzstring as *mut libc::c_char).offset(24 as libc::c_ulong as isize)
            as *mut libc::c_void,
        buf as *mut libc::c_void,
        *buf_len,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    *buf.offset(*buf_len as libc::c_int as isize) = '\0' as i32 as libc::c_char;
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zstring_80(
    mut context: *mut trace_context_t,
    mut what: *const libc::c_char,
    mut rzstring: *mut zend_string_80,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut lzstring: zend_string_80 = zend_string_80 {
        pad0: [0; 16],
        len: 0,
        val: [0; 1],
    };
    *buf = '\0' as i32 as libc::c_char;
    *buf_len = 0 as libc::c_int as size_t;
    rv = copy_proc_mem(
        (*context).target.pid,
        what,
        rzstring as *mut libc::c_void,
        &mut lzstring as *mut zend_string_80 as *mut libc::c_void,
        ::std::mem::size_of::<zend_string_80>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    *buf_len = if lzstring.len
        < (if 1 as libc::c_int as libc::c_ulong > buf_size {
            1 as libc::c_int as libc::c_ulong
        } else {
            buf_size
        })
            .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    {
        lzstring.len
    } else {
        (if 1 as libc::c_int as libc::c_ulong > buf_size {
            1 as libc::c_int as libc::c_ulong
        } else {
            buf_size
        })
            .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    };
    rv = copy_proc_mem(
        (*context).target.pid,
        what,
        (rzstring as *mut libc::c_char).offset(24 as libc::c_ulong as isize)
            as *mut libc::c_void,
        buf as *mut libc::c_void,
        *buf_len,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    *buf.offset(*buf_len as libc::c_int as isize) = '\0' as i32 as libc::c_char;
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zstring_73(
    mut context: *mut trace_context_t,
    mut what: *const libc::c_char,
    mut rzstring: *mut zend_string_73,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut lzstring: zend_string_73 = zend_string_73 {
        pad0: [0; 16],
        len: 0,
        val: [0; 1],
    };
    *buf = '\0' as i32 as libc::c_char;
    *buf_len = 0 as libc::c_int as size_t;
    rv = copy_proc_mem(
        (*context).target.pid,
        what,
        rzstring as *mut libc::c_void,
        &mut lzstring as *mut zend_string_73 as *mut libc::c_void,
        ::std::mem::size_of::<zend_string_73>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    *buf_len = if lzstring.len
        < (if 1 as libc::c_int as libc::c_ulong > buf_size {
            1 as libc::c_int as libc::c_ulong
        } else {
            buf_size
        })
            .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    {
        lzstring.len
    } else {
        (if 1 as libc::c_int as libc::c_ulong > buf_size {
            1 as libc::c_int as libc::c_ulong
        } else {
            buf_size
        })
            .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    };
    rv = copy_proc_mem(
        (*context).target.pid,
        what,
        (rzstring as *mut libc::c_char).offset(24 as libc::c_ulong as isize)
            as *mut libc::c_void,
        buf as *mut libc::c_void,
        *buf_len,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    *buf.offset(*buf_len as libc::c_int as isize) = '\0' as i32 as libc::c_char;
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zval_73(
    mut context: *mut trace_context_t,
    mut lzval: *mut zval_73,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut type_0: libc::c_int = 0;
    type_0 = (*lzval).u1.v.type_0 as libc::c_int;
    match type_0 {
        4 => {
            snprintf(
                buf,
                buf_size,
                b"%ld\0" as *const u8 as *const libc::c_char,
                (*lzval).value.lval,
            );
            *buf_len = strlen(buf);
        }
        5 => {
            snprintf(
                buf,
                buf_size,
                b"%f\0" as *const u8 as *const libc::c_char,
                (*lzval).value.dval,
            );
            *buf_len = strlen(buf);
        }
        6 => {
            rv = sprint_zstring_73(
                context,
                b"zval\0" as *const u8 as *const libc::c_char,
                (*lzval).value.str_0,
                buf,
                buf_size,
                buf_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
        }
        7 => {
            rv = sprint_zarray_73(context, (*lzval).value.arr, buf, buf_size, buf_len);
            if rv != 0 as libc::c_int {
                return rv;
            }
        }
        _ => return 1 as libc::c_int,
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zval_74(
    mut context: *mut trace_context_t,
    mut lzval: *mut zval_74,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut type_0: libc::c_int = 0;
    type_0 = (*lzval).u1.v.type_0 as libc::c_int;
    match type_0 {
        4 => {
            snprintf(
                buf,
                buf_size,
                b"%ld\0" as *const u8 as *const libc::c_char,
                (*lzval).value.lval,
            );
            *buf_len = strlen(buf);
        }
        5 => {
            snprintf(
                buf,
                buf_size,
                b"%f\0" as *const u8 as *const libc::c_char,
                (*lzval).value.dval,
            );
            *buf_len = strlen(buf);
        }
        6 => {
            rv = sprint_zstring_74(
                context,
                b"zval\0" as *const u8 as *const libc::c_char,
                (*lzval).value.str_0,
                buf,
                buf_size,
                buf_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
        }
        7 => {
            rv = sprint_zarray_74(context, (*lzval).value.arr, buf, buf_size, buf_len);
            if rv != 0 as libc::c_int {
                return rv;
            }
        }
        _ => return 1 as libc::c_int,
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zval_70(
    mut context: *mut trace_context_t,
    mut lzval: *mut zval_70,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut type_0: libc::c_int = 0;
    type_0 = (*lzval).u1.v.type_0 as libc::c_int;
    match type_0 {
        4 => {
            snprintf(
                buf,
                buf_size,
                b"%ld\0" as *const u8 as *const libc::c_char,
                (*lzval).value.lval,
            );
            *buf_len = strlen(buf);
        }
        5 => {
            snprintf(
                buf,
                buf_size,
                b"%f\0" as *const u8 as *const libc::c_char,
                (*lzval).value.dval,
            );
            *buf_len = strlen(buf);
        }
        6 => {
            rv = sprint_zstring_70(
                context,
                b"zval\0" as *const u8 as *const libc::c_char,
                (*lzval).value.str_0,
                buf,
                buf_size,
                buf_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
        }
        7 => {
            rv = sprint_zarray_70(context, (*lzval).value.arr, buf, buf_size, buf_len);
            if rv != 0 as libc::c_int {
                return rv;
            }
        }
        _ => return 1 as libc::c_int,
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zval_81(
    mut context: *mut trace_context_t,
    mut lzval: *mut zval_81,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut type_0: libc::c_int = 0;
    type_0 = (*lzval).u1.v.type_0 as libc::c_int;
    match type_0 {
        4 => {
            snprintf(
                buf,
                buf_size,
                b"%ld\0" as *const u8 as *const libc::c_char,
                (*lzval).value.lval,
            );
            *buf_len = strlen(buf);
        }
        5 => {
            snprintf(
                buf,
                buf_size,
                b"%f\0" as *const u8 as *const libc::c_char,
                (*lzval).value.dval,
            );
            *buf_len = strlen(buf);
        }
        6 => {
            rv = sprint_zstring_81(
                context,
                b"zval\0" as *const u8 as *const libc::c_char,
                (*lzval).value.str_0,
                buf,
                buf_size,
                buf_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
        }
        7 => {
            rv = sprint_zarray_81(context, (*lzval).value.arr, buf, buf_size, buf_len);
            if rv != 0 as libc::c_int {
                return rv;
            }
        }
        _ => return 1 as libc::c_int,
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zval_71(
    mut context: *mut trace_context_t,
    mut lzval: *mut zval_71,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut type_0: libc::c_int = 0;
    type_0 = (*lzval).u1.v.type_0 as libc::c_int;
    match type_0 {
        4 => {
            snprintf(
                buf,
                buf_size,
                b"%ld\0" as *const u8 as *const libc::c_char,
                (*lzval).value.lval,
            );
            *buf_len = strlen(buf);
        }
        5 => {
            snprintf(
                buf,
                buf_size,
                b"%f\0" as *const u8 as *const libc::c_char,
                (*lzval).value.dval,
            );
            *buf_len = strlen(buf);
        }
        6 => {
            rv = sprint_zstring_71(
                context,
                b"zval\0" as *const u8 as *const libc::c_char,
                (*lzval).value.str_0,
                buf,
                buf_size,
                buf_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
        }
        7 => {
            rv = sprint_zarray_71(context, (*lzval).value.arr, buf, buf_size, buf_len);
            if rv != 0 as libc::c_int {
                return rv;
            }
        }
        _ => return 1 as libc::c_int,
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zval_80(
    mut context: *mut trace_context_t,
    mut lzval: *mut zval_80,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut type_0: libc::c_int = 0;
    type_0 = (*lzval).u1.v.type_0 as libc::c_int;
    match type_0 {
        4 => {
            snprintf(
                buf,
                buf_size,
                b"%ld\0" as *const u8 as *const libc::c_char,
                (*lzval).value.lval,
            );
            *buf_len = strlen(buf);
        }
        5 => {
            snprintf(
                buf,
                buf_size,
                b"%f\0" as *const u8 as *const libc::c_char,
                (*lzval).value.dval,
            );
            *buf_len = strlen(buf);
        }
        6 => {
            rv = sprint_zstring_80(
                context,
                b"zval\0" as *const u8 as *const libc::c_char,
                (*lzval).value.str_0,
                buf,
                buf_size,
                buf_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
        }
        7 => {
            rv = sprint_zarray_80(context, (*lzval).value.arr, buf, buf_size, buf_len);
            if rv != 0 as libc::c_int {
                return rv;
            }
        }
        _ => return 1 as libc::c_int,
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zval_72(
    mut context: *mut trace_context_t,
    mut lzval: *mut zval_72,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut type_0: libc::c_int = 0;
    type_0 = (*lzval).u1.v.type_0 as libc::c_int;
    match type_0 {
        4 => {
            snprintf(
                buf,
                buf_size,
                b"%ld\0" as *const u8 as *const libc::c_char,
                (*lzval).value.lval,
            );
            *buf_len = strlen(buf);
        }
        5 => {
            snprintf(
                buf,
                buf_size,
                b"%f\0" as *const u8 as *const libc::c_char,
                (*lzval).value.dval,
            );
            *buf_len = strlen(buf);
        }
        6 => {
            rv = sprint_zstring_72(
                context,
                b"zval\0" as *const u8 as *const libc::c_char,
                (*lzval).value.str_0,
                buf,
                buf_size,
                buf_len,
            );
            if rv != 0 as libc::c_int {
                return rv;
            }
        }
        7 => {
            rv = sprint_zarray_72(context, (*lzval).value.arr, buf, buf_size, buf_len);
            if rv != 0 as libc::c_int {
                return rv;
            }
        }
        _ => return 1 as libc::c_int,
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zarray_71(
    mut context: *mut trace_context_t,
    mut rzarray: *mut zend_array_71,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut i: libc::c_int = 0;
    let mut array_len: libc::c_int = 0;
    let mut tmp_len: size_t = 0;
    let mut buckets: [Bucket_71; 128] = [Bucket_71 {
        val: zval_71 {
            value: _zend_value_71 { lval: 0 },
            u1: C2RustUnnamed_20 {
                v: C2RustUnnamed_21 {
                    type_0: 0,
                    pad0: [0; 3],
                },
            },
            u2: C2RustUnnamed_19 { next: 0 },
        },
        h: 0,
        key: 0 as *mut zend_string_71,
    }; 128];
    let mut lzarray: zend_array_71 = zend_array_71 {
        pad0: [0; 12],
        nTableMask: 0,
        arData: 0 as *mut Bucket_71,
        nNumUsed: 0,
        nNumOfElements: 0,
        nTableSize: 0,
    };
    let mut obuf: *mut libc::c_char = 0 as *mut libc::c_char;
    obuf = buf;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"array\0" as *const u8 as *const libc::c_char,
        rzarray as *mut libc::c_void,
        &mut lzarray as *mut zend_array_71 as *mut libc::c_void,
        ::std::mem::size_of::<zend_array_71>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    array_len = (if lzarray.nNumOfElements < 128 as libc::c_int as libc::c_uint {
        lzarray.nNumOfElements
    } else {
        128 as libc::c_int as libc::c_uint
    }) as libc::c_int;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"buckets\0" as *const u8 as *const libc::c_char,
        lzarray.arData as *mut libc::c_void,
        buckets.as_mut_ptr() as *mut libc::c_void,
        (::std::mem::size_of::<Bucket_71>() as libc::c_ulong)
            .wrapping_mul(array_len as libc::c_ulong),
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    i = 0 as libc::c_int;
    while i < array_len {
        rv = sprint_zarray_bucket_71(
            context,
            buckets.as_mut_ptr().offset(i as isize),
            buf,
            buf_size,
            &mut tmp_len,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        buf_size = (buf_size as libc::c_ulong).wrapping_sub(tmp_len) as size_t as size_t;
        buf = buf.offset(tmp_len as isize);
        if buf_size >= 2 as libc::c_int as libc::c_ulong {
            *buf = ',' as i32 as libc::c_char;
            buf_size = buf_size.wrapping_sub(1);
            buf_size;
            buf = buf.offset(1);
            buf;
        }
        i += 1;
        i;
    }
    *buf_len = buf.offset_from(obuf) as libc::c_long as size_t;
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zarray_72(
    mut context: *mut trace_context_t,
    mut rzarray: *mut zend_array_72,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut i: libc::c_int = 0;
    let mut array_len: libc::c_int = 0;
    let mut tmp_len: size_t = 0;
    let mut buckets: [Bucket_72; 128] = [Bucket_72 {
        val: zval_72 {
            value: _zend_value_72 { lval: 0 },
            u1: C2RustUnnamed_24 {
                v: C2RustUnnamed_25 {
                    type_0: 0,
                    pad0: [0; 3],
                },
            },
            u2: C2RustUnnamed_23 { next: 0 },
        },
        h: 0,
        key: 0 as *mut zend_string_72,
    }; 128];
    let mut lzarray: zend_array_72 = zend_array_72 {
        pad0: [0; 12],
        nTableMask: 0,
        arData: 0 as *mut Bucket_72,
        nNumUsed: 0,
        nNumOfElements: 0,
        nTableSize: 0,
    };
    let mut obuf: *mut libc::c_char = 0 as *mut libc::c_char;
    obuf = buf;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"array\0" as *const u8 as *const libc::c_char,
        rzarray as *mut libc::c_void,
        &mut lzarray as *mut zend_array_72 as *mut libc::c_void,
        ::std::mem::size_of::<zend_array_72>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    array_len = (if lzarray.nNumOfElements < 128 as libc::c_int as libc::c_uint {
        lzarray.nNumOfElements
    } else {
        128 as libc::c_int as libc::c_uint
    }) as libc::c_int;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"buckets\0" as *const u8 as *const libc::c_char,
        lzarray.arData as *mut libc::c_void,
        buckets.as_mut_ptr() as *mut libc::c_void,
        (::std::mem::size_of::<Bucket_72>() as libc::c_ulong)
            .wrapping_mul(array_len as libc::c_ulong),
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    i = 0 as libc::c_int;
    while i < array_len {
        rv = sprint_zarray_bucket_72(
            context,
            buckets.as_mut_ptr().offset(i as isize),
            buf,
            buf_size,
            &mut tmp_len,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        buf_size = (buf_size as libc::c_ulong).wrapping_sub(tmp_len) as size_t as size_t;
        buf = buf.offset(tmp_len as isize);
        if buf_size >= 2 as libc::c_int as libc::c_ulong {
            *buf = ',' as i32 as libc::c_char;
            buf_size = buf_size.wrapping_sub(1);
            buf_size;
            buf = buf.offset(1);
            buf;
        }
        i += 1;
        i;
    }
    *buf_len = buf.offset_from(obuf) as libc::c_long as size_t;
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zarray_80(
    mut context: *mut trace_context_t,
    mut rzarray: *mut zend_array_80,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut i: libc::c_int = 0;
    let mut array_len: libc::c_int = 0;
    let mut tmp_len: size_t = 0;
    let mut buckets: [Bucket_80; 128] = [Bucket_80 {
        val: zval_80 {
            value: _zend_value_80 { lval: 0 },
            u1: C2RustUnnamed_36 {
                v: C2RustUnnamed_37 {
                    type_0: 0,
                    pad0: [0; 3],
                },
            },
            u2: C2RustUnnamed_35 { next: 0 },
        },
        h: 0,
        key: 0 as *mut zend_string_80,
    }; 128];
    let mut lzarray: zend_array_80 = zend_array_80 {
        pad0: [0; 12],
        nTableMask: 0,
        arData: 0 as *mut Bucket_80,
        nNumUsed: 0,
        nNumOfElements: 0,
        nTableSize: 0,
    };
    let mut obuf: *mut libc::c_char = 0 as *mut libc::c_char;
    obuf = buf;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"array\0" as *const u8 as *const libc::c_char,
        rzarray as *mut libc::c_void,
        &mut lzarray as *mut zend_array_80 as *mut libc::c_void,
        ::std::mem::size_of::<zend_array_80>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    array_len = (if lzarray.nNumOfElements < 128 as libc::c_int as libc::c_uint {
        lzarray.nNumOfElements
    } else {
        128 as libc::c_int as libc::c_uint
    }) as libc::c_int;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"buckets\0" as *const u8 as *const libc::c_char,
        lzarray.arData as *mut libc::c_void,
        buckets.as_mut_ptr() as *mut libc::c_void,
        (::std::mem::size_of::<Bucket_80>() as libc::c_ulong)
            .wrapping_mul(array_len as libc::c_ulong),
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    i = 0 as libc::c_int;
    while i < array_len {
        rv = sprint_zarray_bucket_80(
            context,
            buckets.as_mut_ptr().offset(i as isize),
            buf,
            buf_size,
            &mut tmp_len,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        buf_size = (buf_size as libc::c_ulong).wrapping_sub(tmp_len) as size_t as size_t;
        buf = buf.offset(tmp_len as isize);
        if buf_size >= 2 as libc::c_int as libc::c_ulong {
            *buf = ',' as i32 as libc::c_char;
            buf_size = buf_size.wrapping_sub(1);
            buf_size;
            buf = buf.offset(1);
            buf;
        }
        i += 1;
        i;
    }
    *buf_len = buf.offset_from(obuf) as libc::c_long as size_t;
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zarray_73(
    mut context: *mut trace_context_t,
    mut rzarray: *mut zend_array_73,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut i: libc::c_int = 0;
    let mut array_len: libc::c_int = 0;
    let mut tmp_len: size_t = 0;
    let mut buckets: [Bucket_73; 128] = [Bucket_73 {
        val: zval_73 {
            value: _zend_value_73 { lval: 0 },
            u1: C2RustUnnamed_28 {
                v: C2RustUnnamed_29 {
                    type_0: 0,
                    pad0: [0; 3],
                },
            },
            u2: C2RustUnnamed_27 { next: 0 },
        },
        h: 0,
        key: 0 as *mut zend_string_73,
    }; 128];
    let mut lzarray: zend_array_73 = zend_array_73 {
        pad0: [0; 12],
        nTableMask: 0,
        arData: 0 as *mut Bucket_73,
        nNumUsed: 0,
        nNumOfElements: 0,
        nTableSize: 0,
    };
    let mut obuf: *mut libc::c_char = 0 as *mut libc::c_char;
    obuf = buf;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"array\0" as *const u8 as *const libc::c_char,
        rzarray as *mut libc::c_void,
        &mut lzarray as *mut zend_array_73 as *mut libc::c_void,
        ::std::mem::size_of::<zend_array_73>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    array_len = (if lzarray.nNumOfElements < 128 as libc::c_int as libc::c_uint {
        lzarray.nNumOfElements
    } else {
        128 as libc::c_int as libc::c_uint
    }) as libc::c_int;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"buckets\0" as *const u8 as *const libc::c_char,
        lzarray.arData as *mut libc::c_void,
        buckets.as_mut_ptr() as *mut libc::c_void,
        (::std::mem::size_of::<Bucket_73>() as libc::c_ulong)
            .wrapping_mul(array_len as libc::c_ulong),
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    i = 0 as libc::c_int;
    while i < array_len {
        rv = sprint_zarray_bucket_73(
            context,
            buckets.as_mut_ptr().offset(i as isize),
            buf,
            buf_size,
            &mut tmp_len,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        buf_size = (buf_size as libc::c_ulong).wrapping_sub(tmp_len) as size_t as size_t;
        buf = buf.offset(tmp_len as isize);
        if buf_size >= 2 as libc::c_int as libc::c_ulong {
            *buf = ',' as i32 as libc::c_char;
            buf_size = buf_size.wrapping_sub(1);
            buf_size;
            buf = buf.offset(1);
            buf;
        }
        i += 1;
        i;
    }
    *buf_len = buf.offset_from(obuf) as libc::c_long as size_t;
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zarray_74(
    mut context: *mut trace_context_t,
    mut rzarray: *mut zend_array_74,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut i: libc::c_int = 0;
    let mut array_len: libc::c_int = 0;
    let mut tmp_len: size_t = 0;
    let mut buckets: [Bucket_74; 128] = [Bucket_74 {
        val: zval_74 {
            value: _zend_value_74 { lval: 0 },
            u1: C2RustUnnamed_32 {
                v: C2RustUnnamed_33 {
                    type_0: 0,
                    pad0: [0; 3],
                },
            },
            u2: C2RustUnnamed_31 { next: 0 },
        },
        h: 0,
        key: 0 as *mut zend_string_74,
    }; 128];
    let mut lzarray: zend_array_74 = zend_array_74 {
        pad0: [0; 12],
        nTableMask: 0,
        arData: 0 as *mut Bucket_74,
        nNumUsed: 0,
        nNumOfElements: 0,
        nTableSize: 0,
    };
    let mut obuf: *mut libc::c_char = 0 as *mut libc::c_char;
    obuf = buf;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"array\0" as *const u8 as *const libc::c_char,
        rzarray as *mut libc::c_void,
        &mut lzarray as *mut zend_array_74 as *mut libc::c_void,
        ::std::mem::size_of::<zend_array_74>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    array_len = (if lzarray.nNumOfElements < 128 as libc::c_int as libc::c_uint {
        lzarray.nNumOfElements
    } else {
        128 as libc::c_int as libc::c_uint
    }) as libc::c_int;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"buckets\0" as *const u8 as *const libc::c_char,
        lzarray.arData as *mut libc::c_void,
        buckets.as_mut_ptr() as *mut libc::c_void,
        (::std::mem::size_of::<Bucket_74>() as libc::c_ulong)
            .wrapping_mul(array_len as libc::c_ulong),
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    i = 0 as libc::c_int;
    while i < array_len {
        rv = sprint_zarray_bucket_74(
            context,
            buckets.as_mut_ptr().offset(i as isize),
            buf,
            buf_size,
            &mut tmp_len,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        buf_size = (buf_size as libc::c_ulong).wrapping_sub(tmp_len) as size_t as size_t;
        buf = buf.offset(tmp_len as isize);
        if buf_size >= 2 as libc::c_int as libc::c_ulong {
            *buf = ',' as i32 as libc::c_char;
            buf_size = buf_size.wrapping_sub(1);
            buf_size;
            buf = buf.offset(1);
            buf;
        }
        i += 1;
        i;
    }
    *buf_len = buf.offset_from(obuf) as libc::c_long as size_t;
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zarray_81(
    mut context: *mut trace_context_t,
    mut rzarray: *mut zend_array_81,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut i: libc::c_int = 0;
    let mut array_len: libc::c_int = 0;
    let mut tmp_len: size_t = 0;
    let mut buckets: [Bucket_81; 128] = [Bucket_81 {
        val: zval_81 {
            value: _zend_value_81 { lval: 0 },
            u1: C2RustUnnamed_40 {
                v: C2RustUnnamed_41 {
                    type_0: 0,
                    pad0: [0; 3],
                },
            },
            u2: C2RustUnnamed_39 { next: 0 },
        },
        h: 0,
        key: 0 as *mut zend_string_81,
    }; 128];
    let mut lzarray: zend_array_81 = zend_array_81 {
        pad0: [0; 12],
        nTableMask: 0,
        arData: 0 as *mut Bucket_81,
        nNumUsed: 0,
        nNumOfElements: 0,
        nTableSize: 0,
    };
    let mut obuf: *mut libc::c_char = 0 as *mut libc::c_char;
    obuf = buf;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"array\0" as *const u8 as *const libc::c_char,
        rzarray as *mut libc::c_void,
        &mut lzarray as *mut zend_array_81 as *mut libc::c_void,
        ::std::mem::size_of::<zend_array_81>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    array_len = (if lzarray.nNumOfElements < 128 as libc::c_int as libc::c_uint {
        lzarray.nNumOfElements
    } else {
        128 as libc::c_int as libc::c_uint
    }) as libc::c_int;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"buckets\0" as *const u8 as *const libc::c_char,
        lzarray.arData as *mut libc::c_void,
        buckets.as_mut_ptr() as *mut libc::c_void,
        (::std::mem::size_of::<Bucket_81>() as libc::c_ulong)
            .wrapping_mul(array_len as libc::c_ulong),
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    i = 0 as libc::c_int;
    while i < array_len {
        rv = sprint_zarray_bucket_81(
            context,
            buckets.as_mut_ptr().offset(i as isize),
            buf,
            buf_size,
            &mut tmp_len,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        buf_size = (buf_size as libc::c_ulong).wrapping_sub(tmp_len) as size_t as size_t;
        buf = buf.offset(tmp_len as isize);
        if buf_size >= 2 as libc::c_int as libc::c_ulong {
            *buf = ',' as i32 as libc::c_char;
            buf_size = buf_size.wrapping_sub(1);
            buf_size;
            buf = buf.offset(1);
            buf;
        }
        i += 1;
        i;
    }
    *buf_len = buf.offset_from(obuf) as libc::c_long as size_t;
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zarray_70(
    mut context: *mut trace_context_t,
    mut rzarray: *mut zend_array_70,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut i: libc::c_int = 0;
    let mut array_len: libc::c_int = 0;
    let mut tmp_len: size_t = 0;
    let mut buckets: [Bucket_70; 128] = [Bucket_70 {
        val: zval_70 {
            value: _zend_value_70 { lval: 0 },
            u1: C2RustUnnamed_16 {
                v: C2RustUnnamed_17 {
                    type_0: 0,
                    pad0: [0; 3],
                },
            },
            u2: C2RustUnnamed_15 { next: 0 },
        },
        h: 0,
        key: 0 as *mut zend_string_70,
    }; 128];
    let mut lzarray: zend_array_70 = zend_array_70 {
        pad0: [0; 12],
        nTableMask: 0,
        arData: 0 as *mut Bucket_70,
        nNumUsed: 0,
        nNumOfElements: 0,
        nTableSize: 0,
    };
    let mut obuf: *mut libc::c_char = 0 as *mut libc::c_char;
    obuf = buf;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"array\0" as *const u8 as *const libc::c_char,
        rzarray as *mut libc::c_void,
        &mut lzarray as *mut zend_array_70 as *mut libc::c_void,
        ::std::mem::size_of::<zend_array_70>() as libc::c_ulong,
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    array_len = (if lzarray.nNumOfElements < 128 as libc::c_int as libc::c_uint {
        lzarray.nNumOfElements
    } else {
        128 as libc::c_int as libc::c_uint
    }) as libc::c_int;
    rv = copy_proc_mem(
        (*context).target.pid,
        b"buckets\0" as *const u8 as *const libc::c_char,
        lzarray.arData as *mut libc::c_void,
        buckets.as_mut_ptr() as *mut libc::c_void,
        (::std::mem::size_of::<Bucket_70>() as libc::c_ulong)
            .wrapping_mul(array_len as libc::c_ulong),
    );
    if rv != 0 as libc::c_int {
        return rv;
    }
    i = 0 as libc::c_int;
    while i < array_len {
        rv = sprint_zarray_bucket_70(
            context,
            buckets.as_mut_ptr().offset(i as isize),
            buf,
            buf_size,
            &mut tmp_len,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        buf_size = (buf_size as libc::c_ulong).wrapping_sub(tmp_len) as size_t as size_t;
        buf = buf.offset(tmp_len as isize);
        if buf_size >= 2 as libc::c_int as libc::c_ulong {
            *buf = ',' as i32 as libc::c_char;
            buf_size = buf_size.wrapping_sub(1);
            buf_size;
            buf = buf.offset(1);
            buf;
        }
        i += 1;
        i;
    }
    *buf_len = buf.offset_from(obuf) as libc::c_long as size_t;
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zarray_val74(
    mut context: *mut trace_context_t,
    mut rzarray: *mut zend_array_74,
    mut key: *const libc::c_char,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut bucket: Bucket_74 = Bucket_74 {
        val: zval_74 {
            value: _zend_value_74 { lval: 0 },
            u1: C2RustUnnamed_32 {
                v: C2RustUnnamed_33 {
                    type_0: 0,
                    pad0: [0; 3],
                },
            },
            u2: C2RustUnnamed_31 { next: 0 },
        },
        h: 0,
        key: 0 as *mut zend_string_74,
    };
    rv = copy_zarray_bucket_74(context, rzarray, key, &mut bucket);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = sprint_zval_74(context, &mut bucket.val, buf, buf_size, buf_len);
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zarray_val72(
    mut context: *mut trace_context_t,
    mut rzarray: *mut zend_array_72,
    mut key: *const libc::c_char,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut bucket: Bucket_72 = Bucket_72 {
        val: zval_72 {
            value: _zend_value_72 { lval: 0 },
            u1: C2RustUnnamed_24 {
                v: C2RustUnnamed_25 {
                    type_0: 0,
                    pad0: [0; 3],
                },
            },
            u2: C2RustUnnamed_23 { next: 0 },
        },
        h: 0,
        key: 0 as *mut zend_string_72,
    };
    rv = copy_zarray_bucket_72(context, rzarray, key, &mut bucket);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = sprint_zval_72(context, &mut bucket.val, buf, buf_size, buf_len);
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zarray_val80(
    mut context: *mut trace_context_t,
    mut rzarray: *mut zend_array_80,
    mut key: *const libc::c_char,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut bucket: Bucket_80 = Bucket_80 {
        val: zval_80 {
            value: _zend_value_80 { lval: 0 },
            u1: C2RustUnnamed_36 {
                v: C2RustUnnamed_37 {
                    type_0: 0,
                    pad0: [0; 3],
                },
            },
            u2: C2RustUnnamed_35 { next: 0 },
        },
        h: 0,
        key: 0 as *mut zend_string_80,
    };
    rv = copy_zarray_bucket_80(context, rzarray, key, &mut bucket);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = sprint_zval_80(context, &mut bucket.val, buf, buf_size, buf_len);
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zarray_val71(
    mut context: *mut trace_context_t,
    mut rzarray: *mut zend_array_71,
    mut key: *const libc::c_char,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut bucket: Bucket_71 = Bucket_71 {
        val: zval_71 {
            value: _zend_value_71 { lval: 0 },
            u1: C2RustUnnamed_20 {
                v: C2RustUnnamed_21 {
                    type_0: 0,
                    pad0: [0; 3],
                },
            },
            u2: C2RustUnnamed_19 { next: 0 },
        },
        h: 0,
        key: 0 as *mut zend_string_71,
    };
    rv = copy_zarray_bucket_71(context, rzarray, key, &mut bucket);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = sprint_zval_71(context, &mut bucket.val, buf, buf_size, buf_len);
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zarray_val70(
    mut context: *mut trace_context_t,
    mut rzarray: *mut zend_array_70,
    mut key: *const libc::c_char,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut bucket: Bucket_70 = Bucket_70 {
        val: zval_70 {
            value: _zend_value_70 { lval: 0 },
            u1: C2RustUnnamed_16 {
                v: C2RustUnnamed_17 {
                    type_0: 0,
                    pad0: [0; 3],
                },
            },
            u2: C2RustUnnamed_15 { next: 0 },
        },
        h: 0,
        key: 0 as *mut zend_string_70,
    };
    rv = copy_zarray_bucket_70(context, rzarray, key, &mut bucket);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = sprint_zval_70(context, &mut bucket.val, buf, buf_size, buf_len);
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zarray_val81(
    mut context: *mut trace_context_t,
    mut rzarray: *mut zend_array_81,
    mut key: *const libc::c_char,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut bucket: Bucket_81 = Bucket_81 {
        val: zval_81 {
            value: _zend_value_81 { lval: 0 },
            u1: C2RustUnnamed_40 {
                v: C2RustUnnamed_41 {
                    type_0: 0,
                    pad0: [0; 3],
                },
            },
            u2: C2RustUnnamed_39 { next: 0 },
        },
        h: 0,
        key: 0 as *mut zend_string_81,
    };
    rv = copy_zarray_bucket_81(context, rzarray, key, &mut bucket);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = sprint_zval_81(context, &mut bucket.val, buf, buf_size, buf_len);
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zarray_val73(
    mut context: *mut trace_context_t,
    mut rzarray: *mut zend_array_73,
    mut key: *const libc::c_char,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut bucket: Bucket_73 = Bucket_73 {
        val: zval_73 {
            value: _zend_value_73 { lval: 0 },
            u1: C2RustUnnamed_28 {
                v: C2RustUnnamed_29 {
                    type_0: 0,
                    pad0: [0; 3],
                },
            },
            u2: C2RustUnnamed_27 { next: 0 },
        },
        h: 0,
        key: 0 as *mut zend_string_73,
    };
    rv = copy_zarray_bucket_73(context, rzarray, key, &mut bucket);
    if rv != 0 as libc::c_int {
        return rv;
    }
    rv = sprint_zval_73(context, &mut bucket.val, buf, buf_size, buf_len);
    if rv != 0 as libc::c_int {
        return rv;
    }
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zarray_bucket_73(
    mut context: *mut trace_context_t,
    mut lbucket: *mut Bucket_73,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut tmp_key: [libc::c_char; 256] = [0; 256];
    let mut tmp_len: size_t = 0;
    let mut obuf: *mut libc::c_char = 0 as *mut libc::c_char;
    obuf = buf;
    if !((*lbucket).key).is_null() {
        rv = sprint_zstring_73(
            context,
            b"array_key\0" as *const u8 as *const libc::c_char,
            (*lbucket).key,
            tmp_key.as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
            &mut tmp_len,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        if buf_size
            > tmp_len
                .wrapping_add(1 as libc::c_int as libc::c_ulong)
                .wrapping_add(1 as libc::c_int as libc::c_ulong)
        {
            snprintf(
                buf,
                buf_size,
                b"%s=\0" as *const u8 as *const libc::c_char,
                tmp_key.as_mut_ptr(),
            );
            buf_size = (buf_size as libc::c_ulong)
                .wrapping_sub(tmp_len.wrapping_add(1 as libc::c_int as libc::c_ulong))
                as size_t as size_t;
            buf = buf
                .offset(
                    tmp_len.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                );
        }
    }
    rv = sprint_zval_73(context, &mut (*lbucket).val, buf, buf_size, &mut tmp_len);
    if rv != 0 as libc::c_int {
        return rv;
    }
    buf = buf.offset(tmp_len as isize);
    *buf_len = buf.offset_from(obuf) as libc::c_long as size_t;
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zarray_bucket_80(
    mut context: *mut trace_context_t,
    mut lbucket: *mut Bucket_80,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut tmp_key: [libc::c_char; 256] = [0; 256];
    let mut tmp_len: size_t = 0;
    let mut obuf: *mut libc::c_char = 0 as *mut libc::c_char;
    obuf = buf;
    if !((*lbucket).key).is_null() {
        rv = sprint_zstring_80(
            context,
            b"array_key\0" as *const u8 as *const libc::c_char,
            (*lbucket).key,
            tmp_key.as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
            &mut tmp_len,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        if buf_size
            > tmp_len
                .wrapping_add(1 as libc::c_int as libc::c_ulong)
                .wrapping_add(1 as libc::c_int as libc::c_ulong)
        {
            snprintf(
                buf,
                buf_size,
                b"%s=\0" as *const u8 as *const libc::c_char,
                tmp_key.as_mut_ptr(),
            );
            buf_size = (buf_size as libc::c_ulong)
                .wrapping_sub(tmp_len.wrapping_add(1 as libc::c_int as libc::c_ulong))
                as size_t as size_t;
            buf = buf
                .offset(
                    tmp_len.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                );
        }
    }
    rv = sprint_zval_80(context, &mut (*lbucket).val, buf, buf_size, &mut tmp_len);
    if rv != 0 as libc::c_int {
        return rv;
    }
    buf = buf.offset(tmp_len as isize);
    *buf_len = buf.offset_from(obuf) as libc::c_long as size_t;
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zarray_bucket_72(
    mut context: *mut trace_context_t,
    mut lbucket: *mut Bucket_72,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut tmp_key: [libc::c_char; 256] = [0; 256];
    let mut tmp_len: size_t = 0;
    let mut obuf: *mut libc::c_char = 0 as *mut libc::c_char;
    obuf = buf;
    if !((*lbucket).key).is_null() {
        rv = sprint_zstring_72(
            context,
            b"array_key\0" as *const u8 as *const libc::c_char,
            (*lbucket).key,
            tmp_key.as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
            &mut tmp_len,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        if buf_size
            > tmp_len
                .wrapping_add(1 as libc::c_int as libc::c_ulong)
                .wrapping_add(1 as libc::c_int as libc::c_ulong)
        {
            snprintf(
                buf,
                buf_size,
                b"%s=\0" as *const u8 as *const libc::c_char,
                tmp_key.as_mut_ptr(),
            );
            buf_size = (buf_size as libc::c_ulong)
                .wrapping_sub(tmp_len.wrapping_add(1 as libc::c_int as libc::c_ulong))
                as size_t as size_t;
            buf = buf
                .offset(
                    tmp_len.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                );
        }
    }
    rv = sprint_zval_72(context, &mut (*lbucket).val, buf, buf_size, &mut tmp_len);
    if rv != 0 as libc::c_int {
        return rv;
    }
    buf = buf.offset(tmp_len as isize);
    *buf_len = buf.offset_from(obuf) as libc::c_long as size_t;
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zarray_bucket_74(
    mut context: *mut trace_context_t,
    mut lbucket: *mut Bucket_74,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut tmp_key: [libc::c_char; 256] = [0; 256];
    let mut tmp_len: size_t = 0;
    let mut obuf: *mut libc::c_char = 0 as *mut libc::c_char;
    obuf = buf;
    if !((*lbucket).key).is_null() {
        rv = sprint_zstring_74(
            context,
            b"array_key\0" as *const u8 as *const libc::c_char,
            (*lbucket).key,
            tmp_key.as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
            &mut tmp_len,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        if buf_size
            > tmp_len
                .wrapping_add(1 as libc::c_int as libc::c_ulong)
                .wrapping_add(1 as libc::c_int as libc::c_ulong)
        {
            snprintf(
                buf,
                buf_size,
                b"%s=\0" as *const u8 as *const libc::c_char,
                tmp_key.as_mut_ptr(),
            );
            buf_size = (buf_size as libc::c_ulong)
                .wrapping_sub(tmp_len.wrapping_add(1 as libc::c_int as libc::c_ulong))
                as size_t as size_t;
            buf = buf
                .offset(
                    tmp_len.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                );
        }
    }
    rv = sprint_zval_74(context, &mut (*lbucket).val, buf, buf_size, &mut tmp_len);
    if rv != 0 as libc::c_int {
        return rv;
    }
    buf = buf.offset(tmp_len as isize);
    *buf_len = buf.offset_from(obuf) as libc::c_long as size_t;
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zarray_bucket_71(
    mut context: *mut trace_context_t,
    mut lbucket: *mut Bucket_71,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut tmp_key: [libc::c_char; 256] = [0; 256];
    let mut tmp_len: size_t = 0;
    let mut obuf: *mut libc::c_char = 0 as *mut libc::c_char;
    obuf = buf;
    if !((*lbucket).key).is_null() {
        rv = sprint_zstring_71(
            context,
            b"array_key\0" as *const u8 as *const libc::c_char,
            (*lbucket).key,
            tmp_key.as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
            &mut tmp_len,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        if buf_size
            > tmp_len
                .wrapping_add(1 as libc::c_int as libc::c_ulong)
                .wrapping_add(1 as libc::c_int as libc::c_ulong)
        {
            snprintf(
                buf,
                buf_size,
                b"%s=\0" as *const u8 as *const libc::c_char,
                tmp_key.as_mut_ptr(),
            );
            buf_size = (buf_size as libc::c_ulong)
                .wrapping_sub(tmp_len.wrapping_add(1 as libc::c_int as libc::c_ulong))
                as size_t as size_t;
            buf = buf
                .offset(
                    tmp_len.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                );
        }
    }
    rv = sprint_zval_71(context, &mut (*lbucket).val, buf, buf_size, &mut tmp_len);
    if rv != 0 as libc::c_int {
        return rv;
    }
    buf = buf.offset(tmp_len as isize);
    *buf_len = buf.offset_from(obuf) as libc::c_long as size_t;
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zarray_bucket_81(
    mut context: *mut trace_context_t,
    mut lbucket: *mut Bucket_81,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut tmp_key: [libc::c_char; 256] = [0; 256];
    let mut tmp_len: size_t = 0;
    let mut obuf: *mut libc::c_char = 0 as *mut libc::c_char;
    obuf = buf;
    if !((*lbucket).key).is_null() {
        rv = sprint_zstring_81(
            context,
            b"array_key\0" as *const u8 as *const libc::c_char,
            (*lbucket).key,
            tmp_key.as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
            &mut tmp_len,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        if buf_size
            > tmp_len
                .wrapping_add(1 as libc::c_int as libc::c_ulong)
                .wrapping_add(1 as libc::c_int as libc::c_ulong)
        {
            snprintf(
                buf,
                buf_size,
                b"%s=\0" as *const u8 as *const libc::c_char,
                tmp_key.as_mut_ptr(),
            );
            buf_size = (buf_size as libc::c_ulong)
                .wrapping_sub(tmp_len.wrapping_add(1 as libc::c_int as libc::c_ulong))
                as size_t as size_t;
            buf = buf
                .offset(
                    tmp_len.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                );
        }
    }
    rv = sprint_zval_81(context, &mut (*lbucket).val, buf, buf_size, &mut tmp_len);
    if rv != 0 as libc::c_int {
        return rv;
    }
    buf = buf.offset(tmp_len as isize);
    *buf_len = buf.offset_from(obuf) as libc::c_long as size_t;
    return 0 as libc::c_int;
}
unsafe extern "C" fn sprint_zarray_bucket_70(
    mut context: *mut trace_context_t,
    mut lbucket: *mut Bucket_70,
    mut buf: *mut libc::c_char,
    mut buf_size: size_t,
    mut buf_len: *mut size_t,
) -> libc::c_int {
    let mut rv: libc::c_int = 0;
    let mut tmp_key: [libc::c_char; 256] = [0; 256];
    let mut tmp_len: size_t = 0;
    let mut obuf: *mut libc::c_char = 0 as *mut libc::c_char;
    obuf = buf;
    if !((*lbucket).key).is_null() {
        rv = sprint_zstring_70(
            context,
            b"array_key\0" as *const u8 as *const libc::c_char,
            (*lbucket).key,
            tmp_key.as_mut_ptr(),
            ::std::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
            &mut tmp_len,
        );
        if rv != 0 as libc::c_int {
            return rv;
        }
        if buf_size
            > tmp_len
                .wrapping_add(1 as libc::c_int as libc::c_ulong)
                .wrapping_add(1 as libc::c_int as libc::c_ulong)
        {
            snprintf(
                buf,
                buf_size,
                b"%s=\0" as *const u8 as *const libc::c_char,
                tmp_key.as_mut_ptr(),
            );
            buf_size = (buf_size as libc::c_ulong)
                .wrapping_sub(tmp_len.wrapping_add(1 as libc::c_int as libc::c_ulong))
                as size_t as size_t;
            buf = buf
                .offset(
                    tmp_len.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
                );
        }
    }
    rv = sprint_zval_70(context, &mut (*lbucket).val, buf, buf_size, &mut tmp_len);
    if rv != 0 as libc::c_int {
        return rv;
    }
    buf = buf.offset(tmp_len as isize);
    *buf_len = buf.offset_from(obuf) as libc::c_long as size_t;
    return 0 as libc::c_int;
}
pub fn main() {
    let mut args: Vec::<*mut libc::c_char> = Vec::new();
    for arg in ::std::env::args_os() {
        args.push(
            (::std::ffi::CString::new(
                ::std::os::unix::ffi::OsStrExt::as_bytes(arg.as_os_str()),
            ))
                .unwrap()
                .into_raw(),
        );
    }
    args.push(::std::ptr::null_mut());
    unsafe {
        ::std::process::exit(
            main_0(
                (args.len() - 1) as libc::c_int,
                args.as_mut_ptr() as *mut *mut libc::c_char,
            ) as i32,
        )
    }
}
